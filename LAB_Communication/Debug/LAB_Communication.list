
LAB_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c8  080056c8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d0  080056d0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080056d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000020  080056f8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200001d0  080056f8  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ed  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b9  00000000  00000000  0003273d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00034bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00035ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a356  00000000  00000000  00036a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ca2  00000000  00000000  00060db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103db8  00000000  00000000  00072a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  00176864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005668 	.word	0x08005668

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08005668 	.word	0x08005668

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_GPIO_Init>:
     PB10   ------> SAI1_SCK_A
     PH8   ------> DCMI_HSYNC
     PB12   ------> S_DATAIN1DFSDM1
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08e      	sub	sp, #56	; 0x38
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80004fa:	4bb0      	ldr	r3, [pc, #704]	; (80007bc <MX_GPIO_Init+0x2d8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4aaf      	ldr	r2, [pc, #700]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4bad      	ldr	r3, [pc, #692]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4baa      	ldr	r3, [pc, #680]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4aa9      	ldr	r2, [pc, #676]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4ba7      	ldr	r3, [pc, #668]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	61fb      	str	r3, [r7, #28]
 8000528:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052a:	4ba4      	ldr	r3, [pc, #656]	; (80007bc <MX_GPIO_Init+0x2d8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4aa3      	ldr	r2, [pc, #652]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4ba1      	ldr	r3, [pc, #644]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0310 	and.w	r3, r3, #16
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b9e      	ldr	r3, [pc, #632]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a9d      	ldr	r2, [pc, #628]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b9b      	ldr	r3, [pc, #620]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b98      	ldr	r3, [pc, #608]	; (80007bc <MX_GPIO_Init+0x2d8>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a97      	ldr	r2, [pc, #604]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b95      	ldr	r3, [pc, #596]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000572:	4b92      	ldr	r3, [pc, #584]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a91      	ldr	r2, [pc, #580]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b8f      	ldr	r3, [pc, #572]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800058a:	f001 fad3 	bl	8001b34 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058e:	4b8b      	ldr	r3, [pc, #556]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a8a      	ldr	r2, [pc, #552]	; (80007bc <MX_GPIO_Init+0x2d8>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b88      	ldr	r3, [pc, #544]	; (80007bc <MX_GPIO_Init+0x2d8>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b85      	ldr	r3, [pc, #532]	; (80007bc <MX_GPIO_Init+0x2d8>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a84      	ldr	r2, [pc, #528]	; (80007bc <MX_GPIO_Init+0x2d8>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b82      	ldr	r3, [pc, #520]	; (80007bc <MX_GPIO_Init+0x2d8>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b7f      	ldr	r3, [pc, #508]	; (80007bc <MX_GPIO_Init+0x2d8>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a7e      	ldr	r2, [pc, #504]	; (80007bc <MX_GPIO_Init+0x2d8>)
 80005c4:	f043 0320 	orr.w	r3, r3, #32
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b7c      	ldr	r3, [pc, #496]	; (80007bc <MX_GPIO_Init+0x2d8>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	4879      	ldr	r0, [pc, #484]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80005dc:	f001 fa14 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2143      	movs	r1, #67	; 0x43
 80005e4:	4877      	ldr	r0, [pc, #476]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 80005e6:	f001 fa0f 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2140      	movs	r1, #64	; 0x40
 80005ee:	4876      	ldr	r0, [pc, #472]	; (80007c8 <MX_GPIO_Init+0x2e4>)
 80005f0:	f001 fa0a 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	4874      	ldr	r0, [pc, #464]	; (80007cc <MX_GPIO_Init+0x2e8>)
 80005fc:	f001 fa04 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8000600:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060a:	2302      	movs	r3, #2
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	4619      	mov	r1, r3
 8000614:	486a      	ldr	r0, [pc, #424]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000616:	f001 f865 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800061a:	2304      	movs	r3, #4
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061e:	4b6c      	ldr	r3, [pc, #432]	; (80007d0 <MX_GPIO_Init+0x2ec>)
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	4619      	mov	r1, r3
 800062c:	4865      	ldr	r0, [pc, #404]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 800062e:	f001 f859 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000632:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000644:	230c      	movs	r3, #12
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	4619      	mov	r1, r3
 800064e:	4861      	ldr	r0, [pc, #388]	; (80007d4 <MX_GPIO_Init+0x2f0>)
 8000650:	f001 f848 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000654:	2330      	movs	r3, #48	; 0x30
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000664:	2305      	movs	r3, #5
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	4857      	ldr	r0, [pc, #348]	; (80007cc <MX_GPIO_Init+0x2e8>)
 8000670:	f001 f838 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8000674:	f248 0320 	movw	r3, #32800	; 0x8020
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000686:	2305      	movs	r3, #5
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f001 f826 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000698:	2301      	movs	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4844      	ldr	r0, [pc, #272]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80006b0:	f001 f818 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80006b4:	f645 7320 	movw	r3, #24352	; 0x5f20
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80006c6:	230a      	movs	r3, #10
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4619      	mov	r1, r3
 80006d0:	483c      	ldr	r0, [pc, #240]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 80006d2:	f001 f807 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80006d6:	23b0      	movs	r3, #176	; 0xb0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80006e6:	230a      	movs	r3, #10
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	4619      	mov	r1, r3
 80006f0:	4833      	ldr	r0, [pc, #204]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80006f2:	f000 fff7 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 80006f6:	f240 233f 	movw	r3, #575	; 0x23f
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000708:	230c      	movs	r3, #12
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4619      	mov	r1, r3
 8000712:	4831      	ldr	r0, [pc, #196]	; (80007d8 <MX_GPIO_Init+0x2f4>)
 8000714:	f000 ffe6 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000718:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072a:	230c      	movs	r3, #12
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	4619      	mov	r1, r3
 8000734:	4829      	ldr	r0, [pc, #164]	; (80007dc <MX_GPIO_Init+0x2f8>)
 8000736:	f000 ffd5 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800074a:	2303      	movs	r3, #3
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	4619      	mov	r1, r3
 8000754:	481a      	ldr	r0, [pc, #104]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000756:	f000 ffc5 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800075a:	2306      	movs	r3, #6
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800076a:	2305      	movs	r3, #5
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000776:	f000 ffb5 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 800077a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800078c:	2303      	movs	r3, #3
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 8000798:	f000 ffa4 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800079c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a2:	2312      	movs	r3, #18
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ae:	2304      	movs	r3, #4
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	e012      	b.n	80007e0 <MX_GPIO_Init+0x2fc>
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48002000 	.word	0x48002000
 80007c4:	48001c00 	.word	0x48001c00
 80007c8:	48000800 	.word	0x48000800
 80007cc:	48000400 	.word	0x48000400
 80007d0:	10110000 	.word	0x10110000
 80007d4:	48001000 	.word	0x48001000
 80007d8:	48001800 	.word	0x48001800
 80007dc:	48000c00 	.word	0x48000c00
 80007e0:	48bd      	ldr	r0, [pc, #756]	; (8000ad8 <MX_GPIO_Init+0x5f4>)
 80007e2:	f000 ff7f 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007f6:	2307      	movs	r3, #7
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	48b5      	ldr	r0, [pc, #724]	; (8000ad8 <MX_GPIO_Init+0x5f4>)
 8000802:	f000 ff6f 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8000806:	235c      	movs	r3, #92	; 0x5c
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000816:	230d      	movs	r3, #13
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	48ae      	ldr	r0, [pc, #696]	; (8000adc <MX_GPIO_Init+0x5f8>)
 8000822:	f000 ff5f 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8000826:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000838:	2307      	movs	r3, #7
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	48a7      	ldr	r0, [pc, #668]	; (8000ae0 <MX_GPIO_Init+0x5fc>)
 8000844:	f000 ff4e 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000848:	2304      	movs	r3, #4
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000858:	230c      	movs	r3, #12
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	48a0      	ldr	r0, [pc, #640]	; (8000ae4 <MX_GPIO_Init+0x600>)
 8000864:	f000 ff3e 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8000868:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800087a:	230c      	movs	r3, #12
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4898      	ldr	r0, [pc, #608]	; (8000ae8 <MX_GPIO_Init+0x604>)
 8000886:	f000 ff2d 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4893      	ldr	r0, [pc, #588]	; (8000aec <MX_GPIO_Init+0x608>)
 800089e:	f000 ff21 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80008a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b4:	230a      	movs	r3, #10
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 ff0f 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80008d6:	230a      	movs	r3, #10
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	487e      	ldr	r0, [pc, #504]	; (8000adc <MX_GPIO_Init+0x5f8>)
 80008e2:	f000 feff 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80008e6:	2343      	movs	r3, #67	; 0x43
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	487b      	ldr	r0, [pc, #492]	; (8000aec <MX_GPIO_Init+0x608>)
 80008fe:	f000 fef1 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000902:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000914:	230c      	movs	r3, #12
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4874      	ldr	r0, [pc, #464]	; (8000af0 <MX_GPIO_Init+0x60c>)
 8000920:	f000 fee0 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <MX_GPIO_Init+0x604>)
 800093c:	f000 fed2 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000940:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <MX_GPIO_Init+0x610>)
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	4862      	ldr	r0, [pc, #392]	; (8000ae0 <MX_GPIO_Init+0x5fc>)
 8000956:	f000 fec5 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800095a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 800096c:	230e      	movs	r3, #14
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 feb3 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800097e:	2384      	movs	r3, #132	; 0x84
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800098e:	2306      	movs	r3, #6
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4853      	ldr	r0, [pc, #332]	; (8000ae8 <MX_GPIO_Init+0x604>)
 800099a:	f000 fea3 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009a4:	230b      	movs	r3, #11
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	484f      	ldr	r0, [pc, #316]	; (8000af0 <MX_GPIO_Init+0x60c>)
 80009b4:	f000 fe96 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC1 PCPin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|GPIO_PIN_1|ARD_A2_Pin;
 80009b8:	231a      	movs	r3, #26
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009bc:	230b      	movs	r3, #11
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4847      	ldr	r0, [pc, #284]	; (8000ae8 <MX_GPIO_Init+0x604>)
 80009cc:	f000 fe8a 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80009d0:	f640 0303 	movw	r3, #2051	; 0x803
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009e2:	230a      	movs	r3, #10
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	483a      	ldr	r0, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x5f4>)
 80009ee:	f000 fe79 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80009f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a04:	2308      	movs	r3, #8
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4834      	ldr	r0, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0x5fc>)
 8000a10:	f000 fe68 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a14:	2301      	movs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4830      	ldr	r0, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x604>)
 8000a28:	f000 fe5c 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a30:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x610>)
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_GPIO_Init+0x604>)
 8000a40:	f000 fe50 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000a44:	2310      	movs	r3, #16
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a54:	2304      	movs	r3, #4
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4823      	ldr	r0, [pc, #140]	; (8000aec <MX_GPIO_Init+0x608>)
 8000a60:	f000 fe40 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8000a64:	2312      	movs	r3, #18
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a68:	230b      	movs	r3, #11
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fe33 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8000a7e:	23c8      	movs	r3, #200	; 0xc8
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a8e:	230a      	movs	r3, #10
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fe22 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8000aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480e      	ldr	r0, [pc, #56]	; (8000af0 <MX_GPIO_Init+0x60c>)
 8000ab6:	f000 fe15 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8000aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000acc:	2305      	movs	r3, #5
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	e010      	b.n	8000af8 <MX_GPIO_Init+0x614>
 8000ad6:	bf00      	nop
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	48001000 	.word	0x48001000
 8000ae0:	48001800 	.word	0x48001800
 8000ae4:	48000c00 	.word	0x48000c00
 8000ae8:	48000800 	.word	0x48000800
 8000aec:	48001c00 	.word	0x48001c00
 8000af0:	48001400 	.word	0x48001400
 8000af4:	10110000 	.word	0x10110000
 8000af8:	4619      	mov	r1, r3
 8000afa:	482a      	ldr	r0, [pc, #168]	; (8000ba4 <MX_GPIO_Init+0x6c0>)
 8000afc:	f000 fdf2 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000b00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b06:	2312      	movs	r3, #18
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b12:	2304      	movs	r3, #4
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4821      	ldr	r0, [pc, #132]	; (8000ba4 <MX_GPIO_Init+0x6c0>)
 8000b1e:	f000 fde1 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8000b22:	2304      	movs	r3, #4
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0x6c0>)
 8000b36:	f000 fdd5 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_CKA_Pin;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b4c:	230d      	movs	r3, #13
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_CKA_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <MX_GPIO_Init+0x6c0>)
 8000b58:	f000 fdc4 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <MX_GPIO_Init+0x6c0>)
 8000b7a:	f000 fdb3 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b84:	2311      	movs	r3, #17
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_GPIO_Init+0x6c0>)
 8000b98:	f000 fda4 	bl	80016e4 <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8000bb0:	481b      	ldr	r0, [pc, #108]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bb2:	f002 fb8d 	bl	80032d0 <HAL_TIM_Base_Stop_IT>
	Txmsg[num++] = (uint8_t)'\r'; Txmsg[num] = (uint8_t)'\n';
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4919      	ldr	r1, [pc, #100]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000bbe:	600a      	str	r2, [r1, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bc2:	210d      	movs	r1, #13
 8000bc4:	54d1      	strb	r1, [r2, r3]
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bcc:	210a      	movs	r1, #10
 8000bce:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(&huart2, prefix, sizeof(prefix));
 8000bd0:	2213      	movs	r2, #19
 8000bd2:	4916      	ldr	r1, [pc, #88]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bd4:	4816      	ldr	r0, [pc, #88]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bd6:	f003 fc27 	bl	8004428 <HAL_UART_Transmit_IT>
	while(huart2.gState != HAL_UART_STATE_READY);
 8000bda:	bf00      	nop
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000be0:	2b20      	cmp	r3, #32
 8000be2:	d1fb      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x34>
	HAL_UART_Transmit_IT(&huart2, Txmsg, sizeof(Txmsg));
 8000be4:	2265      	movs	r2, #101	; 0x65
 8000be6:	4910      	ldr	r1, [pc, #64]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bea:	f003 fc1d 	bl	8004428 <HAL_UART_Transmit_IT>
	while(huart2.gState != HAL_UART_STATE_READY);
 8000bee:	bf00      	nop
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000bf4:	2b20      	cmp	r3, #32
 8000bf6:	d1fb      	bne.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x48>
	timerflag = 0; num=0;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
	memset(Txmsg, 0, sizeof(Txmsg));
 8000c04:	2265      	movs	r2, #101	; 0x65
 8000c06:	2100      	movs	r1, #0
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c0a:	f004 fd25 	bl	8005658 <memset>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c14:	f000 ff10 	bl	8001a38 <HAL_GPIO_TogglePin>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000fc 	.word	0x200000fc
 8000c24:	200000a4 	.word	0x200000a4
 8000c28:	2000003c 	.word	0x2000003c
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000148 	.word	0x20000148
 8000c34:	200000a8 	.word	0x200000a8
 8000c38:	48000400 	.word	0x48000400

08000c3c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_UART_RxCpltCallback+0x4c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d117      	bne.n	8000c7e <HAL_UART_RxCpltCallback+0x42>
    {
    	if (timerflag == 0)
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_UART_RxCpltCallback+0x50>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d105      	bne.n	8000c62 <HAL_UART_RxCpltCallback+0x26>
    	{
    		timerflag = 1; HAL_TIM_Base_Start_IT(&htim3);
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_UART_RxCpltCallback+0x50>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <HAL_UART_RxCpltCallback+0x54>)
 8000c5e:	f002 fac7 	bl	80031f0 <HAL_TIM_Base_Start_IT>
    	}
    	Txmsg[num++] = aRxBuff;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_UART_RxCpltCallback+0x58>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	490a      	ldr	r1, [pc, #40]	; (8000c94 <HAL_UART_RxCpltCallback+0x58>)
 8000c6a:	600a      	str	r2, [r1, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_UART_RxCpltCallback+0x5c>)
 8000c6e:	7811      	ldrb	r1, [r2, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_UART_RxCpltCallback+0x60>)
 8000c72:	54d1      	strb	r1, [r2, r3]
    	HAL_UART_Receive_IT(&huart2, &aRxBuff, sizeof(aRxBuff));
 8000c74:	2201      	movs	r2, #1
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <HAL_UART_RxCpltCallback+0x5c>)
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <HAL_UART_RxCpltCallback+0x64>)
 8000c7a:	f003 fc31 	bl	80044e0 <HAL_UART_Receive_IT>
    }
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	200000a8 	.word	0x200000a8
 8000c90:	200000fc 	.word	0x200000fc
 8000c94:	200000a4 	.word	0x200000a4
 8000c98:	200000ac 	.word	0x200000ac
 8000c9c:	2000003c 	.word	0x2000003c
 8000ca0:	20000148 	.word	0x20000148

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f000 fb17 	bl	80012da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f812 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f7ff fc18 	bl	80004e4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000cb4:	f000 f8f8 	bl	8000ea8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000cb8:	f000 fa2e 	bl	8001118 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000cbc:	f000 f942 	bl	8000f44 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &aRxBuff, sizeof(aRxBuff));
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4902      	ldr	r1, [pc, #8]	; (8000ccc <main+0x28>)
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <main+0x2c>)
 8000cc6:	f003 fc0b 	bl	80044e0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <main+0x26>
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	20000148 	.word	0x20000148

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b096      	sub	sp, #88	; 0x58
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	2244      	movs	r2, #68	; 0x44
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fcb8 	bl	8005658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cfa:	f000 fec5 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d04:	f000 f837 	bl	8000d76 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d12:	2340      	movs	r3, #64	; 0x40
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d22:	230a      	movs	r3, #10
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 ff0c 	bl	8001b54 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d42:	f000 f818 	bl	8000d76 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 fb1e 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d6a:	f000 f804 	bl	8000d76 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3758      	adds	r7, #88	; 0x58
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7a:	b672      	cpsid	i
}
 8000d7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <Error_Handler+0x8>

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 fab6 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM3_IRQHandler+0x10>)
 8000e22:	f002 fae5 	bl	80033f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000fc 	.word	0x200000fc

08000e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <USART2_IRQHandler+0x10>)
 8000e36:	f003 fb97 	bl	8004568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000148 	.word	0x20000148

08000e44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <SystemInit+0x5c>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <SystemInit+0x5c>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <SystemInit+0x60>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <SystemInit+0x60>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <SystemInit+0x60>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SystemInit+0x60>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <SystemInit+0x60>)
 8000e70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <SystemInit+0x60>)
 8000e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SystemInit+0x60>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <SystemInit+0x60>)
 8000e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SystemInit+0x60>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <MX_TIM3_Init+0x98>)
 8000eca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000ece:	224f      	movs	r2, #79	; 0x4f
 8000ed0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000eda:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ede:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000eee:	f002 f927 	bl	8003140 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ef8:	f7ff ff3d 	bl	8000d76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000f0a:	f002 fca1 	bl	8003850 <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f14:	f7ff ff2f 	bl	8000d76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_TIM3_Init+0x94>)
 8000f26:	f003 f98b 	bl	8004240 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f7ff ff21 	bl	8000d76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000fc 	.word	0x200000fc
 8000f40:	40000400 	.word	0x40000400

08000f44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f76:	4b2d      	ldr	r3, [pc, #180]	; (800102c <MX_TIM4_Init+0xe8>)
 8000f78:	4a2d      	ldr	r2, [pc, #180]	; (8001030 <MX_TIM4_Init+0xec>)
 8000f7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_TIM4_Init+0xe8>)
 8000f7e:	224f      	movs	r2, #79	; 0x4f
 8000f80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <MX_TIM4_Init+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_TIM4_Init+0xe8>)
 8000f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_TIM4_Init+0xe8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_TIM4_Init+0xe8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f9c:	4823      	ldr	r0, [pc, #140]	; (800102c <MX_TIM4_Init+0xe8>)
 8000f9e:	f002 f8cf 	bl	8003140 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000fa8:	f7ff fee5 	bl	8000d76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481c      	ldr	r0, [pc, #112]	; (800102c <MX_TIM4_Init+0xe8>)
 8000fba:	f002 fc49 	bl	8003850 <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000fc4:	f7ff fed7 	bl	8000d76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fc8:	4818      	ldr	r0, [pc, #96]	; (800102c <MX_TIM4_Init+0xe8>)
 8000fca:	f002 f9b0 	bl	800332e <HAL_TIM_PWM_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000fd4:	f7ff fecf 	bl	8000d76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4811      	ldr	r0, [pc, #68]	; (800102c <MX_TIM4_Init+0xe8>)
 8000fe8:	f003 f92a 	bl	8004240 <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ff2:	f7ff fec0 	bl	8000d76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff6:	2360      	movs	r3, #96	; 0x60
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8000ffa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	220c      	movs	r2, #12
 800100c:	4619      	mov	r1, r3
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <MX_TIM4_Init+0xe8>)
 8001010:	f002 fb0e 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800101a:	f7ff feac 	bl	8000d76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <MX_TIM4_Init+0xe8>)
 8001020:	f000 f842 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8001024:	bf00      	nop
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200000b0 	.word	0x200000b0
 8001030:	40000800 	.word	0x40000800

08001034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_TIM_Base_MspInit+0x68>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d114      	bne.n	8001070 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <HAL_TIM_Base_MspInit+0x6c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	201d      	movs	r0, #29
 8001064:	f000 fa89 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001068:	201d      	movs	r0, #29
 800106a:	f000 faa2 	bl	80015b2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800106e:	e010      	b.n	8001092 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_TIM_Base_MspInit+0x70>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_TIM_Base_MspInit+0x6c>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6593      	str	r3, [r2, #88]	; 0x58
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40000400 	.word	0x40000400
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40000800 	.word	0x40000800

080010a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_TIM_MspPostInit+0x64>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d11c      	bne.n	8001104 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_TIM_MspPostInit+0x68>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_TIM_MspPostInit+0x68>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_TIM_MspPostInit+0x68>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 80010e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_TIM_MspPostInit+0x6c>)
 8001100:	f000 faf0 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40000800 	.word	0x40000800
 8001110:	40021000 	.word	0x40021000
 8001114:	48000400 	.word	0x48000400

08001118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_USART2_UART_Init+0x5c>)
 8001120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800115c:	f003 f916 	bl	800438c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001166:	f7ff fe06 	bl	8000d76 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000148 	.word	0x20000148
 8001174:	40004400 	.word	0x40004400

08001178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ae      	sub	sp, #184	; 0xb8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	228c      	movs	r2, #140	; 0x8c
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fa5d 	bl	8005658 <memset>
  if(uartHandle->Instance==USART2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a36      	ldr	r2, [pc, #216]	; (800127c <HAL_UART_MspInit+0x104>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d164      	bne.n	8001272 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 faf9 	bl	80027ac <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011c0:	f7ff fdd9 	bl	8000d76 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ce:	6593      	str	r3, [r2, #88]	; 0x58
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <HAL_UART_MspInit+0x108>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_UART_MspInit+0x108>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800120c:	2340      	movs	r3, #64	; 0x40
 800120e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001224:	2307      	movs	r3, #7
 8001226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800122e:	4619      	mov	r1, r3
 8001230:	4814      	ldr	r0, [pc, #80]	; (8001284 <HAL_UART_MspInit+0x10c>)
 8001232:	f000 fa57 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001236:	2304      	movs	r3, #4
 8001238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124e:	2307      	movs	r3, #7
 8001250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f000 fa41 	bl	80016e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2026      	movs	r0, #38	; 0x26
 8001268:	f000 f987 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800126c:	2026      	movs	r0, #38	; 0x26
 800126e:	f000 f9a0 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	37b8      	adds	r7, #184	; 0xb8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004400 	.word	0x40004400
 8001280:	40021000 	.word	0x40021000
 8001284:	48000c00 	.word	0x48000c00

08001288 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800128c:	f7ff fdda 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001290:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001292:	e003      	b.n	800129c <LoopCopyDataInit>

08001294 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001296:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001298:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800129a:	3104      	adds	r1, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800129c:	480a      	ldr	r0, [pc, #40]	; (80012c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80012a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012a4:	d3f6      	bcc.n	8001294 <CopyDataInit>
	ldr	r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012a8:	e002      	b.n	80012b0 <LoopFillZerobss>

080012aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012ac:	f842 3b04 	str.w	r3, [r2], #4

080012b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <LoopForever+0x16>)
	cmp	r2, r3
 80012b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012b4:	d3f9      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f004 f9ab 	bl	8005610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ba:	f7ff fcf3 	bl	8000ca4 <main>

080012be <LoopForever>:

LoopForever:
    b LoopForever
 80012be:	e7fe      	b.n	80012be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c0:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80012c4:	080056d8 	.word	0x080056d8
	ldr	r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012cc:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 80012d0:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 80012d4:	200001d0 	.word	0x200001d0

080012d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC1_2_IRQHandler>

080012da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f93d 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 f80e 	bl	800130c <HAL_InitTick>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	e001      	b.n	8001300 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012fc:	f7ff fd40 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001300:	79fb      	ldrb	r3, [r7, #7]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_InitTick+0x6c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d023      	beq.n	8001368 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_InitTick+0x70>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_InitTick+0x6c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f949 	bl	80015ce <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10f      	bne.n	8001362 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d809      	bhi.n	800135c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f913 	bl	800157a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_InitTick+0x74>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e007      	b.n	800136c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e004      	b.n	800136c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e001      	b.n	800136c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000001c 	.word	0x2000001c
 800137c:	20000014 	.word	0x20000014
 8001380:	20000018 	.word	0x20000018

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000001c 	.word	0x2000001c
 80013a8:	200001cc 	.word	0x200001cc

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200001cc 	.word	0x200001cc

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff3e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff31 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d008      	beq.n	8001610 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2204      	movs	r2, #4
 8001602:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e022      	b.n	8001656 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 020e 	bic.w	r2, r2, #14
 800161e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 021c 	and.w	r2, r3, #28
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d005      	beq.n	8001686 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2204      	movs	r2, #4
 800167e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e029      	b.n	80016da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 020e 	bic.w	r2, r2, #14
 8001694:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 021c 	and.w	r2, r3, #28
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
    }
  }
  return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e166      	b.n	80019c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8158 	beq.w	80019bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d00b      	beq.n	800172c <HAL_GPIO_Init+0x48>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d007      	beq.n	800172c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001720:	2b11      	cmp	r3, #17
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b12      	cmp	r3, #18
 800172a:	d130      	bne.n	800178e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001762:	2201      	movs	r2, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 0201 	and.w	r2, r3, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0xea>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d123      	bne.n	8001816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0203 	and.w	r2, r3, #3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80b2 	beq.w	80019bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	4a60      	ldr	r2, [pc, #384]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6613      	str	r3, [r2, #96]	; 0x60
 8001864:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001870:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800189a:	d02b      	beq.n	80018f4 <HAL_GPIO_Init+0x210>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_GPIO_Init+0x304>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d025      	beq.n	80018f0 <HAL_GPIO_Init+0x20c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a51      	ldr	r2, [pc, #324]	; (80019ec <HAL_GPIO_Init+0x308>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d01f      	beq.n	80018ec <HAL_GPIO_Init+0x208>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a50      	ldr	r2, [pc, #320]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d019      	beq.n	80018e8 <HAL_GPIO_Init+0x204>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a4f      	ldr	r2, [pc, #316]	; (80019f4 <HAL_GPIO_Init+0x310>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_GPIO_Init+0x200>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a4e      	ldr	r2, [pc, #312]	; (80019f8 <HAL_GPIO_Init+0x314>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00d      	beq.n	80018e0 <HAL_GPIO_Init+0x1fc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a4d      	ldr	r2, [pc, #308]	; (80019fc <HAL_GPIO_Init+0x318>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x1f8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <HAL_GPIO_Init+0x31c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_GPIO_Init+0x1f4>
 80018d4:	2307      	movs	r3, #7
 80018d6:	e00e      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018d8:	2308      	movs	r3, #8
 80018da:	e00c      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018dc:	2306      	movs	r3, #6
 80018de:	e00a      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018e0:	2305      	movs	r3, #5
 80018e2:	e008      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e006      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e004      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_GPIO_Init+0x212>
 80018f4:	2300      	movs	r3, #0
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001906:	4937      	ldr	r1, [pc, #220]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_GPIO_Init+0x320>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001962:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001968:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_GPIO_Init+0x320>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800198c:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_GPIO_Init+0x320>)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <HAL_GPIO_Init+0x320>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f47f ae91 	bne.w	80016f4 <HAL_GPIO_Init+0x10>
  }
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	48000400 	.word	0x48000400
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	48001000 	.word	0x48001000
 80019f8:	48001400 	.word	0x48001400
 80019fc:	48001800 	.word	0x48001800
 8001a00:	48001c00 	.word	0x48001c00
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43d9      	mvns	r1, r3
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	400b      	ands	r3, r1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a96:	d130      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d038      	beq.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aae:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2232      	movs	r2, #50	; 0x32
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0c9b      	lsrs	r3, r3, #18
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001acc:	e002      	b.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f2      	bne.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af4:	d110      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e00f      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b06:	d007      	beq.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	20000014 	.word	0x20000014
 8001b30:	431bde83 	.word	0x431bde83

08001b34 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6053      	str	r3, [r2, #4]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40007000 	.word	0x40007000

08001b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f000 bc16 	b.w	8002394 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b68:	4ba0      	ldr	r3, [pc, #640]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b72:	4b9e      	ldr	r3, [pc, #632]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80e4 	beq.w	8001d52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4c>
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	f040 808b 	bne.w	8001cae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f040 8087 	bne.w	8001cae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x64>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e3ed      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d004      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x7e>
 8001bc8:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd0:	e005      	b.n	8001bde <HAL_RCC_OscConfig+0x8a>
 8001bd2:	4b86      	ldr	r3, [pc, #536]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d223      	bcs.n	8001c2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fd80 	bl	80026ec <RCC_SetFlashLatencyFromMSIRange>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e3ce      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b7a      	ldr	r3, [pc, #488]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4977      	ldr	r1, [pc, #476]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c14:	4b75      	ldr	r3, [pc, #468]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	4972      	ldr	r1, [pc, #456]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	e025      	b.n	8001c76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2a:	4b70      	ldr	r3, [pc, #448]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6f      	ldr	r2, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	496a      	ldr	r1, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	4965      	ldr	r1, [pc, #404]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fd40 	bl	80026ec <RCC_SetFlashLatencyFromMSIRange>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e38e      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c76:	f000 fc75 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	495a      	ldr	r1, [pc, #360]	; (8001df0 <HAL_RCC_OscConfig+0x29c>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_RCC_OscConfig+0x2a0>)
 8001c94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c96:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <HAL_RCC_OscConfig+0x2a4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fb36 	bl	800130c <HAL_InitTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d052      	beq.n	8001d50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	e372      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d032      	beq.n	8001d1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fb73 	bl	80013ac <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cca:	f7ff fb6f 	bl	80013ac <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e35b      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3f      	ldr	r2, [pc, #252]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	493a      	ldr	r1, [pc, #232]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d06:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	4935      	ldr	r1, [pc, #212]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
 8001d1a:	e01a      	b.n	8001d52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d1c:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb40 	bl	80013ac <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d30:	f7ff fb3c 	bl	80013ac <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e328      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1dc>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d073      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_OscConfig+0x21c>
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d10e      	bne.n	8001d88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d063      	beq.n	8001e44 <HAL_RCC_OscConfig+0x2f0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d15f      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e305      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x24c>
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0x288>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x270>
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0x288>
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_RCC_OscConfig+0x298>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fae2 	bl	80013ac <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	e010      	b.n	8001e0e <HAL_RCC_OscConfig+0x2ba>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08005680 	.word	0x08005680
 8001df4:	20000014 	.word	0x20000014
 8001df8:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fad6 	bl	80013ac <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e2c2      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	4baf      	ldr	r3, [pc, #700]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x2a8>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fac6 	bl	80013ac <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fac2 	bl	80013ac <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e2ae      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e36:	4ba5      	ldr	r3, [pc, #660]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2d0>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d060      	beq.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_OscConfig+0x310>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d119      	bne.n	8001e92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d116      	bne.n	8001e92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	4b99      	ldr	r3, [pc, #612]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x328>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e28b      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b93      	ldr	r3, [pc, #588]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4990      	ldr	r1, [pc, #576]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e90:	e040      	b.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d023      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9a:	4b8c      	ldr	r3, [pc, #560]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a8b      	ldr	r2, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7ff fa81 	bl	80013ac <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eae:	f7ff fa7d 	bl	80013ac <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e269      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	4b82      	ldr	r3, [pc, #520]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	497c      	ldr	r1, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	e018      	b.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a79      	ldr	r2, [pc, #484]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7ff fa5d 	bl	80013ac <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fa59 	bl	80013ac <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e245      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f08:	4b70      	ldr	r3, [pc, #448]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d03c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f28:	4b68      	ldr	r3, [pc, #416]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	4a67      	ldr	r2, [pc, #412]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff fa38 	bl	80013ac <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff fa34 	bl	80013ac <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e220      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f52:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ef      	beq.n	8001f40 <HAL_RCC_OscConfig+0x3ec>
 8001f60:	e01b      	b.n	8001f9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f68:	4a58      	ldr	r2, [pc, #352]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff fa1b 	bl	80013ac <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fa17 	bl	80013ac <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e203      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8c:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ef      	bne.n	8001f7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80a6 	beq.w	80020f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc4:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_RCC_OscConfig+0x57c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d118      	bne.n	8002012 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_RCC_OscConfig+0x57c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <HAL_RCC_OscConfig+0x57c>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fec:	f7ff f9de 	bl	80013ac <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7ff f9da 	bl	80013ac <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1c6      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_RCC_OscConfig+0x57c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x4d8>
 800201a:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202a:	e024      	b.n	8002076 <HAL_RCC_OscConfig+0x522>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d110      	bne.n	8002056 <HAL_RCC_OscConfig+0x502>
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002054:	e00f      	b.n	8002076 <HAL_RCC_OscConfig+0x522>
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 800206e:	f023 0304 	bic.w	r3, r3, #4
 8002072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff f995 	bl	80013ac <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7ff f991 	bl	80013ac <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	; 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e17b      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x578>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0ed      	beq.n	8002086 <HAL_RCC_OscConfig+0x532>
 80020aa:	e01a      	b.n	80020e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7ff f97e 	bl	80013ac <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b2:	e00f      	b.n	80020d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7ff f97a 	bl	80013ac <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d906      	bls.n	80020d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e164      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d4:	4ba8      	ldr	r3, [pc, #672]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e8      	bne.n	80020b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e2:	7ffb      	ldrb	r3, [r7, #31]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e8:	4ba3      	ldr	r3, [pc, #652]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	4aa2      	ldr	r2, [pc, #648]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80020ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d03c      	beq.n	800217a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01c      	beq.n	8002142 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002108:	4b9b      	ldr	r3, [pc, #620]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 800210a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210e:	4a9a      	ldr	r2, [pc, #616]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7ff f948 	bl	80013ac <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002120:	f7ff f944 	bl	80013ac <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e130      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002132:	4b91      	ldr	r3, [pc, #580]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ef      	beq.n	8002120 <HAL_RCC_OscConfig+0x5cc>
 8002140:	e01b      	b.n	800217a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002142:	4b8d      	ldr	r3, [pc, #564]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002148:	4a8b      	ldr	r2, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff f92b 	bl	80013ac <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215a:	f7ff f927 	bl	80013ac <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e113      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800216c:	4b82      	ldr	r3, [pc, #520]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 800216e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ef      	bne.n	800215a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8107 	beq.w	8002392 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	2b02      	cmp	r3, #2
 800218a:	f040 80cb 	bne.w	8002324 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800218e:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0203 	and.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	429a      	cmp	r2, r3
 80021a0:	d12c      	bne.n	80021fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	3b01      	subs	r3, #1
 80021ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d123      	bne.n	80021fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d11b      	bne.n	80021fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d113      	bne.n	80021fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	3b01      	subs	r3, #1
 80021e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d109      	bne.n	80021fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	3b01      	subs	r3, #1
 80021f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d06d      	beq.n	80022d8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d068      	beq.n	80022d4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800220e:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0ba      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800221e:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a55      	ldr	r2, [pc, #340]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002228:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800222a:	f7ff f8bf 	bl	80013ac <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7ff f8bb 	bl	80013ac <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0a7      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002244:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4b49      	ldr	r3, [pc, #292]	; (800237c <HAL_RCC_OscConfig+0x828>)
 8002256:	4013      	ands	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002260:	3a01      	subs	r2, #1
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800226a:	0212      	lsls	r2, r2, #8
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002272:	0852      	lsrs	r2, r2, #1
 8002274:	3a01      	subs	r2, #1
 8002276:	0552      	lsls	r2, r2, #21
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800227e:	0852      	lsrs	r2, r2, #1
 8002280:	3a01      	subs	r2, #1
 8002282:	0652      	lsls	r2, r2, #25
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800228a:	06d2      	lsls	r2, r2, #27
 800228c:	430a      	orrs	r2, r1
 800228e:	493a      	ldr	r1, [pc, #232]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002290:	4313      	orrs	r3, r2
 8002292:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002294:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a37      	ldr	r2, [pc, #220]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a0:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a34      	ldr	r2, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022ac:	f7ff f87e 	bl	80013ac <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff f87a 	bl	80013ac <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e066      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d2:	e05e      	b.n	8002392 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e05d      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d156      	bne.n	8002392 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022fc:	f7ff f856 	bl	80013ac <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff f852 	bl	80013ac <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e03e      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x7b0>
 8002322:	e036      	b.n	8002392 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d031      	beq.n	800238e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002334:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002348:	f023 0303 	bic.w	r3, r3, #3
 800234c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_RCC_OscConfig+0x824>)
 8002354:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7ff f825 	bl	80013ac <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002364:	e00c      	b.n	8002380 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff f821 	bl	80013ac <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d905      	bls.n	8002380 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e00d      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
 8002378:	40021000 	.word	0x40021000
 800237c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_OscConfig+0x848>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ec      	bne.n	8002366 <HAL_RCC_OscConfig+0x812>
 800238c:	e001      	b.n	8002392 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0c8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d910      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 0207 	bic.w	r2, r3, #7
 80023ca:	4961      	ldr	r1, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b0      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d04c      	beq.n	800248a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f8:	4b56      	ldr	r3, [pc, #344]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d121      	bne.n	8002448 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e09e      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d115      	bne.n	8002448 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e092      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002428:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e086      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e07e      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	493f      	ldr	r1, [pc, #252]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245a:	f7fe ffa7 	bl	80013ac <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	e00a      	b.n	8002478 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002462:	f7fe ffa3 	bl	80013ac <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e066      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 020c 	and.w	r2, r3, #12
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	429a      	cmp	r2, r3
 8002488:	d1eb      	bne.n	8002462 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	492c      	ldr	r1, [pc, #176]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d210      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4924      	ldr	r1, [pc, #144]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e036      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4918      	ldr	r1, [pc, #96]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4910      	ldr	r1, [pc, #64]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002516:	f000 f825 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490c      	ldr	r1, [pc, #48]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fee6 	bl	800130c <HAL_InitTick>
 8002540:	4603      	mov	r3, r0
 8002542:	72fb      	strb	r3, [r7, #11]

  return status;
 8002544:	7afb      	ldrb	r3, [r7, #11]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
 8002558:	08005680 	.word	0x08005680
 800255c:	20000014 	.word	0x20000014
 8002560:	20000018 	.word	0x20000018

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d121      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d11e      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e005      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025c0:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10d      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_GetSysClockFreq+0x110>)
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	e004      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d134      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0xa6>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d003      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0xac>
 8002608:	e005      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_RCC_GetSysClockFreq+0x110>)
 800260c:	617b      	str	r3, [r7, #20]
      break;
 800260e:	e005      	b.n	800261c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_GetSysClockFreq+0x114>)
 8002612:	617b      	str	r3, [r7, #20]
      break;
 8002614:	e002      	b.n	800261c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	617b      	str	r3, [r7, #20]
      break;
 800261a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	3301      	adds	r3, #1
 8002628:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	fb02 f203 	mul.w	r2, r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	0e5b      	lsrs	r3, r3, #25
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	3301      	adds	r3, #1
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800265c:	69bb      	ldr	r3, [r7, #24]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	08005698 	.word	0x08005698
 8002674:	00f42400 	.word	0x00f42400
 8002678:	007a1200 	.word	0x007a1200

0800267c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_GetHCLKFreq+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000014 	.word	0x20000014

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002698:	f7ff fff0 	bl	800267c <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08005690 	.word	0x08005690

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026c4:	f7ff ffda 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0adb      	lsrs	r3, r3, #11
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08005690 	.word	0x08005690

080026ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002704:	f7ff f9b2 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 8002708:	6178      	str	r0, [r7, #20]
 800270a:	e014      	b.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002716:	6593      	str	r3, [r2, #88]	; 0x58
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002724:	f7ff f9a2 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 8002728:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273c:	d10b      	bne.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d919      	bls.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2ba0      	cmp	r3, #160	; 0xa0
 8002748:	d902      	bls.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800274a:	2302      	movs	r3, #2
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	e013      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e010      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d902      	bls.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800275c:	2303      	movs	r3, #3
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e00a      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d102      	bne.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002768:	2302      	movs	r3, #2
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e004      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b70      	cmp	r3, #112	; 0x70
 8002772:	d101      	bne.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002774:	2301      	movs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 0207 	bic.w	r2, r3, #7
 8002780:	4909      	ldr	r1, [pc, #36]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40022000 	.word	0x40022000

080027ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027b4:	2300      	movs	r3, #0
 80027b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027b8:	2300      	movs	r3, #0
 80027ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d041      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027d0:	d02a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027d6:	d824      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027dc:	d008      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027e2:	d81e      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ec:	d010      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ee:	e018      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027f0:	4b86      	ldr	r3, [pc, #536]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a85      	ldr	r2, [pc, #532]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027fc:	e015      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f000 facd 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800280e:	e00c      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3320      	adds	r3, #32
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fbb6 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002820:	e003      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	74fb      	strb	r3, [r7, #19]
      break;
 8002826:	e000      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002830:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800283e:	4973      	ldr	r1, [pc, #460]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002846:	e001      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d041      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002860:	d02a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002866:	d824      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800286e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002872:	d81e      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d010      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800287e:	e018      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002880:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a61      	ldr	r2, [pc, #388]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800288c:	e015      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fa85 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800289e:	e00c      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3320      	adds	r3, #32
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fb6e 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028b0:	e003      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	74fb      	strb	r3, [r7, #19]
      break;
 80028b6:	e000      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ce:	494f      	ldr	r1, [pc, #316]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a0 	beq.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	; 0x58
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800292c:	f7fe fd3e 	bl	80013ac <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002932:	e009      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe fd3a 	bl	80013ac <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	74fb      	strb	r3, [r7, #19]
        break;
 8002946:	e005      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d15c      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002964:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01f      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	d019      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002978:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002982:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d016      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fcf9 	bl	80013ac <HAL_GetTick>
 80029ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029bc:	e00b      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fcf5 	bl	80013ac <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d902      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	74fb      	strb	r3, [r7, #19]
            break;
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ec      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a02:	e009      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
 8002a08:	e006      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a18:	7c7b      	ldrb	r3, [r7, #17]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4ba6      	ldr	r3, [pc, #664]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	4aa5      	ldr	r2, [pc, #660]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a36:	4ba0      	ldr	r3, [pc, #640]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 0203 	bic.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	499c      	ldr	r1, [pc, #624]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a58:	4b97      	ldr	r3, [pc, #604]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 020c 	bic.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	4994      	ldr	r1, [pc, #592]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a7a:	4b8f      	ldr	r3, [pc, #572]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	498b      	ldr	r1, [pc, #556]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4983      	ldr	r1, [pc, #524]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002abe:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	497a      	ldr	r1, [pc, #488]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae0:	4b75      	ldr	r3, [pc, #468]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	4972      	ldr	r1, [pc, #456]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b02:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	4969      	ldr	r1, [pc, #420]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b32:	4961      	ldr	r1, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b54:	4958      	ldr	r1, [pc, #352]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	4950      	ldr	r1, [pc, #320]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b8a:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4947      	ldr	r1, [pc, #284]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bac:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	493f      	ldr	r1, [pc, #252]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4936      	ldr	r1, [pc, #216]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf8:	60d3      	str	r3, [r2, #12]
 8002bfa:	e011      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f8c9 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d028      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	491f      	ldr	r1, [pc, #124]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c56:	60d3      	str	r3, [r2, #12]
 8002c58:	e011      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f89a 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d02a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002caa:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a02      	ldr	r2, [pc, #8]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb4:	60d3      	str	r3, [r2, #12]
 8002cb6:	e013      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002cb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f869 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002cdc:	7cfb      	ldrb	r3, [r7, #19]
 8002cde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cec:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfa:	4929      	ldr	r1, [pc, #164]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f846 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	74bb      	strb	r3, [r7, #18]
 8002d26:	e011      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3320      	adds	r3, #32
 8002d36:	2102      	movs	r1, #2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f925 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d68:	490d      	ldr	r1, [pc, #52]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8c:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000

08002da4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db2:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d018      	beq.n	8002df0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dbe:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0203 	and.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dd6:	4b6b      	ldr	r3, [pc, #428]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
       ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d047      	beq.n	8002e7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e044      	b.n	8002e7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d018      	beq.n	8002e2a <RCCEx_PLLSAI1_Config+0x86>
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d825      	bhi.n	8002e48 <RCCEx_PLLSAI1_Config+0xa4>
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d002      	beq.n	8002e06 <RCCEx_PLLSAI1_Config+0x62>
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d009      	beq.n	8002e18 <RCCEx_PLLSAI1_Config+0x74>
 8002e04:	e020      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e06:	4b5f      	ldr	r3, [pc, #380]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11d      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e16:	e01a      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e18:	4b5a      	ldr	r3, [pc, #360]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d116      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e013      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e2a:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10f      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e36:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e46:	e006      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e004      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e002      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e5e:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	430b      	orrs	r3, r1
 8002e74:	4943      	ldr	r1, [pc, #268]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d17c      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e80:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fa8e 	bl	80013ac <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e92:	e009      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e94:	f7fe fa8a 	bl	80013ac <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d902      	bls.n	8002ea8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea6:	e005      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ef      	bne.n	8002e94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d15f      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d110      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ec8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6892      	ldr	r2, [r2, #8]
 8002ed0:	0211      	lsls	r1, r2, #8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	06d2      	lsls	r2, r2, #27
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	492a      	ldr	r1, [pc, #168]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	610b      	str	r3, [r1, #16]
 8002ee0:	e027      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d112      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ef0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6892      	ldr	r2, [r2, #8]
 8002ef8:	0211      	lsls	r1, r2, #8
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6912      	ldr	r2, [r2, #16]
 8002efe:	0852      	lsrs	r2, r2, #1
 8002f00:	3a01      	subs	r2, #1
 8002f02:	0552      	lsls	r2, r2, #21
 8002f04:	430a      	orrs	r2, r1
 8002f06:	491f      	ldr	r1, [pc, #124]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	610b      	str	r3, [r1, #16]
 8002f0c:	e011      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	0211      	lsls	r1, r2, #8
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6952      	ldr	r2, [r2, #20]
 8002f24:	0852      	lsrs	r2, r2, #1
 8002f26:	3a01      	subs	r2, #1
 8002f28:	0652      	lsls	r2, r2, #25
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	4915      	ldr	r1, [pc, #84]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fa35 	bl	80013ac <HAL_GetTick>
 8002f42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f44:	e009      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f46:	f7fe fa31 	bl	80013ac <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d902      	bls.n	8002f5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	73fb      	strb	r3, [r7, #15]
          break;
 8002f58:	e005      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ef      	beq.n	8002f46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000

08002f88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f96:	4b69      	ldr	r3, [pc, #420]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fa2:	4b66      	ldr	r3, [pc, #408]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fba:	4b60      	ldr	r3, [pc, #384]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d047      	beq.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e044      	b.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d018      	beq.n	800300e <RCCEx_PLLSAI2_Config+0x86>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d825      	bhi.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d002      	beq.n	8002fea <RCCEx_PLLSAI2_Config+0x62>
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d009      	beq.n	8002ffc <RCCEx_PLLSAI2_Config+0x74>
 8002fe8:	e020      	b.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fea:	4b54      	ldr	r3, [pc, #336]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11d      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffa:	e01a      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ffc:	4b4f      	ldr	r3, [pc, #316]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300c:	e013      	b.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800300e:	4b4b      	ldr	r3, [pc, #300]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301a:	4b48      	ldr	r3, [pc, #288]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302a:	e006      	b.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e004      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303a:	bf00      	nop
    }

    if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003042:	4b3e      	ldr	r3, [pc, #248]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	430b      	orrs	r3, r1
 8003058:	4938      	ldr	r1, [pc, #224]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d166      	bne.n	8003132 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003064:	4b35      	ldr	r3, [pc, #212]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a34      	ldr	r2, [pc, #208]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe f99c 	bl	80013ac <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003078:	f7fe f998 	bl	80013ac <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
        break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d149      	bne.n	8003132 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d110      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	06d2      	lsls	r2, r2, #27
 80030bc:	430a      	orrs	r2, r1
 80030be:	491f      	ldr	r1, [pc, #124]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	614b      	str	r3, [r1, #20]
 80030c4:	e011      	b.n	80030ea <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	0211      	lsls	r1, r2, #8
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6912      	ldr	r2, [r2, #16]
 80030dc:	0852      	lsrs	r2, r2, #1
 80030de:	3a01      	subs	r2, #1
 80030e0:	0652      	lsls	r2, r2, #25
 80030e2:	430a      	orrs	r2, r1
 80030e4:	4915      	ldr	r1, [pc, #84]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe f959 	bl	80013ac <HAL_GetTick>
 80030fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030fc:	e009      	b.n	8003112 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030fe:	f7fe f955 	bl	80013ac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d902      	bls.n	8003112 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	73fb      	strb	r3, [r7, #15]
          break;
 8003110:	e005      	b.n	800311e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0ef      	beq.n	80030fe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <RCCEx_PLLSAI2_Config+0x1b4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e049      	b.n	80031e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd ff64 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 fc54 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d001      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e04f      	b.n	80032a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01d      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x76>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d018      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x76>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x76>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x76>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x76>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x76>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d115      	bne.n	8003292 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_TIM_Base_Start_IT+0xdc>)
 800326e:	4013      	ands	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d015      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0xb4>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327e:	d011      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	e008      	b.n	80032a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e000      	b.n	80032a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40013400 	.word	0x40013400
 80032c8:	40014000 	.word	0x40014000
 80032cc:	00010007 	.word	0x00010007

080032d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a1a      	ldr	r2, [r3, #32]
 80032ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <HAL_TIM_Base_Stop_IT+0x48>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	f240 4344 	movw	r3, #1092	; 0x444
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_TIM_Base_Stop_IT+0x48>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e049      	b.n	80033d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f841 	bl	80033dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f000 fb5d 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0202 	mvn.w	r2, #2
 800341c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fadc 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 face 	bl	80039dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fadf 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0204 	mvn.w	r2, #4
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fab2 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 faa4 	bl	80039dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fab5 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0208 	mvn.w	r2, #8
 80034c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa88 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa7a 	bl	80039dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fa8b 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b10      	cmp	r3, #16
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0210 	mvn.w	r2, #16
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2208      	movs	r2, #8
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa5e 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa50 	bl	80039dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fa61 	bl	8003a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0201 	mvn.w	r2, #1
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fb1a 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b80      	cmp	r3, #128	; 0x80
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fee2 	bl	8004364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d10e      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fed5 	bl	8004378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d10e      	bne.n	80035fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa0f 	bl	8003a18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b20      	cmp	r3, #32
 8003606:	d10e      	bne.n	8003626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d107      	bne.n	8003626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0220 	mvn.w	r2, #32
 800361e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fe95 	bl	8004350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003646:	2302      	movs	r3, #2
 8003648:	e0fd      	b.n	8003846 <HAL_TIM_PWM_ConfigChannel+0x216>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b14      	cmp	r3, #20
 8003656:	f200 80f0 	bhi.w	800383a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	080036b5 	.word	0x080036b5
 8003664:	0800383b 	.word	0x0800383b
 8003668:	0800383b 	.word	0x0800383b
 800366c:	0800383b 	.word	0x0800383b
 8003670:	080036f5 	.word	0x080036f5
 8003674:	0800383b 	.word	0x0800383b
 8003678:	0800383b 	.word	0x0800383b
 800367c:	0800383b 	.word	0x0800383b
 8003680:	08003737 	.word	0x08003737
 8003684:	0800383b 	.word	0x0800383b
 8003688:	0800383b 	.word	0x0800383b
 800368c:	0800383b 	.word	0x0800383b
 8003690:	08003777 	.word	0x08003777
 8003694:	0800383b 	.word	0x0800383b
 8003698:	0800383b 	.word	0x0800383b
 800369c:	0800383b 	.word	0x0800383b
 80036a0:	080037b9 	.word	0x080037b9
 80036a4:	0800383b 	.word	0x0800383b
 80036a8:	0800383b 	.word	0x0800383b
 80036ac:	0800383b 	.word	0x0800383b
 80036b0:	080037f9 	.word	0x080037f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fa50 	bl	8003b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	619a      	str	r2, [r3, #24]
      break;
 80036f2:	e0a3      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fac0 	bl	8003c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6999      	ldr	r1, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]
      break;
 8003734:	e082      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fb29 	bl	8003d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0208 	orr.w	r2, r2, #8
 8003750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0204 	bic.w	r2, r2, #4
 8003760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	61da      	str	r2, [r3, #28]
      break;
 8003774:	e062      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fb91 	bl	8003ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	021a      	lsls	r2, r3, #8
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	61da      	str	r2, [r3, #28]
      break;
 80037b6:	e041      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fbda 	bl	8003f78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037f6:	e021      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fc1e 	bl	8004040 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003838:	e000      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800383a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop

08003850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIM_ConfigClockSource+0x18>
 8003864:	2302      	movs	r3, #2
 8003866:	e0b5      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x184>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800388a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003892:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a4:	d03e      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0xd4>
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	f200 8087 	bhi.w	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	f000 8085 	beq.w	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ba:	d87f      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b70      	cmp	r3, #112	; 0x70
 80038be:	d01a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0xa6>
 80038c0:	2b70      	cmp	r3, #112	; 0x70
 80038c2:	d87b      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b60      	cmp	r3, #96	; 0x60
 80038c6:	d050      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x11a>
 80038c8:	2b60      	cmp	r3, #96	; 0x60
 80038ca:	d877      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b50      	cmp	r3, #80	; 0x50
 80038ce:	d03c      	beq.n	800394a <HAL_TIM_ConfigClockSource+0xfa>
 80038d0:	2b50      	cmp	r3, #80	; 0x50
 80038d2:	d873      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d058      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x13a>
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d86f      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b30      	cmp	r3, #48	; 0x30
 80038de:	d064      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	2b30      	cmp	r3, #48	; 0x30
 80038e2:	d86b      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d060      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d867      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d05c      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d05a      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038f4:	e062      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6899      	ldr	r1, [r3, #8]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f000 fc7b 	bl	8004200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003918:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	609a      	str	r2, [r3, #8]
      break;
 8003922:	e04e      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6899      	ldr	r1, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f000 fc64 	bl	8004200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003946:	609a      	str	r2, [r3, #8]
      break;
 8003948:	e03b      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fbd8 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2150      	movs	r1, #80	; 0x50
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fc31 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003968:	e02b      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	461a      	mov	r2, r3
 8003978:	f000 fbf7 	bl	800416a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2160      	movs	r1, #96	; 0x60
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fc21 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003988:	e01b      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fbb8 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2140      	movs	r1, #64	; 0x40
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fc11 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 80039a8:	e00b      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f000 fc08 	bl	80041ca <TIM_ITRx_SetConfig>
        break;
 80039ba:	e002      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80039c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3d      	ldr	r2, [pc, #244]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01f      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d01b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d017      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00f      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <TIM_Base_SetConfig+0x128>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <TIM_Base_SetConfig+0x130>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a10      	ldr	r2, [pc, #64]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00f      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00b      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <TIM_Base_SetConfig+0x128>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d007      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <TIM_Base_SetConfig+0x130>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0201 	bic.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 0302 	bic.w	r3, r3, #2
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <TIM_OC1_SetConfig+0x10c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00f      	beq.n	8003be0 <TIM_OC1_SetConfig+0x80>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <TIM_OC1_SetConfig+0x110>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_OC1_SetConfig+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <TIM_OC1_SetConfig+0x114>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_OC1_SetConfig+0x80>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <TIM_OC1_SetConfig+0x118>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_OC1_SetConfig+0x80>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <TIM_OC1_SetConfig+0x11c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10c      	bne.n	8003bfa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0308 	bic.w	r3, r3, #8
 8003be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <TIM_OC1_SetConfig+0x10c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00f      	beq.n	8003c22 <TIM_OC1_SetConfig+0xc2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <TIM_OC1_SetConfig+0x110>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00b      	beq.n	8003c22 <TIM_OC1_SetConfig+0xc2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <TIM_OC1_SetConfig+0x114>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <TIM_OC1_SetConfig+0xc2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <TIM_OC1_SetConfig+0x118>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <TIM_OC1_SetConfig+0xc2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <TIM_OC1_SetConfig+0x11c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d111      	bne.n	8003c46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800

08003c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0210 	bic.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0320 	bic.w	r3, r3, #32
 8003cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <TIM_OC2_SetConfig+0x100>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC2_SetConfig+0x6c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <TIM_OC2_SetConfig+0x104>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10d      	bne.n	8003d08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <TIM_OC2_SetConfig+0x100>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00f      	beq.n	8003d30 <TIM_OC2_SetConfig+0xb0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <TIM_OC2_SetConfig+0x104>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_OC2_SetConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <TIM_OC2_SetConfig+0x108>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_OC2_SetConfig+0xb0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <TIM_OC2_SetConfig+0x10c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC2_SetConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <TIM_OC2_SetConfig+0x110>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d113      	bne.n	8003d58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40013400 	.word	0x40013400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40014800 	.word	0x40014800

08003d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <TIM_OC3_SetConfig+0xfc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_OC3_SetConfig+0x6a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <TIM_OC3_SetConfig+0x100>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10d      	bne.n	8003e1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <TIM_OC3_SetConfig+0xfc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00f      	beq.n	8003e42 <TIM_OC3_SetConfig+0xae>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <TIM_OC3_SetConfig+0x100>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_OC3_SetConfig+0xae>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <TIM_OC3_SetConfig+0x104>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_OC3_SetConfig+0xae>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <TIM_OC3_SetConfig+0x108>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0xae>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <TIM_OC3_SetConfig+0x10c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40013400 	.word	0x40013400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800

08003ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	031b      	lsls	r3, r3, #12
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <TIM_OC4_SetConfig+0xc0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00f      	beq.n	8003f28 <TIM_OC4_SetConfig+0x84>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <TIM_OC4_SetConfig+0xc4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_OC4_SetConfig+0x84>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <TIM_OC4_SetConfig+0xc8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_OC4_SetConfig+0x84>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <TIM_OC4_SetConfig+0xcc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC4_SetConfig+0x84>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <TIM_OC4_SetConfig+0xd0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	; (800402c <TIM_OC5_SetConfig+0xb4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <TIM_OC5_SetConfig+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <TIM_OC5_SetConfig+0xbc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <TIM_OC5_SetConfig+0xc0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x7a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <TIM_OC5_SetConfig+0xc4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d109      	bne.n	8004006 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40013400 	.word	0x40013400
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800

08004040 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	051b      	lsls	r3, r3, #20
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <TIM_OC6_SetConfig+0xb8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <TIM_OC6_SetConfig+0xbc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <TIM_OC6_SetConfig+0xc0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <TIM_OC6_SetConfig+0xc4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC6_SetConfig+0x7c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC6_SetConfig+0xc8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d109      	bne.n	80040d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004254:	2302      	movs	r3, #2
 8004256:	e068      	b.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2e      	ldr	r2, [pc, #184]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2d      	ldr	r2, [pc, #180]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d108      	bne.n	800429e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01d      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ca:	d018      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10c      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40013400 	.word	0x40013400
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40014000 	.word	0x40014000

08004350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e040      	b.n	8004420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fee2 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2224      	movs	r2, #36	; 0x24
 80043b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 faee 	bl	80049ac <UART_SetConfig>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e022      	b.n	8004420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fd6c 	bl	8004ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fdf3 	bl	8005004 <UART_CheckIdleState>
 800441e:	4603      	mov	r3, r0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443a:	2b20      	cmp	r3, #32
 800443c:	d145      	bne.n	80044ca <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_UART_Transmit_IT+0x22>
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e03e      	b.n	80044cc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_UART_Transmit_IT+0x34>
 8004458:	2302      	movs	r3, #2
 800445a:	e037      	b.n	80044cc <HAL_UART_Transmit_IT+0xa4>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2221      	movs	r2, #33	; 0x21
 800448c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d107      	bne.n	80044a8 <HAL_UART_Transmit_IT+0x80>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <HAL_UART_Transmit_IT+0xb0>)
 80044a4:	669a      	str	r2, [r3, #104]	; 0x68
 80044a6:	e002      	b.n	80044ae <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <HAL_UART_Transmit_IT+0xb4>)
 80044ac:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
  }
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	0800539f 	.word	0x0800539f
 80044dc:	0800532b 	.word	0x0800532b

080044e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d131      	bne.n	800455a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Receive_IT+0x22>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e02a      	b.n	800455c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_UART_Receive_IT+0x34>
 8004510:	2302      	movs	r3, #2
 8004512:	e023      	b.n	800455c <HAL_UART_Receive_IT+0x7c>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <HAL_UART_Receive_IT+0x84>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004548:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	461a      	mov	r2, r3
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fe1d 	bl	8005190 <UART_Start_Receive_IT>
 8004556:	4603      	mov	r3, r0
 8004558:	e000      	b.n	800455c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40008000 	.word	0x40008000

08004568 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	f640 030f 	movw	r3, #2063	; 0x80f
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d113      	bne.n	80045c0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 81ce 	beq.w	8004952 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
      }
      return;
 80045be:	e1c8      	b.n	8004952 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80e3 	beq.w	800478e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4ba6      	ldr	r3, [pc, #664]	; (8004870 <HAL_UART_IRQHandler+0x308>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80d8 	beq.w	800478e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_UART_IRQHandler+0xa2>
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <HAL_UART_IRQHandler+0xce>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2202      	movs	r2, #2
 8004624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462c:	f043 0204 	orr.w	r2, r3, #4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_UART_IRQHandler+0xfa>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2204      	movs	r2, #4
 8004650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004658:	f043 0202 	orr.w	r2, r3, #2
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2208      	movs	r2, #8
 8004686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468e:	f043 0208 	orr.w	r2, r3, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d011      	beq.n	80046c6 <HAL_UART_IRQHandler+0x15e>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8142 	beq.w	8004956 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00c      	beq.n	80046f6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d004      	beq.n	8004716 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004712:	2b00      	cmp	r3, #0
 8004714:	d031      	beq.n	800477a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fdc2 	bl	80052a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d123      	bne.n	8004772 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004738:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	2b00      	cmp	r3, #0
 8004740:	d013      	beq.n	800476a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a4b      	ldr	r2, [pc, #300]	; (8004874 <HAL_UART_IRQHandler+0x30c>)
 8004748:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc ff87 	bl	8001662 <HAL_DMA_Abort_IT>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d017      	beq.n	800478a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	e00f      	b.n	800478a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f908 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	e00b      	b.n	800478a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f904 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	e007      	b.n	800478a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f900 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004788:	e0e5      	b.n	8004956 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	bf00      	nop
    return;
 800478c:	e0e3      	b.n	8004956 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	2b01      	cmp	r3, #1
 8004794:	f040 80a9 	bne.w	80048ea <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80a3 	beq.w	80048ea <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 809d 	beq.w	80048ea <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2210      	movs	r2, #16
 80047b6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d158      	bne.n	8004878 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80047d0:	893b      	ldrh	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80c1 	beq.w	800495a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047de:	893a      	ldrh	r2, [r7, #8]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	f080 80ba 	bcs.w	800495a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	893a      	ldrh	r2, [r7, #8]
 80047ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d12a      	bne.n	8004854 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800480c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0210 	bic.w	r2, r2, #16
 8004848:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fec9 	bl	80015e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004860:	b29b      	uxth	r3, r3
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b29b      	uxth	r3, r3
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f893 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800486e:	e074      	b.n	800495a <HAL_UART_IRQHandler+0x3f2>
 8004870:	04000120 	.word	0x04000120
 8004874:	080052ff 	.word	0x080052ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004884:	b29b      	uxth	r3, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004896:	897b      	ldrh	r3, [r7, #10]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d060      	beq.n	800495e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048aa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0210 	bic.w	r2, r2, #16
 80048dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f856 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048e8:	e039      	b.n	800495e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <HAL_UART_IRQHandler+0x3a8>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fe77 	bl	80055fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800490e:	e029      	b.n	8004964 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00d      	beq.n	8004936 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01a      	beq.n	8004962 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
    }
    return;
 8004934:	e015      	b.n	8004962 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d011      	beq.n	8004964 <HAL_UART_IRQHandler+0x3fc>
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fd65 	bl	800541a <UART_EndTransmit_IT>
    return;
 8004950:	e008      	b.n	8004964 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004952:	bf00      	nop
 8004954:	e006      	b.n	8004964 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004956:	bf00      	nop
 8004958:	e004      	b.n	8004964 <HAL_UART_IRQHandler+0x3fc>
      return;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <HAL_UART_IRQHandler+0x3fc>
      return;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004962:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop

0800496c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4bad      	ldr	r3, [pc, #692]	; (8004c8c <UART_SetConfig+0x2e0>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	69f9      	ldr	r1, [r7, #28]
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4aa2      	ldr	r2, [pc, #648]	; (8004c90 <UART_SetConfig+0x2e4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a99      	ldr	r2, [pc, #612]	; (8004c94 <UART_SetConfig+0x2e8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d121      	bne.n	8004a76 <UART_SetConfig+0xca>
 8004a32:	4b99      	ldr	r3, [pc, #612]	; (8004c98 <UART_SetConfig+0x2ec>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d817      	bhi.n	8004a70 <UART_SetConfig+0xc4>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x9c>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a65 	.word	0x08004a65
 8004a50:	08004a5f 	.word	0x08004a5f
 8004a54:	08004a6b 	.word	0x08004a6b
 8004a58:	2301      	movs	r3, #1
 8004a5a:	76fb      	strb	r3, [r7, #27]
 8004a5c:	e0e7      	b.n	8004c2e <UART_SetConfig+0x282>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	76fb      	strb	r3, [r7, #27]
 8004a62:	e0e4      	b.n	8004c2e <UART_SetConfig+0x282>
 8004a64:	2304      	movs	r3, #4
 8004a66:	76fb      	strb	r3, [r7, #27]
 8004a68:	e0e1      	b.n	8004c2e <UART_SetConfig+0x282>
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	76fb      	strb	r3, [r7, #27]
 8004a6e:	e0de      	b.n	8004c2e <UART_SetConfig+0x282>
 8004a70:	2310      	movs	r3, #16
 8004a72:	76fb      	strb	r3, [r7, #27]
 8004a74:	e0db      	b.n	8004c2e <UART_SetConfig+0x282>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a88      	ldr	r2, [pc, #544]	; (8004c9c <UART_SetConfig+0x2f0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d132      	bne.n	8004ae6 <UART_SetConfig+0x13a>
 8004a80:	4b85      	ldr	r3, [pc, #532]	; (8004c98 <UART_SetConfig+0x2ec>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d828      	bhi.n	8004ae0 <UART_SetConfig+0x134>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <UART_SetConfig+0xe8>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004ae1 	.word	0x08004ae1
 8004a9c:	08004ae1 	.word	0x08004ae1
 8004aa0:	08004ae1 	.word	0x08004ae1
 8004aa4:	08004ad5 	.word	0x08004ad5
 8004aa8:	08004ae1 	.word	0x08004ae1
 8004aac:	08004ae1 	.word	0x08004ae1
 8004ab0:	08004ae1 	.word	0x08004ae1
 8004ab4:	08004acf 	.word	0x08004acf
 8004ab8:	08004ae1 	.word	0x08004ae1
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004ae1 	.word	0x08004ae1
 8004ac4:	08004adb 	.word	0x08004adb
 8004ac8:	2300      	movs	r3, #0
 8004aca:	76fb      	strb	r3, [r7, #27]
 8004acc:	e0af      	b.n	8004c2e <UART_SetConfig+0x282>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	76fb      	strb	r3, [r7, #27]
 8004ad2:	e0ac      	b.n	8004c2e <UART_SetConfig+0x282>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	76fb      	strb	r3, [r7, #27]
 8004ad8:	e0a9      	b.n	8004c2e <UART_SetConfig+0x282>
 8004ada:	2308      	movs	r3, #8
 8004adc:	76fb      	strb	r3, [r7, #27]
 8004ade:	e0a6      	b.n	8004c2e <UART_SetConfig+0x282>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	76fb      	strb	r3, [r7, #27]
 8004ae4:	e0a3      	b.n	8004c2e <UART_SetConfig+0x282>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a6d      	ldr	r2, [pc, #436]	; (8004ca0 <UART_SetConfig+0x2f4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d120      	bne.n	8004b32 <UART_SetConfig+0x186>
 8004af0:	4b69      	ldr	r3, [pc, #420]	; (8004c98 <UART_SetConfig+0x2ec>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004afa:	2b30      	cmp	r3, #48	; 0x30
 8004afc:	d013      	beq.n	8004b26 <UART_SetConfig+0x17a>
 8004afe:	2b30      	cmp	r3, #48	; 0x30
 8004b00:	d814      	bhi.n	8004b2c <UART_SetConfig+0x180>
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d009      	beq.n	8004b1a <UART_SetConfig+0x16e>
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d810      	bhi.n	8004b2c <UART_SetConfig+0x180>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <UART_SetConfig+0x168>
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d006      	beq.n	8004b20 <UART_SetConfig+0x174>
 8004b12:	e00b      	b.n	8004b2c <UART_SetConfig+0x180>
 8004b14:	2300      	movs	r3, #0
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e089      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	76fb      	strb	r3, [r7, #27]
 8004b1e:	e086      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b20:	2304      	movs	r3, #4
 8004b22:	76fb      	strb	r3, [r7, #27]
 8004b24:	e083      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b26:	2308      	movs	r3, #8
 8004b28:	76fb      	strb	r3, [r7, #27]
 8004b2a:	e080      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	76fb      	strb	r3, [r7, #27]
 8004b30:	e07d      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a5b      	ldr	r2, [pc, #364]	; (8004ca4 <UART_SetConfig+0x2f8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d120      	bne.n	8004b7e <UART_SetConfig+0x1d2>
 8004b3c:	4b56      	ldr	r3, [pc, #344]	; (8004c98 <UART_SetConfig+0x2ec>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b46:	2bc0      	cmp	r3, #192	; 0xc0
 8004b48:	d013      	beq.n	8004b72 <UART_SetConfig+0x1c6>
 8004b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b4c:	d814      	bhi.n	8004b78 <UART_SetConfig+0x1cc>
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d009      	beq.n	8004b66 <UART_SetConfig+0x1ba>
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d810      	bhi.n	8004b78 <UART_SetConfig+0x1cc>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <UART_SetConfig+0x1b4>
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d006      	beq.n	8004b6c <UART_SetConfig+0x1c0>
 8004b5e:	e00b      	b.n	8004b78 <UART_SetConfig+0x1cc>
 8004b60:	2300      	movs	r3, #0
 8004b62:	76fb      	strb	r3, [r7, #27]
 8004b64:	e063      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b66:	2302      	movs	r3, #2
 8004b68:	76fb      	strb	r3, [r7, #27]
 8004b6a:	e060      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	76fb      	strb	r3, [r7, #27]
 8004b70:	e05d      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b72:	2308      	movs	r3, #8
 8004b74:	76fb      	strb	r3, [r7, #27]
 8004b76:	e05a      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	76fb      	strb	r3, [r7, #27]
 8004b7c:	e057      	b.n	8004c2e <UART_SetConfig+0x282>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a49      	ldr	r2, [pc, #292]	; (8004ca8 <UART_SetConfig+0x2fc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d125      	bne.n	8004bd4 <UART_SetConfig+0x228>
 8004b88:	4b43      	ldr	r3, [pc, #268]	; (8004c98 <UART_SetConfig+0x2ec>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b96:	d017      	beq.n	8004bc8 <UART_SetConfig+0x21c>
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9c:	d817      	bhi.n	8004bce <UART_SetConfig+0x222>
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba2:	d00b      	beq.n	8004bbc <UART_SetConfig+0x210>
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d811      	bhi.n	8004bce <UART_SetConfig+0x222>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <UART_SetConfig+0x20a>
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d006      	beq.n	8004bc2 <UART_SetConfig+0x216>
 8004bb4:	e00b      	b.n	8004bce <UART_SetConfig+0x222>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	76fb      	strb	r3, [r7, #27]
 8004bba:	e038      	b.n	8004c2e <UART_SetConfig+0x282>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	76fb      	strb	r3, [r7, #27]
 8004bc0:	e035      	b.n	8004c2e <UART_SetConfig+0x282>
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	76fb      	strb	r3, [r7, #27]
 8004bc6:	e032      	b.n	8004c2e <UART_SetConfig+0x282>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	76fb      	strb	r3, [r7, #27]
 8004bcc:	e02f      	b.n	8004c2e <UART_SetConfig+0x282>
 8004bce:	2310      	movs	r3, #16
 8004bd0:	76fb      	strb	r3, [r7, #27]
 8004bd2:	e02c      	b.n	8004c2e <UART_SetConfig+0x282>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	; (8004c90 <UART_SetConfig+0x2e4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d125      	bne.n	8004c2a <UART_SetConfig+0x27e>
 8004bde:	4b2e      	ldr	r3, [pc, #184]	; (8004c98 <UART_SetConfig+0x2ec>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bec:	d017      	beq.n	8004c1e <UART_SetConfig+0x272>
 8004bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf2:	d817      	bhi.n	8004c24 <UART_SetConfig+0x278>
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf8:	d00b      	beq.n	8004c12 <UART_SetConfig+0x266>
 8004bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfe:	d811      	bhi.n	8004c24 <UART_SetConfig+0x278>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <UART_SetConfig+0x260>
 8004c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c08:	d006      	beq.n	8004c18 <UART_SetConfig+0x26c>
 8004c0a:	e00b      	b.n	8004c24 <UART_SetConfig+0x278>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	76fb      	strb	r3, [r7, #27]
 8004c10:	e00d      	b.n	8004c2e <UART_SetConfig+0x282>
 8004c12:	2302      	movs	r3, #2
 8004c14:	76fb      	strb	r3, [r7, #27]
 8004c16:	e00a      	b.n	8004c2e <UART_SetConfig+0x282>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	76fb      	strb	r3, [r7, #27]
 8004c1c:	e007      	b.n	8004c2e <UART_SetConfig+0x282>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	76fb      	strb	r3, [r7, #27]
 8004c22:	e004      	b.n	8004c2e <UART_SetConfig+0x282>
 8004c24:	2310      	movs	r3, #16
 8004c26:	76fb      	strb	r3, [r7, #27]
 8004c28:	e001      	b.n	8004c2e <UART_SetConfig+0x282>
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <UART_SetConfig+0x2e4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	f040 8087 	bne.w	8004d48 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c3a:	7efb      	ldrb	r3, [r7, #27]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d837      	bhi.n	8004cb0 <UART_SetConfig+0x304>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <UART_SetConfig+0x29c>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004cb1 	.word	0x08004cb1
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004cb1 	.word	0x08004cb1
 8004c58:	08004c7b 	.word	0x08004c7b
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004cb1 	.word	0x08004cb1
 8004c64:	08004cb1 	.word	0x08004cb1
 8004c68:	08004c83 	.word	0x08004c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c6c:	f7fd fd12 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8004c70:	6178      	str	r0, [r7, #20]
        break;
 8004c72:	e022      	b.n	8004cba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c74:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <UART_SetConfig+0x300>)
 8004c76:	617b      	str	r3, [r7, #20]
        break;
 8004c78:	e01f      	b.n	8004cba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c7a:	f7fd fc73 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8004c7e:	6178      	str	r0, [r7, #20]
        break;
 8004c80:	e01b      	b.n	8004cba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c86:	617b      	str	r3, [r7, #20]
        break;
 8004c88:	e017      	b.n	8004cba <UART_SetConfig+0x30e>
 8004c8a:	bf00      	nop
 8004c8c:	efff69f3 	.word	0xefff69f3
 8004c90:	40008000 	.word	0x40008000
 8004c94:	40013800 	.word	0x40013800
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40004400 	.word	0x40004400
 8004ca0:	40004800 	.word	0x40004800
 8004ca4:	40004c00 	.word	0x40004c00
 8004ca8:	40005000 	.word	0x40005000
 8004cac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	76bb      	strb	r3, [r7, #26]
        break;
 8004cb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80f1 	beq.w	8004ea4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d305      	bcc.n	8004cde <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d902      	bls.n	8004ce4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	76bb      	strb	r3, [r7, #26]
 8004ce2:	e0df      	b.n	8004ea4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f04f 0100 	mov.w	r1, #0
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	020b      	lsls	r3, r1, #8
 8004cf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cfa:	0202      	lsls	r2, r0, #8
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	6849      	ldr	r1, [r1, #4]
 8004d00:	0849      	lsrs	r1, r1, #1
 8004d02:	4608      	mov	r0, r1
 8004d04:	f04f 0100 	mov.w	r1, #0
 8004d08:	1814      	adds	r4, r2, r0
 8004d0a:	eb43 0501 	adc.w	r5, r3, r1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7fb fa66 	bl	80001ec <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4613      	mov	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2e:	d308      	bcc.n	8004d42 <UART_SetConfig+0x396>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d36:	d204      	bcs.n	8004d42 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	60da      	str	r2, [r3, #12]
 8004d40:	e0b0      	b.n	8004ea4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	76bb      	strb	r3, [r7, #26]
 8004d46:	e0ad      	b.n	8004ea4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	d15c      	bne.n	8004e0c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004d52:	7efb      	ldrb	r3, [r7, #27]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d828      	bhi.n	8004daa <UART_SetConfig+0x3fe>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x3b4>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dab 	.word	0x08004dab
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	08004da3 	.word	0x08004da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fd fc86 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8004d88:	6178      	str	r0, [r7, #20]
        break;
 8004d8a:	e013      	b.n	8004db4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fd fc98 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8004d90:	6178      	str	r0, [r7, #20]
        break;
 8004d92:	e00f      	b.n	8004db4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d94:	4b49      	ldr	r3, [pc, #292]	; (8004ebc <UART_SetConfig+0x510>)
 8004d96:	617b      	str	r3, [r7, #20]
        break;
 8004d98:	e00c      	b.n	8004db4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9a:	f7fd fbe3 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8004d9e:	6178      	str	r0, [r7, #20]
        break;
 8004da0:	e008      	b.n	8004db4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	617b      	str	r3, [r7, #20]
        break;
 8004da8:	e004      	b.n	8004db4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	76bb      	strb	r3, [r7, #26]
        break;
 8004db2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d074      	beq.n	8004ea4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	005a      	lsls	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b0f      	cmp	r3, #15
 8004dd6:	d916      	bls.n	8004e06 <UART_SetConfig+0x45a>
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dde:	d212      	bcs.n	8004e06 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f023 030f 	bic.w	r3, r3, #15
 8004de8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	89fb      	ldrh	r3, [r7, #14]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	89fa      	ldrh	r2, [r7, #14]
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	e04e      	b.n	8004ea4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	76bb      	strb	r3, [r7, #26]
 8004e0a:	e04b      	b.n	8004ea4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0c:	7efb      	ldrb	r3, [r7, #27]
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d827      	bhi.n	8004e62 <UART_SetConfig+0x4b6>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x46c>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e53 	.word	0x08004e53
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e63 	.word	0x08004e63
 8004e38:	08004e5b 	.word	0x08004e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7fd fc2a 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8004e40:	6178      	str	r0, [r7, #20]
        break;
 8004e42:	e013      	b.n	8004e6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fd fc3c 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8004e48:	6178      	str	r0, [r7, #20]
        break;
 8004e4a:	e00f      	b.n	8004e6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <UART_SetConfig+0x510>)
 8004e4e:	617b      	str	r3, [r7, #20]
        break;
 8004e50:	e00c      	b.n	8004e6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e52:	f7fd fb87 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8004e56:	6178      	str	r0, [r7, #20]
        break;
 8004e58:	e008      	b.n	8004e6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5e:	617b      	str	r3, [r7, #20]
        break;
 8004e60:	e004      	b.n	8004e6c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	76bb      	strb	r3, [r7, #26]
        break;
 8004e6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d018      	beq.n	8004ea4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085a      	lsrs	r2, r3, #1
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	441a      	add	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d908      	bls.n	8004ea0 <UART_SetConfig+0x4f4>
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d204      	bcs.n	8004ea0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e001      	b.n	8004ea4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004eb0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00f42400 	.word	0x00f42400

08004ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fbe:	d10a      	bne.n	8004fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005014:	f7fc f9ca 	bl	80013ac <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d10e      	bne.n	8005046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f82d 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e023      	b.n	800508e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d10e      	bne.n	8005072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f817 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e00d      	b.n	800508e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	e05e      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d05a      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7fc f97c 	bl	80013ac <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11b      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e043      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02c      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511a:	d124      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005124:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005134:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e00f      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	429a      	cmp	r2, r3
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	429a      	cmp	r2, r3
 8005182:	d091      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	88fa      	ldrh	r2, [r7, #6]
 80051b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	d10e      	bne.n	80051e2 <UART_Start_Receive_IT+0x52>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <UART_Start_Receive_IT+0x48>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80051d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051d6:	e02d      	b.n	8005234 <UART_Start_Receive_IT+0xa4>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	22ff      	movs	r2, #255	; 0xff
 80051dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e0:	e028      	b.n	8005234 <UART_Start_Receive_IT+0xa4>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <UART_Start_Receive_IT+0x76>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d104      	bne.n	80051fc <UART_Start_Receive_IT+0x6c>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051fa:	e01b      	b.n	8005234 <UART_Start_Receive_IT+0xa4>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	227f      	movs	r2, #127	; 0x7f
 8005200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005204:	e016      	b.n	8005234 <UART_Start_Receive_IT+0xa4>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520e:	d10d      	bne.n	800522c <UART_Start_Receive_IT+0x9c>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <UART_Start_Receive_IT+0x92>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	227f      	movs	r2, #127	; 0x7f
 800521c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005220:	e008      	b.n	8005234 <UART_Start_Receive_IT+0xa4>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	223f      	movs	r2, #63	; 0x3f
 8005226:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800522a:	e003      	b.n	8005234 <UART_Start_Receive_IT+0xa4>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2222      	movs	r2, #34	; 0x22
 8005240:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525a:	d107      	bne.n	800526c <UART_Start_Receive_IT+0xdc>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d103      	bne.n	800526c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a0c      	ldr	r2, [pc, #48]	; (8005298 <UART_Start_Receive_IT+0x108>)
 8005268:	665a      	str	r2, [r3, #100]	; 0x64
 800526a:	e002      	b.n	8005272 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a0b      	ldr	r2, [pc, #44]	; (800529c <UART_Start_Receive_IT+0x10c>)
 8005270:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005288:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	08005525 	.word	0x08005525
 800529c:	0800544d 	.word	0x0800544d

080052a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d107      	bne.n	80052e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0210 	bic.w	r2, r2, #16
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fb2f 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005336:	2b21      	cmp	r3, #33	; 0x21
 8005338:	d12b      	bne.n	8005392 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d110      	bne.n	8005368 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005354:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005364:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005366:	e014      	b.n	8005392 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	b292      	uxth	r2, r2
 8005374:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053aa:	2b21      	cmp	r3, #33	; 0x21
 80053ac:	d12f      	bne.n	800540e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d110      	bne.n	80053dc <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80053da:	e018      	b.n	800540e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ee:	b292      	uxth	r2, r2
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	1c9a      	adds	r2, r3, #2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005430:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fa94 	bl	800496c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800545a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005460:	2b22      	cmp	r3, #34	; 0x22
 8005462:	d151      	bne.n	8005508 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800546a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800546c:	89bb      	ldrh	r3, [r7, #12]
 800546e:	b2d9      	uxtb	r1, r3
 8005470:	89fb      	ldrh	r3, [r7, #14]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	400a      	ands	r2, r1
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d13a      	bne.n	800551c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10f      	bne.n	80054fa <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0210 	bic.w	r2, r2, #16
 80054e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fa4e 	bl	8004994 <HAL_UARTEx_RxEventCallback>
 80054f8:	e002      	b.n	8005500 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fb fb9e 	bl	8000c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005506:	e009      	b.n	800551c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	8b1b      	ldrh	r3, [r3, #24]
 800550e:	b29a      	uxth	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0208 	orr.w	r2, r2, #8
 8005518:	b292      	uxth	r2, r2
 800551a:	831a      	strh	r2, [r3, #24]
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005532:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005538:	2b22      	cmp	r3, #34	; 0x22
 800553a:	d151      	bne.n	80055e0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005542:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800554a:	89ba      	ldrh	r2, [r7, #12]
 800554c:	89fb      	ldrh	r3, [r7, #14]
 800554e:	4013      	ands	r3, r2
 8005550:	b29a      	uxth	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	1c9a      	adds	r2, r3, #2
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d13a      	bne.n	80055f4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800558c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10f      	bne.n	80055d2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0210 	bic.w	r2, r2, #16
 80055c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff f9e2 	bl	8004994 <HAL_UARTEx_RxEventCallback>
 80055d0:	e002      	b.n	80055d8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fb fb32 	bl	8000c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055de:	e009      	b.n	80055f4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	8b1b      	ldrh	r3, [r3, #24]
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0208 	orr.w	r2, r2, #8
 80055f0:	b292      	uxth	r2, r2
 80055f2:	831a      	strh	r2, [r3, #24]
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <__libc_init_array>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	4d0d      	ldr	r5, [pc, #52]	; (8005648 <__libc_init_array+0x38>)
 8005614:	4c0d      	ldr	r4, [pc, #52]	; (800564c <__libc_init_array+0x3c>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	2600      	movs	r6, #0
 800561c:	42a6      	cmp	r6, r4
 800561e:	d109      	bne.n	8005634 <__libc_init_array+0x24>
 8005620:	4d0b      	ldr	r5, [pc, #44]	; (8005650 <__libc_init_array+0x40>)
 8005622:	4c0c      	ldr	r4, [pc, #48]	; (8005654 <__libc_init_array+0x44>)
 8005624:	f000 f820 	bl	8005668 <_init>
 8005628:	1b64      	subs	r4, r4, r5
 800562a:	10a4      	asrs	r4, r4, #2
 800562c:	2600      	movs	r6, #0
 800562e:	42a6      	cmp	r6, r4
 8005630:	d105      	bne.n	800563e <__libc_init_array+0x2e>
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	f855 3b04 	ldr.w	r3, [r5], #4
 8005638:	4798      	blx	r3
 800563a:	3601      	adds	r6, #1
 800563c:	e7ee      	b.n	800561c <__libc_init_array+0xc>
 800563e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005642:	4798      	blx	r3
 8005644:	3601      	adds	r6, #1
 8005646:	e7f2      	b.n	800562e <__libc_init_array+0x1e>
 8005648:	080056d0 	.word	0x080056d0
 800564c:	080056d0 	.word	0x080056d0
 8005650:	080056d0 	.word	0x080056d0
 8005654:	080056d4 	.word	0x080056d4

08005658 <memset>:
 8005658:	4402      	add	r2, r0
 800565a:	4603      	mov	r3, r0
 800565c:	4293      	cmp	r3, r2
 800565e:	d100      	bne.n	8005662 <memset+0xa>
 8005660:	4770      	bx	lr
 8005662:	f803 1b01 	strb.w	r1, [r3], #1
 8005666:	e7f9      	b.n	800565c <memset+0x4>

08005668 <_init>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr

08005674 <_fini>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr
