
LAB_LED_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e3c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005030  08005030  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005038  08005038  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  0800504c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000148  0800504c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012014  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002430  00000000  00000000  00032050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00034480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00035430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296fd  00000000  00000000  000362e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a47  00000000  00000000  0005f9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffcdb  00000000  00000000  0007142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004118  00000000  00000000  0017115c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004fd0 	.word	0x08004fd0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004fd0 	.word	0x08004fd0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_GPIO_Init>:
     PB10   ------> SAI1_SCK_A
     PH8   ------> DCMI_HSYNC
     PB12   ------> S_DATAIN1DFSDM1
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08e      	sub	sp, #56	; 0x38
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80004fa:	4bb1      	ldr	r3, [pc, #708]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4ab0      	ldr	r2, [pc, #704]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4bae      	ldr	r3, [pc, #696]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4bab      	ldr	r3, [pc, #684]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4aaa      	ldr	r2, [pc, #680]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4ba8      	ldr	r3, [pc, #672]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	61fb      	str	r3, [r7, #28]
 8000528:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052a:	4ba5      	ldr	r3, [pc, #660]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4aa4      	ldr	r2, [pc, #656]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4ba2      	ldr	r3, [pc, #648]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0310 	and.w	r3, r3, #16
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b9f      	ldr	r3, [pc, #636]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a9e      	ldr	r2, [pc, #632]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b9c      	ldr	r3, [pc, #624]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b99      	ldr	r3, [pc, #612]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a98      	ldr	r2, [pc, #608]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b96      	ldr	r3, [pc, #600]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000572:	4b93      	ldr	r3, [pc, #588]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a92      	ldr	r2, [pc, #584]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b90      	ldr	r3, [pc, #576]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800058a:	f001 fa95 	bl	8001ab8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058e:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a8b      	ldr	r2, [pc, #556]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b89      	ldr	r3, [pc, #548]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b86      	ldr	r3, [pc, #536]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a85      	ldr	r2, [pc, #532]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b83      	ldr	r3, [pc, #524]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b80      	ldr	r3, [pc, #512]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a7f      	ldr	r2, [pc, #508]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80005c4:	f043 0320 	orr.w	r3, r3, #32
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b7d      	ldr	r3, [pc, #500]	; (80007c0 <MX_GPIO_Init+0x2dc>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	487a      	ldr	r0, [pc, #488]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 80005dc:	f001 f9be 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2143      	movs	r1, #67	; 0x43
 80005e4:	4878      	ldr	r0, [pc, #480]	; (80007c8 <MX_GPIO_Init+0x2e4>)
 80005e6:	f001 f9b9 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2140      	movs	r1, #64	; 0x40
 80005ee:	4877      	ldr	r0, [pc, #476]	; (80007cc <MX_GPIO_Init+0x2e8>)
 80005f0:	f001 f9b4 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	4875      	ldr	r0, [pc, #468]	; (80007d0 <MX_GPIO_Init+0x2ec>)
 80005fc:	f001 f9ae 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	4b73      	ldr	r3, [pc, #460]	; (80007d4 <MX_GPIO_Init+0x2f0>)
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060a:	2302      	movs	r3, #2
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	4619      	mov	r1, r3
 8000614:	486b      	ldr	r0, [pc, #428]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 8000616:	f001 f80f 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800061a:	2304      	movs	r3, #4
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061e:	4b6d      	ldr	r3, [pc, #436]	; (80007d4 <MX_GPIO_Init+0x2f0>)
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	4619      	mov	r1, r3
 800062c:	4866      	ldr	r0, [pc, #408]	; (80007c8 <MX_GPIO_Init+0x2e4>)
 800062e:	f001 f803 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000632:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000644:	230c      	movs	r3, #12
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	4619      	mov	r1, r3
 800064e:	4862      	ldr	r0, [pc, #392]	; (80007d8 <MX_GPIO_Init+0x2f4>)
 8000650:	f000 fff2 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000654:	2330      	movs	r3, #48	; 0x30
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000664:	2305      	movs	r3, #5
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	4858      	ldr	r0, [pc, #352]	; (80007d0 <MX_GPIO_Init+0x2ec>)
 8000670:	f000 ffe2 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8000674:	f248 0320 	movw	r3, #32800	; 0x8020
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000686:	2305      	movs	r3, #5
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f000 ffd0 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000698:	2301      	movs	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4845      	ldr	r0, [pc, #276]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 80006b0:	f000 ffc2 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80006b4:	f645 7320 	movw	r3, #24352	; 0x5f20
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80006c6:	230a      	movs	r3, #10
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4619      	mov	r1, r3
 80006d0:	483d      	ldr	r0, [pc, #244]	; (80007c8 <MX_GPIO_Init+0x2e4>)
 80006d2:	f000 ffb1 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_UP_Pin;
 80006d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	4619      	mov	r1, r3
 80006ea:	4836      	ldr	r0, [pc, #216]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 80006ec:	f000 ffa4 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80006f0:	23b0      	movs	r3, #176	; 0xb0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000700:	230a      	movs	r3, #10
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	4619      	mov	r1, r3
 800070a:	482e      	ldr	r0, [pc, #184]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 800070c:	f000 ff94 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000710:	f240 233f 	movw	r3, #575	; 0x23f
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000722:	230c      	movs	r3, #12
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	4619      	mov	r1, r3
 800072c:	482b      	ldr	r0, [pc, #172]	; (80007dc <MX_GPIO_Init+0x2f8>)
 800072e:	f000 ff83 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000732:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000744:	230c      	movs	r3, #12
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074c:	4619      	mov	r1, r3
 800074e:	4824      	ldr	r0, [pc, #144]	; (80007e0 <MX_GPIO_Init+0x2fc>)
 8000750:	f000 ff72 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000754:	2340      	movs	r3, #64	; 0x40
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000764:	2303      	movs	r3, #3
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	4815      	ldr	r0, [pc, #84]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 8000770:	f000 ff62 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8000774:	2306      	movs	r3, #6
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000784:	2305      	movs	r3, #5
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_GPIO_Init+0x2e0>)
 8000790:	f000 ff52 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8000794:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80007a6:	2303      	movs	r3, #3
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0x2e4>)
 80007b2:	f000 ff41 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
 80007bc:	e012      	b.n	80007e4 <MX_GPIO_Init+0x300>
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48002000 	.word	0x48002000
 80007c8:	48001c00 	.word	0x48001c00
 80007cc:	48000800 	.word	0x48000800
 80007d0:	48000400 	.word	0x48000400
 80007d4:	10110000 	.word	0x10110000
 80007d8:	48001000 	.word	0x48001000
 80007dc:	48001800 	.word	0x48001800
 80007e0:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e4:	2312      	movs	r3, #18
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f0:	2304      	movs	r3, #4
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	48bd      	ldr	r0, [pc, #756]	; (8000af0 <MX_GPIO_Init+0x60c>)
 80007fc:	f000 ff1c 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000810:	2307      	movs	r3, #7
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	48b5      	ldr	r0, [pc, #724]	; (8000af0 <MX_GPIO_Init+0x60c>)
 800081c:	f000 ff0c 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8000820:	235c      	movs	r3, #92	; 0x5c
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000830:	230d      	movs	r3, #13
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	48ae      	ldr	r0, [pc, #696]	; (8000af4 <MX_GPIO_Init+0x610>)
 800083c:	f000 fefc 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8000840:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000852:	2307      	movs	r3, #7
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	48a6      	ldr	r0, [pc, #664]	; (8000af8 <MX_GPIO_Init+0x614>)
 800085e:	f000 feeb 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000862:	2304      	movs	r3, #4
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000872:	230c      	movs	r3, #12
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	489f      	ldr	r0, [pc, #636]	; (8000afc <MX_GPIO_Init+0x618>)
 800087e:	f000 fedb 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8000882:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000894:	230c      	movs	r3, #12
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	4898      	ldr	r0, [pc, #608]	; (8000b00 <MX_GPIO_Init+0x61c>)
 80008a0:	f000 feca 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	4893      	ldr	r0, [pc, #588]	; (8000b04 <MX_GPIO_Init+0x620>)
 80008b8:	f000 febe 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80008bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ce:	230a      	movs	r3, #10
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 feac 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80008e0:	2320      	movs	r3, #32
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80008f0:	230a      	movs	r3, #10
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	487e      	ldr	r0, [pc, #504]	; (8000af4 <MX_GPIO_Init+0x610>)
 80008fc:	f000 fe9c 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8000900:	2343      	movs	r3, #67	; 0x43
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	487b      	ldr	r0, [pc, #492]	; (8000b04 <MX_GPIO_Init+0x620>)
 8000918:	f000 fe8e 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800091c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800092e:	230c      	movs	r3, #12
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4873      	ldr	r0, [pc, #460]	; (8000b08 <MX_GPIO_Init+0x624>)
 800093a:	f000 fe7d 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	486a      	ldr	r0, [pc, #424]	; (8000b00 <MX_GPIO_Init+0x61c>)
 8000956:	f000 fe6f 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800095a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	4b6a      	ldr	r3, [pc, #424]	; (8000b0c <MX_GPIO_Init+0x628>)
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4862      	ldr	r0, [pc, #392]	; (8000af8 <MX_GPIO_Init+0x614>)
 8000970:	f000 fe62 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8000986:	230e      	movs	r3, #14
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f000 fe50 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000998:	2384      	movs	r3, #132	; 0x84
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009a8:	2306      	movs	r3, #6
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4853      	ldr	r0, [pc, #332]	; (8000b00 <MX_GPIO_Init+0x61c>)
 80009b4:	f000 fe40 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 80009b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009be:	230b      	movs	r3, #11
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	484e      	ldr	r0, [pc, #312]	; (8000b08 <MX_GPIO_Init+0x624>)
 80009ce:	f000 fe33 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC1 PCPin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|GPIO_PIN_1|ARD_A2_Pin;
 80009d2:	231a      	movs	r3, #26
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009d6:	230b      	movs	r3, #11
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4846      	ldr	r0, [pc, #280]	; (8000b00 <MX_GPIO_Init+0x61c>)
 80009e6:	f000 fe27 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80009ea:	f640 0303 	movw	r3, #2051	; 0x803
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009fc:	230a      	movs	r3, #10
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	483a      	ldr	r0, [pc, #232]	; (8000af0 <MX_GPIO_Init+0x60c>)
 8000a08:	f000 fe16 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000a0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4833      	ldr	r0, [pc, #204]	; (8000af8 <MX_GPIO_Init+0x614>)
 8000a2a:	f000 fe05 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	482f      	ldr	r0, [pc, #188]	; (8000b00 <MX_GPIO_Init+0x61c>)
 8000a42:	f000 fdf9 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_GPIO_Init+0x628>)
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4829      	ldr	r0, [pc, #164]	; (8000b00 <MX_GPIO_Init+0x61c>)
 8000a5a:	f000 fded 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a62:	2312      	movs	r3, #18
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4822      	ldr	r0, [pc, #136]	; (8000b04 <MX_GPIO_Init+0x620>)
 8000a7a:	f000 fddd 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8000a7e:	2312      	movs	r3, #18
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a82:	230b      	movs	r3, #11
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fdd0 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8000a98:	23c8      	movs	r3, #200	; 0xc8
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fdbf 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8000aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_GPIO_Init+0x624>)
 8000ad0:	f000 fdb2 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8000ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	e00f      	b.n	8000b10 <MX_GPIO_Init+0x62c>
 8000af0:	48000400 	.word	0x48000400
 8000af4:	48001000 	.word	0x48001000
 8000af8:	48001800 	.word	0x48001800
 8000afc:	48000c00 	.word	0x48000c00
 8000b00:	48000800 	.word	0x48000800
 8000b04:	48001c00 	.word	0x48001c00
 8000b08:	48001400 	.word	0x48001400
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	4619      	mov	r1, r3
 8000b12:	482e      	ldr	r0, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x6e8>)
 8000b14:	f000 fd90 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4825      	ldr	r0, [pc, #148]	; (8000bcc <MX_GPIO_Init+0x6e8>)
 8000b36:	f000 fd7f 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481f      	ldr	r0, [pc, #124]	; (8000bcc <MX_GPIO_Init+0x6e8>)
 8000b4e:	f000 fd73 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_CKA_Pin;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b64:	230d      	movs	r3, #13
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_CKA_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4817      	ldr	r0, [pc, #92]	; (8000bcc <MX_GPIO_Init+0x6e8>)
 8000b70:	f000 fd62 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b86:	2306      	movs	r3, #6
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <MX_GPIO_Init+0x6e8>)
 8000b92:	f000 fd51 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_GPIO_Init+0x6e8>)
 8000bb0:	f000 fd42 	bl	8001638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2028      	movs	r0, #40	; 0x28
 8000bba:	f000 fc88 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bbe:	2028      	movs	r0, #40	; 0x28
 8000bc0:	f000 fca1 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 8000bc4:	bf00      	nop
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <HAL_GPIO_EXTI_Callback>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <HAL_GPIO_EXTI_Callback+0x1c>)
 8000be0:	f000 fed4 	bl	800198c <HAL_GPIO_TogglePin>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	48000400 	.word	0x48000400

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f000 fb1b 	bl	800122e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf8:	f000 f809 	bl	8000c0e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfc:	f7ff fc72 	bl	80004e4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000c00:	f000 f8fc 	bl	8000dfc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 fa32 	bl	800106c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000c08:	f000 f946 	bl	8000e98 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x1c>

08000c0e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b096      	sub	sp, #88	; 0x58
 8000c12:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2244      	movs	r2, #68	; 0x44
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f9cf 	bl	8004fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c34:	f000 feea 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c3e:	f000 f837 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c42:	2302      	movs	r3, #2
 8000c44:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2302      	movs	r3, #2
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c54:	2302      	movs	r3, #2
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 ff31 	bl	8001ad8 <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c7c:	f000 f818 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2303      	movs	r3, #3
 8000c86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	2104      	movs	r1, #4
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fb43 	bl	8002324 <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca4:	f000 f804 	bl	8000cb0 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3758      	adds	r7, #88	; 0x58
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 fac2 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM3_IRQHandler+0x10>)
 8000d5e:	f002 fa69 	bl	8003234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000074 	.word	0x20000074

08000d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <USART2_IRQHandler+0x10>)
 8000d72:	f003 fa85 	bl	8004280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000c0 	.word	0x200000c0

08000d80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d88:	f000 fe1a 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000d8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d90:	f000 fe16 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <SystemInit+0x5c>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <SystemInit+0x5c>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <SystemInit+0x60>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <SystemInit+0x60>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <SystemInit+0x60>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <SystemInit+0x60>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <SystemInit+0x60>)
 8000dc4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dc8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <SystemInit+0x60>)
 8000dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <SystemInit+0x60>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <SystemInit+0x60>)
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SystemInit+0x60>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	40021000 	.word	0x40021000

08000dfc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <MX_TIM3_Init+0x98>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e22:	224f      	movs	r2, #79	; 0x4f
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e2e:	2263      	movs	r2, #99	; 0x63
 8000e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e40:	f002 f940 	bl	80030c4 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f7ff ff31 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e5c:	f002 fc1a 	bl	8003694 <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e66:	f7ff ff23 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e78:	f003 f90e 	bl	8004098 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e82:	f7ff ff15 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000074 	.word	0x20000074
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <MX_TIM4_Init+0xec>)
 8000ece:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000ed2:	224f      	movs	r2, #79	; 0x4f
 8000ed4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ef0:	4823      	ldr	r0, [pc, #140]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000ef2:	f002 f8e7 	bl	80030c4 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000efc:	f7ff fed8 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481c      	ldr	r0, [pc, #112]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000f0e:	f002 fbc1 	bl	8003694 <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000f18:	f7ff feca 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f1c:	4818      	ldr	r0, [pc, #96]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000f1e:	f002 f928 	bl	8003172 <HAL_TIM_PWM_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000f28:	f7ff fec2 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000f3c:	f003 f8ac 	bl	8004098 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f46:	f7ff feb3 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4a:	2360      	movs	r3, #96	; 0x60
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8000f4e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	220c      	movs	r2, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000f64:	f002 fa86 	bl	8003474 <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000f6e:	f7ff fe9f 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <MX_TIM4_Init+0xe8>)
 8000f74:	f000 f842 	bl	8000ffc <HAL_TIM_MspPostInit>

}
 8000f78:	bf00      	nop
 8000f7a:	3738      	adds	r7, #56	; 0x38
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000028 	.word	0x20000028
 8000f84:	40000800 	.word	0x40000800

08000f88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_TIM_Base_MspInit+0x68>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d114      	bne.n	8000fc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	201d      	movs	r0, #29
 8000fb8:	f000 fa89 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fbc:	201d      	movs	r0, #29
 8000fbe:	f000 faa2 	bl	8001506 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fc2:	e010      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_TIM_Base_MspInit+0x70>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40000800 	.word	0x40000800

08000ffc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_TIM_MspPostInit+0x64>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d11c      	bne.n	8001058 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_TIM_MspPostInit+0x68>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_TIM_MspPostInit+0x68>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_TIM_MspPostInit+0x68>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_TIM_MspPostInit+0x6c>)
 8001054:	f000 faf0 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40000800 	.word	0x40000800
 8001064:	40021000 	.word	0x40021000
 8001068:	48000400 	.word	0x48000400

0800106c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <MX_USART2_UART_Init+0x5c>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 80010b0:	f003 f898 	bl	80041e4 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ba:	f7ff fdf9 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000c0 	.word	0x200000c0
 80010c8:	40004400 	.word	0x40004400

080010cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ae      	sub	sp, #184	; 0xb8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	228c      	movs	r2, #140	; 0x8c
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 ff67 	bl	8004fc0 <memset>
  if(uartHandle->Instance==USART2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <HAL_UART_MspInit+0x104>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d164      	bne.n	80011c6 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001100:	2300      	movs	r3, #0
 8001102:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fb11 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001114:	f7ff fdcc 	bl	8000cb0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_UART_MspInit+0x108>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <HAL_UART_MspInit+0x108>)
 800111e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001122:	6593      	str	r3, [r2, #88]	; 0x58
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_UART_MspInit+0x108>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <HAL_UART_MspInit+0x108>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <HAL_UART_MspInit+0x108>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_UART_MspInit+0x108>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_UART_MspInit+0x108>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <HAL_UART_MspInit+0x108>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_UART_MspInit+0x108>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001178:	2307      	movs	r3, #7
 800117a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001182:	4619      	mov	r1, r3
 8001184:	4814      	ldr	r0, [pc, #80]	; (80011d8 <HAL_UART_MspInit+0x10c>)
 8001186:	f000 fa57 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800118a:	2304      	movs	r3, #4
 800118c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a2:	2307      	movs	r3, #7
 80011a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fa41 	bl	8001638 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2026      	movs	r0, #38	; 0x26
 80011bc:	f000 f987 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c0:	2026      	movs	r0, #38	; 0x26
 80011c2:	f000 f9a0 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	37b8      	adds	r7, #184	; 0xb8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40004400 	.word	0x40004400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000c00 	.word	0x48000c00

080011dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff fdda 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011e6:	e003      	b.n	80011f0 <LoopCopyDataInit>

080011e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011ee:	3104      	adds	r1, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <LoopForever+0xa>)
	ldr	r3, =_edata
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011f8:	d3f6      	bcc.n	80011e8 <CopyDataInit>
	ldr	r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011fc:	e002      	b.n	8001204 <LoopFillZerobss>

080011fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001200:	f842 3b04 	str.w	r3, [r2], #4

08001204 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <LoopForever+0x16>)
	cmp	r2, r3
 8001206:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001208:	d3f9      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f003 feb5 	bl	8004f78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120e:	f7ff fcef 	bl	8000bf0 <main>

08001212 <LoopForever>:

LoopForever:
    b LoopForever
 8001212:	e7fe      	b.n	8001212 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001214:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8001218:	08005040 	.word	0x08005040
	ldr	r0, =_sdata
 800121c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001220:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001224:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001228:	20000148 	.word	0x20000148

0800122c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_2_IRQHandler>

0800122e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f93d 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f80e 	bl	8001260 <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e001      	b.n	8001254 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001250:	f7ff fd34 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001254:	79fb      	ldrb	r3, [r7, #7]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_InitTick+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_InitTick+0x70>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_InitTick+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f949 	bl	8001522 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d809      	bhi.n	80012b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f913 	bl	80014ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_InitTick+0x74>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e007      	b.n	80012c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e004      	b.n	80012c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e001      	b.n	80012c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000144 	.word	0x20000144

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000144 	.word	0x20000144

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff29 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff3e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff31 	bl	800137c <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d008      	beq.n	8001564 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e022      	b.n	80015aa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020e 	bic.w	r2, r2, #14
 8001572:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	f003 021c 	and.w	r2, r3, #28
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d005      	beq.n	80015da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2204      	movs	r2, #4
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e029      	b.n	800162e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020e 	bic.w	r2, r2, #14
 80015e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f003 021c 	and.w	r2, r3, #28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
    }
  }
  return status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	e166      	b.n	8001916 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8158 	beq.w	8001910 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d00b      	beq.n	8001680 <HAL_GPIO_Init+0x48>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001674:	2b11      	cmp	r3, #17
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d130      	bne.n	80016e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 0201 	and.w	r2, r3, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0xea>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b12      	cmp	r3, #18
 8001720:	d123      	bne.n	800176a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0203 	and.w	r2, r3, #3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80b2 	beq.w	8001910 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b0:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6613      	str	r3, [r2, #96]	; 0x60
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 80017ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017c4:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_GPIO_Init+0x300>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ee:	d02b      	beq.n	8001848 <HAL_GPIO_Init+0x210>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_GPIO_Init+0x304>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d025      	beq.n	8001844 <HAL_GPIO_Init+0x20c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a51      	ldr	r2, [pc, #324]	; (8001940 <HAL_GPIO_Init+0x308>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d01f      	beq.n	8001840 <HAL_GPIO_Init+0x208>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a50      	ldr	r2, [pc, #320]	; (8001944 <HAL_GPIO_Init+0x30c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d019      	beq.n	800183c <HAL_GPIO_Init+0x204>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4f      	ldr	r2, [pc, #316]	; (8001948 <HAL_GPIO_Init+0x310>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <HAL_GPIO_Init+0x200>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a4e      	ldr	r2, [pc, #312]	; (800194c <HAL_GPIO_Init+0x314>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_GPIO_Init+0x1fc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a4d      	ldr	r2, [pc, #308]	; (8001950 <HAL_GPIO_Init+0x318>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x1f8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_GPIO_Init+0x31c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_GPIO_Init+0x1f4>
 8001828:	2307      	movs	r3, #7
 800182a:	e00e      	b.n	800184a <HAL_GPIO_Init+0x212>
 800182c:	2308      	movs	r3, #8
 800182e:	e00c      	b.n	800184a <HAL_GPIO_Init+0x212>
 8001830:	2306      	movs	r3, #6
 8001832:	e00a      	b.n	800184a <HAL_GPIO_Init+0x212>
 8001834:	2305      	movs	r3, #5
 8001836:	e008      	b.n	800184a <HAL_GPIO_Init+0x212>
 8001838:	2304      	movs	r3, #4
 800183a:	e006      	b.n	800184a <HAL_GPIO_Init+0x212>
 800183c:	2303      	movs	r3, #3
 800183e:	e004      	b.n	800184a <HAL_GPIO_Init+0x212>
 8001840:	2302      	movs	r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x212>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_GPIO_Init+0x212>
 8001848:	2300      	movs	r3, #0
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	f002 0203 	and.w	r2, r2, #3
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	4093      	lsls	r3, r2
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185a:	4937      	ldr	r1, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x300>)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_GPIO_Init+0x320>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_GPIO_Init+0x320>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_GPIO_Init+0x320>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018b6:	4a28      	ldr	r2, [pc, #160]	; (8001958 <HAL_GPIO_Init+0x320>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018bc:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x320>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e0:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x320>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_GPIO_Init+0x320>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_GPIO_Init+0x320>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f ae91 	bne.w	8001648 <HAL_GPIO_Init+0x10>
  }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	48000400 	.word	0x48000400
 8001940:	48000800 	.word	0x48000800
 8001944:	48000c00 	.word	0x48000c00
 8001948:	48001000 	.word	0x48001000
 800194c:	48001400 	.word	0x48001400
 8001950:	48001800 	.word	0x48001800
 8001954:	48001c00 	.word	0x48001c00
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e002      	b.n	8001980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43d9      	mvns	r1, r3
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	400b      	ands	r3, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8f6 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1a:	d130      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d038      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	e002      	b.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d102      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f2      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d110      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e00f      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d007      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6053      	str	r3, [r2, #4]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f000 bc16 	b.w	8002318 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aec:	4ba0      	ldr	r3, [pc, #640]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af6:	4b9e      	ldr	r3, [pc, #632]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80e4 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4c>
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	f040 808b 	bne.w	8001c32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 8087 	bne.w	8001c32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_OscConfig+0x64>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e3ed      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1a      	ldr	r2, [r3, #32]
 8001b40:	4b8b      	ldr	r3, [pc, #556]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_RCC_OscConfig+0x7e>
 8001b4c:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b54:	e005      	b.n	8001b62 <HAL_RCC_OscConfig+0x8a>
 8001b56:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d223      	bcs.n	8001bae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fd80 	bl	8002670 <RCC_SetFlashLatencyFromMSIRange>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e3ce      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b7a:	4b7d      	ldr	r3, [pc, #500]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7c      	ldr	r2, [pc, #496]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b7a      	ldr	r3, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4977      	ldr	r1, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b98:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	4972      	ldr	r1, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
 8001bac:	e025      	b.n	8001bfa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bae:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6f      	ldr	r2, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bb4:	f043 0308 	orr.w	r3, r3, #8
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	496a      	ldr	r1, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	4965      	ldr	r1, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fd40 	bl	8002670 <RCC_SetFlashLatencyFromMSIRange>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e38e      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bfa:	f000 fc75 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b5b      	ldr	r3, [pc, #364]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	495a      	ldr	r1, [pc, #360]	; (8001d74 <HAL_RCC_OscConfig+0x29c>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x2a0>)
 8001c18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c1a:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <HAL_RCC_OscConfig+0x2a4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fb1e 	bl	8001260 <HAL_InitTick>
 8001c24:	4603      	mov	r3, r0
 8001c26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d052      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	e372      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d032      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c3a:	4b4d      	ldr	r3, [pc, #308]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fb5b 	bl	8001300 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fb57 	bl	8001300 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e35b      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6c:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a3f      	ldr	r2, [pc, #252]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	493a      	ldr	r1, [pc, #232]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	4935      	ldr	r1, [pc, #212]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
 8001c9e:	e01a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fb28 	bl	8001300 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fb24 	bl	8001300 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e328      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1dc>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d073      	beq.n	8001dca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x21c>
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d10e      	bne.n	8001d0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d10b      	bne.n	8001d0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d063      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d15f      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e305      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x24c>
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0x288>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x270>
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x288>
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff faca 	bl	8001300 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	e010      	b.n	8001d92 <HAL_RCC_OscConfig+0x2ba>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08004fe8 	.word	0x08004fe8
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fabe 	bl	8001300 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e2c2      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d92:	4baf      	ldr	r3, [pc, #700]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2a8>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff faae 	bl	8001300 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff faaa 	bl	8001300 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2ae      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dba:	4ba5      	ldr	r3, [pc, #660]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2d0>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d060      	beq.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x310>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d119      	bne.n	8001e16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d116      	bne.n	8001e16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de8:	4b99      	ldr	r3, [pc, #612]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x328>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e28b      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b93      	ldr	r3, [pc, #588]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	4990      	ldr	r1, [pc, #576]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e14:	e040      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d023      	beq.n	8001e66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a8b      	ldr	r2, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fa69 	bl	8001300 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fa65 	bl	8001300 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e269      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b7f      	ldr	r3, [pc, #508]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	497c      	ldr	r1, [pc, #496]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
 8001e64:	e018      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e66:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a79      	ldr	r2, [pc, #484]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff fa45 	bl	8001300 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fa41 	bl	8001300 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e245      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8c:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d03c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fa20 	bl	8001300 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fa1c 	bl	8001300 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e220      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed6:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x3ec>
 8001ee4:	e01b      	b.n	8001f1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fa03 	bl	8001300 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff f9ff 	bl	8001300 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e203      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ef      	bne.n	8001efe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80a6 	beq.w	8002078 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d118      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f70:	f7ff f9c6 	bl	8001300 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f78:	f7ff f9c2 	bl	8001300 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1c6      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x4d8>
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fae:	e024      	b.n	8001ffa <HAL_RCC_OscConfig+0x522>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d110      	bne.n	8001fda <HAL_RCC_OscConfig+0x502>
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd8:	e00f      	b.n	8001ffa <HAL_RCC_OscConfig+0x522>
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	f023 0304 	bic.w	r3, r3, #4
 8001ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff f97d 	bl	8001300 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff f979 	bl	8001300 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e17b      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ed      	beq.n	800200a <HAL_RCC_OscConfig+0x532>
 800202e:	e01a      	b.n	8002066 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff f966 	bl	8001300 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002036:	e00f      	b.n	8002058 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff f962 	bl	8001300 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d906      	bls.n	8002058 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e164      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002058:	4ba8      	ldr	r3, [pc, #672]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1e8      	bne.n	8002038 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002066:	7ffb      	ldrb	r3, [r7, #31]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4ba3      	ldr	r3, [pc, #652]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	4aa2      	ldr	r2, [pc, #648]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002076:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d03c      	beq.n	80020fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800208c:	4b9b      	ldr	r3, [pc, #620]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800208e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002092:	4a9a      	ldr	r2, [pc, #616]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff f930 	bl	8001300 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a4:	f7ff f92c 	bl	8001300 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e130      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020b6:	4b91      	ldr	r3, [pc, #580]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80020b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ef      	beq.n	80020a4 <HAL_RCC_OscConfig+0x5cc>
 80020c4:	e01b      	b.n	80020fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c6:	4b8d      	ldr	r3, [pc, #564]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80020c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020cc:	4a8b      	ldr	r2, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7ff f913 	bl	8001300 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020de:	f7ff f90f 	bl	8001300 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e113      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80020f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ef      	bne.n	80020de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8107 	beq.w	8002316 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	2b02      	cmp	r3, #2
 800210e:	f040 80cb 	bne.w	80022a8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002112:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0203 	and.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	429a      	cmp	r2, r3
 8002124:	d12c      	bne.n	8002180 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	3b01      	subs	r3, #1
 8002132:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d123      	bne.n	8002180 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002142:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d11b      	bne.n	8002180 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d113      	bne.n	8002180 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	3b01      	subs	r3, #1
 8002166:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d109      	bne.n	8002180 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d06d      	beq.n	800225c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d068      	beq.n	8002258 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0ba      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021a2:	4b56      	ldr	r3, [pc, #344]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a55      	ldr	r2, [pc, #340]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80021a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ae:	f7ff f8a7 	bl	8001300 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff f8a3 	bl	8001300 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0a7      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d4:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCC_OscConfig+0x828>)
 80021da:	4013      	ands	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021e4:	3a01      	subs	r2, #1
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ee:	0212      	lsls	r2, r2, #8
 80021f0:	4311      	orrs	r1, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021f6:	0852      	lsrs	r2, r2, #1
 80021f8:	3a01      	subs	r2, #1
 80021fa:	0552      	lsls	r2, r2, #21
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002202:	0852      	lsrs	r2, r2, #1
 8002204:	3a01      	subs	r2, #1
 8002206:	0652      	lsls	r2, r2, #25
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800220e:	06d2      	lsls	r2, r2, #27
 8002210:	430a      	orrs	r2, r1
 8002212:	493a      	ldr	r1, [pc, #232]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002214:	4313      	orrs	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002218:	4b38      	ldr	r3, [pc, #224]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a37      	ldr	r2, [pc, #220]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002224:	4b35      	ldr	r3, [pc, #212]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a34      	ldr	r2, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002230:	f7ff f866 	bl	8001300 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7ff f862 	bl	8001300 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e066      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002256:	e05e      	b.n	8002316 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e05d      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d156      	bne.n	8002316 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002280:	f7ff f83e 	bl	8001300 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff f83a 	bl	8001300 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e03e      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x7b0>
 80022a6:	e036      	b.n	8002316 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d031      	beq.n	8002312 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80022b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80022cc:	f023 0303 	bic.w	r3, r3, #3
 80022d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_OscConfig+0x824>)
 80022d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7ff f80d 	bl	8001300 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	e00c      	b.n	8002304 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff f809 	bl	8001300 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d905      	bls.n	8002304 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e00d      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
 80022fc:	40021000 	.word	0x40021000
 8002300:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x848>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ec      	bne.n	80022ea <HAL_RCC_OscConfig+0x812>
 8002310:	e001      	b.n	8002316 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0c8      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4961      	ldr	r1, [pc, #388]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b0      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d04c      	beq.n	800240e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d107      	bne.n	800238c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237c:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d121      	bne.n	80023cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e09e      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d115      	bne.n	80023cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e092      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e086      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e07e      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023cc:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 0203 	bic.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	493f      	ldr	r1, [pc, #252]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023de:	f7fe ff8f 	bl	8001300 <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e6:	f7fe ff8b 	bl	8001300 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e066      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 020c 	and.w	r2, r3, #12
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	429a      	cmp	r2, r3
 800240c:	d1eb      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241a:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	492c      	ldr	r1, [pc, #176]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d210      	bcs.n	800245c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4924      	ldr	r1, [pc, #144]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e036      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4918      	ldr	r1, [pc, #96]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4910      	ldr	r1, [pc, #64]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249a:	f000 f825 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_ClockConfig+0x1b4>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490c      	ldr	r1, [pc, #48]	; (80024dc <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fece 	bl	8001260 <HAL_InitTick>
 80024c4:	4603      	mov	r3, r0
 80024c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80024c8:	7afb      	ldrb	r3, [r7, #11]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08004fe8 	.word	0x08004fe8
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d121      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d11e      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800251c:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002528:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e005      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d102      	bne.n	8002566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e004      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d101      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 800256e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d134      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0xa6>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d003      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
 800258c:	e005      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002590:	617b      	str	r3, [r7, #20]
      break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	3301      	adds	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	fb02 f203 	mul.w	r2, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	0e5b      	lsrs	r3, r3, #25
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	3301      	adds	r3, #1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025e0:	69bb      	ldr	r3, [r7, #24]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08005000 	.word	0x08005000
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	08004ff8 	.word	0x08004ff8

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002648:	f7ff ffda 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_RCC_GetPCLK2Freq+0x28>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	08004ff8 	.word	0x08004ff8

08002670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002688:	f7ff f9b2 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 800268c:	6178      	str	r0, [r7, #20]
 800268e:	e014      	b.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6593      	str	r3, [r2, #88]	; 0x58
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026a8:	f7ff f9a2 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 80026ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c0:	d10b      	bne.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d919      	bls.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2ba0      	cmp	r3, #160	; 0xa0
 80026cc:	d902      	bls.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ce:	2302      	movs	r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e013      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e010      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d902      	bls.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026e0:	2303      	movs	r3, #3
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e00a      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d102      	bne.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ec:	2302      	movs	r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e004      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b70      	cmp	r3, #112	; 0x70
 80026f6:	d101      	bne.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026f8:	2301      	movs	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 0207 	bic.w	r2, r3, #7
 8002704:	4909      	ldr	r1, [pc, #36]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002738:	2300      	movs	r3, #0
 800273a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800273c:	2300      	movs	r3, #0
 800273e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d041      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002750:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002754:	d02a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002756:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800275a:	d824      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800275c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002766:	d81e      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800276c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002770:	d010      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002772:	e018      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002774:	4b86      	ldr	r3, [pc, #536]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a85      	ldr	r2, [pc, #532]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002780:	e015      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 facd 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002792:	e00c      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3320      	adds	r3, #32
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fbb6 	bl	8002f0c <RCCEx_PLLSAI2_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a4:	e003      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	74fb      	strb	r3, [r7, #19]
      break;
 80027aa:	e000      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b4:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c2:	4973      	ldr	r1, [pc, #460]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ca:	e001      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d041      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027e4:	d02a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ea:	d824      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f0:	d008      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f6:	d81e      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002800:	d010      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002802:	e018      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002804:	4b62      	ldr	r3, [pc, #392]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a61      	ldr	r2, [pc, #388]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002810:	e015      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fa85 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002822:	e00c      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3320      	adds	r3, #32
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fb6e 	bl	8002f0c <RCCEx_PLLSAI2_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002834:	e003      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	74fb      	strb	r3, [r7, #19]
      break;
 800283a:	e000      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800283c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002844:	4b52      	ldr	r3, [pc, #328]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	494f      	ldr	r1, [pc, #316]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800285a:	e001      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a0 	beq.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	4b41      	ldr	r3, [pc, #260]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	4a40      	ldr	r2, [pc, #256]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002892:	6593      	str	r3, [r2, #88]	; 0x58
 8002894:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3a      	ldr	r2, [pc, #232]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b0:	f7fe fd26 	bl	8001300 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028b6:	e009      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe fd22 	bl	8001300 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d902      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	74fb      	strb	r3, [r7, #19]
        break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d15c      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d019      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002906:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	4a20      	ldr	r2, [pc, #128]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d016      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fce1 	bl	8001300 <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002940:	e00b      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe fcdd 	bl	8001300 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d902      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	74fb      	strb	r3, [r7, #19]
            break;
 8002958:	e006      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ec      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002986:	e009      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
 800298c:	e006      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299c:	7c7b      	ldrb	r3, [r7, #17]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4ba6      	ldr	r3, [pc, #664]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	4aa5      	ldr	r2, [pc, #660]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ba:	4ba0      	ldr	r3, [pc, #640]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f023 0203 	bic.w	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	499c      	ldr	r1, [pc, #624]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029dc:	4b97      	ldr	r3, [pc, #604]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 020c 	bic.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	4994      	ldr	r1, [pc, #592]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029fe:	4b8f      	ldr	r3, [pc, #572]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	498b      	ldr	r1, [pc, #556]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a20:	4b86      	ldr	r3, [pc, #536]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4983      	ldr	r1, [pc, #524]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a42:	4b7e      	ldr	r3, [pc, #504]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a50:	497a      	ldr	r1, [pc, #488]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a64:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4972      	ldr	r1, [pc, #456]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a86:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a94:	4969      	ldr	r1, [pc, #420]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aa8:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab6:	4961      	ldr	r1, [pc, #388]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	4958      	ldr	r1, [pc, #352]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	4950      	ldr	r1, [pc, #320]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0e:	4b4b      	ldr	r3, [pc, #300]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4947      	ldr	r1, [pc, #284]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b30:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	493f      	ldr	r1, [pc, #252]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b52:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4936      	ldr	r1, [pc, #216]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b72:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a31      	ldr	r2, [pc, #196]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7c:	60d3      	str	r3, [r2, #12]
 8002b7e:	e011      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f8c9 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d028      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbe:	491f      	ldr	r1, [pc, #124]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bce:	d106      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bda:	60d3      	str	r3, [r2, #12]
 8002bdc:	e011      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f89a 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d02a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1c:	4907      	ldr	r1, [pc, #28]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c2e:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4a02      	ldr	r2, [pc, #8]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c38:	60d3      	str	r3, [r2, #12]
 8002c3a:	e013      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002c3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f869 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d02f      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c70:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7e:	4929      	ldr	r1, [pc, #164]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	2102      	movs	r1, #2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f846 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d014      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	74bb      	strb	r3, [r7, #18]
 8002caa:	e011      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3320      	adds	r3, #32
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f925 	bl	8002f0c <RCCEx_PLLSAI2_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cec:	490d      	ldr	r1, [pc, #52]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d18:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d36:	4b74      	ldr	r3, [pc, #464]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d42:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0203 	and.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d10d      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
       ||
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d5a:	4b6b      	ldr	r3, [pc, #428]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
       ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d047      	beq.n	8002dfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e044      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d018      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0x86>
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d825      	bhi.n	8002dcc <RCCEx_PLLSAI1_Config+0xa4>
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d002      	beq.n	8002d8a <RCCEx_PLLSAI1_Config+0x62>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d009      	beq.n	8002d9c <RCCEx_PLLSAI1_Config+0x74>
 8002d88:	e020      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d8a:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11d      	bne.n	8002dd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9a:	e01a      	b.n	8002dd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d9c:	4b5a      	ldr	r3, [pc, #360]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d116      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dac:	e013      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dae:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dba:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dca:	e006      	b.n	8002dda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e004      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	430b      	orrs	r3, r1
 8002df8:	4943      	ldr	r1, [pc, #268]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d17c      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e04:	4b40      	ldr	r3, [pc, #256]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3f      	ldr	r2, [pc, #252]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fe fa76 	bl	8001300 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e16:	e009      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e18:	f7fe fa72 	bl	8001300 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2a:	e005      	b.n	8002e38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ef      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d15f      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d110      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	0211      	lsls	r1, r2, #8
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	06d2      	lsls	r2, r2, #27
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	492a      	ldr	r1, [pc, #168]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	610b      	str	r3, [r1, #16]
 8002e64:	e027      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d112      	bne.n	8002e92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	0211      	lsls	r1, r2, #8
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6912      	ldr	r2, [r2, #16]
 8002e82:	0852      	lsrs	r2, r2, #1
 8002e84:	3a01      	subs	r2, #1
 8002e86:	0552      	lsls	r2, r2, #21
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	491f      	ldr	r1, [pc, #124]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	610b      	str	r3, [r1, #16]
 8002e90:	e011      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	0211      	lsls	r1, r2, #8
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6952      	ldr	r2, [r2, #20]
 8002ea8:	0852      	lsrs	r2, r2, #1
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	0652      	lsls	r2, r2, #25
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	4915      	ldr	r1, [pc, #84]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fa1d 	bl	8001300 <HAL_GetTick>
 8002ec6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec8:	e009      	b.n	8002ede <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eca:	f7fe fa19 	bl	8001300 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d902      	bls.n	8002ede <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	73fb      	strb	r3, [r7, #15]
          break;
 8002edc:	e005      	b.n	8002eea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ef      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4903      	ldr	r1, [pc, #12]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000

08002f0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f1a:	4b69      	ldr	r3, [pc, #420]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d018      	beq.n	8002f58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f26:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0203 	and.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d10d      	bne.n	8002f52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
       ||
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f3e:	4b60      	ldr	r3, [pc, #384]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d047      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e044      	b.n	8002fe2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d018      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x86>
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d825      	bhi.n	8002fb0 <RCCEx_PLLSAI2_Config+0xa4>
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d002      	beq.n	8002f6e <RCCEx_PLLSAI2_Config+0x62>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d009      	beq.n	8002f80 <RCCEx_PLLSAI2_Config+0x74>
 8002f6c:	e020      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f6e:	4b54      	ldr	r3, [pc, #336]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11d      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7e:	e01a      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f80:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d116      	bne.n	8002fba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e013      	b.n	8002fba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f92:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f9e:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fae:	e006      	b.n	8002fbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb4:	e004      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fc6:	4b3e      	ldr	r3, [pc, #248]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	4938      	ldr	r1, [pc, #224]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d166      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fe8:	4b35      	ldr	r3, [pc, #212]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a34      	ldr	r2, [pc, #208]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fe f984 	bl	8001300 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ffa:	e009      	b.n	8003010 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ffc:	f7fe f980 	bl	8001300 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	73fb      	strb	r3, [r7, #15]
        break;
 800300e:	e005      	b.n	800301c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ef      	bne.n	8002ffc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d149      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d110      	bne.n	800304a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003030:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	0211      	lsls	r1, r2, #8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	06d2      	lsls	r2, r2, #27
 8003040:	430a      	orrs	r2, r1
 8003042:	491f      	ldr	r1, [pc, #124]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	614b      	str	r3, [r1, #20]
 8003048:	e011      	b.n	800306e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003052:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6892      	ldr	r2, [r2, #8]
 800305a:	0211      	lsls	r1, r2, #8
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6912      	ldr	r2, [r2, #16]
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	3a01      	subs	r2, #1
 8003064:	0652      	lsls	r2, r2, #25
 8003066:	430a      	orrs	r2, r1
 8003068:	4915      	ldr	r1, [pc, #84]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe f941 	bl	8001300 <HAL_GetTick>
 800307e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003080:	e009      	b.n	8003096 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003082:	f7fe f93d 	bl	8001300 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d902      	bls.n	8003096 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	73fb      	strb	r3, [r7, #15]
          break;
 8003094:	e005      	b.n	80030a2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ef      	beq.n	8003082 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e049      	b.n	800316a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd ff4c 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 fbbe 	bl	8003884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e049      	b.n	8003218 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f841 	bl	8003220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f000 fb67 	bl	8003884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0202 	mvn.w	r2, #2
 8003260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fae6 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fad8 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fae9 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0204 	mvn.w	r2, #4
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fabc 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 faae 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fabf 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0208 	mvn.w	r2, #8
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2204      	movs	r2, #4
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa92 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa84 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fa95 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b10      	cmp	r3, #16
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0210 	mvn.w	r2, #16
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2208      	movs	r2, #8
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa68 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa5a 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fa6b 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10e      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0201 	mvn.w	r2, #1
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa34 	bl	8003820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 feec 	bl	80041bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f2:	d10e      	bne.n	8003412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b80      	cmp	r3, #128	; 0x80
 8003400:	d107      	bne.n	8003412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800340a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fedf 	bl	80041d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d10e      	bne.n	800343e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d107      	bne.n	800343e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fa19 	bl	8003870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d10e      	bne.n	800346a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	d107      	bne.n	800346a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0220 	mvn.w	r2, #32
 8003462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fe9f 	bl	80041a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800348a:	2302      	movs	r3, #2
 800348c:	e0fd      	b.n	800368a <HAL_TIM_PWM_ConfigChannel+0x216>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b14      	cmp	r3, #20
 800349a:	f200 80f0 	bhi.w	800367e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	0800367f 	.word	0x0800367f
 80034ac:	0800367f 	.word	0x0800367f
 80034b0:	0800367f 	.word	0x0800367f
 80034b4:	08003539 	.word	0x08003539
 80034b8:	0800367f 	.word	0x0800367f
 80034bc:	0800367f 	.word	0x0800367f
 80034c0:	0800367f 	.word	0x0800367f
 80034c4:	0800357b 	.word	0x0800357b
 80034c8:	0800367f 	.word	0x0800367f
 80034cc:	0800367f 	.word	0x0800367f
 80034d0:	0800367f 	.word	0x0800367f
 80034d4:	080035bb 	.word	0x080035bb
 80034d8:	0800367f 	.word	0x0800367f
 80034dc:	0800367f 	.word	0x0800367f
 80034e0:	0800367f 	.word	0x0800367f
 80034e4:	080035fd 	.word	0x080035fd
 80034e8:	0800367f 	.word	0x0800367f
 80034ec:	0800367f 	.word	0x0800367f
 80034f0:	0800367f 	.word	0x0800367f
 80034f4:	0800363d 	.word	0x0800363d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fa5a 	bl	80039b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0208 	orr.w	r2, r2, #8
 8003512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6999      	ldr	r1, [r3, #24]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	619a      	str	r2, [r3, #24]
      break;
 8003536:	e0a3      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 faca 	bl	8003ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	619a      	str	r2, [r3, #24]
      break;
 8003578:	e082      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fb33 	bl	8003bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0208 	orr.w	r2, r2, #8
 8003594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0204 	bic.w	r2, r2, #4
 80035a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69d9      	ldr	r1, [r3, #28]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	61da      	str	r2, [r3, #28]
      break;
 80035b8:	e062      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fb9b 	bl	8003cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69d9      	ldr	r1, [r3, #28]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	021a      	lsls	r2, r3, #8
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]
      break;
 80035fa:	e041      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fbe4 	bl	8003dd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0208 	orr.w	r2, r2, #8
 8003616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0204 	bic.w	r2, r2, #4
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800363a:	e021      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc28 	bl	8003e98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	021a      	lsls	r2, r3, #8
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800367c:	e000      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800367e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop

08003694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_ConfigClockSource+0x18>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0b5      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x184>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e8:	d03e      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0xd4>
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ee:	f200 8087 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	f000 8085 	beq.w	8003804 <HAL_TIM_ConfigClockSource+0x170>
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fe:	d87f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b70      	cmp	r3, #112	; 0x70
 8003702:	d01a      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xa6>
 8003704:	2b70      	cmp	r3, #112	; 0x70
 8003706:	d87b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b60      	cmp	r3, #96	; 0x60
 800370a:	d050      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x11a>
 800370c:	2b60      	cmp	r3, #96	; 0x60
 800370e:	d877      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b50      	cmp	r3, #80	; 0x50
 8003712:	d03c      	beq.n	800378e <HAL_TIM_ConfigClockSource+0xfa>
 8003714:	2b50      	cmp	r3, #80	; 0x50
 8003716:	d873      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d058      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x13a>
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d86f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	2b30      	cmp	r3, #48	; 0x30
 8003722:	d064      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15a>
 8003724:	2b30      	cmp	r3, #48	; 0x30
 8003726:	d86b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b20      	cmp	r3, #32
 800372a:	d060      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15a>
 800372c:	2b20      	cmp	r3, #32
 800372e:	d867      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05c      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15a>
 8003734:	2b10      	cmp	r3, #16
 8003736:	d05a      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003738:	e062      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f000 fc85 	bl	8004058 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800375c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
      break;
 8003766:	e04e      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f000 fc6e 	bl	8004058 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378a:	609a      	str	r2, [r3, #8]
      break;
 800378c:	e03b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fbe2 	bl	8003f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2150      	movs	r1, #80	; 0x50
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fc3b 	bl	8004022 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e02b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fc01 	bl	8003fc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2160      	movs	r1, #96	; 0x60
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fc2b 	bl	8004022 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e01b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	461a      	mov	r2, r3
 80037dc:	f000 fbc2 	bl	8003f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2140      	movs	r1, #64	; 0x40
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fc1b 	bl	8004022 <TIM_ITRx_SetConfig>
      break;
 80037ec:	e00b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f000 fc12 	bl	8004022 <TIM_ITRx_SetConfig>
        break;
 80037fe:	e002      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003804:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <TIM_Base_SetConfig+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a2:	d00f      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3d      	ldr	r2, [pc, #244]	; (800399c <TIM_Base_SetConfig+0x118>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3c      	ldr	r2, [pc, #240]	; (80039a0 <TIM_Base_SetConfig+0x11c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <TIM_Base_SetConfig+0x120>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3a      	ldr	r2, [pc, #232]	; (80039a8 <TIM_Base_SetConfig+0x124>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d108      	bne.n	80038d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <TIM_Base_SetConfig+0x114>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01f      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d01b      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2c      	ldr	r2, [pc, #176]	; (800399c <TIM_Base_SetConfig+0x118>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d017      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <TIM_Base_SetConfig+0x11c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <TIM_Base_SetConfig+0x120>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00f      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <TIM_Base_SetConfig+0x124>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00b      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a28      	ldr	r2, [pc, #160]	; (80039ac <TIM_Base_SetConfig+0x128>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <TIM_Base_SetConfig+0x12c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_Base_SetConfig+0x9a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <TIM_Base_SetConfig+0x130>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d108      	bne.n	8003930 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <TIM_Base_SetConfig+0x114>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00f      	beq.n	800397c <TIM_Base_SetConfig+0xf8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <TIM_Base_SetConfig+0x124>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00b      	beq.n	800397c <TIM_Base_SetConfig+0xf8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a11      	ldr	r2, [pc, #68]	; (80039ac <TIM_Base_SetConfig+0x128>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <TIM_Base_SetConfig+0xf8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <TIM_Base_SetConfig+0x12c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0xf8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a0f      	ldr	r2, [pc, #60]	; (80039b4 <TIM_Base_SetConfig+0x130>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	615a      	str	r2, [r3, #20]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40013400 	.word	0x40013400
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800

080039b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 0302 	bic.w	r3, r3, #2
 8003a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <TIM_OC1_SetConfig+0x10c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_OC1_SetConfig+0x80>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a2b      	ldr	r2, [pc, #172]	; (8003ac8 <TIM_OC1_SetConfig+0x110>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_OC1_SetConfig+0x80>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a2a      	ldr	r2, [pc, #168]	; (8003acc <TIM_OC1_SetConfig+0x114>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_OC1_SetConfig+0x80>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <TIM_OC1_SetConfig+0x118>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_OC1_SetConfig+0x80>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <TIM_OC1_SetConfig+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10c      	bne.n	8003a52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0308 	bic.w	r3, r3, #8
 8003a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <TIM_OC1_SetConfig+0x10c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00f      	beq.n	8003a7a <TIM_OC1_SetConfig+0xc2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <TIM_OC1_SetConfig+0x110>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00b      	beq.n	8003a7a <TIM_OC1_SetConfig+0xc2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a19      	ldr	r2, [pc, #100]	; (8003acc <TIM_OC1_SetConfig+0x114>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <TIM_OC1_SetConfig+0xc2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <TIM_OC1_SetConfig+0x118>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <TIM_OC1_SetConfig+0xc2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <TIM_OC1_SetConfig+0x11c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d111      	bne.n	8003a9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	621a      	str	r2, [r3, #32]
}
 8003ab8:	bf00      	nop
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40013400 	.word	0x40013400
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800

08003ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0210 	bic.w	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0320 	bic.w	r3, r3, #32
 8003b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a28      	ldr	r2, [pc, #160]	; (8003bd8 <TIM_OC2_SetConfig+0x100>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_OC2_SetConfig+0x6c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <TIM_OC2_SetConfig+0x104>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10d      	bne.n	8003b60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <TIM_OC2_SetConfig+0x100>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00f      	beq.n	8003b88 <TIM_OC2_SetConfig+0xb0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a1c      	ldr	r2, [pc, #112]	; (8003bdc <TIM_OC2_SetConfig+0x104>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <TIM_OC2_SetConfig+0xb0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <TIM_OC2_SetConfig+0x108>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <TIM_OC2_SetConfig+0xb0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <TIM_OC2_SetConfig+0x10c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC2_SetConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <TIM_OC2_SetConfig+0x110>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d113      	bne.n	8003bb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800

08003bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <TIM_OC3_SetConfig+0xfc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_OC3_SetConfig+0x6a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a26      	ldr	r2, [pc, #152]	; (8003cec <TIM_OC3_SetConfig+0x100>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10d      	bne.n	8003c72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <TIM_OC3_SetConfig+0xfc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00f      	beq.n	8003c9a <TIM_OC3_SetConfig+0xae>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <TIM_OC3_SetConfig+0x100>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00b      	beq.n	8003c9a <TIM_OC3_SetConfig+0xae>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <TIM_OC3_SetConfig+0x104>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d007      	beq.n	8003c9a <TIM_OC3_SetConfig+0xae>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <TIM_OC3_SetConfig+0x108>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_OC3_SetConfig+0xae>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <TIM_OC3_SetConfig+0x10c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d113      	bne.n	8003cc2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40013400 	.word	0x40013400
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800

08003cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	031b      	lsls	r3, r3, #12
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <TIM_OC4_SetConfig+0xc0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00f      	beq.n	8003d80 <TIM_OC4_SetConfig+0x84>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <TIM_OC4_SetConfig+0xc4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_OC4_SetConfig+0x84>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <TIM_OC4_SetConfig+0xc8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_OC4_SetConfig+0x84>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <TIM_OC4_SetConfig+0xcc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC4_SetConfig+0x84>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <TIM_OC4_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800

08003dd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <TIM_OC5_SetConfig+0xb4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <TIM_OC5_SetConfig+0x7a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <TIM_OC5_SetConfig+0xb8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_OC5_SetConfig+0x7a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <TIM_OC5_SetConfig+0xbc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_OC5_SetConfig+0x7a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <TIM_OC5_SetConfig+0xc0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_OC5_SetConfig+0x7a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <TIM_OC5_SetConfig+0xc4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d109      	bne.n	8003e5e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	621a      	str	r2, [r3, #32]
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40013400 	.word	0x40013400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800

08003e98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	051b      	lsls	r3, r3, #20
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <TIM_OC6_SetConfig+0xb8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <TIM_OC6_SetConfig+0x7c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <TIM_OC6_SetConfig+0xbc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_OC6_SetConfig+0x7c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <TIM_OC6_SetConfig+0xc0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_OC6_SetConfig+0x7c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <TIM_OC6_SetConfig+0xc4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_OC6_SetConfig+0x7c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <TIM_OC6_SetConfig+0xc8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d109      	bne.n	8003f28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40013400 	.word	0x40013400
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800

08003f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0201 	bic.w	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 030a 	bic.w	r3, r3, #10
 8003fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b087      	sub	sp, #28
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0210 	bic.w	r2, r3, #16
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	031b      	lsls	r3, r3, #12
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	f043 0307 	orr.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	021a      	lsls	r2, r3, #8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	431a      	orrs	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4313      	orrs	r3, r2
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	609a      	str	r2, [r3, #8]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e068      	b.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d108      	bne.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01d      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d018      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1a      	ldr	r2, [pc, #104]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a13      	ldr	r2, [pc, #76]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10c      	bne.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4313      	orrs	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40013400 	.word	0x40013400
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40014000 	.word	0x40014000

080041a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e040      	b.n	8004278 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc ff60 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa4e 	bl	80046c4 <UART_SetConfig>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fccc 	bl	8004bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fd53 	bl	8004d1c <UART_CheckIdleState>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d113      	bne.n	80042d8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00e      	beq.n	80042d8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 81ce 	beq.w	800466a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
      }
      return;
 80042d6:	e1c8      	b.n	800466a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80e3 	beq.w	80044a6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4ba6      	ldr	r3, [pc, #664]	; (8004588 <HAL_UART_IRQHandler+0x308>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80d8 	beq.w	80044a6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <HAL_UART_IRQHandler+0xa2>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2201      	movs	r2, #1
 8004310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004318:	f043 0201 	orr.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <HAL_UART_IRQHandler+0xce>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2202      	movs	r2, #2
 800433c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_UART_IRQHandler+0xfa>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2204      	movs	r2, #4
 8004368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004370:	f043 0202 	orr.w	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d015      	beq.n	80043b0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a6:	f043 0208 	orr.w	r2, r3, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d011      	beq.n	80043de <HAL_UART_IRQHandler+0x15e>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00c      	beq.n	80043de <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8142 	beq.w	800466e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004414:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d004      	beq.n	800442e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800442a:	2b00      	cmp	r3, #0
 800442c:	d031      	beq.n	8004492 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fd39 	bl	8004ea6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d123      	bne.n	800448a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004450:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	2b00      	cmp	r3, #0
 8004458:	d013      	beq.n	8004482 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a4b      	ldr	r2, [pc, #300]	; (800458c <HAL_UART_IRQHandler+0x30c>)
 8004460:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd f8a5 	bl	80015b6 <HAL_DMA_Abort_IT>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800447c:	4610      	mov	r0, r2
 800447e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	e00f      	b.n	80044a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f908 	bl	8004698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e00b      	b.n	80044a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f904 	bl	8004698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	e007      	b.n	80044a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f900 	bl	8004698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80044a0:	e0e5      	b.n	800466e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a2:	bf00      	nop
    return;
 80044a4:	e0e3      	b.n	800466e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f040 80a9 	bne.w	8004602 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a3 	beq.w	8004602 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 809d 	beq.w	8004602 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2210      	movs	r2, #16
 80044ce:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d158      	bne.n	8004590 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80044e8:	893b      	ldrh	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80c1 	beq.w	8004672 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044f6:	893a      	ldrh	r2, [r7, #8]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	f080 80ba 	bcs.w	8004672 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	893a      	ldrh	r2, [r7, #8]
 8004502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d12a      	bne.n	800456c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004524:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0210 	bic.w	r2, r2, #16
 8004560:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc ffe7 	bl	800153a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004578:	b29b      	uxth	r3, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f893 	bl	80046ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004586:	e074      	b.n	8004672 <HAL_UART_IRQHandler+0x3f2>
 8004588:	04000120 	.word	0x04000120
 800458c:	08004f05 	.word	0x08004f05
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800459c:	b29b      	uxth	r3, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d063      	beq.n	8004676 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d060      	beq.n	8004676 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045c2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0210 	bic.w	r2, r2, #16
 80045f4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f856 	bl	80046ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004600:	e039      	b.n	8004676 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <HAL_UART_IRQHandler+0x3a8>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800461e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fc9e 	bl	8004f62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004626:	e029      	b.n	800467c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01a      	beq.n	800467a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
    }
    return;
 800464c:	e015      	b.n	800467a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d011      	beq.n	800467c <HAL_UART_IRQHandler+0x3fc>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fc64 	bl	8004f30 <UART_EndTransmit_IT>
    return;
 8004668:	e008      	b.n	800467c <HAL_UART_IRQHandler+0x3fc>
      return;
 800466a:	bf00      	nop
 800466c:	e006      	b.n	800467c <HAL_UART_IRQHandler+0x3fc>
    return;
 800466e:	bf00      	nop
 8004670:	e004      	b.n	800467c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <HAL_UART_IRQHandler+0x3fc>
    return;
 800467a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop

08004684 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b5b0      	push	{r4, r5, r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4bad      	ldr	r3, [pc, #692]	; (80049a4 <UART_SetConfig+0x2e0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	69f9      	ldr	r1, [r7, #28]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4aa2      	ldr	r2, [pc, #648]	; (80049a8 <UART_SetConfig+0x2e4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	4313      	orrs	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a99      	ldr	r2, [pc, #612]	; (80049ac <UART_SetConfig+0x2e8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d121      	bne.n	800478e <UART_SetConfig+0xca>
 800474a:	4b99      	ldr	r3, [pc, #612]	; (80049b0 <UART_SetConfig+0x2ec>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b03      	cmp	r3, #3
 8004756:	d817      	bhi.n	8004788 <UART_SetConfig+0xc4>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0x9c>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004771 	.word	0x08004771
 8004764:	0800477d 	.word	0x0800477d
 8004768:	08004777 	.word	0x08004777
 800476c:	08004783 	.word	0x08004783
 8004770:	2301      	movs	r3, #1
 8004772:	76fb      	strb	r3, [r7, #27]
 8004774:	e0e7      	b.n	8004946 <UART_SetConfig+0x282>
 8004776:	2302      	movs	r3, #2
 8004778:	76fb      	strb	r3, [r7, #27]
 800477a:	e0e4      	b.n	8004946 <UART_SetConfig+0x282>
 800477c:	2304      	movs	r3, #4
 800477e:	76fb      	strb	r3, [r7, #27]
 8004780:	e0e1      	b.n	8004946 <UART_SetConfig+0x282>
 8004782:	2308      	movs	r3, #8
 8004784:	76fb      	strb	r3, [r7, #27]
 8004786:	e0de      	b.n	8004946 <UART_SetConfig+0x282>
 8004788:	2310      	movs	r3, #16
 800478a:	76fb      	strb	r3, [r7, #27]
 800478c:	e0db      	b.n	8004946 <UART_SetConfig+0x282>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a88      	ldr	r2, [pc, #544]	; (80049b4 <UART_SetConfig+0x2f0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d132      	bne.n	80047fe <UART_SetConfig+0x13a>
 8004798:	4b85      	ldr	r3, [pc, #532]	; (80049b0 <UART_SetConfig+0x2ec>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d828      	bhi.n	80047f8 <UART_SetConfig+0x134>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0xe8>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047e1 	.word	0x080047e1
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047f9 	.word	0x080047f9
 80047b8:	080047f9 	.word	0x080047f9
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	080047f9 	.word	0x080047f9
 80047cc:	080047e7 	.word	0x080047e7
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	080047f9 	.word	0x080047f9
 80047dc:	080047f3 	.word	0x080047f3
 80047e0:	2300      	movs	r3, #0
 80047e2:	76fb      	strb	r3, [r7, #27]
 80047e4:	e0af      	b.n	8004946 <UART_SetConfig+0x282>
 80047e6:	2302      	movs	r3, #2
 80047e8:	76fb      	strb	r3, [r7, #27]
 80047ea:	e0ac      	b.n	8004946 <UART_SetConfig+0x282>
 80047ec:	2304      	movs	r3, #4
 80047ee:	76fb      	strb	r3, [r7, #27]
 80047f0:	e0a9      	b.n	8004946 <UART_SetConfig+0x282>
 80047f2:	2308      	movs	r3, #8
 80047f4:	76fb      	strb	r3, [r7, #27]
 80047f6:	e0a6      	b.n	8004946 <UART_SetConfig+0x282>
 80047f8:	2310      	movs	r3, #16
 80047fa:	76fb      	strb	r3, [r7, #27]
 80047fc:	e0a3      	b.n	8004946 <UART_SetConfig+0x282>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6d      	ldr	r2, [pc, #436]	; (80049b8 <UART_SetConfig+0x2f4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d120      	bne.n	800484a <UART_SetConfig+0x186>
 8004808:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <UART_SetConfig+0x2ec>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004812:	2b30      	cmp	r3, #48	; 0x30
 8004814:	d013      	beq.n	800483e <UART_SetConfig+0x17a>
 8004816:	2b30      	cmp	r3, #48	; 0x30
 8004818:	d814      	bhi.n	8004844 <UART_SetConfig+0x180>
 800481a:	2b20      	cmp	r3, #32
 800481c:	d009      	beq.n	8004832 <UART_SetConfig+0x16e>
 800481e:	2b20      	cmp	r3, #32
 8004820:	d810      	bhi.n	8004844 <UART_SetConfig+0x180>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <UART_SetConfig+0x168>
 8004826:	2b10      	cmp	r3, #16
 8004828:	d006      	beq.n	8004838 <UART_SetConfig+0x174>
 800482a:	e00b      	b.n	8004844 <UART_SetConfig+0x180>
 800482c:	2300      	movs	r3, #0
 800482e:	76fb      	strb	r3, [r7, #27]
 8004830:	e089      	b.n	8004946 <UART_SetConfig+0x282>
 8004832:	2302      	movs	r3, #2
 8004834:	76fb      	strb	r3, [r7, #27]
 8004836:	e086      	b.n	8004946 <UART_SetConfig+0x282>
 8004838:	2304      	movs	r3, #4
 800483a:	76fb      	strb	r3, [r7, #27]
 800483c:	e083      	b.n	8004946 <UART_SetConfig+0x282>
 800483e:	2308      	movs	r3, #8
 8004840:	76fb      	strb	r3, [r7, #27]
 8004842:	e080      	b.n	8004946 <UART_SetConfig+0x282>
 8004844:	2310      	movs	r3, #16
 8004846:	76fb      	strb	r3, [r7, #27]
 8004848:	e07d      	b.n	8004946 <UART_SetConfig+0x282>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a5b      	ldr	r2, [pc, #364]	; (80049bc <UART_SetConfig+0x2f8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d120      	bne.n	8004896 <UART_SetConfig+0x1d2>
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <UART_SetConfig+0x2ec>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800485e:	2bc0      	cmp	r3, #192	; 0xc0
 8004860:	d013      	beq.n	800488a <UART_SetConfig+0x1c6>
 8004862:	2bc0      	cmp	r3, #192	; 0xc0
 8004864:	d814      	bhi.n	8004890 <UART_SetConfig+0x1cc>
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d009      	beq.n	800487e <UART_SetConfig+0x1ba>
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d810      	bhi.n	8004890 <UART_SetConfig+0x1cc>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <UART_SetConfig+0x1b4>
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d006      	beq.n	8004884 <UART_SetConfig+0x1c0>
 8004876:	e00b      	b.n	8004890 <UART_SetConfig+0x1cc>
 8004878:	2300      	movs	r3, #0
 800487a:	76fb      	strb	r3, [r7, #27]
 800487c:	e063      	b.n	8004946 <UART_SetConfig+0x282>
 800487e:	2302      	movs	r3, #2
 8004880:	76fb      	strb	r3, [r7, #27]
 8004882:	e060      	b.n	8004946 <UART_SetConfig+0x282>
 8004884:	2304      	movs	r3, #4
 8004886:	76fb      	strb	r3, [r7, #27]
 8004888:	e05d      	b.n	8004946 <UART_SetConfig+0x282>
 800488a:	2308      	movs	r3, #8
 800488c:	76fb      	strb	r3, [r7, #27]
 800488e:	e05a      	b.n	8004946 <UART_SetConfig+0x282>
 8004890:	2310      	movs	r3, #16
 8004892:	76fb      	strb	r3, [r7, #27]
 8004894:	e057      	b.n	8004946 <UART_SetConfig+0x282>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a49      	ldr	r2, [pc, #292]	; (80049c0 <UART_SetConfig+0x2fc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d125      	bne.n	80048ec <UART_SetConfig+0x228>
 80048a0:	4b43      	ldr	r3, [pc, #268]	; (80049b0 <UART_SetConfig+0x2ec>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ae:	d017      	beq.n	80048e0 <UART_SetConfig+0x21c>
 80048b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b4:	d817      	bhi.n	80048e6 <UART_SetConfig+0x222>
 80048b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ba:	d00b      	beq.n	80048d4 <UART_SetConfig+0x210>
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c0:	d811      	bhi.n	80048e6 <UART_SetConfig+0x222>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <UART_SetConfig+0x20a>
 80048c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ca:	d006      	beq.n	80048da <UART_SetConfig+0x216>
 80048cc:	e00b      	b.n	80048e6 <UART_SetConfig+0x222>
 80048ce:	2300      	movs	r3, #0
 80048d0:	76fb      	strb	r3, [r7, #27]
 80048d2:	e038      	b.n	8004946 <UART_SetConfig+0x282>
 80048d4:	2302      	movs	r3, #2
 80048d6:	76fb      	strb	r3, [r7, #27]
 80048d8:	e035      	b.n	8004946 <UART_SetConfig+0x282>
 80048da:	2304      	movs	r3, #4
 80048dc:	76fb      	strb	r3, [r7, #27]
 80048de:	e032      	b.n	8004946 <UART_SetConfig+0x282>
 80048e0:	2308      	movs	r3, #8
 80048e2:	76fb      	strb	r3, [r7, #27]
 80048e4:	e02f      	b.n	8004946 <UART_SetConfig+0x282>
 80048e6:	2310      	movs	r3, #16
 80048e8:	76fb      	strb	r3, [r7, #27]
 80048ea:	e02c      	b.n	8004946 <UART_SetConfig+0x282>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2d      	ldr	r2, [pc, #180]	; (80049a8 <UART_SetConfig+0x2e4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d125      	bne.n	8004942 <UART_SetConfig+0x27e>
 80048f6:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <UART_SetConfig+0x2ec>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004904:	d017      	beq.n	8004936 <UART_SetConfig+0x272>
 8004906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800490a:	d817      	bhi.n	800493c <UART_SetConfig+0x278>
 800490c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004910:	d00b      	beq.n	800492a <UART_SetConfig+0x266>
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004916:	d811      	bhi.n	800493c <UART_SetConfig+0x278>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <UART_SetConfig+0x260>
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004920:	d006      	beq.n	8004930 <UART_SetConfig+0x26c>
 8004922:	e00b      	b.n	800493c <UART_SetConfig+0x278>
 8004924:	2300      	movs	r3, #0
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	e00d      	b.n	8004946 <UART_SetConfig+0x282>
 800492a:	2302      	movs	r3, #2
 800492c:	76fb      	strb	r3, [r7, #27]
 800492e:	e00a      	b.n	8004946 <UART_SetConfig+0x282>
 8004930:	2304      	movs	r3, #4
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	e007      	b.n	8004946 <UART_SetConfig+0x282>
 8004936:	2308      	movs	r3, #8
 8004938:	76fb      	strb	r3, [r7, #27]
 800493a:	e004      	b.n	8004946 <UART_SetConfig+0x282>
 800493c:	2310      	movs	r3, #16
 800493e:	76fb      	strb	r3, [r7, #27]
 8004940:	e001      	b.n	8004946 <UART_SetConfig+0x282>
 8004942:	2310      	movs	r3, #16
 8004944:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <UART_SetConfig+0x2e4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	f040 8087 	bne.w	8004a60 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004952:	7efb      	ldrb	r3, [r7, #27]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d837      	bhi.n	80049c8 <UART_SetConfig+0x304>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x29c>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004985 	.word	0x08004985
 8004964:	080049c9 	.word	0x080049c9
 8004968:	0800498d 	.word	0x0800498d
 800496c:	080049c9 	.word	0x080049c9
 8004970:	08004993 	.word	0x08004993
 8004974:	080049c9 	.word	0x080049c9
 8004978:	080049c9 	.word	0x080049c9
 800497c:	080049c9 	.word	0x080049c9
 8004980:	0800499b 	.word	0x0800499b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fd fe48 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8004988:	6178      	str	r0, [r7, #20]
        break;
 800498a:	e022      	b.n	80049d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <UART_SetConfig+0x300>)
 800498e:	617b      	str	r3, [r7, #20]
        break;
 8004990:	e01f      	b.n	80049d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004992:	f7fd fda9 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8004996:	6178      	str	r0, [r7, #20]
        break;
 8004998:	e01b      	b.n	80049d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499e:	617b      	str	r3, [r7, #20]
        break;
 80049a0:	e017      	b.n	80049d2 <UART_SetConfig+0x30e>
 80049a2:	bf00      	nop
 80049a4:	efff69f3 	.word	0xefff69f3
 80049a8:	40008000 	.word	0x40008000
 80049ac:	40013800 	.word	0x40013800
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40004400 	.word	0x40004400
 80049b8:	40004800 	.word	0x40004800
 80049bc:	40004c00 	.word	0x40004c00
 80049c0:	40005000 	.word	0x40005000
 80049c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	76bb      	strb	r3, [r7, #26]
        break;
 80049d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80f1 	beq.w	8004bbc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d305      	bcc.n	80049f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d902      	bls.n	80049fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	76bb      	strb	r3, [r7, #26]
 80049fa:	e0df      	b.n	8004bbc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	020b      	lsls	r3, r1, #8
 8004a0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a12:	0202      	lsls	r2, r0, #8
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	6849      	ldr	r1, [r1, #4]
 8004a18:	0849      	lsrs	r1, r1, #1
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	1814      	adds	r4, r2, r0
 8004a22:	eb43 0501 	adc.w	r5, r3, r1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	4620      	mov	r0, r4
 8004a32:	4629      	mov	r1, r5
 8004a34:	f7fb fbda 	bl	80001ec <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a46:	d308      	bcc.n	8004a5a <UART_SetConfig+0x396>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4e:	d204      	bcs.n	8004a5a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	e0b0      	b.n	8004bbc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	76bb      	strb	r3, [r7, #26]
 8004a5e:	e0ad      	b.n	8004bbc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d15c      	bne.n	8004b24 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004a6a:	7efb      	ldrb	r3, [r7, #27]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d828      	bhi.n	8004ac2 <UART_SetConfig+0x3fe>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <UART_SetConfig+0x3b4>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	08004ac3 	.word	0x08004ac3
 8004a88:	08004ab3 	.word	0x08004ab3
 8004a8c:	08004ac3 	.word	0x08004ac3
 8004a90:	08004ac3 	.word	0x08004ac3
 8004a94:	08004ac3 	.word	0x08004ac3
 8004a98:	08004abb 	.word	0x08004abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7fd fdbc 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8004aa0:	6178      	str	r0, [r7, #20]
        break;
 8004aa2:	e013      	b.n	8004acc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa4:	f7fd fdce 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	6178      	str	r0, [r7, #20]
        break;
 8004aaa:	e00f      	b.n	8004acc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aac:	4b49      	ldr	r3, [pc, #292]	; (8004bd4 <UART_SetConfig+0x510>)
 8004aae:	617b      	str	r3, [r7, #20]
        break;
 8004ab0:	e00c      	b.n	8004acc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab2:	f7fd fd19 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8004ab6:	6178      	str	r0, [r7, #20]
        break;
 8004ab8:	e008      	b.n	8004acc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004abe:	617b      	str	r3, [r7, #20]
        break;
 8004ac0:	e004      	b.n	8004acc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	76bb      	strb	r3, [r7, #26]
        break;
 8004aca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d074      	beq.n	8004bbc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	005a      	lsls	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d916      	bls.n	8004b1e <UART_SetConfig+0x45a>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af6:	d212      	bcs.n	8004b1e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f023 030f 	bic.w	r3, r3, #15
 8004b00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	89fa      	ldrh	r2, [r7, #14]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	e04e      	b.n	8004bbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	76bb      	strb	r3, [r7, #26]
 8004b22:	e04b      	b.n	8004bbc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b24:	7efb      	ldrb	r3, [r7, #27]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d827      	bhi.n	8004b7a <UART_SetConfig+0x4b6>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x46c>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b7b 	.word	0x08004b7b
 8004b40:	08004b6b 	.word	0x08004b6b
 8004b44:	08004b7b 	.word	0x08004b7b
 8004b48:	08004b7b 	.word	0x08004b7b
 8004b4c:	08004b7b 	.word	0x08004b7b
 8004b50:	08004b73 	.word	0x08004b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fd fd60 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8004b58:	6178      	str	r0, [r7, #20]
        break;
 8004b5a:	e013      	b.n	8004b84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b5c:	f7fd fd72 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8004b60:	6178      	str	r0, [r7, #20]
        break;
 8004b62:	e00f      	b.n	8004b84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <UART_SetConfig+0x510>)
 8004b66:	617b      	str	r3, [r7, #20]
        break;
 8004b68:	e00c      	b.n	8004b84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7fd fcbd 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8004b6e:	6178      	str	r0, [r7, #20]
        break;
 8004b70:	e008      	b.n	8004b84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b76:	617b      	str	r3, [r7, #20]
        break;
 8004b78:	e004      	b.n	8004b84 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	76bb      	strb	r3, [r7, #26]
        break;
 8004b82:	bf00      	nop
    }

    if (pclk != 0U)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d018      	beq.n	8004bbc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085a      	lsrs	r2, r3, #1
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	441a      	add	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	d908      	bls.n	8004bb8 <UART_SetConfig+0x4f4>
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d204      	bcs.n	8004bb8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	e001      	b.n	8004bbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	00f42400 	.word	0x00f42400

08004bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01a      	beq.n	8004cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d10a      	bne.n	8004cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d2c:	f7fc fae8 	bl	8001300 <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d10e      	bne.n	8004d5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f82d 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e023      	b.n	8004da6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d10e      	bne.n	8004d8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f817 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00d      	b.n	8004da6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbe:	e05e      	b.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d05a      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc8:	f7fc fa9a 	bl	8001300 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d302      	bcc.n	8004dde <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d11b      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e043      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d02c      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e32:	d124      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e3c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e4c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e00f      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d091      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ebc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d107      	bne.n	8004ee6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0210 	bic.w	r2, r2, #16
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fbb8 	bl	8004698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fb95 	bl	8004684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <__libc_init_array>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	4d0d      	ldr	r5, [pc, #52]	; (8004fb0 <__libc_init_array+0x38>)
 8004f7c:	4c0d      	ldr	r4, [pc, #52]	; (8004fb4 <__libc_init_array+0x3c>)
 8004f7e:	1b64      	subs	r4, r4, r5
 8004f80:	10a4      	asrs	r4, r4, #2
 8004f82:	2600      	movs	r6, #0
 8004f84:	42a6      	cmp	r6, r4
 8004f86:	d109      	bne.n	8004f9c <__libc_init_array+0x24>
 8004f88:	4d0b      	ldr	r5, [pc, #44]	; (8004fb8 <__libc_init_array+0x40>)
 8004f8a:	4c0c      	ldr	r4, [pc, #48]	; (8004fbc <__libc_init_array+0x44>)
 8004f8c:	f000 f820 	bl	8004fd0 <_init>
 8004f90:	1b64      	subs	r4, r4, r5
 8004f92:	10a4      	asrs	r4, r4, #2
 8004f94:	2600      	movs	r6, #0
 8004f96:	42a6      	cmp	r6, r4
 8004f98:	d105      	bne.n	8004fa6 <__libc_init_array+0x2e>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa0:	4798      	blx	r3
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7ee      	b.n	8004f84 <__libc_init_array+0xc>
 8004fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004faa:	4798      	blx	r3
 8004fac:	3601      	adds	r6, #1
 8004fae:	e7f2      	b.n	8004f96 <__libc_init_array+0x1e>
 8004fb0:	08005038 	.word	0x08005038
 8004fb4:	08005038 	.word	0x08005038
 8004fb8:	08005038 	.word	0x08005038
 8004fbc:	0800503c 	.word	0x0800503c

08004fc0 <memset>:
 8004fc0:	4402      	add	r2, r0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d100      	bne.n	8004fca <memset+0xa>
 8004fc8:	4770      	bx	lr
 8004fca:	f803 1b01 	strb.w	r1, [r3], #1
 8004fce:	e7f9      	b.n	8004fc4 <memset+0x4>

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
