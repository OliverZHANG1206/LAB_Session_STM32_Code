
LAB_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800a0f0  0800a0f0  0001a0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a524  0800a524  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a524  0800a524  0001a524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a52c  0800a52c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a530  0800a530  0001a530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fac  200001dc  0800a710  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20005188  0800a710  00025188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196d2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ffb  00000000  00000000  000398de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d53a  00000000  00000000  0003f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d13  00000000  00000000  0006c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118a0c  00000000  00000000  000832e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019bcf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  0019bd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a0d4 	.word	0x0800a0d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800a0d4 	.word	0x0800a0d4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000ee4:	4a2f      	ldr	r2, [pc, #188]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f44:	f001 fb30 	bl	80025a8 <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f4e:	f000 fd2a 	bl	80019a6 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f5e:	f002 fe07 	bl	8003b70 <HAL_ADCEx_MultiModeConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f68:	f000 fd1d 	bl	80019a6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_ADC1_Init+0xe8>)
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	2306      	movs	r3, #6
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f74:	2302      	movs	r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f78:	237f      	movs	r3, #127	; 0x7f
 8000f7a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f8a:	f002 f80f 	bl	8002fac <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f94:	f000 fd07 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000503c 	.word	0x2000503c
 8000fa4:	50040000 	.word	0x50040000
 8000fa8:	04300002 	.word	0x04300002

08000fac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0ac      	sub	sp, #176	; 0xb0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	228c      	movs	r2, #140	; 0x8c
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 f9e3 	bl	8007398 <memset>
  if(adcHandle->Instance==ADC1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <HAL_ADC_MspInit+0xd8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d14e      	bne.n	800107a <HAL_ADC_MspInit+0xce>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fe2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000fea:	2302      	movs	r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4618      	mov	r0, r3
 800100e:	f004 f853 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001018:	f000 fcc5 	bl	80019a6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_ADC_MspInit+0xdc>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_ADC_MspInit+0xdc>)
 8001022:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_ADC_MspInit+0xdc>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_ADC_MspInit+0xdc>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_ADC_MspInit+0xdc>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_ADC_MspInit+0xdc>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104c:	2301      	movs	r3, #1
 800104e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_ADC_MspInit+0xe0>)
 8001066:	f002 ffc3 	bl	8003ff0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2012      	movs	r0, #18
 8001070:	f002 ff09 	bl	8003e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001074:	2012      	movs	r0, #18
 8001076:	f002 ff22 	bl	8003ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800107a:	bf00      	nop
 800107c:	37b0      	adds	r7, #176	; 0xb0
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	50040000 	.word	0x50040000
 8001088:	40021000 	.word	0x40021000
 800108c:	48000800 	.word	0x48000800

08001090 <MX_GPIO_Init>:
     PB10   ------> SAI1_SCK_A
     PH8   ------> DCMI_HSYNC
     PB12   ------> S_DATAIN1DFSDM1
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010a6:	4bb1      	ldr	r3, [pc, #708]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4ab0      	ldr	r2, [pc, #704]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4bae      	ldr	r3, [pc, #696]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4bab      	ldr	r3, [pc, #684]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4aaa      	ldr	r2, [pc, #680]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4ba8      	ldr	r3, [pc, #672]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	4ba5      	ldr	r3, [pc, #660]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4aa4      	ldr	r2, [pc, #656]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4ba2      	ldr	r3, [pc, #648]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b9f      	ldr	r3, [pc, #636]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a9e      	ldr	r2, [pc, #632]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b9c      	ldr	r3, [pc, #624]	; (800136c <MX_GPIO_Init+0x2dc>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b99      	ldr	r3, [pc, #612]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a98      	ldr	r2, [pc, #608]	; (800136c <MX_GPIO_Init+0x2dc>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b96      	ldr	r3, [pc, #600]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111e:	4b93      	ldr	r3, [pc, #588]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a92      	ldr	r2, [pc, #584]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b90      	ldr	r3, [pc, #576]	; (800136c <MX_GPIO_Init+0x2dc>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001136:	f003 f983 	bl	8004440 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b8c      	ldr	r3, [pc, #560]	; (800136c <MX_GPIO_Init+0x2dc>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a8b      	ldr	r2, [pc, #556]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b89      	ldr	r3, [pc, #548]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b86      	ldr	r3, [pc, #536]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a85      	ldr	r2, [pc, #532]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b83      	ldr	r3, [pc, #524]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116a:	4b80      	ldr	r3, [pc, #512]	; (800136c <MX_GPIO_Init+0x2dc>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a7f      	ldr	r2, [pc, #508]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001170:	f043 0320 	orr.w	r3, r3, #32
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b7d      	ldr	r3, [pc, #500]	; (800136c <MX_GPIO_Init+0x2dc>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0320 	and.w	r3, r3, #32
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2101      	movs	r1, #1
 8001186:	487a      	ldr	r0, [pc, #488]	; (8001370 <MX_GPIO_Init+0x2e0>)
 8001188:	f003 f8c4 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2143      	movs	r1, #67	; 0x43
 8001190:	4878      	ldr	r0, [pc, #480]	; (8001374 <MX_GPIO_Init+0x2e4>)
 8001192:	f003 f8bf 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Audio_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2148      	movs	r1, #72	; 0x48
 800119a:	4877      	ldr	r0, [pc, #476]	; (8001378 <MX_GPIO_Init+0x2e8>)
 800119c:	f003 f8ba 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	4874      	ldr	r0, [pc, #464]	; (8001378 <MX_GPIO_Init+0x2e8>)
 80011a6:	f003 f8b5 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b0:	4872      	ldr	r0, [pc, #456]	; (800137c <MX_GPIO_Init+0x2ec>)
 80011b2:	f003 f8af 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80011b6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4869      	ldr	r0, [pc, #420]	; (8001370 <MX_GPIO_Init+0x2e0>)
 80011cc:	f002 ff10 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80011d0:	2304      	movs	r3, #4
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <MX_GPIO_Init+0x2f0>)
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4864      	ldr	r0, [pc, #400]	; (8001374 <MX_GPIO_Init+0x2e4>)
 80011e4:	f002 ff04 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 80011e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011fa:	230c      	movs	r3, #12
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	485f      	ldr	r0, [pc, #380]	; (8001384 <MX_GPIO_Init+0x2f4>)
 8001206:	f002 fef3 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800120a:	2330      	movs	r3, #48	; 0x30
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121a:	2305      	movs	r3, #5
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4855      	ldr	r0, [pc, #340]	; (800137c <MX_GPIO_Init+0x2ec>)
 8001226:	f002 fee3 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800122a:	f248 0320 	movw	r3, #32800	; 0x8020
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800123c:	2305      	movs	r3, #5
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f002 fed1 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800124e:	2301      	movs	r3, #1
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	4619      	mov	r1, r3
 8001264:	4842      	ldr	r0, [pc, #264]	; (8001370 <MX_GPIO_Init+0x2e0>)
 8001266:	f002 fec3 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 800126a:	f645 7320 	movw	r3, #24352	; 0x5f20
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800127c:	230a      	movs	r3, #10
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	483b      	ldr	r0, [pc, #236]	; (8001374 <MX_GPIO_Init+0x2e4>)
 8001288:	f002 feb2 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800128c:	23b0      	movs	r3, #176	; 0xb0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800129c:	230a      	movs	r3, #10
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4832      	ldr	r0, [pc, #200]	; (8001370 <MX_GPIO_Init+0x2e0>)
 80012a8:	f002 fea2 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 80012ac:	f240 233f 	movw	r3, #575	; 0x23f
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012be:	230c      	movs	r3, #12
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	482f      	ldr	r0, [pc, #188]	; (8001388 <MX_GPIO_Init+0x2f8>)
 80012ca:	f002 fe91 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 80012ce:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e0:	230c      	movs	r3, #12
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4828      	ldr	r0, [pc, #160]	; (800138c <MX_GPIO_Init+0x2fc>)
 80012ec:	f002 fe80 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001300:	2303      	movs	r3, #3
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4819      	ldr	r0, [pc, #100]	; (8001370 <MX_GPIO_Init+0x2e0>)
 800130c:	f002 fe70 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001310:	2306      	movs	r3, #6
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001320:	2305      	movs	r3, #5
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_GPIO_Init+0x2e0>)
 800132c:	f002 fe60 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001330:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001342:	2303      	movs	r3, #3
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <MX_GPIO_Init+0x2e4>)
 800134e:	f002 fe4f 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001352:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001358:	2312      	movs	r3, #18
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001364:	2304      	movs	r3, #4
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
 8001368:	e012      	b.n	8001390 <MX_GPIO_Init+0x300>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	48002000 	.word	0x48002000
 8001374:	48001c00 	.word	0x48001c00
 8001378:	48000800 	.word	0x48000800
 800137c:	48000400 	.word	0x48000400
 8001380:	10110000 	.word	0x10110000
 8001384:	48001000 	.word	0x48001000
 8001388:	48001800 	.word	0x48001800
 800138c:	48000c00 	.word	0x48000c00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	48bc      	ldr	r0, [pc, #752]	; (8001688 <MX_GPIO_Init+0x5f8>)
 8001398:	f002 fe2a 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 800139c:	2340      	movs	r3, #64	; 0x40
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ac:	2307      	movs	r3, #7
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	48b4      	ldr	r0, [pc, #720]	; (8001688 <MX_GPIO_Init+0x5f8>)
 80013b8:	f002 fe1a 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80013bc:	235c      	movs	r3, #92	; 0x5c
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013cc:	230d      	movs	r3, #13
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	48ad      	ldr	r0, [pc, #692]	; (800168c <MX_GPIO_Init+0x5fc>)
 80013d8:	f002 fe0a 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80013dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013ee:	2302      	movs	r3, #2
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	48a3      	ldr	r0, [pc, #652]	; (8001688 <MX_GPIO_Init+0x5f8>)
 80013fa:	f002 fdf9 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80013fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001410:	2307      	movs	r3, #7
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	489d      	ldr	r0, [pc, #628]	; (8001690 <MX_GPIO_Init+0x600>)
 800141c:	f002 fde8 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001420:	2304      	movs	r3, #4
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001430:	230c      	movs	r3, #12
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4896      	ldr	r0, [pc, #600]	; (8001694 <MX_GPIO_Init+0x604>)
 800143c:	f002 fdd8 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001440:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001452:	230c      	movs	r3, #12
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	488e      	ldr	r0, [pc, #568]	; (8001698 <MX_GPIO_Init+0x608>)
 800145e:	f002 fdc7 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4889      	ldr	r0, [pc, #548]	; (800169c <MX_GPIO_Init+0x60c>)
 8001476:	f002 fdbb 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800147a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800148c:	230a      	movs	r3, #10
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f002 fda9 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 800149e:	2320      	movs	r3, #32
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80014ae:	230a      	movs	r3, #10
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4874      	ldr	r0, [pc, #464]	; (800168c <MX_GPIO_Init+0x5fc>)
 80014ba:	f002 fd99 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80014be:	2343      	movs	r3, #67	; 0x43
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	4871      	ldr	r0, [pc, #452]	; (800169c <MX_GPIO_Init+0x60c>)
 80014d6:	f002 fd8b 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80014da:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ec:	230c      	movs	r3, #12
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	486a      	ldr	r0, [pc, #424]	; (80016a0 <MX_GPIO_Init+0x610>)
 80014f8:	f002 fd7a 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 */
  GPIO_InitStruct.Pin = Audio_RST_Pin|GPIO_PIN_4;
 80014fc:	2350      	movs	r3, #80	; 0x50
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4861      	ldr	r0, [pc, #388]	; (8001698 <MX_GPIO_Init+0x608>)
 8001514:	f002 fd6c 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <MX_GPIO_Init+0x614>)
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4858      	ldr	r0, [pc, #352]	; (8001690 <MX_GPIO_Init+0x600>)
 800152e:	f002 fd5f 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001544:	230e      	movs	r3, #14
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f002 fd4d 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001556:	2384      	movs	r3, #132	; 0x84
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001566:	2306      	movs	r3, #6
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4849      	ldr	r0, [pc, #292]	; (8001698 <MX_GPIO_Init+0x608>)
 8001572:	f002 fd3d 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800157c:	230b      	movs	r3, #11
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	4845      	ldr	r0, [pc, #276]	; (80016a0 <MX_GPIO_Init+0x610>)
 800158c:	f002 fd30 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001590:	f640 0303 	movw	r3, #2051	; 0x803
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015a2:	230a      	movs	r3, #10
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	4836      	ldr	r0, [pc, #216]	; (8001688 <MX_GPIO_Init+0x5f8>)
 80015ae:	f002 fd1f 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80015b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015c4:	2308      	movs	r3, #8
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4830      	ldr	r0, [pc, #192]	; (8001690 <MX_GPIO_Init+0x600>)
 80015d0:	f002 fd0e 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80015d4:	2320      	movs	r3, #32
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <MX_GPIO_Init+0x614>)
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	482c      	ldr	r0, [pc, #176]	; (8001698 <MX_GPIO_Init+0x608>)
 80015e8:	f002 fd02 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ec:	2308      	movs	r3, #8
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4825      	ldr	r0, [pc, #148]	; (8001698 <MX_GPIO_Init+0x608>)
 8001604:	f002 fcf4 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001608:	2310      	movs	r3, #16
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001618:	2304      	movs	r3, #4
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	481e      	ldr	r0, [pc, #120]	; (800169c <MX_GPIO_Init+0x60c>)
 8001624:	f002 fce4 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001628:	23c8      	movs	r3, #200	; 0xc8
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001638:	230a      	movs	r3, #10
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f002 fcd3 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800164a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001654:	2302      	movs	r3, #2
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	4810      	ldr	r0, [pc, #64]	; (80016a0 <MX_GPIO_Init+0x610>)
 8001660:	f002 fcc6 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001676:	2305      	movs	r3, #5
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4801      	ldr	r0, [pc, #4]	; (8001688 <MX_GPIO_Init+0x5f8>)
 8001682:	f002 fcb5 	bl	8003ff0 <HAL_GPIO_Init>
 8001686:	e00f      	b.n	80016a8 <MX_GPIO_Init+0x618>
 8001688:	48000400 	.word	0x48000400
 800168c:	48001000 	.word	0x48001000
 8001690:	48001800 	.word	0x48001800
 8001694:	48000c00 	.word	0x48000c00
 8001698:	48000800 	.word	0x48000800
 800169c:	48001c00 	.word	0x48001c00
 80016a0:	48001400 	.word	0x48001400
 80016a4:	10110000 	.word	0x10110000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80016a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ae:	2312      	movs	r3, #18
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ba:	2304      	movs	r3, #4
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4828      	ldr	r0, [pc, #160]	; (8001768 <MX_GPIO_Init+0x6d8>)
 80016c6:	f002 fc93 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 80016ca:	2302      	movs	r3, #2
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ce:	230b      	movs	r3, #11
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f002 fc86 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 80016e4:	2304      	movs	r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	481c      	ldr	r0, [pc, #112]	; (8001768 <MX_GPIO_Init+0x6d8>)
 80016f8:	f002 fc7a 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_CKA_Pin;
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800170e:	230d      	movs	r3, #13
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_CKA_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <MX_GPIO_Init+0x6d8>)
 800171a:	f002 fc69 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800171e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001730:	2306      	movs	r3, #6
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <MX_GPIO_Init+0x6d8>)
 800173c:	f002 fc58 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001746:	2311      	movs	r3, #17
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_GPIO_Init+0x6d8>)
 800175a:	f002 fc49 	bl	8003ff0 <HAL_GPIO_Init>

}
 800175e:	bf00      	nop
 8001760:	3738      	adds	r7, #56	; 0x38
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	48000400 	.word	0x48000400

0800176c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1);
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001776:	f001 f871 	bl	800285c <HAL_ADC_Start_IT>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800177a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001780:	f002 fde0 	bl	8004344 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8001784:	2108      	movs	r1, #8
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001788:	f002 fddc 	bl	8004344 <HAL_GPIO_TogglePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000503c 	.word	0x2000503c
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800

080017a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    static uint32_t AD_Value;
    static int sample_num = 0;

    HAL_ADC_Stop_IT(&hadc1);
 80017a8:	4816      	ldr	r0, [pc, #88]	; (8001804 <HAL_ADC_ConvCpltCallback+0x64>)
 80017aa:	f001 f989 	bl	8002ac0 <HAL_ADC_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3);
 80017ae:	4816      	ldr	r0, [pc, #88]	; (8001808 <HAL_ADC_ConvCpltCallback+0x68>)
 80017b0:	f004 fa14 	bl	8005bdc <HAL_TIM_Base_Stop_IT>

    AD_Value = HAL_ADC_GetValue(&hadc1);
 80017b4:	4813      	ldr	r0, [pc, #76]	; (8001804 <HAL_ADC_ConvCpltCallback+0x64>)
 80017b6:	f001 f9be 	bl	8002b36 <HAL_ADC_GetValue>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a13      	ldr	r2, [pc, #76]	; (800180c <HAL_ADC_ConvCpltCallback+0x6c>)
 80017be:	6013      	str	r3, [r2, #0]
    if (sample_num<5000)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_ADC_ConvCpltCallback+0x70>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f241 3287 	movw	r2, #4999	; 0x1387
 80017c8:	4293      	cmp	r3, r2
 80017ca:	dc0a      	bgt.n	80017e2 <HAL_ADC_ConvCpltCallback+0x42>
    {
    	Value_Buffer[sample_num++] = AD_Value;
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_ADC_ConvCpltCallback+0x70>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	490f      	ldr	r1, [pc, #60]	; (8001810 <HAL_ADC_ConvCpltCallback+0x70>)
 80017d4:	600a      	str	r2, [r1, #0]
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_ADC_ConvCpltCallback+0x6c>)
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_ADC_ConvCpltCallback+0x74>)
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017e0:	e008      	b.n	80017f4 <HAL_ADC_ConvCpltCallback+0x54>
    }
    else
    {
    	sample_num = 0; HAL_TIM_Base_Stop_IT(&htim3);
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_ADC_ConvCpltCallback+0x70>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <HAL_ADC_ConvCpltCallback+0x68>)
 80017ea:	f004 f9f7 	bl	8005bdc <HAL_TIM_Base_Stop_IT>
    	print_flag = 1;
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_ADC_ConvCpltCallback+0x78>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
    }

    HAL_TIM_Base_Start_IT(&htim3);
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <HAL_ADC_ConvCpltCallback+0x68>)
 80017f6:	f004 f981 	bl	8005afc <HAL_TIM_Base_Start_IT>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000503c 	.word	0x2000503c
 8001808:	200050a4 	.word	0x200050a4
 800180c:	2000501c 	.word	0x2000501c
 8001810:	20005020 	.word	0x20005020
 8001814:	200001f8 	.word	0x200001f8
 8001818:	20005018 	.word	0x20005018
 800181c:	00000000 	.word	0x00000000

08001820 <printdata>:

void printdata(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	static char Txmsg[10] = "";
	for(int i=0;i<5000;i++)
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e027      	b.n	800187c <printdata+0x5c>
	{
		sprintf(Txmsg, "%.4f\r\n", (double)Value_Buffer[i] * 2.5 / 4095);
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <printdata+0x88>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe75 	bl	8000524 <__aeabi_ui2d>
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <printdata+0x8c>)
 8001840:	f7fe feea 	bl	8000618 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	a314      	add	r3, pc, #80	; (adr r3, 80018a0 <printdata+0x80>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7ff f80b 	bl	800086c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4915      	ldr	r1, [pc, #84]	; (80018b0 <printdata+0x90>)
 800185c:	4815      	ldr	r0, [pc, #84]	; (80018b4 <printdata+0x94>)
 800185e:	f006 fa0d 	bl	8007c7c <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)Txmsg, sizeof(Txmsg));
 8001862:	220a      	movs	r2, #10
 8001864:	4913      	ldr	r1, [pc, #76]	; (80018b4 <printdata+0x94>)
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <printdata+0x98>)
 8001868:	f004 fe1c 	bl	80064a4 <HAL_UART_Transmit_IT>
		while(huart2.gState != HAL_UART_STATE_READY);
 800186c:	bf00      	nop
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <printdata+0x98>)
 8001870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001872:	2b20      	cmp	r3, #32
 8001874:	d1fb      	bne.n	800186e <printdata+0x4e>
	for(int i=0;i<5000;i++)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3301      	adds	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001882:	4293      	cmp	r3, r2
 8001884:	ddd2      	ble.n	800182c <printdata+0xc>
	}
	print_flag = 0;
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <printdata+0x9c>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <printdata+0xa0>)
 800188e:	f004 f935 	bl	8005afc <HAL_TIM_Base_Start_IT>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40affe00 	.word	0x40affe00
 80018a8:	200001f8 	.word	0x200001f8
 80018ac:	40040000 	.word	0x40040000
 80018b0:	0800a0f0 	.word	0x0800a0f0
 80018b4:	20005024 	.word	0x20005024
 80018b8:	200050f0 	.word	0x200050f0
 80018bc:	20005018 	.word	0x20005018
 80018c0:	200050a4 	.word	0x200050a4

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f000 fb31 	bl	8001f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018cc:	f000 f81a 	bl	8001904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d0:	f7ff fbde 	bl	8001090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018d4:	f000 fa4a 	bl	8001d6c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018d8:	f000 f9d4 	bl	8001c84 <MX_TIM3_Init>
  MX_ADC1_Init();
 80018dc:	f7ff faf0 	bl	8000ec0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <main+0x38>)
 80018e2:	f004 f90b 	bl	8005afc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (print_flag == 1)
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <main+0x3c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d1fb      	bne.n	80018e6 <main+0x22>
	  {
		  printdata();
 80018ee:	f7ff ff97 	bl	8001820 <printdata>
		  HAL_Delay(3000);
 80018f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018f6:	f000 fb8f 	bl	8002018 <HAL_Delay>
	  if (print_flag == 1)
 80018fa:	e7f4      	b.n	80018e6 <main+0x22>
 80018fc:	200050a4 	.word	0x200050a4
 8001900:	20005018 	.word	0x20005018

08001904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2244      	movs	r2, #68	; 0x44
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f005 fd40 	bl	8007398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001926:	f44f 7000 	mov.w	r0, #512	; 0x200
 800192a:	f002 fd33 	bl	8004394 <HAL_PWREx_ControlVoltageScaling>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001934:	f000 f837 	bl	80019a6 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001938:	2302      	movs	r3, #2
 800193a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001940:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001946:	2302      	movs	r3, #2
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800194a:	2302      	movs	r3, #2
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800194e:	2302      	movs	r3, #2
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001952:	2314      	movs	r3, #20
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001956:	2302      	movs	r3, #2
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800195a:	2302      	movs	r3, #2
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800195e:	2302      	movs	r3, #2
 8001960:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fd7a 	bl	8004460 <HAL_RCC_OscConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001972:	f000 f818 	bl	80019a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001976:	230f      	movs	r3, #15
 8001978:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197a:	2303      	movs	r3, #3
 800197c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	2104      	movs	r1, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f003 f98c 	bl	8004cac <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800199a:	f000 f804 	bl	80019a6 <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3758      	adds	r7, #88	; 0x58
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019aa:	b672      	cpsid	i
}
 80019ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ae:	e7fe      	b.n	80019ae <Error_Handler+0x8>

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_MspInit+0x50>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_MspInit+0x50>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6613      	str	r3, [r2, #96]	; 0x60
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_MspInit+0x50>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_MspInit+0x50>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_MspInit+0x50>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_MspInit+0x50>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 80019e6:	2004      	movs	r0, #4
 80019e8:	f000 fb3a 	bl	8002060 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 fb4b 	bl	8002088 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80019f2:	f000 fb5d 	bl	80020b0 <HAL_SYSCFG_EnableVREFBUF>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a50:	f000 fac2 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <ADC1_2_IRQHandler+0x10>)
 8001a5e:	f001 f877 	bl	8002b50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000503c 	.word	0x2000503c

08001a6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <TIM3_IRQHandler+0x10>)
 8001a72:	f004 f8e2 	bl	8005c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200050a4 	.word	0x200050a4

08001a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART2_IRQHandler+0x10>)
 8001a86:	f004 fd69 	bl	800655c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200050f0 	.word	0x200050f0

08001a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_kill>:

int _kill(int pid, int sig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aae:	f005 fc49 	bl	8007344 <__errno>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2216      	movs	r2, #22
 8001ab6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_exit>:

void _exit (int status)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffe7 	bl	8001aa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ad6:	e7fe      	b.n	8001ad6 <_exit+0x12>

08001ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
	}

return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf1      	blt.n	8001b24 <_write+0x12>
	}
	return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
	return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:

int _isatty(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
	return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f005 fbae 	bl	8007344 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20040000 	.word	0x20040000
 8001c14:	00002000 	.word	0x00002000
 8001c18:	20005030 	.word	0x20005030
 8001c1c:	20005188 	.word	0x20005188

08001c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <SystemInit+0x5c>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2a:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <SystemInit+0x5c>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <SystemInit+0x60>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <SystemInit+0x60>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <SystemInit+0x60>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <SystemInit+0x60>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <SystemInit+0x60>)
 8001c4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <SystemInit+0x60>)
 8001c58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <SystemInit+0x60>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <SystemInit+0x60>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SystemInit+0x60>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00
 8001c80:	40021000 	.word	0x40021000

08001c84 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <MX_TIM3_Init+0x98>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001caa:	2227      	movs	r2, #39	; 0x27
 8001cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001cb6:	2263      	movs	r2, #99	; 0x63
 8001cb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cc6:	4814      	ldr	r0, [pc, #80]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001cc8:	f003 fec0 	bl	8005a4c <HAL_TIM_Base_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f7ff fe68 	bl	80019a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001ce4:	f004 f8c8 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f7ff fe5a 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_TIM3_Init+0x94>)
 8001d00:	f004 fadc 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d0a:	f7ff fe4c 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200050a4 	.word	0x200050a4
 8001d1c:	40000400 	.word	0x40000400

08001d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <HAL_TIM_Base_MspInit+0x44>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d113      	bne.n	8001d5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_TIM_Base_MspInit+0x48>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <HAL_TIM_Base_MspInit+0x48>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_TIM_Base_MspInit+0x48>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	201d      	movs	r0, #29
 8001d50:	f002 f899 	bl	8003e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d54:	201d      	movs	r0, #29
 8001d56:	f002 f8b2 	bl	8003ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40021000 	.word	0x40021000

08001d6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <MX_USART2_UART_Init+0x5c>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_USART2_UART_Init+0x58>)
 8001db0:	f004 fb2a 	bl	8006408 <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dba:	f7ff fdf4 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200050f0 	.word	0x200050f0
 8001dc8:	40004400 	.word	0x40004400

08001dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0ae      	sub	sp, #184	; 0xb8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	228c      	movs	r2, #140	; 0x8c
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 fad3 	bl	8007398 <memset>
  if(uartHandle->Instance==USART2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a36      	ldr	r2, [pc, #216]	; (8001ed0 <HAL_UART_MspInit+0x104>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d164      	bne.n	8001ec6 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001e00:	2304      	movs	r3, #4
 8001e02:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 f955 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e14:	f7ff fdc7 	bl	80019a6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	4a27      	ldr	r2, [pc, #156]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_UART_MspInit+0x108>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001e60:	2340      	movs	r3, #64	; 0x40
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <HAL_UART_MspInit+0x10c>)
 8001e86:	f002 f8b3 	bl	8003ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb2:	f002 f89d 	bl	8003ff0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2026      	movs	r0, #38	; 0x26
 8001ebc:	f001 ffe3 	bl	8003e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec0:	2026      	movs	r0, #38	; 0x26
 8001ec2:	f001 fffc 	bl	8003ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	37b8      	adds	r7, #184	; 0xb8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48000c00 	.word	0x48000c00

08001edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee0:	f7ff fe9e 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ee4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ee6:	e003      	b.n	8001ef0 <LoopCopyDataInit>

08001ee8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001eea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001eec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001eee:	3104      	adds	r1, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ef0:	480a      	ldr	r0, [pc, #40]	; (8001f1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ef4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ef6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ef8:	d3f6      	bcc.n	8001ee8 <CopyDataInit>
	ldr	r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001efc:	e002      	b.n	8001f04 <LoopFillZerobss>

08001efe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001efe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f00:	f842 3b04 	str.w	r3, [r2], #4

08001f04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <LoopForever+0x16>)
	cmp	r2, r3
 8001f06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f08:	d3f9      	bcc.n	8001efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f005 fa21 	bl	8007350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0e:	f7ff fcd9 	bl	80018c4 <main>

08001f12 <LoopForever>:

LoopForever:
    b LoopForever
 8001f12:	e7fe      	b.n	8001f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f14:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8001f18:	0800a534 	.word	0x0800a534
	ldr	r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f20:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001f24:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001f28:	20005188 	.word	0x20005188

08001f2c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC3_IRQHandler>

08001f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f001 ff99 	bl	8003e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f80e 	bl	8001f60 <HAL_InitTick>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	e001      	b.n	8001f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f50:	f7ff fd2e 	bl	80019b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f54:	79fb      	ldrb	r3, [r7, #7]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_InitTick+0x6c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d023      	beq.n	8001fbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_InitTick+0x70>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_InitTick+0x6c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 ffa5 	bl	8003eda <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d809      	bhi.n	8001fb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f001 ff6f 	bl	8003e86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_InitTick+0x74>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e007      	b.n	8001fc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e004      	b.n	8001fc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e001      	b.n	8001fc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	20005174 	.word	0x20005174

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20005174 	.word	0x20005174

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 0204 	bic.w	r2, r3, #4
 8002070:	4904      	ldr	r1, [pc, #16]	; (8002084 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40010030 	.word	0x40010030

08002088 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 0202 	bic.w	r2, r3, #2
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40010030 	.word	0x40010030

080020b0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80020c2:	f7ff ff9d 	bl	8002000 <HAL_GetTick>
 80020c6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80020ca:	f7ff ff99 	bl	8002000 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b0a      	cmp	r3, #10
 80020d6:	d901      	bls.n	80020dc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e006      	b.n	80020ea <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40010030 	.word	0x40010030

080020f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	609a      	str	r2, [r3, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3360      	adds	r3, #96	; 0x60
 8002172:	461a      	mov	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <LL_ADC_SetOffset+0x44>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	4313      	orrs	r3, r2
 8002190:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	03fff000 	.word	0x03fff000

080021a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3360      	adds	r3, #96	; 0x60
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3360      	adds	r3, #96	; 0x60
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	615a      	str	r2, [r3, #20]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002256:	b480      	push	{r7}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3330      	adds	r3, #48	; 0x30
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	211f      	movs	r1, #31
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	401a      	ands	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 011f 	and.w	r1, r3, #31
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3314      	adds	r3, #20
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	0e5b      	lsrs	r3, r3, #25
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	4413      	add	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0d1b      	lsrs	r3, r3, #20
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2107      	movs	r1, #7
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	401a      	ands	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	0d1b      	lsrs	r3, r3, #20
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	43db      	mvns	r3, r3
 8002346:	401a      	ands	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0318 	and.w	r3, r3, #24
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002350:	40d9      	lsrs	r1, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	400b      	ands	r3, r1
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	0007ffff 	.word	0x0007ffff

08002374 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 031f 	and.w	r3, r3, #31
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6093      	str	r3, [r2, #8]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e4:	d101      	bne.n	80023ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800240c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002434:	d101      	bne.n	800243a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002484:	f043 0202 	orr.w	r2, r3, #2
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <LL_ADC_IsEnabled+0x18>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <LL_ADC_IsEnabled+0x1a>
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d101      	bne.n	80024d6 <LL_ADC_IsDisableOngoing+0x18>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <LL_ADC_IsDisableOngoing+0x1a>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800251c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002520:	f043 0210 	orr.w	r2, r3, #16
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d101      	bne.n	800254c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800256a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d101      	bne.n	800259a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e139      	b.n	8002836 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7fe fceb 	bl	8000fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fef1 	bl	80023d0 <LL_ADC_IsDeepPowerDownEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fed7 	bl	80023ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff0c 	bl	8002420 <LL_ADC_IsInternalRegulatorEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d115      	bne.n	800263a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fef0 	bl	80023f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002618:	4b89      	ldr	r3, [pc, #548]	; (8002840 <HAL_ADC_Init+0x298>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	4a89      	ldr	r2, [pc, #548]	; (8002844 <HAL_ADC_Init+0x29c>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800262c:	e002      	b.n	8002634 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3b01      	subs	r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff feee 	bl	8002420 <LL_ADC_IsInternalRegulatorEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff62 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002670:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 80d2 	bne.w	8002824 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 80ce 	bne.w	8002824 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fefb 	bl	8002498 <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d115      	bne.n	80026d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a8:	4867      	ldr	r0, [pc, #412]	; (8002848 <HAL_ADC_Init+0x2a0>)
 80026aa:	f7ff fef5 	bl	8002498 <LL_ADC_IsEnabled>
 80026ae:	4604      	mov	r4, r0
 80026b0:	4866      	ldr	r0, [pc, #408]	; (800284c <HAL_ADC_Init+0x2a4>)
 80026b2:	f7ff fef1 	bl	8002498 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	431c      	orrs	r4, r3
 80026ba:	4865      	ldr	r0, [pc, #404]	; (8002850 <HAL_ADC_Init+0x2a8>)
 80026bc:	f7ff feec 	bl	8002498 <LL_ADC_IsEnabled>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4323      	orrs	r3, r4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4861      	ldr	r0, [pc, #388]	; (8002854 <HAL_ADC_Init+0x2ac>)
 80026d0:	f7ff fd12 	bl	80020f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7e5b      	ldrb	r3, [r3, #25]
 80026d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d106      	bne.n	8002710 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	3b01      	subs	r3, #1
 8002708:	045b      	lsls	r3, r3, #17
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_ADC_Init+0x2b0>)
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	430b      	orrs	r3, r1
 800273e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fef5 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 800274a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff16 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 8002756:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d140      	bne.n	80027e0 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13d      	bne.n	80027e0 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
 800276c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800276e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002776:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002786:	f023 0306 	bic.w	r3, r3, #6
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	430b      	orrs	r3, r1
 8002792:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800279a:	2b01      	cmp	r3, #1
 800279c:	d118      	bne.n	80027d0 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027b4:	4311      	orrs	r1, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027c0:	430a      	orrs	r2, r1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	e007      	b.n	80027e0 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10c      	bne.n	8002802 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f023 010f 	bic.w	r1, r3, #15
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	1e5a      	subs	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002800:	e007      	b.n	8002812 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 020f 	bic.w	r2, r2, #15
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	659a      	str	r2, [r3, #88]	; 0x58
 8002822:	e007      	b.n	8002834 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f043 0210 	orr.w	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002834:	7ffb      	ldrb	r3, [r7, #31]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd90      	pop	{r4, r7, pc}
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000
 8002844:	053e2d63 	.word	0x053e2d63
 8002848:	50040000 	.word	0x50040000
 800284c:	50040100 	.word	0x50040100
 8002850:	50040200 	.word	0x50040200
 8002854:	50040300 	.word	0x50040300
 8002858:	fff0c007 	.word	0xfff0c007

0800285c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002864:	4893      	ldr	r0, [pc, #588]	; (8002ab4 <HAL_ADC_Start_IT+0x258>)
 8002866:	f7ff fd85 	bl	8002374 <LL_ADC_GetMultimode>
 800286a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fe5f 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 8111 	bne.w	8002aa0 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_ADC_Start_IT+0x30>
 8002888:	2302      	movs	r3, #2
 800288a:	e10e      	b.n	8002aaa <HAL_ADC_Start_IT+0x24e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f001 f851 	bl	800393c <ADC_Enable>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 80f8 	bne.w	8002a96 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7e      	ldr	r2, [pc, #504]	; (8002ab8 <HAL_ADC_Start_IT+0x25c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d002      	beq.n	80028ca <HAL_ADC_Start_IT+0x6e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e000      	b.n	80028cc <HAL_ADC_Start_IT+0x70>
 80028ca:	4b7c      	ldr	r3, [pc, #496]	; (8002abc <HAL_ADC_Start_IT+0x260>)
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d002      	beq.n	80028da <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	f023 0206 	bic.w	r2, r3, #6
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80028fe:	e002      	b.n	8002906 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	221c      	movs	r2, #28
 800290c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 021c 	bic.w	r2, r2, #28
 8002924:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d108      	bne.n	8002940 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0208 	orr.w	r2, r2, #8
 800293c:	605a      	str	r2, [r3, #4]
          break;
 800293e:	e008      	b.n	8002952 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0204 	orr.w	r2, r2, #4
 800294e:	605a      	str	r2, [r3, #4]
          break;
 8002950:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0210 	orr.w	r2, r2, #16
 8002968:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_ADC_Start_IT+0x25c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d002      	beq.n	800297a <HAL_ADC_Start_IT+0x11e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	e000      	b.n	800297c <HAL_ADC_Start_IT+0x120>
 800297a:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_ADC_Start_IT+0x260>)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4293      	cmp	r3, r2
 8002982:	d008      	beq.n	8002996 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d002      	beq.n	8002996 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b09      	cmp	r3, #9
 8002994:	d13b      	bne.n	8002a0e <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02d      	beq.n	8002a00 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d110      	bne.n	80029de <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0220 	bic.w	r2, r2, #32
 80029ca:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029da:	605a      	str	r2, [r3, #4]
              break;
 80029dc:	e011      	b.n	8002a02 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ec:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0220 	orr.w	r2, r2, #32
 80029fc:	605a      	str	r2, [r3, #4]
              break;
 80029fe:	e000      	b.n	8002a02 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002a00:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fd6c 	bl	80024e4 <LL_ADC_REG_StartConversion>
 8002a0c:	e04c      	b.n	8002aa8 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <HAL_ADC_Start_IT+0x25c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d002      	beq.n	8002a2a <HAL_ADC_Start_IT+0x1ce>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	e000      	b.n	8002a2c <HAL_ADC_Start_IT+0x1d0>
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_ADC_Start_IT+0x260>)
 8002a2c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d035      	beq.n	8002aa6 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	659a      	str	r2, [r3, #88]	; 0x58
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d110      	bne.n	8002a74 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0220 	bic.w	r2, r2, #32
 8002a60:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a70:	605a      	str	r2, [r3, #4]
              break;
 8002a72:	e019      	b.n	8002aa8 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a82:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0220 	orr.w	r2, r2, #32
 8002a92:	605a      	str	r2, [r3, #4]
              break;
 8002a94:	e008      	b.n	8002aa8 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	75fb      	strb	r3, [r7, #23]
 8002aa4:	e000      	b.n	8002aa8 <HAL_ADC_Start_IT+0x24c>
        }
 8002aa6:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	50040300 	.word	0x50040300
 8002ab8:	50040100 	.word	0x50040100
 8002abc:	50040000 	.word	0x50040000

08002ac0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_Stop_IT+0x16>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e02b      	b.n	8002b2e <HAL_ADC_Stop_IT+0x6e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ade:	2103      	movs	r1, #3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fe6f 	bl	80037c4 <ADC_ConversionStop>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d119      	bne.n	8002b24 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 021c 	bic.w	r2, r2, #28
 8002afe:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 ff7d 	bl	8003a00 <ADC_Disable>
 8002b06:	4603      	mov	r3, r0
 8002b08:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b6c:	4882      	ldr	r0, [pc, #520]	; (8002d78 <HAL_ADC_IRQHandler+0x228>)
 8002b6e:	f7ff fc01 	bl	8002374 <LL_ADC_GetMultimode>
 8002b72:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d017      	beq.n	8002bae <HAL_ADC_IRQHandler+0x5e>
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d012      	beq.n	8002bae <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 ffda 	bl	8003b5a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2202      	movs	r2, #2
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x72>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8083 	beq.w	8002cd4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d07d      	beq.n	8002cd4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fb1b 	bl	8002230 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d062      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5d      	ldr	r2, [pc, #372]	; (8002d7c <HAL_ADC_IRQHandler+0x22c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d002      	beq.n	8002c10 <HAL_ADC_IRQHandler+0xc0>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	e000      	b.n	8002c12 <HAL_ADC_IRQHandler+0xc2>
 8002c10:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <HAL_ADC_IRQHandler+0x230>)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d008      	beq.n	8002c2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d002      	beq.n	8002c2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d104      	bne.n	8002c36 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	e00c      	b.n	8002c50 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a50      	ldr	r2, [pc, #320]	; (8002d7c <HAL_ADC_IRQHandler+0x22c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d002      	beq.n	8002c46 <HAL_ADC_IRQHandler+0xf6>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	e000      	b.n	8002c48 <HAL_ADC_IRQHandler+0xf8>
 8002c46:	4b4e      	ldr	r3, [pc, #312]	; (8002d80 <HAL_ADC_IRQHandler+0x230>)
 8002c48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d135      	bne.n	8002cc6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d12e      	bne.n	8002cc6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fc61 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d11a      	bne.n	8002cae <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 020c 	bic.w	r2, r2, #12
 8002c86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d112      	bne.n	8002cc6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	659a      	str	r2, [r3, #88]	; 0x58
 8002cac:	e00b      	b.n	8002cc6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fd6a 	bl	80017a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	220c      	movs	r2, #12
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x198>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 809f 	beq.w	8002e32 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8099 	beq.w	8002e32 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fac6 	bl	80022ae <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d22:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fa81 	bl	8002230 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d2e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_ADC_IRQHandler+0x22c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d002      	beq.n	8002d40 <HAL_ADC_IRQHandler+0x1f0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e000      	b.n	8002d42 <HAL_ADC_IRQHandler+0x1f2>
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_ADC_IRQHandler+0x230>)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d008      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d002      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b07      	cmp	r3, #7
 8002d5a:	d104      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	e013      	b.n	8002d8e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_ADC_IRQHandler+0x22c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_ADC_IRQHandler+0x234>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e007      	b.n	8002d86 <HAL_ADC_IRQHandler+0x236>
 8002d76:	bf00      	nop
 8002d78:	50040300 	.word	0x50040300
 8002d7c:	50040100 	.word	0x50040100
 8002d80:	50040000 	.word	0x50040000
 8002d84:	4b7d      	ldr	r3, [pc, #500]	; (8002f7c <HAL_ADC_IRQHandler+0x42c>)
 8002d86:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d047      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_ADC_IRQHandler+0x25e>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03f      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d13a      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d133      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d12e      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fbd9 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11a      	bne.n	8002e0c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002de4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d112      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	659a      	str	r2, [r3, #88]	; 0x58
 8002e0a:	e00b      	b.n	8002e24 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fe70 	bl	8003b0a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2260      	movs	r2, #96	; 0x60
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d011      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x310>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f896 	bl	8002f84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x340>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fe56 	bl	8003b32 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x370>
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fe48 	bl	8003b46 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d036      	beq.n	8002f38 <HAL_ADC_IRQHandler+0x3e8>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d031      	beq.n	8002f38 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002edc:	2301      	movs	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee0:	e014      	b.n	8002f0c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ee8:	4825      	ldr	r0, [pc, #148]	; (8002f80 <HAL_ADC_IRQHandler+0x430>)
 8002eea:	f7ff fa51 	bl	8002390 <LL_ADC_GetMultiDMATransfer>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef8:	e008      	b.n	8002f0c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10e      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f834 	bl	8002f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2210      	movs	r2, #16
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d018      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x424>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	f043 0208 	orr.w	r2, r3, #8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fdd5 	bl	8003b1e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f74:	bf00      	nop
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	50040000 	.word	0x50040000
 8002f80:	50040300 	.word	0x50040300

08002f84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0b6      	sub	sp, #216	; 0xd8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x22>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e3e3      	b.n	8003796 <HAL_ADC_ConfigChannel+0x7ea>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff faaa 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 83c4 	bne.w	8003770 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d824      	bhi.n	800303a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	3b02      	subs	r3, #2
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d81b      	bhi.n	8003032 <HAL_ADC_ConfigChannel+0x86>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <HAL_ADC_ConfigChannel+0x54>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003011 	.word	0x08003011
 8003004:	08003019 	.word	0x08003019
 8003008:	08003021 	.word	0x08003021
 800300c:	08003029 	.word	0x08003029
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	220c      	movs	r2, #12
 8003014:	605a      	str	r2, [r3, #4]
          break;
 8003016:	e011      	b.n	800303c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2212      	movs	r2, #18
 800301c:	605a      	str	r2, [r3, #4]
          break;
 800301e:	e00d      	b.n	800303c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2218      	movs	r2, #24
 8003024:	605a      	str	r2, [r3, #4]
          break;
 8003026:	e009      	b.n	800303c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800302e:	605a      	str	r2, [r3, #4]
          break;
 8003030:	e004      	b.n	800303c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2206      	movs	r2, #6
 8003036:	605a      	str	r2, [r3, #4]
          break;
 8003038:	e000      	b.n	800303c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800303a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	f7ff f904 	bl	8002256 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fa6e 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8003058:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fa8e 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 8003066:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800306a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 81c1 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 81bc 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003086:	d10f      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	4619      	mov	r1, r3
 8003094:	f7ff f91e 	bl	80022d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f8b2 	bl	800220a <LL_ADC_SetSamplingTimeCommonConfig>
 80030a6:	e00e      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f7ff f90d 	bl	80022d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff f8a2 	bl	800220a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d00a      	beq.n	80030fe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6919      	ldr	r1, [r3, #16]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030f8:	f7ff f832 	bl	8002160 <LL_ADC_SetOffset>
 80030fc:	e17b      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff f84f 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x17e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f844 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	e01e      	b.n	8003168 <HAL_ADC_ConfigChannel+0x1bc>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f839 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003148:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800314c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e004      	b.n	8003166 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800315c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1d4>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	e018      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x206>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800319c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e004      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80031a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f808 	bl	80021d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe ffec 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x244>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe ffe1 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	e01e      	b.n	800322e <HAL_ADC_ConfigChannel+0x282>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2101      	movs	r1, #1
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe ffd6 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800320e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800321e:	2320      	movs	r3, #32
 8003220:	e004      	b.n	800322c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x29a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	e018      	b.n	8003278 <HAL_ADC_ConfigChannel+0x2cc>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800325a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800325e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e004      	b.n	8003278 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800326e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003278:	429a      	cmp	r2, r3
 800327a:	d106      	bne.n	800328a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2200      	movs	r2, #0
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe ffa5 	bl	80021d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2102      	movs	r1, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe ff89 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x30a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe ff7e 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	e01e      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x348>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2102      	movs	r1, #2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe ff73 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e004      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80032e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_ADC_ConfigChannel+0x360>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	e016      	b.n	800333a <HAL_ADC_ConfigChannel+0x38e>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800331e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e004      	b.n	800333a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800333a:	429a      	cmp	r2, r3
 800333c:	d106      	bne.n	800334c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ff44 	bl	80021d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2103      	movs	r1, #3
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe ff28 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 8003358:	4603      	mov	r3, r0
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x3cc>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2103      	movs	r1, #3
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe ff1d 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	f003 021f 	and.w	r2, r3, #31
 8003376:	e017      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x3fc>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2103      	movs	r1, #3
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe ff12 	bl	80021a8 <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003392:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800339a:	2320      	movs	r3, #32
 800339c:	e003      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800339e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x414>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	0e9b      	lsrs	r3, r3, #26
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	e011      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x438>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80033d8:	2320      	movs	r3, #32
 80033da:	e003      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2103      	movs	r1, #3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe feef 	bl	80021d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f84c 	bl	8002498 <LL_ADC_IsEnabled>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 8140 	bne.w	8003688 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	461a      	mov	r2, r3
 8003416:	f7fe ff89 	bl	800232c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	4a8f      	ldr	r2, [pc, #572]	; (800365c <HAL_ADC_ConfigChannel+0x6b0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	f040 8131 	bne.w	8003688 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <HAL_ADC_ConfigChannel+0x4a2>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	3301      	adds	r3, #1
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2b09      	cmp	r3, #9
 8003444:	bf94      	ite	ls
 8003446:	2301      	movls	r3, #1
 8003448:	2300      	movhi	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	e019      	b.n	8003482 <HAL_ADC_ConfigChannel+0x4d6>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800345c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800345e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e003      	b.n	8003472 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800346a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2b09      	cmp	r3, #9
 800347a:	bf94      	ite	ls
 800347c:	2301      	movls	r3, #1
 800347e:	2300      	movhi	r3, #0
 8003480:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003482:	2b00      	cmp	r3, #0
 8003484:	d079      	beq.n	800357a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d107      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x4f6>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0e9b      	lsrs	r3, r3, #26
 8003498:	3301      	adds	r3, #1
 800349a:	069b      	lsls	r3, r3, #26
 800349c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a0:	e015      	b.n	80034ce <HAL_ADC_ConfigChannel+0x522>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80034be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	069b      	lsls	r3, r3, #26
 80034ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x542>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	3301      	adds	r3, #1
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	e017      	b.n	800351e <HAL_ADC_ConfigChannel+0x572>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003506:	2320      	movs	r3, #32
 8003508:	e003      	b.n	8003512 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	ea42 0103 	orr.w	r1, r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x598>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	3301      	adds	r3, #1
 8003536:	f003 021f 	and.w	r2, r3, #31
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	051b      	lsls	r3, r3, #20
 8003542:	e018      	b.n	8003576 <HAL_ADC_ConfigChannel+0x5ca>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800355c:	2320      	movs	r3, #32
 800355e:	e003      	b.n	8003568 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f003 021f 	and.w	r2, r3, #31
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003576:	430b      	orrs	r3, r1
 8003578:	e081      	b.n	800367e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x5ea>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	3301      	adds	r3, #1
 800358e:	069b      	lsls	r3, r3, #26
 8003590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003594:	e015      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x616>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80035ae:	2320      	movs	r3, #32
 80035b0:	e003      	b.n	80035ba <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	069b      	lsls	r3, r3, #26
 80035be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x636>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0e9b      	lsrs	r3, r3, #26
 80035d4:	3301      	adds	r3, #1
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	e017      	b.n	8003612 <HAL_ADC_ConfigChannel+0x666>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	61fb      	str	r3, [r7, #28]
  return result;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80035fa:	2320      	movs	r3, #32
 80035fc:	e003      	b.n	8003606 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	ea42 0103 	orr.w	r1, r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <HAL_ADC_ConfigChannel+0x692>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0e9b      	lsrs	r3, r3, #26
 8003628:	3301      	adds	r3, #1
 800362a:	f003 021f 	and.w	r2, r3, #31
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	3b1e      	subs	r3, #30
 8003636:	051b      	lsls	r3, r3, #20
 8003638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800363c:	e01e      	b.n	800367c <HAL_ADC_ConfigChannel+0x6d0>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	613b      	str	r3, [r7, #16]
  return result;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003656:	2320      	movs	r3, #32
 8003658:	e006      	b.n	8003668 <HAL_ADC_ConfigChannel+0x6bc>
 800365a:	bf00      	nop
 800365c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f003 021f 	and.w	r2, r3, #31
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	3b1e      	subs	r3, #30
 8003676:	051b      	lsls	r3, r3, #20
 8003678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367c:	430b      	orrs	r3, r1
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	6892      	ldr	r2, [r2, #8]
 8003682:	4619      	mov	r1, r3
 8003684:	f7fe fe26 	bl	80022d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <HAL_ADC_ConfigChannel+0x7f4>)
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d07a      	beq.n	800378a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003694:	4843      	ldr	r0, [pc, #268]	; (80037a4 <HAL_ADC_ConfigChannel+0x7f8>)
 8003696:	f7fe fd55 	bl	8002144 <LL_ADC_GetCommonPathInternalCh>
 800369a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <HAL_ADC_ConfigChannel+0x7fc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d12c      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d126      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <HAL_ADC_ConfigChannel+0x800>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0x71c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3b      	ldr	r2, [pc, #236]	; (80037b0 <HAL_ADC_ConfigChannel+0x804>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d15d      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036d0:	4619      	mov	r1, r3
 80036d2:	4834      	ldr	r0, [pc, #208]	; (80037a4 <HAL_ADC_ConfigChannel+0x7f8>)
 80036d4:	f7fe fd23 	bl	800211e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_ADC_ConfigChannel+0x808>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	4a36      	ldr	r2, [pc, #216]	; (80037b8 <HAL_ADC_ConfigChannel+0x80c>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036f2:	e002      	b.n	80036fa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f9      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003700:	e040      	b.n	8003784 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_ADC_ConfigChannel+0x810>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d118      	bne.n	800373e <HAL_ADC_ConfigChannel+0x792>
 800370c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d112      	bne.n	800373e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <HAL_ADC_ConfigChannel+0x800>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_ADC_ConfigChannel+0x780>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <HAL_ADC_ConfigChannel+0x804>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12d      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003734:	4619      	mov	r1, r3
 8003736:	481b      	ldr	r0, [pc, #108]	; (80037a4 <HAL_ADC_ConfigChannel+0x7f8>)
 8003738:	f7fe fcf1 	bl	800211e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800373c:	e024      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <HAL_ADC_ConfigChannel+0x814>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d120      	bne.n	800378a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11a      	bne.n	800378a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <HAL_ADC_ConfigChannel+0x800>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d115      	bne.n	800378a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800375e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003766:	4619      	mov	r1, r3
 8003768:	480e      	ldr	r0, [pc, #56]	; (80037a4 <HAL_ADC_ConfigChannel+0x7f8>)
 800376a:	f7fe fcd8 	bl	800211e <LL_ADC_SetCommonPathInternalCh>
 800376e:	e00c      	b.n	800378a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003782:	e002      	b.n	800378a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003788:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003792:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003796:	4618      	mov	r0, r3
 8003798:	37d8      	adds	r7, #216	; 0xd8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	80080000 	.word	0x80080000
 80037a4:	50040300 	.word	0x50040300
 80037a8:	c7520000 	.word	0xc7520000
 80037ac:	50040000 	.word	0x50040000
 80037b0:	50040200 	.word	0x50040200
 80037b4:	20000000 	.word	0x20000000
 80037b8:	053e2d63 	.word	0x053e2d63
 80037bc:	cb840000 	.word	0xcb840000
 80037c0:	80000001 	.word	0x80000001

080037c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe feaa 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 80037e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fecb 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 80037ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8098 	beq.w	800392c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02a      	beq.n	8003860 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	7e5b      	ldrb	r3, [r3, #25]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d126      	bne.n	8003860 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7e1b      	ldrb	r3, [r3, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d122      	bne.n	8003860 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800381a:	2301      	movs	r3, #1
 800381c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800381e:	e014      	b.n	800384a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4a45      	ldr	r2, [pc, #276]	; (8003938 <ADC_ConversionStop+0x174>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d90d      	bls.n	8003844 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e074      	b.n	800392e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3301      	adds	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d1e3      	bne.n	8003820 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2240      	movs	r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d014      	beq.n	8003890 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fe62 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fe1f 	bl	80024be <LL_ADC_IsDisableOngoing>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fe3e 	bl	800250c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d014      	beq.n	80038c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fe71 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fe07 	bl	80024be <LL_ADC_IsDisableOngoing>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fe4d 	bl	800255a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d005      	beq.n	80038d2 <ADC_ConversionStop+0x10e>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d105      	bne.n	80038d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80038cc:	230c      	movs	r3, #12
 80038ce:	617b      	str	r3, [r7, #20]
        break;
 80038d0:	e005      	b.n	80038de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80038d2:	2308      	movs	r3, #8
 80038d4:	617b      	str	r3, [r7, #20]
        break;
 80038d6:	e002      	b.n	80038de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80038d8:	2304      	movs	r3, #4
 80038da:	617b      	str	r3, [r7, #20]
        break;
 80038dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80038de:	f7fe fb8f 	bl	8002000 <HAL_GetTick>
 80038e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038e4:	e01b      	b.n	800391e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038e6:	f7fe fb8b 	bl	8002000 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d914      	bls.n	800391e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e007      	b.n	800392e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1dc      	bne.n	80038e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	a33fffff 	.word	0xa33fffff

0800393c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fda5 	bl	8002498 <LL_ADC_IsEnabled>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d14d      	bne.n	80039f0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	4b28      	ldr	r3, [pc, #160]	; (80039fc <ADC_Enable+0xc0>)
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00d      	beq.n	800397e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e039      	b.n	80039f2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fd60 	bl	8002448 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003988:	f7fe fb3a 	bl	8002000 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800398e:	e028      	b.n	80039e2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fd7f 	bl	8002498 <LL_ADC_IsEnabled>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fd4f 	bl	8002448 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039aa:	f7fe fb29 	bl	8002000 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d914      	bls.n	80039e2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d00d      	beq.n	80039e2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f043 0210 	orr.w	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e007      	b.n	80039f2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d1cf      	bne.n	8003990 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	8000003f 	.word	0x8000003f

08003a00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fd56 	bl	80024be <LL_ADC_IsDisableOngoing>
 8003a12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe fd3d 	bl	8002498 <LL_ADC_IsEnabled>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d047      	beq.n	8003ab4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d144      	bne.n	8003ab4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030d 	and.w	r3, r3, #13
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10c      	bne.n	8003a52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fd17 	bl	8002470 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2203      	movs	r2, #3
 8003a48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a4a:	f7fe fad9 	bl	8002000 <HAL_GetTick>
 8003a4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a50:	e029      	b.n	8003aa6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e023      	b.n	8003ab6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a6e:	f7fe fac7 	bl	8002000 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d914      	bls.n	8003aa6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00d      	beq.n	8003aa6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	f043 0210 	orr.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e007      	b.n	8003ab6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1dc      	bne.n	8003a6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <LL_ADC_IsEnabled>:
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <LL_ADC_IsEnabled+0x18>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <LL_ADC_IsEnabled+0x1a>
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d101      	bne.n	8003afc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b0a1      	sub	sp, #132	; 0x84
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e093      	b.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003b96:	2300      	movs	r3, #0
 8003b98:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a47      	ldr	r2, [pc, #284]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d102      	bne.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ba8:	4b46      	ldr	r3, [pc, #280]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e001      	b.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e072      	b.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff86 	bl	8003ae4 <LL_ADC_REG_IsConversionOngoing>
 8003bd8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff80 	bl	8003ae4 <LL_ADC_REG_IsConversionOngoing>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d154      	bne.n	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d151      	bne.n	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bf0:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003bf2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02c      	beq.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c0e:	035b      	lsls	r3, r3, #13
 8003c10:	430b      	orrs	r3, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c18:	4829      	ldr	r0, [pc, #164]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c1a:	f7ff ff50 	bl	8003abe <LL_ADC_IsEnabled>
 8003c1e:	4604      	mov	r4, r0
 8003c20:	4828      	ldr	r0, [pc, #160]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c22:	f7ff ff4c 	bl	8003abe <LL_ADC_IsEnabled>
 8003c26:	4603      	mov	r3, r0
 8003c28:	431c      	orrs	r4, r3
 8003c2a:	4828      	ldr	r0, [pc, #160]	; (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c2c:	f7ff ff47 	bl	8003abe <LL_ADC_IsEnabled>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4323      	orrs	r3, r4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d137      	bne.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	6811      	ldr	r1, [r2, #0]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	6892      	ldr	r2, [r2, #8]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c52:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c54:	e028      	b.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c60:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c62:	4817      	ldr	r0, [pc, #92]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c64:	f7ff ff2b 	bl	8003abe <LL_ADC_IsEnabled>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	4816      	ldr	r0, [pc, #88]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c6c:	f7ff ff27 	bl	8003abe <LL_ADC_IsEnabled>
 8003c70:	4603      	mov	r3, r0
 8003c72:	431c      	orrs	r4, r3
 8003c74:	4815      	ldr	r0, [pc, #84]	; (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c76:	f7ff ff22 	bl	8003abe <LL_ADC_IsEnabled>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4323      	orrs	r3, r4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d112      	bne.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c8a:	f023 030f 	bic.w	r3, r3, #15
 8003c8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c92:	e009      	b.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ca6:	e000      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003cb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3784      	adds	r7, #132	; 0x84
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd90      	pop	{r4, r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	50040000 	.word	0x50040000
 8003cc4:	50040100 	.word	0x50040100
 8003cc8:	50040300 	.word	0x50040300
 8003ccc:	50040200 	.word	0x50040200

08003cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cec:	4013      	ands	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d02:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <__NVIC_SetPriorityGrouping+0x44>)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	60d3      	str	r3, [r2, #12]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <__NVIC_GetPriorityGrouping+0x18>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	f003 0307 	and.w	r3, r3, #7
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	db0b      	blt.n	8003d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	f003 021f 	and.w	r2, r3, #31
 8003d4c:	4907      	ldr	r1, [pc, #28]	; (8003d6c <__NVIC_EnableIRQ+0x38>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2001      	movs	r0, #1
 8003d56:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000e100 	.word	0xe000e100

08003d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	db0a      	blt.n	8003d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	490c      	ldr	r1, [pc, #48]	; (8003dbc <__NVIC_SetPriority+0x4c>)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	0112      	lsls	r2, r2, #4
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	440b      	add	r3, r1
 8003d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d98:	e00a      	b.n	8003db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	4908      	ldr	r1, [pc, #32]	; (8003dc0 <__NVIC_SetPriority+0x50>)
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	3b04      	subs	r3, #4
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	440b      	add	r3, r1
 8003dae:	761a      	strb	r2, [r3, #24]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000e100 	.word	0xe000e100
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b089      	sub	sp, #36	; 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f1c3 0307 	rsb	r3, r3, #7
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	bf28      	it	cs
 8003de2:	2304      	movcs	r3, #4
 8003de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d902      	bls.n	8003df4 <NVIC_EncodePriority+0x30>
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3b03      	subs	r3, #3
 8003df2:	e000      	b.n	8003df6 <NVIC_EncodePriority+0x32>
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	401a      	ands	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	43d9      	mvns	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	4313      	orrs	r3, r2
         );
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3724      	adds	r7, #36	; 0x24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e3c:	d301      	bcc.n	8003e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00f      	b.n	8003e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e42:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <SysTick_Config+0x40>)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e4a:	210f      	movs	r1, #15
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	f7ff ff8e 	bl	8003d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <SysTick_Config+0x40>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e5a:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <SysTick_Config+0x40>)
 8003e5c:	2207      	movs	r2, #7
 8003e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	e000e010 	.word	0xe000e010

08003e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff29 	bl	8003cd0 <__NVIC_SetPriorityGrouping>
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b086      	sub	sp, #24
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e98:	f7ff ff3e 	bl	8003d18 <__NVIC_GetPriorityGrouping>
 8003e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	6978      	ldr	r0, [r7, #20]
 8003ea4:	f7ff ff8e 	bl	8003dc4 <NVIC_EncodePriority>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff5d 	bl	8003d70 <__NVIC_SetPriority>
}
 8003eb6:	bf00      	nop
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff31 	bl	8003d34 <__NVIC_EnableIRQ>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ffa2 	bl	8003e2c <SysTick_Config>
 8003ee8:	4603      	mov	r3, r0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d008      	beq.n	8003f1c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e022      	b.n	8003f62 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 020e 	bic.w	r2, r2, #14
 8003f2a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	f003 021c 	and.w	r2, r3, #28
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d005      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e029      	b.n	8003fe6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 020e 	bic.w	r2, r2, #14
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f003 021c 	and.w	r2, r3, #28
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
    }
  }
  return status;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffe:	e166      	b.n	80042ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2101      	movs	r1, #1
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8158 	beq.w	80042c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d00b      	beq.n	8004038 <HAL_GPIO_Init+0x48>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d007      	beq.n	8004038 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800402c:	2b11      	cmp	r3, #17
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b12      	cmp	r3, #18
 8004036:	d130      	bne.n	800409a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	2203      	movs	r2, #3
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4013      	ands	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800406e:	2201      	movs	r2, #1
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	f003 0201 	and.w	r2, r3, #1
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0xea>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b12      	cmp	r3, #18
 80040d8:	d123      	bne.n	8004122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	08da      	lsrs	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3208      	adds	r2, #8
 80040e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	08da      	lsrs	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3208      	adds	r2, #8
 800411c:	6939      	ldr	r1, [r7, #16]
 800411e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0203 	and.w	r2, r3, #3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80b2 	beq.w	80042c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004164:	4b61      	ldr	r3, [pc, #388]	; (80042ec <HAL_GPIO_Init+0x2fc>)
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	4a60      	ldr	r2, [pc, #384]	; (80042ec <HAL_GPIO_Init+0x2fc>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6613      	str	r3, [r2, #96]	; 0x60
 8004170:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <HAL_GPIO_Init+0x2fc>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800417c:	4a5c      	ldr	r2, [pc, #368]	; (80042f0 <HAL_GPIO_Init+0x300>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	220f      	movs	r2, #15
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041a6:	d02b      	beq.n	8004200 <HAL_GPIO_Init+0x210>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a52      	ldr	r2, [pc, #328]	; (80042f4 <HAL_GPIO_Init+0x304>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d025      	beq.n	80041fc <HAL_GPIO_Init+0x20c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a51      	ldr	r2, [pc, #324]	; (80042f8 <HAL_GPIO_Init+0x308>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d01f      	beq.n	80041f8 <HAL_GPIO_Init+0x208>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a50      	ldr	r2, [pc, #320]	; (80042fc <HAL_GPIO_Init+0x30c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d019      	beq.n	80041f4 <HAL_GPIO_Init+0x204>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a4f      	ldr	r2, [pc, #316]	; (8004300 <HAL_GPIO_Init+0x310>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_GPIO_Init+0x200>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a4e      	ldr	r2, [pc, #312]	; (8004304 <HAL_GPIO_Init+0x314>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00d      	beq.n	80041ec <HAL_GPIO_Init+0x1fc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a4d      	ldr	r2, [pc, #308]	; (8004308 <HAL_GPIO_Init+0x318>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d007      	beq.n	80041e8 <HAL_GPIO_Init+0x1f8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a4c      	ldr	r2, [pc, #304]	; (800430c <HAL_GPIO_Init+0x31c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_GPIO_Init+0x1f4>
 80041e0:	2307      	movs	r3, #7
 80041e2:	e00e      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041e4:	2308      	movs	r3, #8
 80041e6:	e00c      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041e8:	2306      	movs	r3, #6
 80041ea:	e00a      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041ec:	2305      	movs	r3, #5
 80041ee:	e008      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041f0:	2304      	movs	r3, #4
 80041f2:	e006      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041f4:	2303      	movs	r3, #3
 80041f6:	e004      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e002      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_GPIO_Init+0x212>
 8004200:	2300      	movs	r3, #0
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	f002 0203 	and.w	r2, r2, #3
 8004208:	0092      	lsls	r2, r2, #2
 800420a:	4093      	lsls	r3, r2
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004212:	4937      	ldr	r1, [pc, #220]	; (80042f0 <HAL_GPIO_Init+0x300>)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	3302      	adds	r3, #2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004220:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_GPIO_Init+0x320>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	43db      	mvns	r3, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004244:	4a32      	ldr	r2, [pc, #200]	; (8004310 <HAL_GPIO_Init+0x320>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_GPIO_Init+0x320>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43db      	mvns	r3, r3
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800426e:	4a28      	ldr	r2, [pc, #160]	; (8004310 <HAL_GPIO_Init+0x320>)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004274:	4b26      	ldr	r3, [pc, #152]	; (8004310 <HAL_GPIO_Init+0x320>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	43db      	mvns	r3, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_GPIO_Init+0x320>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800429e:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <HAL_GPIO_Init+0x320>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <HAL_GPIO_Init+0x320>)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3301      	adds	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f47f ae91 	bne.w	8004000 <HAL_GPIO_Init+0x10>
  }
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40010000 	.word	0x40010000
 80042f4:	48000400 	.word	0x48000400
 80042f8:	48000800 	.word	0x48000800
 80042fc:	48000c00 	.word	0x48000c00
 8004300:	48001000 	.word	0x48001000
 8004304:	48001400 	.word	0x48001400
 8004308:	48001800 	.word	0x48001800
 800430c:	48001c00 	.word	0x48001c00
 8004310:	40010400 	.word	0x40010400

08004314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
 8004320:	4613      	mov	r3, r2
 8004322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004330:	e002      	b.n	8004338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4013      	ands	r3, r2
 800435c:	041a      	lsls	r2, r3, #16
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	43d9      	mvns	r1, r3
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	400b      	ands	r3, r1
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_PWREx_GetVoltageRange+0x18>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a2:	d130      	bne.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d038      	beq.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2232      	movs	r2, #50	; 0x32
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d8:	e002      	b.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d102      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f2      	bne.n	80043da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004400:	d110      	bne.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e00f      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d007      	beq.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004414:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800441c:	4a05      	ldr	r2, [pc, #20]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004422:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40007000 	.word	0x40007000
 8004438:	20000000 	.word	0x20000000
 800443c:	431bde83 	.word	0x431bde83

08004440 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_PWREx_EnableVddIO2+0x1c>)
 800444a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444e:	6053      	str	r3, [r2, #4]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f000 bc16 	b.w	8004ca0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004474:	4ba0      	ldr	r3, [pc, #640]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447e:	4b9e      	ldr	r3, [pc, #632]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80e4 	beq.w	800465e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_RCC_OscConfig+0x4c>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	f040 808b 	bne.w	80045ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	f040 8087 	bne.w	80045ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ac:	4b92      	ldr	r3, [pc, #584]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_OscConfig+0x64>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e3ed      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_RCC_OscConfig+0x7e>
 80044d4:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044dc:	e005      	b.n	80044ea <HAL_RCC_OscConfig+0x8a>
 80044de:	4b86      	ldr	r3, [pc, #536]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d223      	bcs.n	8004536 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd80 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e3ce      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004502:	4b7d      	ldr	r3, [pc, #500]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7c      	ldr	r2, [pc, #496]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	4977      	ldr	r1, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004520:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	4972      	ldr	r1, [pc, #456]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
 8004534:	e025      	b.n	8004582 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004536:	4b70      	ldr	r3, [pc, #448]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6f      	ldr	r2, [pc, #444]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b6d      	ldr	r3, [pc, #436]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	496a      	ldr	r1, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4965      	ldr	r1, [pc, #404]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd40 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e38e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004582:	f000 fc75 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004586:	4602      	mov	r2, r0
 8004588:	4b5b      	ldr	r3, [pc, #364]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	495a      	ldr	r1, [pc, #360]	; (80046fc <HAL_RCC_OscConfig+0x29c>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_RCC_OscConfig+0x2a0>)
 80045a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a2:	4b58      	ldr	r3, [pc, #352]	; (8004704 <HAL_RCC_OscConfig+0x2a4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fcda 	bl	8001f60 <HAL_InitTick>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d052      	beq.n	800465c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	e372      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d032      	beq.n	8004628 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c2:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a4c      	ldr	r2, [pc, #304]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ce:	f7fd fd17 	bl	8002000 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d6:	f7fd fd13 	bl	8002000 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e35b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e8:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3f      	ldr	r2, [pc, #252]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045fa:	f043 0308 	orr.w	r3, r3, #8
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	493a      	ldr	r1, [pc, #232]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004612:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	4935      	ldr	r1, [pc, #212]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]
 8004626:	e01a      	b.n	800465e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004628:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004634:	f7fd fce4 	bl	8002000 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800463c:	f7fd fce0 	bl	8002000 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e328      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800464e:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1dc>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d073      	beq.n	8004752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x21c>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d10e      	bne.n	8004694 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d10b      	bne.n	8004694 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d063      	beq.n	8004750 <HAL_RCC_OscConfig+0x2f0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d15f      	bne.n	8004750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e305      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d106      	bne.n	80046ac <HAL_RCC_OscConfig+0x24c>
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e01d      	b.n	80046e8 <HAL_RCC_OscConfig+0x288>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCC_OscConfig+0x270>
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e00b      	b.n	80046e8 <HAL_RCC_OscConfig+0x288>
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fd fc86 	bl	8002000 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f6:	e010      	b.n	800471a <HAL_RCC_OscConfig+0x2ba>
 80046f8:	40021000 	.word	0x40021000
 80046fc:	0800a0f8 	.word	0x0800a0f8
 8004700:	20000000 	.word	0x20000000
 8004704:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004708:	f7fd fc7a 	bl	8002000 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e2c2      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471a:	4baf      	ldr	r3, [pc, #700]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x2a8>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd fc6a 	bl	8002000 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004730:	f7fd fc66 	bl	8002000 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e2ae      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004742:	4ba5      	ldr	r3, [pc, #660]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x2d0>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d060      	beq.n	8004820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d005      	beq.n	8004770 <HAL_RCC_OscConfig+0x310>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d119      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d116      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004770:	4b99      	ldr	r3, [pc, #612]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_OscConfig+0x328>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e28b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b93      	ldr	r3, [pc, #588]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	4990      	ldr	r1, [pc, #576]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479c:	e040      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d023      	beq.n	80047ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a6:	4b8c      	ldr	r3, [pc, #560]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a8b      	ldr	r2, [pc, #556]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd fc25 	bl	8002000 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fd fc21 	bl	8002000 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e269      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047cc:	4b82      	ldr	r3, [pc, #520]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	497c      	ldr	r1, [pc, #496]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	e018      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ee:	4b7a      	ldr	r3, [pc, #488]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a79      	ldr	r2, [pc, #484]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd fc01 	bl	8002000 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fd fbfd 	bl	8002000 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e245      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004814:	4b70      	ldr	r3, [pc, #448]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d03c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01c      	beq.n	800486e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd fbdc 	bl	8002000 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484c:	f7fd fbd8 	bl	8002000 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e220      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485e:	4b5e      	ldr	r3, [pc, #376]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <HAL_RCC_OscConfig+0x3ec>
 800486c:	e01b      	b.n	80048a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486e:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	4a58      	ldr	r2, [pc, #352]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fd fbbf 	bl	8002000 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004886:	f7fd fbbb 	bl	8002000 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e203      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004898:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ef      	bne.n	8004886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a6 	beq.w	8004a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048b8:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	4a43      	ldr	r2, [pc, #268]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	; 0x58
 80048d0:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d118      	bne.n	800491e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ec:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f8:	f7fd fb82 	bl	8002000 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004900:	f7fd fb7e 	bl	8002000 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1c6      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004912:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d108      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d8>
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004936:	e024      	b.n	8004982 <HAL_RCC_OscConfig+0x522>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b05      	cmp	r3, #5
 800493e:	d110      	bne.n	8004962 <HAL_RCC_OscConfig+0x502>
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004960:	e00f      	b.n	8004982 <HAL_RCC_OscConfig+0x522>
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800497a:	f023 0304 	bic.w	r3, r3, #4
 800497e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd fb39 	bl	8002000 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fd fb35 	bl	8002000 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e17b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ed      	beq.n	8004992 <HAL_RCC_OscConfig+0x532>
 80049b6:	e01a      	b.n	80049ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd fb22 	bl	8002000 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049be:	e00f      	b.n	80049e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fd fb1e 	bl	8002000 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d906      	bls.n	80049e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e164      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e0:	4ba8      	ldr	r3, [pc, #672]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e8      	bne.n	80049c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7ffb      	ldrb	r3, [r7, #31]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4ba3      	ldr	r3, [pc, #652]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	4aa2      	ldr	r2, [pc, #648]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03c      	beq.n	8004a86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01c      	beq.n	8004a4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a14:	4b9b      	ldr	r3, [pc, #620]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a1a:	4a9a      	ldr	r2, [pc, #616]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fd faec 	bl	8002000 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a2c:	f7fd fae8 	bl	8002000 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e130      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a3e:	4b91      	ldr	r3, [pc, #580]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ef      	beq.n	8004a2c <HAL_RCC_OscConfig+0x5cc>
 8004a4c:	e01b      	b.n	8004a86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a4e:	4b8d      	ldr	r3, [pc, #564]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a54:	4a8b      	ldr	r2, [pc, #556]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fd facf 	bl	8002000 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a66:	f7fd facb 	bl	8002000 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e113      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a78:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ef      	bne.n	8004a66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8107 	beq.w	8004c9e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f040 80cb 	bne.w	8004c30 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a9a:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d12c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d123      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d11b      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d113      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	3b01      	subs	r3, #1
 8004aee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d109      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	3b01      	subs	r3, #1
 8004b02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d06d      	beq.n	8004be4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d068      	beq.n	8004be0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b0e:	4b5d      	ldr	r3, [pc, #372]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b1a:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0ba      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b56      	ldr	r3, [pc, #344]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a55      	ldr	r2, [pc, #340]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b36:	f7fd fa63 	bl	8002000 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fd fa5f 	bl	8002000 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e0a7      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b50:	4b4c      	ldr	r3, [pc, #304]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5c:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	4b49      	ldr	r3, [pc, #292]	; (8004c88 <HAL_RCC_OscConfig+0x828>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	0112      	lsls	r2, r2, #4
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b76:	0212      	lsls	r2, r2, #8
 8004b78:	4311      	orrs	r1, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b7e:	0852      	lsrs	r2, r2, #1
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0552      	lsls	r2, r2, #21
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b8a:	0852      	lsrs	r2, r2, #1
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	0652      	lsls	r2, r2, #25
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b96:	06d2      	lsls	r2, r2, #27
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	493a      	ldr	r1, [pc, #232]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ba0:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a37      	ldr	r2, [pc, #220]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bac:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a34      	ldr	r2, [pc, #208]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb8:	f7fd fa22 	bl	8002000 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fd fa1e 	bl	8002000 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e066      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bde:	e05e      	b.n	8004c9e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e05d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be4:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d156      	bne.n	8004c9e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bf0:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c08:	f7fd f9fa 	bl	8002000 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fd f9f6 	bl	8002000 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e03e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x7b0>
 8004c2e:	e036      	b.n	8004c9e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d031      	beq.n	8004c9a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c54:	f023 0303 	bic.w	r3, r3, #3
 8004c58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fd f9c9 	bl	8002000 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c70:	e00c      	b.n	8004c8c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fd f9c5 	bl	8002000 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d905      	bls.n	8004c8c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e00d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
 8004c84:	40021000 	.word	0x40021000
 8004c88:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_OscConfig+0x848>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ec      	bne.n	8004c72 <HAL_RCC_OscConfig+0x812>
 8004c98:	e001      	b.n	8004c9e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0c8      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b66      	ldr	r3, [pc, #408]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d910      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0207 	bic.w	r2, r3, #7
 8004cd6:	4961      	ldr	r1, [pc, #388]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0b0      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d04c      	beq.n	8004d96 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d04:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d121      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e09e      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d115      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e092      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d34:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e086      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e07e      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d54:	4b42      	ldr	r3, [pc, #264]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f023 0203 	bic.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	493f      	ldr	r1, [pc, #252]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d66:	f7fd f94b 	bl	8002000 <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6e:	f7fd f947 	bl	8002000 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e066      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d84:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 020c 	and.w	r2, r3, #12
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d1eb      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	492c      	ldr	r1, [pc, #176]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db4:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d210      	bcs.n	8004de4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 0207 	bic.w	r2, r3, #7
 8004dca:	4924      	ldr	r1, [pc, #144]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e036      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4918      	ldr	r1, [pc, #96]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4910      	ldr	r1, [pc, #64]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e22:	f000 f825 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	490c      	ldr	r1, [pc, #48]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	5ccb      	ldrb	r3, [r1, r3]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_RCC_ClockConfig+0x1c0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fd f88a 	bl	8001f60 <HAL_InitTick>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e50:	7afb      	ldrb	r3, [r7, #11]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40021000 	.word	0x40021000
 8004e64:	0800a0f8 	.word	0x0800a0f8
 8004e68:	20000000 	.word	0x20000000
 8004e6c:	20000004 	.word	0x20000004

08004e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e7e:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d121      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d11e      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004eb0:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10d      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d102      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e004      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d134      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004efe:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d003      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0xac>
 8004f14:	e005      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f18:	617b      	str	r3, [r7, #20]
      break;
 8004f1a:	e005      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f1e:	617b      	str	r3, [r7, #20]
      break;
 8004f20:	e002      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	617b      	str	r3, [r7, #20]
      break;
 8004f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	3301      	adds	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	fb02 f203 	mul.w	r2, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	0e5b      	lsrs	r3, r3, #25
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	3301      	adds	r3, #1
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f68:	69bb      	ldr	r3, [r7, #24]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3724      	adds	r7, #36	; 0x24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	0800a110 	.word	0x0800a110
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	007a1200 	.word	0x007a1200

08004f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20000000 	.word	0x20000000

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4904      	ldr	r1, [pc, #16]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	0800a108 	.word	0x0800a108

08004fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fd0:	f7ff ffda 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	0adb      	lsrs	r3, r3, #11
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	4904      	ldr	r1, [pc, #16]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fe2:	5ccb      	ldrb	r3, [r1, r3]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	0800a108 	.word	0x0800a108

08004ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005004:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005010:	f7ff f9b2 	bl	8004378 <HAL_PWREx_GetVoltageRange>
 8005014:	6178      	str	r0, [r7, #20]
 8005016:	e014      	b.n	8005042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
 8005024:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005030:	f7ff f9a2 	bl	8004378 <HAL_PWREx_GetVoltageRange>
 8005034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005036:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005048:	d10b      	bne.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d919      	bls.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2ba0      	cmp	r3, #160	; 0xa0
 8005054:	d902      	bls.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005056:	2302      	movs	r3, #2
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e013      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800505c:	2301      	movs	r3, #1
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e010      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d902      	bls.n	800506e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005068:	2303      	movs	r3, #3
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e00a      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d102      	bne.n	800507a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005074:	2302      	movs	r3, #2
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e004      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d101      	bne.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005080:	2301      	movs	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 0207 	bic.w	r2, r3, #7
 800508c:	4909      	ldr	r1, [pc, #36]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d001      	beq.n	80050a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40022000 	.word	0x40022000

080050b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c0:	2300      	movs	r3, #0
 80050c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050c4:	2300      	movs	r3, #0
 80050c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d041      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050dc:	d02a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e2:	d824      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050e8:	d008      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ee:	d81e      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f8:	d010      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050fa:	e018      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050fc:	4b86      	ldr	r3, [pc, #536]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a85      	ldr	r2, [pc, #532]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005106:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005108:	e015      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3304      	adds	r3, #4
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f000 facd 	bl	80056b0 <RCCEx_PLLSAI1_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800511a:	e00c      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3320      	adds	r3, #32
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fbb6 	bl	8005894 <RCCEx_PLLSAI2_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800512c:	e003      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	74fb      	strb	r3, [r7, #19]
      break;
 8005132:	e000      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800513c:	4b76      	ldr	r3, [pc, #472]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800514a:	4973      	ldr	r1, [pc, #460]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005152:	e001      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d041      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800516c:	d02a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800516e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005172:	d824      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005178:	d008      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800517a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800517e:	d81e      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005188:	d010      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800518a:	e018      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800518c:	4b62      	ldr	r3, [pc, #392]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	4a61      	ldr	r2, [pc, #388]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005196:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005198:	e015      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fa85 	bl	80056b0 <RCCEx_PLLSAI1_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051aa:	e00c      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3320      	adds	r3, #32
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fb6e 	bl	8005894 <RCCEx_PLLSAI2_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	74fb      	strb	r3, [r7, #19]
      break;
 80051c2:	e000      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c6:	7cfb      	ldrb	r3, [r7, #19]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051cc:	4b52      	ldr	r3, [pc, #328]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051da:	494f      	ldr	r1, [pc, #316]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051e2:	e001      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a0 	beq.w	8005336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051fa:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005210:	4b41      	ldr	r3, [pc, #260]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	4a40      	ldr	r2, [pc, #256]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	6593      	str	r3, [r2, #88]	; 0x58
 800521c:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005228:	2301      	movs	r3, #1
 800522a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522c:	4b3b      	ldr	r3, [pc, #236]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3a      	ldr	r2, [pc, #232]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005238:	f7fc fee2 	bl	8002000 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800523e:	e009      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005240:	f7fc fede 	bl	8002000 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d902      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	74fb      	strb	r3, [r7, #19]
        break;
 8005252:	e005      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005254:	4b31      	ldr	r3, [pc, #196]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0ef      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d15c      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005266:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01f      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	429a      	cmp	r2, r3
 8005282:	d019      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005290:	4b21      	ldr	r3, [pc, #132]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052a0:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c2:	f7fc fe9d 	bl	8002000 <HAL_GetTick>
 80052c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c8:	e00b      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fc fe99 	bl	8002000 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d902      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	74fb      	strb	r3, [r7, #19]
            break;
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ec      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10c      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f6:	4b08      	ldr	r3, [pc, #32]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	4904      	ldr	r1, [pc, #16]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800530e:	e009      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	74bb      	strb	r3, [r7, #18]
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000
 800531c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005324:	7c7b      	ldrb	r3, [r7, #17]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532a:	4ba6      	ldr	r3, [pc, #664]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	4aa5      	ldr	r2, [pc, #660]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005342:	4ba0      	ldr	r3, [pc, #640]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f023 0203 	bic.w	r2, r3, #3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	499c      	ldr	r1, [pc, #624]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005364:	4b97      	ldr	r3, [pc, #604]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f023 020c 	bic.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	4994      	ldr	r1, [pc, #592]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005386:	4b8f      	ldr	r3, [pc, #572]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	498b      	ldr	r1, [pc, #556]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053a8:	4b86      	ldr	r3, [pc, #536]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	4983      	ldr	r1, [pc, #524]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053ca:	4b7e      	ldr	r3, [pc, #504]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d8:	497a      	ldr	r1, [pc, #488]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ec:	4b75      	ldr	r3, [pc, #468]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	4972      	ldr	r1, [pc, #456]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800540e:	4b6d      	ldr	r3, [pc, #436]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541c:	4969      	ldr	r1, [pc, #420]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005430:	4b64      	ldr	r3, [pc, #400]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800543e:	4961      	ldr	r1, [pc, #388]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005452:	4b5c      	ldr	r3, [pc, #368]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005460:	4958      	ldr	r1, [pc, #352]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005474:	4b53      	ldr	r3, [pc, #332]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	4950      	ldr	r1, [pc, #320]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005496:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	4947      	ldr	r1, [pc, #284]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054b8:	4b42      	ldr	r3, [pc, #264]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054be:	f023 0203 	bic.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	493f      	ldr	r1, [pc, #252]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d028      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054da:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4936      	ldr	r1, [pc, #216]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f8:	d106      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054fa:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4a31      	ldr	r2, [pc, #196]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005504:	60d3      	str	r3, [r2, #12]
 8005506:	e011      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f8c9 	bl	80056b0 <RCCEx_PLLSAI1_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005546:	491f      	ldr	r1, [pc, #124]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005556:	d106      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005558:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005562:	60d3      	str	r3, [r2, #12]
 8005564:	e011      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556e:	d10c      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f89a 	bl	80056b0 <RCCEx_PLLSAI1_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005596:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a4:	4907      	ldr	r1, [pc, #28]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b4:	d108      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b6:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	4a02      	ldr	r2, [pc, #8]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c0:	60d3      	str	r3, [r2, #12]
 80055c2:	e013      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x534>
 80055c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	2101      	movs	r1, #1
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 f869 	bl	80056b0 <RCCEx_PLLSAI1_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055f8:	4b2c      	ldr	r3, [pc, #176]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005606:	4929      	ldr	r1, [pc, #164]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005616:	d10d      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f846 	bl	80056b0 <RCCEx_PLLSAI1_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d014      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	74bb      	strb	r3, [r7, #18]
 8005632:	e011      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800563c:	d10c      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3320      	adds	r3, #32
 8005642:	2102      	movs	r1, #2
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f925 	bl	8005894 <RCCEx_PLLSAI2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800564e:	7cfb      	ldrb	r3, [r7, #19]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005664:	4b11      	ldr	r3, [pc, #68]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005674:	490d      	ldr	r1, [pc, #52]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005688:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005698:	4904      	ldr	r1, [pc, #16]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40021000 	.word	0x40021000

080056b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056be:	4b74      	ldr	r3, [pc, #464]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056ca:	4b71      	ldr	r3, [pc, #452]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0203 	and.w	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d10d      	bne.n	80056f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
       ||
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056e2:	4b6b      	ldr	r3, [pc, #428]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
       ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d047      	beq.n	8005786 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
 80056fa:	e044      	b.n	8005786 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d018      	beq.n	8005736 <RCCEx_PLLSAI1_Config+0x86>
 8005704:	2b03      	cmp	r3, #3
 8005706:	d825      	bhi.n	8005754 <RCCEx_PLLSAI1_Config+0xa4>
 8005708:	2b01      	cmp	r3, #1
 800570a:	d002      	beq.n	8005712 <RCCEx_PLLSAI1_Config+0x62>
 800570c:	2b02      	cmp	r3, #2
 800570e:	d009      	beq.n	8005724 <RCCEx_PLLSAI1_Config+0x74>
 8005710:	e020      	b.n	8005754 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005712:	4b5f      	ldr	r3, [pc, #380]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d11d      	bne.n	800575a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005722:	e01a      	b.n	800575a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005724:	4b5a      	ldr	r3, [pc, #360]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572c:	2b00      	cmp	r3, #0
 800572e:	d116      	bne.n	800575e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005734:	e013      	b.n	800575e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005736:	4b56      	ldr	r3, [pc, #344]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005742:	4b53      	ldr	r3, [pc, #332]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005752:	e006      	b.n	8005762 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
      break;
 8005758:	e004      	b.n	8005764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800575a:	bf00      	nop
 800575c:	e002      	b.n	8005764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800575e:	bf00      	nop
 8005760:	e000      	b.n	8005764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005762:	bf00      	nop
    }

    if(status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10d      	bne.n	8005786 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800576a:	4b49      	ldr	r3, [pc, #292]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	3b01      	subs	r3, #1
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	430b      	orrs	r3, r1
 8005780:	4943      	ldr	r1, [pc, #268]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005782:	4313      	orrs	r3, r2
 8005784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d17c      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800578c:	4b40      	ldr	r3, [pc, #256]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3f      	ldr	r2, [pc, #252]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005798:	f7fc fc32 	bl	8002000 <HAL_GetTick>
 800579c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800579e:	e009      	b.n	80057b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057a0:	f7fc fc2e 	bl	8002000 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d902      	bls.n	80057b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	73fb      	strb	r3, [r7, #15]
        break;
 80057b2:	e005      	b.n	80057c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057b4:	4b36      	ldr	r3, [pc, #216]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ef      	bne.n	80057a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d15f      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d110      	bne.n	80057ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057cc:	4b30      	ldr	r3, [pc, #192]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80057d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6892      	ldr	r2, [r2, #8]
 80057dc:	0211      	lsls	r1, r2, #8
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68d2      	ldr	r2, [r2, #12]
 80057e2:	06d2      	lsls	r2, r2, #27
 80057e4:	430a      	orrs	r2, r1
 80057e6:	492a      	ldr	r1, [pc, #168]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	610b      	str	r3, [r1, #16]
 80057ec:	e027      	b.n	800583e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d112      	bne.n	800581a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057f4:	4b26      	ldr	r3, [pc, #152]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6892      	ldr	r2, [r2, #8]
 8005804:	0211      	lsls	r1, r2, #8
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6912      	ldr	r2, [r2, #16]
 800580a:	0852      	lsrs	r2, r2, #1
 800580c:	3a01      	subs	r2, #1
 800580e:	0552      	lsls	r2, r2, #21
 8005810:	430a      	orrs	r2, r1
 8005812:	491f      	ldr	r1, [pc, #124]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005814:	4313      	orrs	r3, r2
 8005816:	610b      	str	r3, [r1, #16]
 8005818:	e011      	b.n	800583e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005822:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6892      	ldr	r2, [r2, #8]
 800582a:	0211      	lsls	r1, r2, #8
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6952      	ldr	r2, [r2, #20]
 8005830:	0852      	lsrs	r2, r2, #1
 8005832:	3a01      	subs	r2, #1
 8005834:	0652      	lsls	r2, r2, #25
 8005836:	430a      	orrs	r2, r1
 8005838:	4915      	ldr	r1, [pc, #84]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800583a:	4313      	orrs	r3, r2
 800583c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005848:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584a:	f7fc fbd9 	bl	8002000 <HAL_GetTick>
 800584e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005850:	e009      	b.n	8005866 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005852:	f7fc fbd5 	bl	8002000 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d902      	bls.n	8005866 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	73fb      	strb	r3, [r7, #15]
          break;
 8005864:	e005      	b.n	8005872 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0ef      	beq.n	8005852 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	4903      	ldr	r1, [pc, #12]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000

08005894 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058a2:	4b69      	ldr	r3, [pc, #420]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058ae:	4b66      	ldr	r3, [pc, #408]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0203 	and.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d10d      	bne.n	80058da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
       ||
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058c6:	4b60      	ldr	r3, [pc, #384]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
       ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d047      	beq.n	800596a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
 80058de:	e044      	b.n	800596a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d018      	beq.n	800591a <RCCEx_PLLSAI2_Config+0x86>
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d825      	bhi.n	8005938 <RCCEx_PLLSAI2_Config+0xa4>
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d002      	beq.n	80058f6 <RCCEx_PLLSAI2_Config+0x62>
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d009      	beq.n	8005908 <RCCEx_PLLSAI2_Config+0x74>
 80058f4:	e020      	b.n	8005938 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058f6:	4b54      	ldr	r3, [pc, #336]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d11d      	bne.n	800593e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005906:	e01a      	b.n	800593e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005908:	4b4f      	ldr	r3, [pc, #316]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d116      	bne.n	8005942 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005918:	e013      	b.n	8005942 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800591a:	4b4b      	ldr	r3, [pc, #300]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005926:	4b48      	ldr	r3, [pc, #288]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005936:	e006      	b.n	8005946 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
      break;
 800593c:	e004      	b.n	8005948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005946:	bf00      	nop
    }

    if(status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10d      	bne.n	800596a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800594e:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6819      	ldr	r1, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	3b01      	subs	r3, #1
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	430b      	orrs	r3, r1
 8005964:	4938      	ldr	r1, [pc, #224]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005966:	4313      	orrs	r3, r2
 8005968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d166      	bne.n	8005a3e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005970:	4b35      	ldr	r3, [pc, #212]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a34      	ldr	r2, [pc, #208]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597c:	f7fc fb40 	bl	8002000 <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005982:	e009      	b.n	8005998 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005984:	f7fc fb3c 	bl	8002000 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d902      	bls.n	8005998 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	73fb      	strb	r3, [r7, #15]
        break;
 8005996:	e005      	b.n	80059a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005998:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ef      	bne.n	8005984 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d149      	bne.n	8005a3e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d110      	bne.n	80059d2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80059b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
 80059c0:	0211      	lsls	r1, r2, #8
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68d2      	ldr	r2, [r2, #12]
 80059c6:	06d2      	lsls	r2, r2, #27
 80059c8:	430a      	orrs	r2, r1
 80059ca:	491f      	ldr	r1, [pc, #124]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	614b      	str	r3, [r1, #20]
 80059d0:	e011      	b.n	80059f6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059d2:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6892      	ldr	r2, [r2, #8]
 80059e2:	0211      	lsls	r1, r2, #8
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6912      	ldr	r2, [r2, #16]
 80059e8:	0852      	lsrs	r2, r2, #1
 80059ea:	3a01      	subs	r2, #1
 80059ec:	0652      	lsls	r2, r2, #25
 80059ee:	430a      	orrs	r2, r1
 80059f0:	4915      	ldr	r1, [pc, #84]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a02:	f7fc fafd 	bl	8002000 <HAL_GetTick>
 8005a06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a08:	e009      	b.n	8005a1e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a0a:	f7fc faf9 	bl	8002000 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d902      	bls.n	8005a1e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a1c:	e005      	b.n	8005a2a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0ef      	beq.n	8005a0a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	4903      	ldr	r1, [pc, #12]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40021000 	.word	0x40021000

08005a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e049      	b.n	8005af2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fc f954 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f000 fae2 	bl	8006054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e04f      	b.n	8005bb4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a23      	ldr	r2, [pc, #140]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01d      	beq.n	8005b72 <HAL_TIM_Base_Start_IT+0x76>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d018      	beq.n	8005b72 <HAL_TIM_Base_Start_IT+0x76>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1f      	ldr	r2, [pc, #124]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_TIM_Base_Start_IT+0x76>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_TIM_Base_Start_IT+0x76>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_TIM_Base_Start_IT+0x76>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_TIM_Base_Start_IT+0x76>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d115      	bne.n	8005b9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	4b17      	ldr	r3, [pc, #92]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d015      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0xb4>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8a:	d011      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9c:	e008      	b.n	8005bb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0201 	orr.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e000      	b.n	8005bb2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	00010007 	.word	0x00010007

08005bdc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6a1a      	ldr	r2, [r3, #32]
 8005bfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10f      	bne.n	8005c24 <HAL_TIM_Base_Stop_IT+0x48>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a1a      	ldr	r2, [r3, #32]
 8005c0a:	f240 4344 	movw	r3, #1092	; 0x444
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_Base_Stop_IT+0x48>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d122      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d11b      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f06f 0202 	mvn.w	r2, #2
 8005c66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9cb 	bl	8006018 <HAL_TIM_IC_CaptureCallback>
 8005c82:	e005      	b.n	8005c90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f9bd 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9ce 	bl	800602c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d122      	bne.n	8005cea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d11b      	bne.n	8005cea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f06f 0204 	mvn.w	r2, #4
 8005cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9a1 	bl	8006018 <HAL_TIM_IC_CaptureCallback>
 8005cd6:	e005      	b.n	8005ce4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f993 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9a4 	bl	800602c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d122      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d11b      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0208 	mvn.w	r2, #8
 8005d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2204      	movs	r2, #4
 8005d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f977 	bl	8006018 <HAL_TIM_IC_CaptureCallback>
 8005d2a:	e005      	b.n	8005d38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f969 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f97a 	bl	800602c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d122      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d11b      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f06f 0210 	mvn.w	r2, #16
 8005d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2208      	movs	r2, #8
 8005d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f94d 	bl	8006018 <HAL_TIM_IC_CaptureCallback>
 8005d7e:	e005      	b.n	8005d8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f93f 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f950 	bl	800602c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10e      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0201 	mvn.w	r2, #1
 8005db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fb fcd7 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d10e      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fafb 	bl	80063e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 faee 	bl	80063f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8fe 	bl	8006040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0220 	mvn.w	r2, #32
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 faae 	bl	80063cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_ConfigClockSource+0x18>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e0b5      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x184>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ecc:	d03e      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0xd4>
 8005ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed2:	f200 8087 	bhi.w	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eda:	f000 8085 	beq.w	8005fe8 <HAL_TIM_ConfigClockSource+0x170>
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d87f      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b70      	cmp	r3, #112	; 0x70
 8005ee6:	d01a      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ee8:	2b70      	cmp	r3, #112	; 0x70
 8005eea:	d87b      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b60      	cmp	r3, #96	; 0x60
 8005eee:	d050      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x11a>
 8005ef0:	2b60      	cmp	r3, #96	; 0x60
 8005ef2:	d877      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b50      	cmp	r3, #80	; 0x50
 8005ef6:	d03c      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0xfa>
 8005ef8:	2b50      	cmp	r3, #80	; 0x50
 8005efa:	d873      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d058      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d86f      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b30      	cmp	r3, #48	; 0x30
 8005f06:	d064      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b30      	cmp	r3, #48	; 0x30
 8005f0a:	d86b      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d060      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d867      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05c      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d05a      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005f1c:	e062      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6899      	ldr	r1, [r3, #8]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f000 f9a5 	bl	800627c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	609a      	str	r2, [r3, #8]
      break;
 8005f4a:	e04e      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6899      	ldr	r1, [r3, #8]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f000 f98e 	bl	800627c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6e:	609a      	str	r2, [r3, #8]
      break;
 8005f70:	e03b      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f000 f902 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2150      	movs	r1, #80	; 0x50
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 f95b 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005f90:	e02b      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6859      	ldr	r1, [r3, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f000 f921 	bl	80061e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2160      	movs	r1, #96	; 0x60
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f94b 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005fb0:	e01b      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6859      	ldr	r1, [r3, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f000 f8e2 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2140      	movs	r1, #64	; 0x40
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f93b 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005fd0:	e00b      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f000 f932 	bl	8006246 <TIM_ITRx_SetConfig>
        break;
 8005fe2:	e002      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005fe4:	bf00      	nop
 8005fe6:	e000      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005fe8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a40      	ldr	r2, [pc, #256]	; (8006168 <TIM_Base_SetConfig+0x114>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006072:	d00f      	beq.n	8006094 <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3d      	ldr	r2, [pc, #244]	; (800616c <TIM_Base_SetConfig+0x118>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00b      	beq.n	8006094 <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3c      	ldr	r2, [pc, #240]	; (8006170 <TIM_Base_SetConfig+0x11c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3b      	ldr	r2, [pc, #236]	; (8006174 <TIM_Base_SetConfig+0x120>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0x40>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a3a      	ldr	r2, [pc, #232]	; (8006178 <TIM_Base_SetConfig+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d108      	bne.n	80060a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a2f      	ldr	r2, [pc, #188]	; (8006168 <TIM_Base_SetConfig+0x114>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01f      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b4:	d01b      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2c      	ldr	r2, [pc, #176]	; (800616c <TIM_Base_SetConfig+0x118>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d017      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2b      	ldr	r2, [pc, #172]	; (8006170 <TIM_Base_SetConfig+0x11c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2a      	ldr	r2, [pc, #168]	; (8006174 <TIM_Base_SetConfig+0x120>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a29      	ldr	r2, [pc, #164]	; (8006178 <TIM_Base_SetConfig+0x124>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a28      	ldr	r2, [pc, #160]	; (800617c <TIM_Base_SetConfig+0x128>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a27      	ldr	r2, [pc, #156]	; (8006180 <TIM_Base_SetConfig+0x12c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_Base_SetConfig+0x9a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a26      	ldr	r2, [pc, #152]	; (8006184 <TIM_Base_SetConfig+0x130>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <TIM_Base_SetConfig+0x114>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00f      	beq.n	800614c <TIM_Base_SetConfig+0xf8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a12      	ldr	r2, [pc, #72]	; (8006178 <TIM_Base_SetConfig+0x124>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_Base_SetConfig+0xf8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a11      	ldr	r2, [pc, #68]	; (800617c <TIM_Base_SetConfig+0x128>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_Base_SetConfig+0xf8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <TIM_Base_SetConfig+0x12c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_Base_SetConfig+0xf8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <TIM_Base_SetConfig+0x130>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d103      	bne.n	8006154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	615a      	str	r2, [r3, #20]
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40013400 	.word	0x40013400
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0210 	bic.w	r2, r3, #16
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	f043 0307 	orr.w	r3, r3, #7
 8006268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e068      	b.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2e      	ldr	r2, [pc, #184]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d108      	bne.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800630e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01d      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d018      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a13      	ldr	r2, [pc, #76]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d10c      	bne.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4313      	orrs	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40013400 	.word	0x40013400
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800
 80063c4:	40000c00 	.word	0x40000c00
 80063c8:	40014000 	.word	0x40014000

080063cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e040      	b.n	800649c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fb fcce 	bl	8001dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	; 0x24
 8006434:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 faaa 	bl	80069a0 <UART_SetConfig>
 800644c:	4603      	mov	r3, r0
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e022      	b.n	800649c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fd28 	bl	8006eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006482:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fdaf 	bl	8006ff8 <UART_CheckIdleState>
 800649a:	4603      	mov	r3, r0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d145      	bne.n	8006546 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_UART_Transmit_IT+0x22>
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e03e      	b.n	8006548 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_UART_Transmit_IT+0x34>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e037      	b.n	8006548 <HAL_UART_Transmit_IT+0xa4>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	88fa      	ldrh	r2, [r7, #6]
 80064ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2221      	movs	r2, #33	; 0x21
 8006508:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	d107      	bne.n	8006524 <HAL_UART_Transmit_IT+0x80>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a0d      	ldr	r2, [pc, #52]	; (8006554 <HAL_UART_Transmit_IT+0xb0>)
 8006520:	669a      	str	r2, [r3, #104]	; 0x68
 8006522:	e002      	b.n	800652a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <HAL_UART_Transmit_IT+0xb4>)
 8006528:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006540:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e000      	b.n	8006548 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8006546:	2302      	movs	r3, #2
  }
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	08007281 	.word	0x08007281
 8006558:	0800720d 	.word	0x0800720d

0800655c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006582:	4013      	ands	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d113      	bne.n	80065b4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00e      	beq.n	80065b4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 81ce 	beq.w	8006946 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
      }
      return;
 80065b2:	e1c8      	b.n	8006946 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 80e3 	beq.w	8006782 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d105      	bne.n	80065d2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4ba6      	ldr	r3, [pc, #664]	; (8006864 <HAL_UART_IRQHandler+0x308>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80d8 	beq.w	8006782 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d010      	beq.n	80065fe <HAL_UART_IRQHandler+0xa2>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_UART_IRQHandler+0xce>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2202      	movs	r2, #2
 8006618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006620:	f043 0204 	orr.w	r2, r3, #4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <HAL_UART_IRQHandler+0xfa>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2204      	movs	r2, #4
 8006644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664c:	f043 0202 	orr.w	r2, r3, #2
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006692:	2b00      	cmp	r3, #0
 8006694:	d011      	beq.n	80066ba <HAL_UART_IRQHandler+0x15e>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8142 	beq.w	800694a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d004      	beq.n	800670a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006706:	2b00      	cmp	r3, #0
 8006708:	d031      	beq.n	800676e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fd39 	bl	8007182 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d123      	bne.n	8006766 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	2b00      	cmp	r3, #0
 8006734:	d013      	beq.n	800675e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4a4b      	ldr	r2, [pc, #300]	; (8006868 <HAL_UART_IRQHandler+0x30c>)
 800673c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	4618      	mov	r0, r3
 8006744:	f7fd fc13 	bl	8003f6e <HAL_DMA_Abort_IT>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	e00f      	b.n	800677e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f908 	bl	8006974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	e00b      	b.n	800677e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f904 	bl	8006974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	e007      	b.n	800677e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f900 	bl	8006974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800677c:	e0e5      	b.n	800694a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677e:	bf00      	nop
    return;
 8006780:	e0e3      	b.n	800694a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006786:	2b01      	cmp	r3, #1
 8006788:	f040 80a9 	bne.w	80068de <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80a3 	beq.w	80068de <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 809d 	beq.w	80068de <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2210      	movs	r2, #16
 80067aa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d158      	bne.n	800686c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80c1 	beq.w	800694e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067d2:	893a      	ldrh	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	f080 80ba 	bcs.w	800694e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	893a      	ldrh	r2, [r7, #8]
 80067de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d12a      	bne.n	8006848 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006800:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006820:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0210 	bic.w	r2, r2, #16
 800683c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	4618      	mov	r0, r3
 8006844:	f7fd fb55 	bl	8003ef2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006854:	b29b      	uxth	r3, r3
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	b29b      	uxth	r3, r3
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f893 	bl	8006988 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006862:	e074      	b.n	800694e <HAL_UART_IRQHandler+0x3f2>
 8006864:	04000120 	.word	0x04000120
 8006868:	080071e1 	.word	0x080071e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006878:	b29b      	uxth	r3, r3
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d063      	beq.n	8006952 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800688a:	897b      	ldrh	r3, [r7, #10]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d060      	beq.n	8006952 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800689e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0210 	bic.w	r2, r2, #16
 80068d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068d2:	897b      	ldrh	r3, [r7, #10]
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f856 	bl	8006988 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80068dc:	e039      	b.n	8006952 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00d      	beq.n	8006904 <HAL_UART_IRQHandler+0x3a8>
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fd16 	bl	800732e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006902:	e029      	b.n	8006958 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00d      	beq.n	800692a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01a      	beq.n	8006956 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
    }
    return;
 8006928:	e015      	b.n	8006956 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d011      	beq.n	8006958 <HAL_UART_IRQHandler+0x3fc>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fcdc 	bl	80072fc <UART_EndTransmit_IT>
    return;
 8006944:	e008      	b.n	8006958 <HAL_UART_IRQHandler+0x3fc>
      return;
 8006946:	bf00      	nop
 8006948:	e006      	b.n	8006958 <HAL_UART_IRQHandler+0x3fc>
    return;
 800694a:	bf00      	nop
 800694c:	e004      	b.n	8006958 <HAL_UART_IRQHandler+0x3fc>
      return;
 800694e:	bf00      	nop
 8006950:	e002      	b.n	8006958 <HAL_UART_IRQHandler+0x3fc>
      return;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <HAL_UART_IRQHandler+0x3fc>
    return;
 8006956:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop

08006960 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a0:	b5b0      	push	{r4, r5, r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4bad      	ldr	r3, [pc, #692]	; (8006c80 <UART_SetConfig+0x2e0>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	69f9      	ldr	r1, [r7, #28]
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4aa2      	ldr	r2, [pc, #648]	; (8006c84 <UART_SetConfig+0x2e4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a99      	ldr	r2, [pc, #612]	; (8006c88 <UART_SetConfig+0x2e8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d121      	bne.n	8006a6a <UART_SetConfig+0xca>
 8006a26:	4b99      	ldr	r3, [pc, #612]	; (8006c8c <UART_SetConfig+0x2ec>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d817      	bhi.n	8006a64 <UART_SetConfig+0xc4>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0x9c>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a59 	.word	0x08006a59
 8006a44:	08006a53 	.word	0x08006a53
 8006a48:	08006a5f 	.word	0x08006a5f
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	76fb      	strb	r3, [r7, #27]
 8006a50:	e0e7      	b.n	8006c22 <UART_SetConfig+0x282>
 8006a52:	2302      	movs	r3, #2
 8006a54:	76fb      	strb	r3, [r7, #27]
 8006a56:	e0e4      	b.n	8006c22 <UART_SetConfig+0x282>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	76fb      	strb	r3, [r7, #27]
 8006a5c:	e0e1      	b.n	8006c22 <UART_SetConfig+0x282>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	76fb      	strb	r3, [r7, #27]
 8006a62:	e0de      	b.n	8006c22 <UART_SetConfig+0x282>
 8006a64:	2310      	movs	r3, #16
 8006a66:	76fb      	strb	r3, [r7, #27]
 8006a68:	e0db      	b.n	8006c22 <UART_SetConfig+0x282>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a88      	ldr	r2, [pc, #544]	; (8006c90 <UART_SetConfig+0x2f0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d132      	bne.n	8006ada <UART_SetConfig+0x13a>
 8006a74:	4b85      	ldr	r3, [pc, #532]	; (8006c8c <UART_SetConfig+0x2ec>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	2b0c      	cmp	r3, #12
 8006a80:	d828      	bhi.n	8006ad4 <UART_SetConfig+0x134>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0xe8>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006ad5 	.word	0x08006ad5
 8006a90:	08006ad5 	.word	0x08006ad5
 8006a94:	08006ad5 	.word	0x08006ad5
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006ad5 	.word	0x08006ad5
 8006aa0:	08006ad5 	.word	0x08006ad5
 8006aa4:	08006ad5 	.word	0x08006ad5
 8006aa8:	08006ac3 	.word	0x08006ac3
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006ad5 	.word	0x08006ad5
 8006ab8:	08006acf 	.word	0x08006acf
 8006abc:	2300      	movs	r3, #0
 8006abe:	76fb      	strb	r3, [r7, #27]
 8006ac0:	e0af      	b.n	8006c22 <UART_SetConfig+0x282>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	76fb      	strb	r3, [r7, #27]
 8006ac6:	e0ac      	b.n	8006c22 <UART_SetConfig+0x282>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	76fb      	strb	r3, [r7, #27]
 8006acc:	e0a9      	b.n	8006c22 <UART_SetConfig+0x282>
 8006ace:	2308      	movs	r3, #8
 8006ad0:	76fb      	strb	r3, [r7, #27]
 8006ad2:	e0a6      	b.n	8006c22 <UART_SetConfig+0x282>
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	76fb      	strb	r3, [r7, #27]
 8006ad8:	e0a3      	b.n	8006c22 <UART_SetConfig+0x282>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a6d      	ldr	r2, [pc, #436]	; (8006c94 <UART_SetConfig+0x2f4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d120      	bne.n	8006b26 <UART_SetConfig+0x186>
 8006ae4:	4b69      	ldr	r3, [pc, #420]	; (8006c8c <UART_SetConfig+0x2ec>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006aee:	2b30      	cmp	r3, #48	; 0x30
 8006af0:	d013      	beq.n	8006b1a <UART_SetConfig+0x17a>
 8006af2:	2b30      	cmp	r3, #48	; 0x30
 8006af4:	d814      	bhi.n	8006b20 <UART_SetConfig+0x180>
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d009      	beq.n	8006b0e <UART_SetConfig+0x16e>
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d810      	bhi.n	8006b20 <UART_SetConfig+0x180>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <UART_SetConfig+0x168>
 8006b02:	2b10      	cmp	r3, #16
 8006b04:	d006      	beq.n	8006b14 <UART_SetConfig+0x174>
 8006b06:	e00b      	b.n	8006b20 <UART_SetConfig+0x180>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	76fb      	strb	r3, [r7, #27]
 8006b0c:	e089      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	76fb      	strb	r3, [r7, #27]
 8006b12:	e086      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b14:	2304      	movs	r3, #4
 8006b16:	76fb      	strb	r3, [r7, #27]
 8006b18:	e083      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	76fb      	strb	r3, [r7, #27]
 8006b1e:	e080      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b20:	2310      	movs	r3, #16
 8006b22:	76fb      	strb	r3, [r7, #27]
 8006b24:	e07d      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a5b      	ldr	r2, [pc, #364]	; (8006c98 <UART_SetConfig+0x2f8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d120      	bne.n	8006b72 <UART_SetConfig+0x1d2>
 8006b30:	4b56      	ldr	r3, [pc, #344]	; (8006c8c <UART_SetConfig+0x2ec>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b3c:	d013      	beq.n	8006b66 <UART_SetConfig+0x1c6>
 8006b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b40:	d814      	bhi.n	8006b6c <UART_SetConfig+0x1cc>
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d009      	beq.n	8006b5a <UART_SetConfig+0x1ba>
 8006b46:	2b80      	cmp	r3, #128	; 0x80
 8006b48:	d810      	bhi.n	8006b6c <UART_SetConfig+0x1cc>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <UART_SetConfig+0x1b4>
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d006      	beq.n	8006b60 <UART_SetConfig+0x1c0>
 8006b52:	e00b      	b.n	8006b6c <UART_SetConfig+0x1cc>
 8006b54:	2300      	movs	r3, #0
 8006b56:	76fb      	strb	r3, [r7, #27]
 8006b58:	e063      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	76fb      	strb	r3, [r7, #27]
 8006b5e:	e060      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b60:	2304      	movs	r3, #4
 8006b62:	76fb      	strb	r3, [r7, #27]
 8006b64:	e05d      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b66:	2308      	movs	r3, #8
 8006b68:	76fb      	strb	r3, [r7, #27]
 8006b6a:	e05a      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	76fb      	strb	r3, [r7, #27]
 8006b70:	e057      	b.n	8006c22 <UART_SetConfig+0x282>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a49      	ldr	r2, [pc, #292]	; (8006c9c <UART_SetConfig+0x2fc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d125      	bne.n	8006bc8 <UART_SetConfig+0x228>
 8006b7c:	4b43      	ldr	r3, [pc, #268]	; (8006c8c <UART_SetConfig+0x2ec>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b8a:	d017      	beq.n	8006bbc <UART_SetConfig+0x21c>
 8006b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b90:	d817      	bhi.n	8006bc2 <UART_SetConfig+0x222>
 8006b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b96:	d00b      	beq.n	8006bb0 <UART_SetConfig+0x210>
 8006b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b9c:	d811      	bhi.n	8006bc2 <UART_SetConfig+0x222>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <UART_SetConfig+0x20a>
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba6:	d006      	beq.n	8006bb6 <UART_SetConfig+0x216>
 8006ba8:	e00b      	b.n	8006bc2 <UART_SetConfig+0x222>
 8006baa:	2300      	movs	r3, #0
 8006bac:	76fb      	strb	r3, [r7, #27]
 8006bae:	e038      	b.n	8006c22 <UART_SetConfig+0x282>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	76fb      	strb	r3, [r7, #27]
 8006bb4:	e035      	b.n	8006c22 <UART_SetConfig+0x282>
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	76fb      	strb	r3, [r7, #27]
 8006bba:	e032      	b.n	8006c22 <UART_SetConfig+0x282>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	76fb      	strb	r3, [r7, #27]
 8006bc0:	e02f      	b.n	8006c22 <UART_SetConfig+0x282>
 8006bc2:	2310      	movs	r3, #16
 8006bc4:	76fb      	strb	r3, [r7, #27]
 8006bc6:	e02c      	b.n	8006c22 <UART_SetConfig+0x282>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2d      	ldr	r2, [pc, #180]	; (8006c84 <UART_SetConfig+0x2e4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d125      	bne.n	8006c1e <UART_SetConfig+0x27e>
 8006bd2:	4b2e      	ldr	r3, [pc, #184]	; (8006c8c <UART_SetConfig+0x2ec>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006be0:	d017      	beq.n	8006c12 <UART_SetConfig+0x272>
 8006be2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006be6:	d817      	bhi.n	8006c18 <UART_SetConfig+0x278>
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bec:	d00b      	beq.n	8006c06 <UART_SetConfig+0x266>
 8006bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf2:	d811      	bhi.n	8006c18 <UART_SetConfig+0x278>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <UART_SetConfig+0x260>
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfc:	d006      	beq.n	8006c0c <UART_SetConfig+0x26c>
 8006bfe:	e00b      	b.n	8006c18 <UART_SetConfig+0x278>
 8006c00:	2300      	movs	r3, #0
 8006c02:	76fb      	strb	r3, [r7, #27]
 8006c04:	e00d      	b.n	8006c22 <UART_SetConfig+0x282>
 8006c06:	2302      	movs	r3, #2
 8006c08:	76fb      	strb	r3, [r7, #27]
 8006c0a:	e00a      	b.n	8006c22 <UART_SetConfig+0x282>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	76fb      	strb	r3, [r7, #27]
 8006c10:	e007      	b.n	8006c22 <UART_SetConfig+0x282>
 8006c12:	2308      	movs	r3, #8
 8006c14:	76fb      	strb	r3, [r7, #27]
 8006c16:	e004      	b.n	8006c22 <UART_SetConfig+0x282>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	76fb      	strb	r3, [r7, #27]
 8006c1c:	e001      	b.n	8006c22 <UART_SetConfig+0x282>
 8006c1e:	2310      	movs	r3, #16
 8006c20:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <UART_SetConfig+0x2e4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	f040 8087 	bne.w	8006d3c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c2e:	7efb      	ldrb	r3, [r7, #27]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d837      	bhi.n	8006ca4 <UART_SetConfig+0x304>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x29c>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006ca5 	.word	0x08006ca5
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006ca5 	.word	0x08006ca5
 8006c4c:	08006c6f 	.word	0x08006c6f
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006ca5 	.word	0x08006ca5
 8006c58:	08006ca5 	.word	0x08006ca5
 8006c5c:	08006c77 	.word	0x08006c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fe f99e 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006c64:	6178      	str	r0, [r7, #20]
        break;
 8006c66:	e022      	b.n	8006cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <UART_SetConfig+0x300>)
 8006c6a:	617b      	str	r3, [r7, #20]
        break;
 8006c6c:	e01f      	b.n	8006cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6e:	f7fe f8ff 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006c72:	6178      	str	r0, [r7, #20]
        break;
 8006c74:	e01b      	b.n	8006cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	617b      	str	r3, [r7, #20]
        break;
 8006c7c:	e017      	b.n	8006cae <UART_SetConfig+0x30e>
 8006c7e:	bf00      	nop
 8006c80:	efff69f3 	.word	0xefff69f3
 8006c84:	40008000 	.word	0x40008000
 8006c88:	40013800 	.word	0x40013800
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40004400 	.word	0x40004400
 8006c94:	40004800 	.word	0x40004800
 8006c98:	40004c00 	.word	0x40004c00
 8006c9c:	40005000 	.word	0x40005000
 8006ca0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	76bb      	strb	r3, [r7, #26]
        break;
 8006cac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80f1 	beq.w	8006e98 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d305      	bcc.n	8006cd2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d902      	bls.n	8006cd8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	76bb      	strb	r3, [r7, #26]
 8006cd6:	e0df      	b.n	8006e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f04f 0100 	mov.w	r1, #0
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	020b      	lsls	r3, r1, #8
 8006cea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cee:	0202      	lsls	r2, r0, #8
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	6849      	ldr	r1, [r1, #4]
 8006cf4:	0849      	lsrs	r1, r1, #1
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	1814      	adds	r4, r2, r0
 8006cfe:	eb43 0501 	adc.w	r5, r3, r1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 ff5a 	bl	8000bc8 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4613      	mov	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d22:	d308      	bcc.n	8006d36 <UART_SetConfig+0x396>
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d2a:	d204      	bcs.n	8006d36 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	60da      	str	r2, [r3, #12]
 8006d34:	e0b0      	b.n	8006e98 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	76bb      	strb	r3, [r7, #26]
 8006d3a:	e0ad      	b.n	8006e98 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d44:	d15c      	bne.n	8006e00 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006d46:	7efb      	ldrb	r3, [r7, #27]
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d828      	bhi.n	8006d9e <UART_SetConfig+0x3fe>
 8006d4c:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0x3b4>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006d81 	.word	0x08006d81
 8006d5c:	08006d89 	.word	0x08006d89
 8006d60:	08006d9f 	.word	0x08006d9f
 8006d64:	08006d8f 	.word	0x08006d8f
 8006d68:	08006d9f 	.word	0x08006d9f
 8006d6c:	08006d9f 	.word	0x08006d9f
 8006d70:	08006d9f 	.word	0x08006d9f
 8006d74:	08006d97 	.word	0x08006d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d78:	f7fe f912 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006d7c:	6178      	str	r0, [r7, #20]
        break;
 8006d7e:	e013      	b.n	8006da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d80:	f7fe f924 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8006d84:	6178      	str	r0, [r7, #20]
        break;
 8006d86:	e00f      	b.n	8006da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d88:	4b49      	ldr	r3, [pc, #292]	; (8006eb0 <UART_SetConfig+0x510>)
 8006d8a:	617b      	str	r3, [r7, #20]
        break;
 8006d8c:	e00c      	b.n	8006da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8e:	f7fe f86f 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006d92:	6178      	str	r0, [r7, #20]
        break;
 8006d94:	e008      	b.n	8006da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9a:	617b      	str	r3, [r7, #20]
        break;
 8006d9c:	e004      	b.n	8006da8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	76bb      	strb	r3, [r7, #26]
        break;
 8006da6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d074      	beq.n	8006e98 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	005a      	lsls	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	441a      	add	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b0f      	cmp	r3, #15
 8006dca:	d916      	bls.n	8006dfa <UART_SetConfig+0x45a>
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd2:	d212      	bcs.n	8006dfa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f023 030f 	bic.w	r3, r3, #15
 8006ddc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	89fb      	ldrh	r3, [r7, #14]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	89fa      	ldrh	r2, [r7, #14]
 8006df6:	60da      	str	r2, [r3, #12]
 8006df8:	e04e      	b.n	8006e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	76bb      	strb	r3, [r7, #26]
 8006dfe:	e04b      	b.n	8006e98 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e00:	7efb      	ldrb	r3, [r7, #27]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d827      	bhi.n	8006e56 <UART_SetConfig+0x4b6>
 8006e06:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <UART_SetConfig+0x46c>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e41 	.word	0x08006e41
 8006e18:	08006e57 	.word	0x08006e57
 8006e1c:	08006e47 	.word	0x08006e47
 8006e20:	08006e57 	.word	0x08006e57
 8006e24:	08006e57 	.word	0x08006e57
 8006e28:	08006e57 	.word	0x08006e57
 8006e2c:	08006e4f 	.word	0x08006e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e30:	f7fe f8b6 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006e34:	6178      	str	r0, [r7, #20]
        break;
 8006e36:	e013      	b.n	8006e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e38:	f7fe f8c8 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8006e3c:	6178      	str	r0, [r7, #20]
        break;
 8006e3e:	e00f      	b.n	8006e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e40:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <UART_SetConfig+0x510>)
 8006e42:	617b      	str	r3, [r7, #20]
        break;
 8006e44:	e00c      	b.n	8006e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e46:	f7fe f813 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006e4a:	6178      	str	r0, [r7, #20]
        break;
 8006e4c:	e008      	b.n	8006e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e52:	617b      	str	r3, [r7, #20]
        break;
 8006e54:	e004      	b.n	8006e60 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	76bb      	strb	r3, [r7, #26]
        break;
 8006e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d018      	beq.n	8006e98 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085a      	lsrs	r2, r3, #1
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	441a      	add	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d908      	bls.n	8006e94 <UART_SetConfig+0x4f4>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e88:	d204      	bcs.n	8006e94 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	60da      	str	r2, [r3, #12]
 8006e92:	e001      	b.n	8006e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ea4:	7ebb      	ldrb	r3, [r7, #26]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bdb0      	pop	{r4, r5, r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	00f42400 	.word	0x00f42400

08006eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01a      	beq.n	8006fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb2:	d10a      	bne.n	8006fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	605a      	str	r2, [r3, #4]
  }
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007008:	f7fa fffa 	bl	8002000 <HAL_GetTick>
 800700c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b08      	cmp	r3, #8
 800701a:	d10e      	bne.n	800703a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f82d 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e023      	b.n	8007082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b04      	cmp	r3, #4
 8007046:	d10e      	bne.n	8007066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f817 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e00d      	b.n	8007082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800709a:	e05e      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d05a      	beq.n	800715a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a4:	f7fa ffac 	bl	8002000 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d302      	bcc.n	80070ba <UART_WaitOnFlagUntilTimeout+0x30>
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d11b      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e043      	b.n	800717a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d02c      	beq.n	800715a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800710a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710e:	d124      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007118:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007128:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2220      	movs	r2, #32
 800713e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e00f      	b.n	800717a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69da      	ldr	r2, [r3, #28]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d091      	beq.n	800709c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007198:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0201 	bic.w	r2, r2, #1
 80071a8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d107      	bne.n	80071c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0210 	bic.w	r2, r2, #16
 80071c0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7ff fbb8 	bl	8006974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007218:	2b21      	cmp	r3, #33	; 0x21
 800721a:	d12b      	bne.n	8007274 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d110      	bne.n	800724a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007236:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007246:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007248:	e014      	b.n	8007274 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	b292      	uxth	r2, r2
 8007256:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800728c:	2b21      	cmp	r3, #33	; 0x21
 800728e:	d12f      	bne.n	80072f0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d110      	bne.n	80072be <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072aa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ba:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80072bc:	e018      	b.n	80072f0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d0:	b292      	uxth	r2, r2
 80072d2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d8:	1c9a      	adds	r2, r3, #2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80072f0:	bf00      	nop
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007312:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff fb1d 	bl	8006960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <__errno>:
 8007344:	4b01      	ldr	r3, [pc, #4]	; (800734c <__errno+0x8>)
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	2000000c 	.word	0x2000000c

08007350 <__libc_init_array>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	4d0d      	ldr	r5, [pc, #52]	; (8007388 <__libc_init_array+0x38>)
 8007354:	4c0d      	ldr	r4, [pc, #52]	; (800738c <__libc_init_array+0x3c>)
 8007356:	1b64      	subs	r4, r4, r5
 8007358:	10a4      	asrs	r4, r4, #2
 800735a:	2600      	movs	r6, #0
 800735c:	42a6      	cmp	r6, r4
 800735e:	d109      	bne.n	8007374 <__libc_init_array+0x24>
 8007360:	4d0b      	ldr	r5, [pc, #44]	; (8007390 <__libc_init_array+0x40>)
 8007362:	4c0c      	ldr	r4, [pc, #48]	; (8007394 <__libc_init_array+0x44>)
 8007364:	f002 feb6 	bl	800a0d4 <_init>
 8007368:	1b64      	subs	r4, r4, r5
 800736a:	10a4      	asrs	r4, r4, #2
 800736c:	2600      	movs	r6, #0
 800736e:	42a6      	cmp	r6, r4
 8007370:	d105      	bne.n	800737e <__libc_init_array+0x2e>
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	f855 3b04 	ldr.w	r3, [r5], #4
 8007378:	4798      	blx	r3
 800737a:	3601      	adds	r6, #1
 800737c:	e7ee      	b.n	800735c <__libc_init_array+0xc>
 800737e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007382:	4798      	blx	r3
 8007384:	3601      	adds	r6, #1
 8007386:	e7f2      	b.n	800736e <__libc_init_array+0x1e>
 8007388:	0800a52c 	.word	0x0800a52c
 800738c:	0800a52c 	.word	0x0800a52c
 8007390:	0800a52c 	.word	0x0800a52c
 8007394:	0800a530 	.word	0x0800a530

08007398 <memset>:
 8007398:	4402      	add	r2, r0
 800739a:	4603      	mov	r3, r0
 800739c:	4293      	cmp	r3, r2
 800739e:	d100      	bne.n	80073a2 <memset+0xa>
 80073a0:	4770      	bx	lr
 80073a2:	f803 1b01 	strb.w	r1, [r3], #1
 80073a6:	e7f9      	b.n	800739c <memset+0x4>

080073a8 <__cvt>:
 80073a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	ec55 4b10 	vmov	r4, r5, d0
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	460e      	mov	r6, r1
 80073b4:	4619      	mov	r1, r3
 80073b6:	462b      	mov	r3, r5
 80073b8:	bfbb      	ittet	lt
 80073ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073be:	461d      	movlt	r5, r3
 80073c0:	2300      	movge	r3, #0
 80073c2:	232d      	movlt	r3, #45	; 0x2d
 80073c4:	700b      	strb	r3, [r1, #0]
 80073c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073cc:	4691      	mov	r9, r2
 80073ce:	f023 0820 	bic.w	r8, r3, #32
 80073d2:	bfbc      	itt	lt
 80073d4:	4622      	movlt	r2, r4
 80073d6:	4614      	movlt	r4, r2
 80073d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073dc:	d005      	beq.n	80073ea <__cvt+0x42>
 80073de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073e2:	d100      	bne.n	80073e6 <__cvt+0x3e>
 80073e4:	3601      	adds	r6, #1
 80073e6:	2102      	movs	r1, #2
 80073e8:	e000      	b.n	80073ec <__cvt+0x44>
 80073ea:	2103      	movs	r1, #3
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	ab02      	add	r3, sp, #8
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	ec45 4b10 	vmov	d0, r4, r5
 80073f8:	4653      	mov	r3, sl
 80073fa:	4632      	mov	r2, r6
 80073fc:	f000 fcec 	bl	8007dd8 <_dtoa_r>
 8007400:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007404:	4607      	mov	r7, r0
 8007406:	d102      	bne.n	800740e <__cvt+0x66>
 8007408:	f019 0f01 	tst.w	r9, #1
 800740c:	d022      	beq.n	8007454 <__cvt+0xac>
 800740e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007412:	eb07 0906 	add.w	r9, r7, r6
 8007416:	d110      	bne.n	800743a <__cvt+0x92>
 8007418:	783b      	ldrb	r3, [r7, #0]
 800741a:	2b30      	cmp	r3, #48	; 0x30
 800741c:	d10a      	bne.n	8007434 <__cvt+0x8c>
 800741e:	2200      	movs	r2, #0
 8007420:	2300      	movs	r3, #0
 8007422:	4620      	mov	r0, r4
 8007424:	4629      	mov	r1, r5
 8007426:	f7f9 fb5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800742a:	b918      	cbnz	r0, 8007434 <__cvt+0x8c>
 800742c:	f1c6 0601 	rsb	r6, r6, #1
 8007430:	f8ca 6000 	str.w	r6, [sl]
 8007434:	f8da 3000 	ldr.w	r3, [sl]
 8007438:	4499      	add	r9, r3
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f7f9 fb51 	bl	8000ae8 <__aeabi_dcmpeq>
 8007446:	b108      	cbz	r0, 800744c <__cvt+0xa4>
 8007448:	f8cd 900c 	str.w	r9, [sp, #12]
 800744c:	2230      	movs	r2, #48	; 0x30
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	454b      	cmp	r3, r9
 8007452:	d307      	bcc.n	8007464 <__cvt+0xbc>
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007458:	1bdb      	subs	r3, r3, r7
 800745a:	4638      	mov	r0, r7
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	b004      	add	sp, #16
 8007460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007464:	1c59      	adds	r1, r3, #1
 8007466:	9103      	str	r1, [sp, #12]
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e7f0      	b.n	800744e <__cvt+0xa6>

0800746c <__exponent>:
 800746c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800746e:	4603      	mov	r3, r0
 8007470:	2900      	cmp	r1, #0
 8007472:	bfb8      	it	lt
 8007474:	4249      	neglt	r1, r1
 8007476:	f803 2b02 	strb.w	r2, [r3], #2
 800747a:	bfb4      	ite	lt
 800747c:	222d      	movlt	r2, #45	; 0x2d
 800747e:	222b      	movge	r2, #43	; 0x2b
 8007480:	2909      	cmp	r1, #9
 8007482:	7042      	strb	r2, [r0, #1]
 8007484:	dd2a      	ble.n	80074dc <__exponent+0x70>
 8007486:	f10d 0407 	add.w	r4, sp, #7
 800748a:	46a4      	mov	ip, r4
 800748c:	270a      	movs	r7, #10
 800748e:	46a6      	mov	lr, r4
 8007490:	460a      	mov	r2, r1
 8007492:	fb91 f6f7 	sdiv	r6, r1, r7
 8007496:	fb07 1516 	mls	r5, r7, r6, r1
 800749a:	3530      	adds	r5, #48	; 0x30
 800749c:	2a63      	cmp	r2, #99	; 0x63
 800749e:	f104 34ff 	add.w	r4, r4, #4294967295
 80074a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074a6:	4631      	mov	r1, r6
 80074a8:	dcf1      	bgt.n	800748e <__exponent+0x22>
 80074aa:	3130      	adds	r1, #48	; 0x30
 80074ac:	f1ae 0502 	sub.w	r5, lr, #2
 80074b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074b4:	1c44      	adds	r4, r0, #1
 80074b6:	4629      	mov	r1, r5
 80074b8:	4561      	cmp	r1, ip
 80074ba:	d30a      	bcc.n	80074d2 <__exponent+0x66>
 80074bc:	f10d 0209 	add.w	r2, sp, #9
 80074c0:	eba2 020e 	sub.w	r2, r2, lr
 80074c4:	4565      	cmp	r5, ip
 80074c6:	bf88      	it	hi
 80074c8:	2200      	movhi	r2, #0
 80074ca:	4413      	add	r3, r2
 80074cc:	1a18      	subs	r0, r3, r0
 80074ce:	b003      	add	sp, #12
 80074d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80074da:	e7ed      	b.n	80074b8 <__exponent+0x4c>
 80074dc:	2330      	movs	r3, #48	; 0x30
 80074de:	3130      	adds	r1, #48	; 0x30
 80074e0:	7083      	strb	r3, [r0, #2]
 80074e2:	70c1      	strb	r1, [r0, #3]
 80074e4:	1d03      	adds	r3, r0, #4
 80074e6:	e7f1      	b.n	80074cc <__exponent+0x60>

080074e8 <_printf_float>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	ed2d 8b02 	vpush	{d8}
 80074f0:	b08d      	sub	sp, #52	; 0x34
 80074f2:	460c      	mov	r4, r1
 80074f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074f8:	4616      	mov	r6, r2
 80074fa:	461f      	mov	r7, r3
 80074fc:	4605      	mov	r5, r0
 80074fe:	f001 fa57 	bl	80089b0 <_localeconv_r>
 8007502:	f8d0 a000 	ldr.w	sl, [r0]
 8007506:	4650      	mov	r0, sl
 8007508:	f7f8 fe72 	bl	80001f0 <strlen>
 800750c:	2300      	movs	r3, #0
 800750e:	930a      	str	r3, [sp, #40]	; 0x28
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	9305      	str	r3, [sp, #20]
 8007514:	f8d8 3000 	ldr.w	r3, [r8]
 8007518:	f894 b018 	ldrb.w	fp, [r4, #24]
 800751c:	3307      	adds	r3, #7
 800751e:	f023 0307 	bic.w	r3, r3, #7
 8007522:	f103 0208 	add.w	r2, r3, #8
 8007526:	f8c8 2000 	str.w	r2, [r8]
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007532:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800753a:	9307      	str	r3, [sp, #28]
 800753c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007540:	ee08 0a10 	vmov	s16, r0
 8007544:	4b9f      	ldr	r3, [pc, #636]	; (80077c4 <_printf_float+0x2dc>)
 8007546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800754a:	f04f 32ff 	mov.w	r2, #4294967295
 800754e:	f7f9 fafd 	bl	8000b4c <__aeabi_dcmpun>
 8007552:	bb88      	cbnz	r0, 80075b8 <_printf_float+0xd0>
 8007554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007558:	4b9a      	ldr	r3, [pc, #616]	; (80077c4 <_printf_float+0x2dc>)
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	f7f9 fad7 	bl	8000b10 <__aeabi_dcmple>
 8007562:	bb48      	cbnz	r0, 80075b8 <_printf_float+0xd0>
 8007564:	2200      	movs	r2, #0
 8007566:	2300      	movs	r3, #0
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 fac6 	bl	8000afc <__aeabi_dcmplt>
 8007570:	b110      	cbz	r0, 8007578 <_printf_float+0x90>
 8007572:	232d      	movs	r3, #45	; 0x2d
 8007574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007578:	4b93      	ldr	r3, [pc, #588]	; (80077c8 <_printf_float+0x2e0>)
 800757a:	4894      	ldr	r0, [pc, #592]	; (80077cc <_printf_float+0x2e4>)
 800757c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007580:	bf94      	ite	ls
 8007582:	4698      	movls	r8, r3
 8007584:	4680      	movhi	r8, r0
 8007586:	2303      	movs	r3, #3
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	f023 0204 	bic.w	r2, r3, #4
 8007590:	6022      	str	r2, [r4, #0]
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	9700      	str	r7, [sp, #0]
 8007598:	4633      	mov	r3, r6
 800759a:	aa0b      	add	r2, sp, #44	; 0x2c
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f9d8 	bl	8007954 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f040 8090 	bne.w	80076ca <_printf_float+0x1e2>
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295
 80075ae:	b00d      	add	sp, #52	; 0x34
 80075b0:	ecbd 8b02 	vpop	{d8}
 80075b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b8:	4642      	mov	r2, r8
 80075ba:	464b      	mov	r3, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	4649      	mov	r1, r9
 80075c0:	f7f9 fac4 	bl	8000b4c <__aeabi_dcmpun>
 80075c4:	b140      	cbz	r0, 80075d8 <_printf_float+0xf0>
 80075c6:	464b      	mov	r3, r9
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bfbc      	itt	lt
 80075cc:	232d      	movlt	r3, #45	; 0x2d
 80075ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075d2:	487f      	ldr	r0, [pc, #508]	; (80077d0 <_printf_float+0x2e8>)
 80075d4:	4b7f      	ldr	r3, [pc, #508]	; (80077d4 <_printf_float+0x2ec>)
 80075d6:	e7d1      	b.n	800757c <_printf_float+0x94>
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075de:	9206      	str	r2, [sp, #24]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	d13f      	bne.n	8007664 <_printf_float+0x17c>
 80075e4:	2306      	movs	r3, #6
 80075e6:	6063      	str	r3, [r4, #4]
 80075e8:	9b05      	ldr	r3, [sp, #20]
 80075ea:	6861      	ldr	r1, [r4, #4]
 80075ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075f0:	2300      	movs	r3, #0
 80075f2:	9303      	str	r3, [sp, #12]
 80075f4:	ab0a      	add	r3, sp, #40	; 0x28
 80075f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075fa:	ab09      	add	r3, sp, #36	; 0x24
 80075fc:	ec49 8b10 	vmov	d0, r8, r9
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	6022      	str	r2, [r4, #0]
 8007604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007608:	4628      	mov	r0, r5
 800760a:	f7ff fecd 	bl	80073a8 <__cvt>
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007612:	2b47      	cmp	r3, #71	; 0x47
 8007614:	4680      	mov	r8, r0
 8007616:	d108      	bne.n	800762a <_printf_float+0x142>
 8007618:	1cc8      	adds	r0, r1, #3
 800761a:	db02      	blt.n	8007622 <_printf_float+0x13a>
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	4299      	cmp	r1, r3
 8007620:	dd41      	ble.n	80076a6 <_printf_float+0x1be>
 8007622:	f1ab 0b02 	sub.w	fp, fp, #2
 8007626:	fa5f fb8b 	uxtb.w	fp, fp
 800762a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800762e:	d820      	bhi.n	8007672 <_printf_float+0x18a>
 8007630:	3901      	subs	r1, #1
 8007632:	465a      	mov	r2, fp
 8007634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007638:	9109      	str	r1, [sp, #36]	; 0x24
 800763a:	f7ff ff17 	bl	800746c <__exponent>
 800763e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007640:	1813      	adds	r3, r2, r0
 8007642:	2a01      	cmp	r2, #1
 8007644:	4681      	mov	r9, r0
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	dc02      	bgt.n	8007650 <_printf_float+0x168>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	07d2      	lsls	r2, r2, #31
 800764e:	d501      	bpl.n	8007654 <_printf_float+0x16c>
 8007650:	3301      	adds	r3, #1
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007658:	2b00      	cmp	r3, #0
 800765a:	d09c      	beq.n	8007596 <_printf_float+0xae>
 800765c:	232d      	movs	r3, #45	; 0x2d
 800765e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007662:	e798      	b.n	8007596 <_printf_float+0xae>
 8007664:	9a06      	ldr	r2, [sp, #24]
 8007666:	2a47      	cmp	r2, #71	; 0x47
 8007668:	d1be      	bne.n	80075e8 <_printf_float+0x100>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1bc      	bne.n	80075e8 <_printf_float+0x100>
 800766e:	2301      	movs	r3, #1
 8007670:	e7b9      	b.n	80075e6 <_printf_float+0xfe>
 8007672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007676:	d118      	bne.n	80076aa <_printf_float+0x1c2>
 8007678:	2900      	cmp	r1, #0
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	dd0b      	ble.n	8007696 <_printf_float+0x1ae>
 800767e:	6121      	str	r1, [r4, #16]
 8007680:	b913      	cbnz	r3, 8007688 <_printf_float+0x1a0>
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	07d0      	lsls	r0, r2, #31
 8007686:	d502      	bpl.n	800768e <_printf_float+0x1a6>
 8007688:	3301      	adds	r3, #1
 800768a:	440b      	add	r3, r1
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007690:	f04f 0900 	mov.w	r9, #0
 8007694:	e7de      	b.n	8007654 <_printf_float+0x16c>
 8007696:	b913      	cbnz	r3, 800769e <_printf_float+0x1b6>
 8007698:	6822      	ldr	r2, [r4, #0]
 800769a:	07d2      	lsls	r2, r2, #31
 800769c:	d501      	bpl.n	80076a2 <_printf_float+0x1ba>
 800769e:	3302      	adds	r3, #2
 80076a0:	e7f4      	b.n	800768c <_printf_float+0x1a4>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e7f2      	b.n	800768c <_printf_float+0x1a4>
 80076a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ac:	4299      	cmp	r1, r3
 80076ae:	db05      	blt.n	80076bc <_printf_float+0x1d4>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	6121      	str	r1, [r4, #16]
 80076b4:	07d8      	lsls	r0, r3, #31
 80076b6:	d5ea      	bpl.n	800768e <_printf_float+0x1a6>
 80076b8:	1c4b      	adds	r3, r1, #1
 80076ba:	e7e7      	b.n	800768c <_printf_float+0x1a4>
 80076bc:	2900      	cmp	r1, #0
 80076be:	bfd4      	ite	le
 80076c0:	f1c1 0202 	rsble	r2, r1, #2
 80076c4:	2201      	movgt	r2, #1
 80076c6:	4413      	add	r3, r2
 80076c8:	e7e0      	b.n	800768c <_printf_float+0x1a4>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	055a      	lsls	r2, r3, #21
 80076ce:	d407      	bmi.n	80076e0 <_printf_float+0x1f8>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	4642      	mov	r2, r8
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	d12c      	bne.n	8007738 <_printf_float+0x250>
 80076de:	e764      	b.n	80075aa <_printf_float+0xc2>
 80076e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076e4:	f240 80e0 	bls.w	80078a8 <_printf_float+0x3c0>
 80076e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	f7f9 f9fa 	bl	8000ae8 <__aeabi_dcmpeq>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d034      	beq.n	8007762 <_printf_float+0x27a>
 80076f8:	4a37      	ldr	r2, [pc, #220]	; (80077d8 <_printf_float+0x2f0>)
 80076fa:	2301      	movs	r3, #1
 80076fc:	4631      	mov	r1, r6
 80076fe:	4628      	mov	r0, r5
 8007700:	47b8      	blx	r7
 8007702:	3001      	adds	r0, #1
 8007704:	f43f af51 	beq.w	80075aa <_printf_float+0xc2>
 8007708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800770c:	429a      	cmp	r2, r3
 800770e:	db02      	blt.n	8007716 <_printf_float+0x22e>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	07d8      	lsls	r0, r3, #31
 8007714:	d510      	bpl.n	8007738 <_printf_float+0x250>
 8007716:	ee18 3a10 	vmov	r3, s16
 800771a:	4652      	mov	r2, sl
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f af41 	beq.w	80075aa <_printf_float+0xc2>
 8007728:	f04f 0800 	mov.w	r8, #0
 800772c:	f104 091a 	add.w	r9, r4, #26
 8007730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007732:	3b01      	subs	r3, #1
 8007734:	4543      	cmp	r3, r8
 8007736:	dc09      	bgt.n	800774c <_printf_float+0x264>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	079b      	lsls	r3, r3, #30
 800773c:	f100 8105 	bmi.w	800794a <_printf_float+0x462>
 8007740:	68e0      	ldr	r0, [r4, #12]
 8007742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007744:	4298      	cmp	r0, r3
 8007746:	bfb8      	it	lt
 8007748:	4618      	movlt	r0, r3
 800774a:	e730      	b.n	80075ae <_printf_float+0xc6>
 800774c:	2301      	movs	r3, #1
 800774e:	464a      	mov	r2, r9
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f af27 	beq.w	80075aa <_printf_float+0xc2>
 800775c:	f108 0801 	add.w	r8, r8, #1
 8007760:	e7e6      	b.n	8007730 <_printf_float+0x248>
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	dc39      	bgt.n	80077dc <_printf_float+0x2f4>
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <_printf_float+0x2f0>)
 800776a:	2301      	movs	r3, #1
 800776c:	4631      	mov	r1, r6
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	f43f af19 	beq.w	80075aa <_printf_float+0xc2>
 8007778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800777c:	4313      	orrs	r3, r2
 800777e:	d102      	bne.n	8007786 <_printf_float+0x29e>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	07d9      	lsls	r1, r3, #31
 8007784:	d5d8      	bpl.n	8007738 <_printf_float+0x250>
 8007786:	ee18 3a10 	vmov	r3, s16
 800778a:	4652      	mov	r2, sl
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f af09 	beq.w	80075aa <_printf_float+0xc2>
 8007798:	f04f 0900 	mov.w	r9, #0
 800779c:	f104 0a1a 	add.w	sl, r4, #26
 80077a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a2:	425b      	negs	r3, r3
 80077a4:	454b      	cmp	r3, r9
 80077a6:	dc01      	bgt.n	80077ac <_printf_float+0x2c4>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	e792      	b.n	80076d2 <_printf_float+0x1ea>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4652      	mov	r2, sl
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f aef7 	beq.w	80075aa <_printf_float+0xc2>
 80077bc:	f109 0901 	add.w	r9, r9, #1
 80077c0:	e7ee      	b.n	80077a0 <_printf_float+0x2b8>
 80077c2:	bf00      	nop
 80077c4:	7fefffff 	.word	0x7fefffff
 80077c8:	0800a144 	.word	0x0800a144
 80077cc:	0800a148 	.word	0x0800a148
 80077d0:	0800a150 	.word	0x0800a150
 80077d4:	0800a14c 	.word	0x0800a14c
 80077d8:	0800a154 	.word	0x0800a154
 80077dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077e0:	429a      	cmp	r2, r3
 80077e2:	bfa8      	it	ge
 80077e4:	461a      	movge	r2, r3
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	4691      	mov	r9, r2
 80077ea:	dc37      	bgt.n	800785c <_printf_float+0x374>
 80077ec:	f04f 0b00 	mov.w	fp, #0
 80077f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077f4:	f104 021a 	add.w	r2, r4, #26
 80077f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077fa:	9305      	str	r3, [sp, #20]
 80077fc:	eba3 0309 	sub.w	r3, r3, r9
 8007800:	455b      	cmp	r3, fp
 8007802:	dc33      	bgt.n	800786c <_printf_float+0x384>
 8007804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007808:	429a      	cmp	r2, r3
 800780a:	db3b      	blt.n	8007884 <_printf_float+0x39c>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	07da      	lsls	r2, r3, #31
 8007810:	d438      	bmi.n	8007884 <_printf_float+0x39c>
 8007812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007814:	9b05      	ldr	r3, [sp, #20]
 8007816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	eba2 0901 	sub.w	r9, r2, r1
 800781e:	4599      	cmp	r9, r3
 8007820:	bfa8      	it	ge
 8007822:	4699      	movge	r9, r3
 8007824:	f1b9 0f00 	cmp.w	r9, #0
 8007828:	dc35      	bgt.n	8007896 <_printf_float+0x3ae>
 800782a:	f04f 0800 	mov.w	r8, #0
 800782e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007832:	f104 0a1a 	add.w	sl, r4, #26
 8007836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800783a:	1a9b      	subs	r3, r3, r2
 800783c:	eba3 0309 	sub.w	r3, r3, r9
 8007840:	4543      	cmp	r3, r8
 8007842:	f77f af79 	ble.w	8007738 <_printf_float+0x250>
 8007846:	2301      	movs	r3, #1
 8007848:	4652      	mov	r2, sl
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f aeaa 	beq.w	80075aa <_printf_float+0xc2>
 8007856:	f108 0801 	add.w	r8, r8, #1
 800785a:	e7ec      	b.n	8007836 <_printf_float+0x34e>
 800785c:	4613      	mov	r3, r2
 800785e:	4631      	mov	r1, r6
 8007860:	4642      	mov	r2, r8
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	d1c0      	bne.n	80077ec <_printf_float+0x304>
 800786a:	e69e      	b.n	80075aa <_printf_float+0xc2>
 800786c:	2301      	movs	r3, #1
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	9205      	str	r2, [sp, #20]
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	f43f ae97 	beq.w	80075aa <_printf_float+0xc2>
 800787c:	9a05      	ldr	r2, [sp, #20]
 800787e:	f10b 0b01 	add.w	fp, fp, #1
 8007882:	e7b9      	b.n	80077f8 <_printf_float+0x310>
 8007884:	ee18 3a10 	vmov	r3, s16
 8007888:	4652      	mov	r2, sl
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	d1be      	bne.n	8007812 <_printf_float+0x32a>
 8007894:	e689      	b.n	80075aa <_printf_float+0xc2>
 8007896:	9a05      	ldr	r2, [sp, #20]
 8007898:	464b      	mov	r3, r9
 800789a:	4442      	add	r2, r8
 800789c:	4631      	mov	r1, r6
 800789e:	4628      	mov	r0, r5
 80078a0:	47b8      	blx	r7
 80078a2:	3001      	adds	r0, #1
 80078a4:	d1c1      	bne.n	800782a <_printf_float+0x342>
 80078a6:	e680      	b.n	80075aa <_printf_float+0xc2>
 80078a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078aa:	2a01      	cmp	r2, #1
 80078ac:	dc01      	bgt.n	80078b2 <_printf_float+0x3ca>
 80078ae:	07db      	lsls	r3, r3, #31
 80078b0:	d538      	bpl.n	8007924 <_printf_float+0x43c>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4642      	mov	r2, r8
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f ae74 	beq.w	80075aa <_printf_float+0xc2>
 80078c2:	ee18 3a10 	vmov	r3, s16
 80078c6:	4652      	mov	r2, sl
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	f43f ae6b 	beq.w	80075aa <_printf_float+0xc2>
 80078d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078d8:	2200      	movs	r2, #0
 80078da:	2300      	movs	r3, #0
 80078dc:	f7f9 f904 	bl	8000ae8 <__aeabi_dcmpeq>
 80078e0:	b9d8      	cbnz	r0, 800791a <_printf_float+0x432>
 80078e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e4:	f108 0201 	add.w	r2, r8, #1
 80078e8:	3b01      	subs	r3, #1
 80078ea:	4631      	mov	r1, r6
 80078ec:	4628      	mov	r0, r5
 80078ee:	47b8      	blx	r7
 80078f0:	3001      	adds	r0, #1
 80078f2:	d10e      	bne.n	8007912 <_printf_float+0x42a>
 80078f4:	e659      	b.n	80075aa <_printf_float+0xc2>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	f43f ae52 	beq.w	80075aa <_printf_float+0xc2>
 8007906:	f108 0801 	add.w	r8, r8, #1
 800790a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790c:	3b01      	subs	r3, #1
 800790e:	4543      	cmp	r3, r8
 8007910:	dcf1      	bgt.n	80078f6 <_printf_float+0x40e>
 8007912:	464b      	mov	r3, r9
 8007914:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007918:	e6dc      	b.n	80076d4 <_printf_float+0x1ec>
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	f104 0a1a 	add.w	sl, r4, #26
 8007922:	e7f2      	b.n	800790a <_printf_float+0x422>
 8007924:	2301      	movs	r3, #1
 8007926:	4642      	mov	r2, r8
 8007928:	e7df      	b.n	80078ea <_printf_float+0x402>
 800792a:	2301      	movs	r3, #1
 800792c:	464a      	mov	r2, r9
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f ae38 	beq.w	80075aa <_printf_float+0xc2>
 800793a:	f108 0801 	add.w	r8, r8, #1
 800793e:	68e3      	ldr	r3, [r4, #12]
 8007940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007942:	1a5b      	subs	r3, r3, r1
 8007944:	4543      	cmp	r3, r8
 8007946:	dcf0      	bgt.n	800792a <_printf_float+0x442>
 8007948:	e6fa      	b.n	8007740 <_printf_float+0x258>
 800794a:	f04f 0800 	mov.w	r8, #0
 800794e:	f104 0919 	add.w	r9, r4, #25
 8007952:	e7f4      	b.n	800793e <_printf_float+0x456>

08007954 <_printf_common>:
 8007954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007958:	4616      	mov	r6, r2
 800795a:	4699      	mov	r9, r3
 800795c:	688a      	ldr	r2, [r1, #8]
 800795e:	690b      	ldr	r3, [r1, #16]
 8007960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007964:	4293      	cmp	r3, r2
 8007966:	bfb8      	it	lt
 8007968:	4613      	movlt	r3, r2
 800796a:	6033      	str	r3, [r6, #0]
 800796c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007970:	4607      	mov	r7, r0
 8007972:	460c      	mov	r4, r1
 8007974:	b10a      	cbz	r2, 800797a <_printf_common+0x26>
 8007976:	3301      	adds	r3, #1
 8007978:	6033      	str	r3, [r6, #0]
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	0699      	lsls	r1, r3, #26
 800797e:	bf42      	ittt	mi
 8007980:	6833      	ldrmi	r3, [r6, #0]
 8007982:	3302      	addmi	r3, #2
 8007984:	6033      	strmi	r3, [r6, #0]
 8007986:	6825      	ldr	r5, [r4, #0]
 8007988:	f015 0506 	ands.w	r5, r5, #6
 800798c:	d106      	bne.n	800799c <_printf_common+0x48>
 800798e:	f104 0a19 	add.w	sl, r4, #25
 8007992:	68e3      	ldr	r3, [r4, #12]
 8007994:	6832      	ldr	r2, [r6, #0]
 8007996:	1a9b      	subs	r3, r3, r2
 8007998:	42ab      	cmp	r3, r5
 800799a:	dc26      	bgt.n	80079ea <_printf_common+0x96>
 800799c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079a0:	1e13      	subs	r3, r2, #0
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	bf18      	it	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	0692      	lsls	r2, r2, #26
 80079aa:	d42b      	bmi.n	8007a04 <_printf_common+0xb0>
 80079ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079b0:	4649      	mov	r1, r9
 80079b2:	4638      	mov	r0, r7
 80079b4:	47c0      	blx	r8
 80079b6:	3001      	adds	r0, #1
 80079b8:	d01e      	beq.n	80079f8 <_printf_common+0xa4>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	68e5      	ldr	r5, [r4, #12]
 80079be:	6832      	ldr	r2, [r6, #0]
 80079c0:	f003 0306 	and.w	r3, r3, #6
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	bf08      	it	eq
 80079c8:	1aad      	subeq	r5, r5, r2
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	6922      	ldr	r2, [r4, #16]
 80079ce:	bf0c      	ite	eq
 80079d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079d4:	2500      	movne	r5, #0
 80079d6:	4293      	cmp	r3, r2
 80079d8:	bfc4      	itt	gt
 80079da:	1a9b      	subgt	r3, r3, r2
 80079dc:	18ed      	addgt	r5, r5, r3
 80079de:	2600      	movs	r6, #0
 80079e0:	341a      	adds	r4, #26
 80079e2:	42b5      	cmp	r5, r6
 80079e4:	d11a      	bne.n	8007a1c <_printf_common+0xc8>
 80079e6:	2000      	movs	r0, #0
 80079e8:	e008      	b.n	80079fc <_printf_common+0xa8>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4652      	mov	r2, sl
 80079ee:	4649      	mov	r1, r9
 80079f0:	4638      	mov	r0, r7
 80079f2:	47c0      	blx	r8
 80079f4:	3001      	adds	r0, #1
 80079f6:	d103      	bne.n	8007a00 <_printf_common+0xac>
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295
 80079fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a00:	3501      	adds	r5, #1
 8007a02:	e7c6      	b.n	8007992 <_printf_common+0x3e>
 8007a04:	18e1      	adds	r1, r4, r3
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	2030      	movs	r0, #48	; 0x30
 8007a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a0e:	4422      	add	r2, r4
 8007a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a18:	3302      	adds	r3, #2
 8007a1a:	e7c7      	b.n	80079ac <_printf_common+0x58>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4622      	mov	r2, r4
 8007a20:	4649      	mov	r1, r9
 8007a22:	4638      	mov	r0, r7
 8007a24:	47c0      	blx	r8
 8007a26:	3001      	adds	r0, #1
 8007a28:	d0e6      	beq.n	80079f8 <_printf_common+0xa4>
 8007a2a:	3601      	adds	r6, #1
 8007a2c:	e7d9      	b.n	80079e2 <_printf_common+0x8e>
	...

08007a30 <_printf_i>:
 8007a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	460c      	mov	r4, r1
 8007a36:	4691      	mov	r9, r2
 8007a38:	7e27      	ldrb	r7, [r4, #24]
 8007a3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a3c:	2f78      	cmp	r7, #120	; 0x78
 8007a3e:	4680      	mov	r8, r0
 8007a40:	469a      	mov	sl, r3
 8007a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a46:	d807      	bhi.n	8007a58 <_printf_i+0x28>
 8007a48:	2f62      	cmp	r7, #98	; 0x62
 8007a4a:	d80a      	bhi.n	8007a62 <_printf_i+0x32>
 8007a4c:	2f00      	cmp	r7, #0
 8007a4e:	f000 80d8 	beq.w	8007c02 <_printf_i+0x1d2>
 8007a52:	2f58      	cmp	r7, #88	; 0x58
 8007a54:	f000 80a3 	beq.w	8007b9e <_printf_i+0x16e>
 8007a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a60:	e03a      	b.n	8007ad8 <_printf_i+0xa8>
 8007a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a66:	2b15      	cmp	r3, #21
 8007a68:	d8f6      	bhi.n	8007a58 <_printf_i+0x28>
 8007a6a:	a001      	add	r0, pc, #4	; (adr r0, 8007a70 <_printf_i+0x40>)
 8007a6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a70:	08007ac9 	.word	0x08007ac9
 8007a74:	08007add 	.word	0x08007add
 8007a78:	08007a59 	.word	0x08007a59
 8007a7c:	08007a59 	.word	0x08007a59
 8007a80:	08007a59 	.word	0x08007a59
 8007a84:	08007a59 	.word	0x08007a59
 8007a88:	08007add 	.word	0x08007add
 8007a8c:	08007a59 	.word	0x08007a59
 8007a90:	08007a59 	.word	0x08007a59
 8007a94:	08007a59 	.word	0x08007a59
 8007a98:	08007a59 	.word	0x08007a59
 8007a9c:	08007be9 	.word	0x08007be9
 8007aa0:	08007b0d 	.word	0x08007b0d
 8007aa4:	08007bcb 	.word	0x08007bcb
 8007aa8:	08007a59 	.word	0x08007a59
 8007aac:	08007a59 	.word	0x08007a59
 8007ab0:	08007c0b 	.word	0x08007c0b
 8007ab4:	08007a59 	.word	0x08007a59
 8007ab8:	08007b0d 	.word	0x08007b0d
 8007abc:	08007a59 	.word	0x08007a59
 8007ac0:	08007a59 	.word	0x08007a59
 8007ac4:	08007bd3 	.word	0x08007bd3
 8007ac8:	680b      	ldr	r3, [r1, #0]
 8007aca:	1d1a      	adds	r2, r3, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	600a      	str	r2, [r1, #0]
 8007ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e0a3      	b.n	8007c24 <_printf_i+0x1f4>
 8007adc:	6825      	ldr	r5, [r4, #0]
 8007ade:	6808      	ldr	r0, [r1, #0]
 8007ae0:	062e      	lsls	r6, r5, #24
 8007ae2:	f100 0304 	add.w	r3, r0, #4
 8007ae6:	d50a      	bpl.n	8007afe <_printf_i+0xce>
 8007ae8:	6805      	ldr	r5, [r0, #0]
 8007aea:	600b      	str	r3, [r1, #0]
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	da03      	bge.n	8007af8 <_printf_i+0xc8>
 8007af0:	232d      	movs	r3, #45	; 0x2d
 8007af2:	426d      	negs	r5, r5
 8007af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af8:	485e      	ldr	r0, [pc, #376]	; (8007c74 <_printf_i+0x244>)
 8007afa:	230a      	movs	r3, #10
 8007afc:	e019      	b.n	8007b32 <_printf_i+0x102>
 8007afe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b02:	6805      	ldr	r5, [r0, #0]
 8007b04:	600b      	str	r3, [r1, #0]
 8007b06:	bf18      	it	ne
 8007b08:	b22d      	sxthne	r5, r5
 8007b0a:	e7ef      	b.n	8007aec <_printf_i+0xbc>
 8007b0c:	680b      	ldr	r3, [r1, #0]
 8007b0e:	6825      	ldr	r5, [r4, #0]
 8007b10:	1d18      	adds	r0, r3, #4
 8007b12:	6008      	str	r0, [r1, #0]
 8007b14:	0628      	lsls	r0, r5, #24
 8007b16:	d501      	bpl.n	8007b1c <_printf_i+0xec>
 8007b18:	681d      	ldr	r5, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <_printf_i+0xf2>
 8007b1c:	0669      	lsls	r1, r5, #25
 8007b1e:	d5fb      	bpl.n	8007b18 <_printf_i+0xe8>
 8007b20:	881d      	ldrh	r5, [r3, #0]
 8007b22:	4854      	ldr	r0, [pc, #336]	; (8007c74 <_printf_i+0x244>)
 8007b24:	2f6f      	cmp	r7, #111	; 0x6f
 8007b26:	bf0c      	ite	eq
 8007b28:	2308      	moveq	r3, #8
 8007b2a:	230a      	movne	r3, #10
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b32:	6866      	ldr	r6, [r4, #4]
 8007b34:	60a6      	str	r6, [r4, #8]
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	bfa2      	ittt	ge
 8007b3a:	6821      	ldrge	r1, [r4, #0]
 8007b3c:	f021 0104 	bicge.w	r1, r1, #4
 8007b40:	6021      	strge	r1, [r4, #0]
 8007b42:	b90d      	cbnz	r5, 8007b48 <_printf_i+0x118>
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	d04d      	beq.n	8007be4 <_printf_i+0x1b4>
 8007b48:	4616      	mov	r6, r2
 8007b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b52:	5dc7      	ldrb	r7, [r0, r7]
 8007b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b58:	462f      	mov	r7, r5
 8007b5a:	42bb      	cmp	r3, r7
 8007b5c:	460d      	mov	r5, r1
 8007b5e:	d9f4      	bls.n	8007b4a <_printf_i+0x11a>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d10b      	bne.n	8007b7c <_printf_i+0x14c>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07df      	lsls	r7, r3, #31
 8007b68:	d508      	bpl.n	8007b7c <_printf_i+0x14c>
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	6861      	ldr	r1, [r4, #4]
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	bfde      	ittt	le
 8007b72:	2330      	movle	r3, #48	; 0x30
 8007b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b7c:	1b92      	subs	r2, r2, r6
 8007b7e:	6122      	str	r2, [r4, #16]
 8007b80:	f8cd a000 	str.w	sl, [sp]
 8007b84:	464b      	mov	r3, r9
 8007b86:	aa03      	add	r2, sp, #12
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f7ff fee2 	bl	8007954 <_printf_common>
 8007b90:	3001      	adds	r0, #1
 8007b92:	d14c      	bne.n	8007c2e <_printf_i+0x1fe>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	b004      	add	sp, #16
 8007b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9e:	4835      	ldr	r0, [pc, #212]	; (8007c74 <_printf_i+0x244>)
 8007ba0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	680e      	ldr	r6, [r1, #0]
 8007ba8:	061f      	lsls	r7, r3, #24
 8007baa:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bae:	600e      	str	r6, [r1, #0]
 8007bb0:	d514      	bpl.n	8007bdc <_printf_i+0x1ac>
 8007bb2:	07d9      	lsls	r1, r3, #31
 8007bb4:	bf44      	itt	mi
 8007bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8007bba:	6023      	strmi	r3, [r4, #0]
 8007bbc:	b91d      	cbnz	r5, 8007bc6 <_printf_i+0x196>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f023 0320 	bic.w	r3, r3, #32
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	2310      	movs	r3, #16
 8007bc8:	e7b0      	b.n	8007b2c <_printf_i+0xfc>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	f043 0320 	orr.w	r3, r3, #32
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	2378      	movs	r3, #120	; 0x78
 8007bd4:	4828      	ldr	r0, [pc, #160]	; (8007c78 <_printf_i+0x248>)
 8007bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bda:	e7e3      	b.n	8007ba4 <_printf_i+0x174>
 8007bdc:	065e      	lsls	r6, r3, #25
 8007bde:	bf48      	it	mi
 8007be0:	b2ad      	uxthmi	r5, r5
 8007be2:	e7e6      	b.n	8007bb2 <_printf_i+0x182>
 8007be4:	4616      	mov	r6, r2
 8007be6:	e7bb      	b.n	8007b60 <_printf_i+0x130>
 8007be8:	680b      	ldr	r3, [r1, #0]
 8007bea:	6826      	ldr	r6, [r4, #0]
 8007bec:	6960      	ldr	r0, [r4, #20]
 8007bee:	1d1d      	adds	r5, r3, #4
 8007bf0:	600d      	str	r5, [r1, #0]
 8007bf2:	0635      	lsls	r5, r6, #24
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	d501      	bpl.n	8007bfc <_printf_i+0x1cc>
 8007bf8:	6018      	str	r0, [r3, #0]
 8007bfa:	e002      	b.n	8007c02 <_printf_i+0x1d2>
 8007bfc:	0671      	lsls	r1, r6, #25
 8007bfe:	d5fb      	bpl.n	8007bf8 <_printf_i+0x1c8>
 8007c00:	8018      	strh	r0, [r3, #0]
 8007c02:	2300      	movs	r3, #0
 8007c04:	6123      	str	r3, [r4, #16]
 8007c06:	4616      	mov	r6, r2
 8007c08:	e7ba      	b.n	8007b80 <_printf_i+0x150>
 8007c0a:	680b      	ldr	r3, [r1, #0]
 8007c0c:	1d1a      	adds	r2, r3, #4
 8007c0e:	600a      	str	r2, [r1, #0]
 8007c10:	681e      	ldr	r6, [r3, #0]
 8007c12:	6862      	ldr	r2, [r4, #4]
 8007c14:	2100      	movs	r1, #0
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7f8 faf2 	bl	8000200 <memchr>
 8007c1c:	b108      	cbz	r0, 8007c22 <_printf_i+0x1f2>
 8007c1e:	1b80      	subs	r0, r0, r6
 8007c20:	6060      	str	r0, [r4, #4]
 8007c22:	6863      	ldr	r3, [r4, #4]
 8007c24:	6123      	str	r3, [r4, #16]
 8007c26:	2300      	movs	r3, #0
 8007c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c2c:	e7a8      	b.n	8007b80 <_printf_i+0x150>
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	4632      	mov	r2, r6
 8007c32:	4649      	mov	r1, r9
 8007c34:	4640      	mov	r0, r8
 8007c36:	47d0      	blx	sl
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d0ab      	beq.n	8007b94 <_printf_i+0x164>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	079b      	lsls	r3, r3, #30
 8007c40:	d413      	bmi.n	8007c6a <_printf_i+0x23a>
 8007c42:	68e0      	ldr	r0, [r4, #12]
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	4298      	cmp	r0, r3
 8007c48:	bfb8      	it	lt
 8007c4a:	4618      	movlt	r0, r3
 8007c4c:	e7a4      	b.n	8007b98 <_printf_i+0x168>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4632      	mov	r2, r6
 8007c52:	4649      	mov	r1, r9
 8007c54:	4640      	mov	r0, r8
 8007c56:	47d0      	blx	sl
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d09b      	beq.n	8007b94 <_printf_i+0x164>
 8007c5c:	3501      	adds	r5, #1
 8007c5e:	68e3      	ldr	r3, [r4, #12]
 8007c60:	9903      	ldr	r1, [sp, #12]
 8007c62:	1a5b      	subs	r3, r3, r1
 8007c64:	42ab      	cmp	r3, r5
 8007c66:	dcf2      	bgt.n	8007c4e <_printf_i+0x21e>
 8007c68:	e7eb      	b.n	8007c42 <_printf_i+0x212>
 8007c6a:	2500      	movs	r5, #0
 8007c6c:	f104 0619 	add.w	r6, r4, #25
 8007c70:	e7f5      	b.n	8007c5e <_printf_i+0x22e>
 8007c72:	bf00      	nop
 8007c74:	0800a156 	.word	0x0800a156
 8007c78:	0800a167 	.word	0x0800a167

08007c7c <siprintf>:
 8007c7c:	b40e      	push	{r1, r2, r3}
 8007c7e:	b500      	push	{lr}
 8007c80:	b09c      	sub	sp, #112	; 0x70
 8007c82:	ab1d      	add	r3, sp, #116	; 0x74
 8007c84:	9002      	str	r0, [sp, #8]
 8007c86:	9006      	str	r0, [sp, #24]
 8007c88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c8c:	4809      	ldr	r0, [pc, #36]	; (8007cb4 <siprintf+0x38>)
 8007c8e:	9107      	str	r1, [sp, #28]
 8007c90:	9104      	str	r1, [sp, #16]
 8007c92:	4909      	ldr	r1, [pc, #36]	; (8007cb8 <siprintf+0x3c>)
 8007c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c98:	9105      	str	r1, [sp, #20]
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	a902      	add	r1, sp, #8
 8007ca0:	f001 fb34 	bl	800930c <_svfiprintf_r>
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	b01c      	add	sp, #112	; 0x70
 8007cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb0:	b003      	add	sp, #12
 8007cb2:	4770      	bx	lr
 8007cb4:	2000000c 	.word	0x2000000c
 8007cb8:	ffff0208 	.word	0xffff0208

08007cbc <quorem>:
 8007cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	6903      	ldr	r3, [r0, #16]
 8007cc2:	690c      	ldr	r4, [r1, #16]
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	f2c0 8081 	blt.w	8007dce <quorem+0x112>
 8007ccc:	3c01      	subs	r4, #1
 8007cce:	f101 0814 	add.w	r8, r1, #20
 8007cd2:	f100 0514 	add.w	r5, r0, #20
 8007cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cf4:	d331      	bcc.n	8007d5a <quorem+0x9e>
 8007cf6:	f04f 0e00 	mov.w	lr, #0
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	46ac      	mov	ip, r5
 8007cfe:	46f2      	mov	sl, lr
 8007d00:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d04:	b293      	uxth	r3, r2
 8007d06:	fb06 e303 	mla	r3, r6, r3, lr
 8007d0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	ebaa 0303 	sub.w	r3, sl, r3
 8007d14:	0c12      	lsrs	r2, r2, #16
 8007d16:	f8dc a000 	ldr.w	sl, [ip]
 8007d1a:	fb06 e202 	mla	r2, r6, r2, lr
 8007d1e:	fa13 f38a 	uxtah	r3, r3, sl
 8007d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d26:	fa1f fa82 	uxth.w	sl, r2
 8007d2a:	f8dc 2000 	ldr.w	r2, [ip]
 8007d2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d3c:	4581      	cmp	r9, r0
 8007d3e:	f84c 3b04 	str.w	r3, [ip], #4
 8007d42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d46:	d2db      	bcs.n	8007d00 <quorem+0x44>
 8007d48:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d4c:	b92b      	cbnz	r3, 8007d5a <quorem+0x9e>
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	3b04      	subs	r3, #4
 8007d52:	429d      	cmp	r5, r3
 8007d54:	461a      	mov	r2, r3
 8007d56:	d32e      	bcc.n	8007db6 <quorem+0xfa>
 8007d58:	613c      	str	r4, [r7, #16]
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f001 f8c0 	bl	8008ee0 <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	db24      	blt.n	8007dae <quorem+0xf2>
 8007d64:	3601      	adds	r6, #1
 8007d66:	4628      	mov	r0, r5
 8007d68:	f04f 0c00 	mov.w	ip, #0
 8007d6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d70:	f8d0 e000 	ldr.w	lr, [r0]
 8007d74:	b293      	uxth	r3, r2
 8007d76:	ebac 0303 	sub.w	r3, ip, r3
 8007d7a:	0c12      	lsrs	r2, r2, #16
 8007d7c:	fa13 f38e 	uxtah	r3, r3, lr
 8007d80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d8e:	45c1      	cmp	r9, r8
 8007d90:	f840 3b04 	str.w	r3, [r0], #4
 8007d94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d98:	d2e8      	bcs.n	8007d6c <quorem+0xb0>
 8007d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007da2:	b922      	cbnz	r2, 8007dae <quorem+0xf2>
 8007da4:	3b04      	subs	r3, #4
 8007da6:	429d      	cmp	r5, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	d30a      	bcc.n	8007dc2 <quorem+0x106>
 8007dac:	613c      	str	r4, [r7, #16]
 8007dae:	4630      	mov	r0, r6
 8007db0:	b003      	add	sp, #12
 8007db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	3b04      	subs	r3, #4
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	d1cc      	bne.n	8007d58 <quorem+0x9c>
 8007dbe:	3c01      	subs	r4, #1
 8007dc0:	e7c7      	b.n	8007d52 <quorem+0x96>
 8007dc2:	6812      	ldr	r2, [r2, #0]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	d1f0      	bne.n	8007dac <quorem+0xf0>
 8007dca:	3c01      	subs	r4, #1
 8007dcc:	e7eb      	b.n	8007da6 <quorem+0xea>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	e7ee      	b.n	8007db0 <quorem+0xf4>
 8007dd2:	0000      	movs	r0, r0
 8007dd4:	0000      	movs	r0, r0
	...

08007dd8 <_dtoa_r>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	ed2d 8b02 	vpush	{d8}
 8007de0:	ec57 6b10 	vmov	r6, r7, d0
 8007de4:	b095      	sub	sp, #84	; 0x54
 8007de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007de8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007dec:	9105      	str	r1, [sp, #20]
 8007dee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007df2:	4604      	mov	r4, r0
 8007df4:	9209      	str	r2, [sp, #36]	; 0x24
 8007df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df8:	b975      	cbnz	r5, 8007e18 <_dtoa_r+0x40>
 8007dfa:	2010      	movs	r0, #16
 8007dfc:	f000 fddc 	bl	80089b8 <malloc>
 8007e00:	4602      	mov	r2, r0
 8007e02:	6260      	str	r0, [r4, #36]	; 0x24
 8007e04:	b920      	cbnz	r0, 8007e10 <_dtoa_r+0x38>
 8007e06:	4bb2      	ldr	r3, [pc, #712]	; (80080d0 <_dtoa_r+0x2f8>)
 8007e08:	21ea      	movs	r1, #234	; 0xea
 8007e0a:	48b2      	ldr	r0, [pc, #712]	; (80080d4 <_dtoa_r+0x2fc>)
 8007e0c:	f001 fb8e 	bl	800952c <__assert_func>
 8007e10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e14:	6005      	str	r5, [r0, #0]
 8007e16:	60c5      	str	r5, [r0, #12]
 8007e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e1a:	6819      	ldr	r1, [r3, #0]
 8007e1c:	b151      	cbz	r1, 8007e34 <_dtoa_r+0x5c>
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	604a      	str	r2, [r1, #4]
 8007e22:	2301      	movs	r3, #1
 8007e24:	4093      	lsls	r3, r2
 8007e26:	608b      	str	r3, [r1, #8]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fe1b 	bl	8008a64 <_Bfree>
 8007e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	1e3b      	subs	r3, r7, #0
 8007e36:	bfb9      	ittee	lt
 8007e38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e3c:	9303      	strlt	r3, [sp, #12]
 8007e3e:	2300      	movge	r3, #0
 8007e40:	f8c8 3000 	strge.w	r3, [r8]
 8007e44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007e48:	4ba3      	ldr	r3, [pc, #652]	; (80080d8 <_dtoa_r+0x300>)
 8007e4a:	bfbc      	itt	lt
 8007e4c:	2201      	movlt	r2, #1
 8007e4e:	f8c8 2000 	strlt.w	r2, [r8]
 8007e52:	ea33 0309 	bics.w	r3, r3, r9
 8007e56:	d11b      	bne.n	8007e90 <_dtoa_r+0xb8>
 8007e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e64:	4333      	orrs	r3, r6
 8007e66:	f000 857a 	beq.w	800895e <_dtoa_r+0xb86>
 8007e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e6c:	b963      	cbnz	r3, 8007e88 <_dtoa_r+0xb0>
 8007e6e:	4b9b      	ldr	r3, [pc, #620]	; (80080dc <_dtoa_r+0x304>)
 8007e70:	e024      	b.n	8007ebc <_dtoa_r+0xe4>
 8007e72:	4b9b      	ldr	r3, [pc, #620]	; (80080e0 <_dtoa_r+0x308>)
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	3308      	adds	r3, #8
 8007e78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	9800      	ldr	r0, [sp, #0]
 8007e7e:	b015      	add	sp, #84	; 0x54
 8007e80:	ecbd 8b02 	vpop	{d8}
 8007e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e88:	4b94      	ldr	r3, [pc, #592]	; (80080dc <_dtoa_r+0x304>)
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	3303      	adds	r3, #3
 8007e8e:	e7f3      	b.n	8007e78 <_dtoa_r+0xa0>
 8007e90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e94:	2200      	movs	r2, #0
 8007e96:	ec51 0b17 	vmov	r0, r1, d7
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ea0:	f7f8 fe22 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	b158      	cbz	r0, 8007ec0 <_dtoa_r+0xe8>
 8007ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eaa:	2301      	movs	r3, #1
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 8551 	beq.w	8008958 <_dtoa_r+0xb80>
 8007eb6:	488b      	ldr	r0, [pc, #556]	; (80080e4 <_dtoa_r+0x30c>)
 8007eb8:	6018      	str	r0, [r3, #0]
 8007eba:	1e43      	subs	r3, r0, #1
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	e7dd      	b.n	8007e7c <_dtoa_r+0xa4>
 8007ec0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ec4:	aa12      	add	r2, sp, #72	; 0x48
 8007ec6:	a913      	add	r1, sp, #76	; 0x4c
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 f8ad 	bl	8009028 <__d2b>
 8007ece:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ed2:	4683      	mov	fp, r0
 8007ed4:	2d00      	cmp	r5, #0
 8007ed6:	d07c      	beq.n	8007fd2 <_dtoa_r+0x1fa>
 8007ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007ee6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007eea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007eee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ef2:	4b7d      	ldr	r3, [pc, #500]	; (80080e8 <_dtoa_r+0x310>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	4639      	mov	r1, r7
 8007efa:	f7f8 f9d5 	bl	80002a8 <__aeabi_dsub>
 8007efe:	a36e      	add	r3, pc, #440	; (adr r3, 80080b8 <_dtoa_r+0x2e0>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f7f8 fb88 	bl	8000618 <__aeabi_dmul>
 8007f08:	a36d      	add	r3, pc, #436	; (adr r3, 80080c0 <_dtoa_r+0x2e8>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 f9cd 	bl	80002ac <__adddf3>
 8007f12:	4606      	mov	r6, r0
 8007f14:	4628      	mov	r0, r5
 8007f16:	460f      	mov	r7, r1
 8007f18:	f7f8 fb14 	bl	8000544 <__aeabi_i2d>
 8007f1c:	a36a      	add	r3, pc, #424	; (adr r3, 80080c8 <_dtoa_r+0x2f0>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f7f8 fb79 	bl	8000618 <__aeabi_dmul>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	f7f8 f9bd 	bl	80002ac <__adddf3>
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	f7f8 fe1f 	bl	8000b78 <__aeabi_d2iz>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4630      	mov	r0, r6
 8007f42:	4639      	mov	r1, r7
 8007f44:	f7f8 fdda 	bl	8000afc <__aeabi_dcmplt>
 8007f48:	b148      	cbz	r0, 8007f5e <_dtoa_r+0x186>
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	f7f8 fafa 	bl	8000544 <__aeabi_i2d>
 8007f50:	4632      	mov	r2, r6
 8007f52:	463b      	mov	r3, r7
 8007f54:	f7f8 fdc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f58:	b908      	cbnz	r0, 8007f5e <_dtoa_r+0x186>
 8007f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f5e:	f1ba 0f16 	cmp.w	sl, #22
 8007f62:	d854      	bhi.n	800800e <_dtoa_r+0x236>
 8007f64:	4b61      	ldr	r3, [pc, #388]	; (80080ec <_dtoa_r+0x314>)
 8007f66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f72:	f7f8 fdc3 	bl	8000afc <__aeabi_dcmplt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d04b      	beq.n	8008012 <_dtoa_r+0x23a>
 8007f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f7e:	2300      	movs	r3, #0
 8007f80:	930e      	str	r3, [sp, #56]	; 0x38
 8007f82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f84:	1b5d      	subs	r5, r3, r5
 8007f86:	1e6b      	subs	r3, r5, #1
 8007f88:	9304      	str	r3, [sp, #16]
 8007f8a:	bf43      	ittte	mi
 8007f8c:	2300      	movmi	r3, #0
 8007f8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007f92:	9304      	strmi	r3, [sp, #16]
 8007f94:	f04f 0800 	movpl.w	r8, #0
 8007f98:	f1ba 0f00 	cmp.w	sl, #0
 8007f9c:	db3b      	blt.n	8008016 <_dtoa_r+0x23e>
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007fa4:	4453      	add	r3, sl
 8007fa6:	9304      	str	r3, [sp, #16]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9306      	str	r3, [sp, #24]
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d869      	bhi.n	8008086 <_dtoa_r+0x2ae>
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	bfc4      	itt	gt
 8007fb6:	3b04      	subgt	r3, #4
 8007fb8:	9305      	strgt	r3, [sp, #20]
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8007fc0:	bfcc      	ite	gt
 8007fc2:	2500      	movgt	r5, #0
 8007fc4:	2501      	movle	r5, #1
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d869      	bhi.n	800809e <_dtoa_r+0x2c6>
 8007fca:	e8df f003 	tbb	[pc, r3]
 8007fce:	4e2c      	.short	0x4e2c
 8007fd0:	5a4c      	.short	0x5a4c
 8007fd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007fd6:	441d      	add	r5, r3
 8007fd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	bfc1      	itttt	gt
 8007fe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fe4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007fe8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007fec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ff0:	bfda      	itte	le
 8007ff2:	f1c3 0320 	rsble	r3, r3, #32
 8007ff6:	fa06 f003 	lslle.w	r0, r6, r3
 8007ffa:	4318      	orrgt	r0, r3
 8007ffc:	f7f8 fa92 	bl	8000524 <__aeabi_ui2d>
 8008000:	2301      	movs	r3, #1
 8008002:	4606      	mov	r6, r0
 8008004:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008008:	3d01      	subs	r5, #1
 800800a:	9310      	str	r3, [sp, #64]	; 0x40
 800800c:	e771      	b.n	8007ef2 <_dtoa_r+0x11a>
 800800e:	2301      	movs	r3, #1
 8008010:	e7b6      	b.n	8007f80 <_dtoa_r+0x1a8>
 8008012:	900e      	str	r0, [sp, #56]	; 0x38
 8008014:	e7b5      	b.n	8007f82 <_dtoa_r+0x1aa>
 8008016:	f1ca 0300 	rsb	r3, sl, #0
 800801a:	9306      	str	r3, [sp, #24]
 800801c:	2300      	movs	r3, #0
 800801e:	eba8 080a 	sub.w	r8, r8, sl
 8008022:	930d      	str	r3, [sp, #52]	; 0x34
 8008024:	e7c2      	b.n	8007fac <_dtoa_r+0x1d4>
 8008026:	2300      	movs	r3, #0
 8008028:	9308      	str	r3, [sp, #32]
 800802a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	dc39      	bgt.n	80080a4 <_dtoa_r+0x2cc>
 8008030:	f04f 0901 	mov.w	r9, #1
 8008034:	f8cd 9004 	str.w	r9, [sp, #4]
 8008038:	464b      	mov	r3, r9
 800803a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800803e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008040:	2200      	movs	r2, #0
 8008042:	6042      	str	r2, [r0, #4]
 8008044:	2204      	movs	r2, #4
 8008046:	f102 0614 	add.w	r6, r2, #20
 800804a:	429e      	cmp	r6, r3
 800804c:	6841      	ldr	r1, [r0, #4]
 800804e:	d92f      	bls.n	80080b0 <_dtoa_r+0x2d8>
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fcc7 	bl	80089e4 <_Balloc>
 8008056:	9000      	str	r0, [sp, #0]
 8008058:	2800      	cmp	r0, #0
 800805a:	d14b      	bne.n	80080f4 <_dtoa_r+0x31c>
 800805c:	4b24      	ldr	r3, [pc, #144]	; (80080f0 <_dtoa_r+0x318>)
 800805e:	4602      	mov	r2, r0
 8008060:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008064:	e6d1      	b.n	8007e0a <_dtoa_r+0x32>
 8008066:	2301      	movs	r3, #1
 8008068:	e7de      	b.n	8008028 <_dtoa_r+0x250>
 800806a:	2300      	movs	r3, #0
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	eb0a 0903 	add.w	r9, sl, r3
 8008074:	f109 0301 	add.w	r3, r9, #1
 8008078:	2b01      	cmp	r3, #1
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	bfb8      	it	lt
 800807e:	2301      	movlt	r3, #1
 8008080:	e7dd      	b.n	800803e <_dtoa_r+0x266>
 8008082:	2301      	movs	r3, #1
 8008084:	e7f2      	b.n	800806c <_dtoa_r+0x294>
 8008086:	2501      	movs	r5, #1
 8008088:	2300      	movs	r3, #0
 800808a:	9305      	str	r3, [sp, #20]
 800808c:	9508      	str	r5, [sp, #32]
 800808e:	f04f 39ff 	mov.w	r9, #4294967295
 8008092:	2200      	movs	r2, #0
 8008094:	f8cd 9004 	str.w	r9, [sp, #4]
 8008098:	2312      	movs	r3, #18
 800809a:	9209      	str	r2, [sp, #36]	; 0x24
 800809c:	e7cf      	b.n	800803e <_dtoa_r+0x266>
 800809e:	2301      	movs	r3, #1
 80080a0:	9308      	str	r3, [sp, #32]
 80080a2:	e7f4      	b.n	800808e <_dtoa_r+0x2b6>
 80080a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80080a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80080ac:	464b      	mov	r3, r9
 80080ae:	e7c6      	b.n	800803e <_dtoa_r+0x266>
 80080b0:	3101      	adds	r1, #1
 80080b2:	6041      	str	r1, [r0, #4]
 80080b4:	0052      	lsls	r2, r2, #1
 80080b6:	e7c6      	b.n	8008046 <_dtoa_r+0x26e>
 80080b8:	636f4361 	.word	0x636f4361
 80080bc:	3fd287a7 	.word	0x3fd287a7
 80080c0:	8b60c8b3 	.word	0x8b60c8b3
 80080c4:	3fc68a28 	.word	0x3fc68a28
 80080c8:	509f79fb 	.word	0x509f79fb
 80080cc:	3fd34413 	.word	0x3fd34413
 80080d0:	0800a185 	.word	0x0800a185
 80080d4:	0800a19c 	.word	0x0800a19c
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	0800a181 	.word	0x0800a181
 80080e0:	0800a178 	.word	0x0800a178
 80080e4:	0800a155 	.word	0x0800a155
 80080e8:	3ff80000 	.word	0x3ff80000
 80080ec:	0800a298 	.word	0x0800a298
 80080f0:	0800a1fb 	.word	0x0800a1fb
 80080f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f6:	9a00      	ldr	r2, [sp, #0]
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	2b0e      	cmp	r3, #14
 80080fe:	f200 80ad 	bhi.w	800825c <_dtoa_r+0x484>
 8008102:	2d00      	cmp	r5, #0
 8008104:	f000 80aa 	beq.w	800825c <_dtoa_r+0x484>
 8008108:	f1ba 0f00 	cmp.w	sl, #0
 800810c:	dd36      	ble.n	800817c <_dtoa_r+0x3a4>
 800810e:	4ac3      	ldr	r2, [pc, #780]	; (800841c <_dtoa_r+0x644>)
 8008110:	f00a 030f 	and.w	r3, sl, #15
 8008114:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008118:	ed93 7b00 	vldr	d7, [r3]
 800811c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008120:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008124:	eeb0 8a47 	vmov.f32	s16, s14
 8008128:	eef0 8a67 	vmov.f32	s17, s15
 800812c:	d016      	beq.n	800815c <_dtoa_r+0x384>
 800812e:	4bbc      	ldr	r3, [pc, #752]	; (8008420 <_dtoa_r+0x648>)
 8008130:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008138:	f7f8 fb98 	bl	800086c <__aeabi_ddiv>
 800813c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008140:	f007 070f 	and.w	r7, r7, #15
 8008144:	2503      	movs	r5, #3
 8008146:	4eb6      	ldr	r6, [pc, #728]	; (8008420 <_dtoa_r+0x648>)
 8008148:	b957      	cbnz	r7, 8008160 <_dtoa_r+0x388>
 800814a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800814e:	ec53 2b18 	vmov	r2, r3, d8
 8008152:	f7f8 fb8b 	bl	800086c <__aeabi_ddiv>
 8008156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800815a:	e029      	b.n	80081b0 <_dtoa_r+0x3d8>
 800815c:	2502      	movs	r5, #2
 800815e:	e7f2      	b.n	8008146 <_dtoa_r+0x36e>
 8008160:	07f9      	lsls	r1, r7, #31
 8008162:	d508      	bpl.n	8008176 <_dtoa_r+0x39e>
 8008164:	ec51 0b18 	vmov	r0, r1, d8
 8008168:	e9d6 2300 	ldrd	r2, r3, [r6]
 800816c:	f7f8 fa54 	bl	8000618 <__aeabi_dmul>
 8008170:	ec41 0b18 	vmov	d8, r0, r1
 8008174:	3501      	adds	r5, #1
 8008176:	107f      	asrs	r7, r7, #1
 8008178:	3608      	adds	r6, #8
 800817a:	e7e5      	b.n	8008148 <_dtoa_r+0x370>
 800817c:	f000 80a6 	beq.w	80082cc <_dtoa_r+0x4f4>
 8008180:	f1ca 0600 	rsb	r6, sl, #0
 8008184:	4ba5      	ldr	r3, [pc, #660]	; (800841c <_dtoa_r+0x644>)
 8008186:	4fa6      	ldr	r7, [pc, #664]	; (8008420 <_dtoa_r+0x648>)
 8008188:	f006 020f 	and.w	r2, r6, #15
 800818c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008198:	f7f8 fa3e 	bl	8000618 <__aeabi_dmul>
 800819c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a0:	1136      	asrs	r6, r6, #4
 80081a2:	2300      	movs	r3, #0
 80081a4:	2502      	movs	r5, #2
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	f040 8085 	bne.w	80082b6 <_dtoa_r+0x4de>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1d2      	bne.n	8008156 <_dtoa_r+0x37e>
 80081b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 808c 	beq.w	80082d0 <_dtoa_r+0x4f8>
 80081b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081bc:	4b99      	ldr	r3, [pc, #612]	; (8008424 <_dtoa_r+0x64c>)
 80081be:	2200      	movs	r2, #0
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fc9a 	bl	8000afc <__aeabi_dcmplt>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f000 8081 	beq.w	80082d0 <_dtoa_r+0x4f8>
 80081ce:	9b01      	ldr	r3, [sp, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d07d      	beq.n	80082d0 <_dtoa_r+0x4f8>
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	dd3c      	ble.n	8008254 <_dtoa_r+0x47c>
 80081da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	2200      	movs	r2, #0
 80081e2:	4b91      	ldr	r3, [pc, #580]	; (8008428 <_dtoa_r+0x650>)
 80081e4:	4630      	mov	r0, r6
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7f8 fa16 	bl	8000618 <__aeabi_dmul>
 80081ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f0:	3501      	adds	r5, #1
 80081f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80081f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081fa:	4628      	mov	r0, r5
 80081fc:	f7f8 f9a2 	bl	8000544 <__aeabi_i2d>
 8008200:	4632      	mov	r2, r6
 8008202:	463b      	mov	r3, r7
 8008204:	f7f8 fa08 	bl	8000618 <__aeabi_dmul>
 8008208:	4b88      	ldr	r3, [pc, #544]	; (800842c <_dtoa_r+0x654>)
 800820a:	2200      	movs	r2, #0
 800820c:	f7f8 f84e 	bl	80002ac <__adddf3>
 8008210:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800821c:	2b00      	cmp	r3, #0
 800821e:	d15c      	bne.n	80082da <_dtoa_r+0x502>
 8008220:	4b83      	ldr	r3, [pc, #524]	; (8008430 <_dtoa_r+0x658>)
 8008222:	2200      	movs	r2, #0
 8008224:	4630      	mov	r0, r6
 8008226:	4639      	mov	r1, r7
 8008228:	f7f8 f83e 	bl	80002a8 <__aeabi_dsub>
 800822c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008230:	4606      	mov	r6, r0
 8008232:	460f      	mov	r7, r1
 8008234:	f7f8 fc80 	bl	8000b38 <__aeabi_dcmpgt>
 8008238:	2800      	cmp	r0, #0
 800823a:	f040 8296 	bne.w	800876a <_dtoa_r+0x992>
 800823e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008242:	4630      	mov	r0, r6
 8008244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 fc57 	bl	8000afc <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	f040 8288 	bne.w	8008764 <_dtoa_r+0x98c>
 8008254:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008258:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800825c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800825e:	2b00      	cmp	r3, #0
 8008260:	f2c0 8158 	blt.w	8008514 <_dtoa_r+0x73c>
 8008264:	f1ba 0f0e 	cmp.w	sl, #14
 8008268:	f300 8154 	bgt.w	8008514 <_dtoa_r+0x73c>
 800826c:	4b6b      	ldr	r3, [pc, #428]	; (800841c <_dtoa_r+0x644>)
 800826e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008272:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008278:	2b00      	cmp	r3, #0
 800827a:	f280 80e3 	bge.w	8008444 <_dtoa_r+0x66c>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f300 80df 	bgt.w	8008444 <_dtoa_r+0x66c>
 8008286:	f040 826d 	bne.w	8008764 <_dtoa_r+0x98c>
 800828a:	4b69      	ldr	r3, [pc, #420]	; (8008430 <_dtoa_r+0x658>)
 800828c:	2200      	movs	r2, #0
 800828e:	4640      	mov	r0, r8
 8008290:	4649      	mov	r1, r9
 8008292:	f7f8 f9c1 	bl	8000618 <__aeabi_dmul>
 8008296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800829a:	f7f8 fc43 	bl	8000b24 <__aeabi_dcmpge>
 800829e:	9e01      	ldr	r6, [sp, #4]
 80082a0:	4637      	mov	r7, r6
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f040 8243 	bne.w	800872e <_dtoa_r+0x956>
 80082a8:	9d00      	ldr	r5, [sp, #0]
 80082aa:	2331      	movs	r3, #49	; 0x31
 80082ac:	f805 3b01 	strb.w	r3, [r5], #1
 80082b0:	f10a 0a01 	add.w	sl, sl, #1
 80082b4:	e23f      	b.n	8008736 <_dtoa_r+0x95e>
 80082b6:	07f2      	lsls	r2, r6, #31
 80082b8:	d505      	bpl.n	80082c6 <_dtoa_r+0x4ee>
 80082ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082be:	f7f8 f9ab 	bl	8000618 <__aeabi_dmul>
 80082c2:	3501      	adds	r5, #1
 80082c4:	2301      	movs	r3, #1
 80082c6:	1076      	asrs	r6, r6, #1
 80082c8:	3708      	adds	r7, #8
 80082ca:	e76c      	b.n	80081a6 <_dtoa_r+0x3ce>
 80082cc:	2502      	movs	r5, #2
 80082ce:	e76f      	b.n	80081b0 <_dtoa_r+0x3d8>
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80082d6:	930c      	str	r3, [sp, #48]	; 0x30
 80082d8:	e78d      	b.n	80081f6 <_dtoa_r+0x41e>
 80082da:	9900      	ldr	r1, [sp, #0]
 80082dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e0:	4b4e      	ldr	r3, [pc, #312]	; (800841c <_dtoa_r+0x644>)
 80082e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082e6:	4401      	add	r1, r0
 80082e8:	9102      	str	r1, [sp, #8]
 80082ea:	9908      	ldr	r1, [sp, #32]
 80082ec:	eeb0 8a47 	vmov.f32	s16, s14
 80082f0:	eef0 8a67 	vmov.f32	s17, s15
 80082f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082fc:	2900      	cmp	r1, #0
 80082fe:	d045      	beq.n	800838c <_dtoa_r+0x5b4>
 8008300:	494c      	ldr	r1, [pc, #304]	; (8008434 <_dtoa_r+0x65c>)
 8008302:	2000      	movs	r0, #0
 8008304:	f7f8 fab2 	bl	800086c <__aeabi_ddiv>
 8008308:	ec53 2b18 	vmov	r2, r3, d8
 800830c:	f7f7 ffcc 	bl	80002a8 <__aeabi_dsub>
 8008310:	9d00      	ldr	r5, [sp, #0]
 8008312:	ec41 0b18 	vmov	d8, r0, r1
 8008316:	4639      	mov	r1, r7
 8008318:	4630      	mov	r0, r6
 800831a:	f7f8 fc2d 	bl	8000b78 <__aeabi_d2iz>
 800831e:	900c      	str	r0, [sp, #48]	; 0x30
 8008320:	f7f8 f910 	bl	8000544 <__aeabi_i2d>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4630      	mov	r0, r6
 800832a:	4639      	mov	r1, r7
 800832c:	f7f7 ffbc 	bl	80002a8 <__aeabi_dsub>
 8008330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008332:	3330      	adds	r3, #48	; 0x30
 8008334:	f805 3b01 	strb.w	r3, [r5], #1
 8008338:	ec53 2b18 	vmov	r2, r3, d8
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	f7f8 fbdc 	bl	8000afc <__aeabi_dcmplt>
 8008344:	2800      	cmp	r0, #0
 8008346:	d165      	bne.n	8008414 <_dtoa_r+0x63c>
 8008348:	4632      	mov	r2, r6
 800834a:	463b      	mov	r3, r7
 800834c:	4935      	ldr	r1, [pc, #212]	; (8008424 <_dtoa_r+0x64c>)
 800834e:	2000      	movs	r0, #0
 8008350:	f7f7 ffaa 	bl	80002a8 <__aeabi_dsub>
 8008354:	ec53 2b18 	vmov	r2, r3, d8
 8008358:	f7f8 fbd0 	bl	8000afc <__aeabi_dcmplt>
 800835c:	2800      	cmp	r0, #0
 800835e:	f040 80b9 	bne.w	80084d4 <_dtoa_r+0x6fc>
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	429d      	cmp	r5, r3
 8008366:	f43f af75 	beq.w	8008254 <_dtoa_r+0x47c>
 800836a:	4b2f      	ldr	r3, [pc, #188]	; (8008428 <_dtoa_r+0x650>)
 800836c:	ec51 0b18 	vmov	r0, r1, d8
 8008370:	2200      	movs	r2, #0
 8008372:	f7f8 f951 	bl	8000618 <__aeabi_dmul>
 8008376:	4b2c      	ldr	r3, [pc, #176]	; (8008428 <_dtoa_r+0x650>)
 8008378:	ec41 0b18 	vmov	d8, r0, r1
 800837c:	2200      	movs	r2, #0
 800837e:	4630      	mov	r0, r6
 8008380:	4639      	mov	r1, r7
 8008382:	f7f8 f949 	bl	8000618 <__aeabi_dmul>
 8008386:	4606      	mov	r6, r0
 8008388:	460f      	mov	r7, r1
 800838a:	e7c4      	b.n	8008316 <_dtoa_r+0x53e>
 800838c:	ec51 0b17 	vmov	r0, r1, d7
 8008390:	f7f8 f942 	bl	8000618 <__aeabi_dmul>
 8008394:	9b02      	ldr	r3, [sp, #8]
 8008396:	9d00      	ldr	r5, [sp, #0]
 8008398:	930c      	str	r3, [sp, #48]	; 0x30
 800839a:	ec41 0b18 	vmov	d8, r0, r1
 800839e:	4639      	mov	r1, r7
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7f8 fbe9 	bl	8000b78 <__aeabi_d2iz>
 80083a6:	9011      	str	r0, [sp, #68]	; 0x44
 80083a8:	f7f8 f8cc 	bl	8000544 <__aeabi_i2d>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4630      	mov	r0, r6
 80083b2:	4639      	mov	r1, r7
 80083b4:	f7f7 ff78 	bl	80002a8 <__aeabi_dsub>
 80083b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ba:	3330      	adds	r3, #48	; 0x30
 80083bc:	f805 3b01 	strb.w	r3, [r5], #1
 80083c0:	9b02      	ldr	r3, [sp, #8]
 80083c2:	429d      	cmp	r5, r3
 80083c4:	4606      	mov	r6, r0
 80083c6:	460f      	mov	r7, r1
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	d134      	bne.n	8008438 <_dtoa_r+0x660>
 80083ce:	4b19      	ldr	r3, [pc, #100]	; (8008434 <_dtoa_r+0x65c>)
 80083d0:	ec51 0b18 	vmov	r0, r1, d8
 80083d4:	f7f7 ff6a 	bl	80002ac <__adddf3>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 fbaa 	bl	8000b38 <__aeabi_dcmpgt>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d175      	bne.n	80084d4 <_dtoa_r+0x6fc>
 80083e8:	ec53 2b18 	vmov	r2, r3, d8
 80083ec:	4911      	ldr	r1, [pc, #68]	; (8008434 <_dtoa_r+0x65c>)
 80083ee:	2000      	movs	r0, #0
 80083f0:	f7f7 ff5a 	bl	80002a8 <__aeabi_dsub>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f8 fb7e 	bl	8000afc <__aeabi_dcmplt>
 8008400:	2800      	cmp	r0, #0
 8008402:	f43f af27 	beq.w	8008254 <_dtoa_r+0x47c>
 8008406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008408:	1e6b      	subs	r3, r5, #1
 800840a:	930c      	str	r3, [sp, #48]	; 0x30
 800840c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008410:	2b30      	cmp	r3, #48	; 0x30
 8008412:	d0f8      	beq.n	8008406 <_dtoa_r+0x62e>
 8008414:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008418:	e04a      	b.n	80084b0 <_dtoa_r+0x6d8>
 800841a:	bf00      	nop
 800841c:	0800a298 	.word	0x0800a298
 8008420:	0800a270 	.word	0x0800a270
 8008424:	3ff00000 	.word	0x3ff00000
 8008428:	40240000 	.word	0x40240000
 800842c:	401c0000 	.word	0x401c0000
 8008430:	40140000 	.word	0x40140000
 8008434:	3fe00000 	.word	0x3fe00000
 8008438:	4baf      	ldr	r3, [pc, #700]	; (80086f8 <_dtoa_r+0x920>)
 800843a:	f7f8 f8ed 	bl	8000618 <__aeabi_dmul>
 800843e:	4606      	mov	r6, r0
 8008440:	460f      	mov	r7, r1
 8008442:	e7ac      	b.n	800839e <_dtoa_r+0x5c6>
 8008444:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008448:	9d00      	ldr	r5, [sp, #0]
 800844a:	4642      	mov	r2, r8
 800844c:	464b      	mov	r3, r9
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 fa0b 	bl	800086c <__aeabi_ddiv>
 8008456:	f7f8 fb8f 	bl	8000b78 <__aeabi_d2iz>
 800845a:	9002      	str	r0, [sp, #8]
 800845c:	f7f8 f872 	bl	8000544 <__aeabi_i2d>
 8008460:	4642      	mov	r2, r8
 8008462:	464b      	mov	r3, r9
 8008464:	f7f8 f8d8 	bl	8000618 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f7f7 ff1a 	bl	80002a8 <__aeabi_dsub>
 8008474:	9e02      	ldr	r6, [sp, #8]
 8008476:	9f01      	ldr	r7, [sp, #4]
 8008478:	3630      	adds	r6, #48	; 0x30
 800847a:	f805 6b01 	strb.w	r6, [r5], #1
 800847e:	9e00      	ldr	r6, [sp, #0]
 8008480:	1bae      	subs	r6, r5, r6
 8008482:	42b7      	cmp	r7, r6
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	d137      	bne.n	80084fa <_dtoa_r+0x722>
 800848a:	f7f7 ff0f 	bl	80002ac <__adddf3>
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	f7f8 fb4f 	bl	8000b38 <__aeabi_dcmpgt>
 800849a:	b9c8      	cbnz	r0, 80084d0 <_dtoa_r+0x6f8>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	4630      	mov	r0, r6
 80084a2:	4639      	mov	r1, r7
 80084a4:	f7f8 fb20 	bl	8000ae8 <__aeabi_dcmpeq>
 80084a8:	b110      	cbz	r0, 80084b0 <_dtoa_r+0x6d8>
 80084aa:	9b02      	ldr	r3, [sp, #8]
 80084ac:	07d9      	lsls	r1, r3, #31
 80084ae:	d40f      	bmi.n	80084d0 <_dtoa_r+0x6f8>
 80084b0:	4620      	mov	r0, r4
 80084b2:	4659      	mov	r1, fp
 80084b4:	f000 fad6 	bl	8008a64 <_Bfree>
 80084b8:	2300      	movs	r3, #0
 80084ba:	702b      	strb	r3, [r5, #0]
 80084bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084be:	f10a 0001 	add.w	r0, sl, #1
 80084c2:	6018      	str	r0, [r3, #0]
 80084c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f43f acd8 	beq.w	8007e7c <_dtoa_r+0xa4>
 80084cc:	601d      	str	r5, [r3, #0]
 80084ce:	e4d5      	b.n	8007e7c <_dtoa_r+0xa4>
 80084d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80084d4:	462b      	mov	r3, r5
 80084d6:	461d      	mov	r5, r3
 80084d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084dc:	2a39      	cmp	r2, #57	; 0x39
 80084de:	d108      	bne.n	80084f2 <_dtoa_r+0x71a>
 80084e0:	9a00      	ldr	r2, [sp, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d1f7      	bne.n	80084d6 <_dtoa_r+0x6fe>
 80084e6:	9a07      	ldr	r2, [sp, #28]
 80084e8:	9900      	ldr	r1, [sp, #0]
 80084ea:	3201      	adds	r2, #1
 80084ec:	9207      	str	r2, [sp, #28]
 80084ee:	2230      	movs	r2, #48	; 0x30
 80084f0:	700a      	strb	r2, [r1, #0]
 80084f2:	781a      	ldrb	r2, [r3, #0]
 80084f4:	3201      	adds	r2, #1
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	e78c      	b.n	8008414 <_dtoa_r+0x63c>
 80084fa:	4b7f      	ldr	r3, [pc, #508]	; (80086f8 <_dtoa_r+0x920>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	f7f8 f88b 	bl	8000618 <__aeabi_dmul>
 8008502:	2200      	movs	r2, #0
 8008504:	2300      	movs	r3, #0
 8008506:	4606      	mov	r6, r0
 8008508:	460f      	mov	r7, r1
 800850a:	f7f8 faed 	bl	8000ae8 <__aeabi_dcmpeq>
 800850e:	2800      	cmp	r0, #0
 8008510:	d09b      	beq.n	800844a <_dtoa_r+0x672>
 8008512:	e7cd      	b.n	80084b0 <_dtoa_r+0x6d8>
 8008514:	9a08      	ldr	r2, [sp, #32]
 8008516:	2a00      	cmp	r2, #0
 8008518:	f000 80c4 	beq.w	80086a4 <_dtoa_r+0x8cc>
 800851c:	9a05      	ldr	r2, [sp, #20]
 800851e:	2a01      	cmp	r2, #1
 8008520:	f300 80a8 	bgt.w	8008674 <_dtoa_r+0x89c>
 8008524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008526:	2a00      	cmp	r2, #0
 8008528:	f000 80a0 	beq.w	800866c <_dtoa_r+0x894>
 800852c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008530:	9e06      	ldr	r6, [sp, #24]
 8008532:	4645      	mov	r5, r8
 8008534:	9a04      	ldr	r2, [sp, #16]
 8008536:	2101      	movs	r1, #1
 8008538:	441a      	add	r2, r3
 800853a:	4620      	mov	r0, r4
 800853c:	4498      	add	r8, r3
 800853e:	9204      	str	r2, [sp, #16]
 8008540:	f000 fb4c 	bl	8008bdc <__i2b>
 8008544:	4607      	mov	r7, r0
 8008546:	2d00      	cmp	r5, #0
 8008548:	dd0b      	ble.n	8008562 <_dtoa_r+0x78a>
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd08      	ble.n	8008562 <_dtoa_r+0x78a>
 8008550:	42ab      	cmp	r3, r5
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	bfa8      	it	ge
 8008556:	462b      	movge	r3, r5
 8008558:	eba8 0803 	sub.w	r8, r8, r3
 800855c:	1aed      	subs	r5, r5, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	9b06      	ldr	r3, [sp, #24]
 8008564:	b1fb      	cbz	r3, 80085a6 <_dtoa_r+0x7ce>
 8008566:	9b08      	ldr	r3, [sp, #32]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 809f 	beq.w	80086ac <_dtoa_r+0x8d4>
 800856e:	2e00      	cmp	r6, #0
 8008570:	dd11      	ble.n	8008596 <_dtoa_r+0x7be>
 8008572:	4639      	mov	r1, r7
 8008574:	4632      	mov	r2, r6
 8008576:	4620      	mov	r0, r4
 8008578:	f000 fbec 	bl	8008d54 <__pow5mult>
 800857c:	465a      	mov	r2, fp
 800857e:	4601      	mov	r1, r0
 8008580:	4607      	mov	r7, r0
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fb40 	bl	8008c08 <__multiply>
 8008588:	4659      	mov	r1, fp
 800858a:	9007      	str	r0, [sp, #28]
 800858c:	4620      	mov	r0, r4
 800858e:	f000 fa69 	bl	8008a64 <_Bfree>
 8008592:	9b07      	ldr	r3, [sp, #28]
 8008594:	469b      	mov	fp, r3
 8008596:	9b06      	ldr	r3, [sp, #24]
 8008598:	1b9a      	subs	r2, r3, r6
 800859a:	d004      	beq.n	80085a6 <_dtoa_r+0x7ce>
 800859c:	4659      	mov	r1, fp
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fbd8 	bl	8008d54 <__pow5mult>
 80085a4:	4683      	mov	fp, r0
 80085a6:	2101      	movs	r1, #1
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 fb17 	bl	8008bdc <__i2b>
 80085ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	4606      	mov	r6, r0
 80085b4:	dd7c      	ble.n	80086b0 <_dtoa_r+0x8d8>
 80085b6:	461a      	mov	r2, r3
 80085b8:	4601      	mov	r1, r0
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 fbca 	bl	8008d54 <__pow5mult>
 80085c0:	9b05      	ldr	r3, [sp, #20]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	4606      	mov	r6, r0
 80085c6:	dd76      	ble.n	80086b6 <_dtoa_r+0x8de>
 80085c8:	2300      	movs	r3, #0
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	6933      	ldr	r3, [r6, #16]
 80085ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085d2:	6918      	ldr	r0, [r3, #16]
 80085d4:	f000 fab2 	bl	8008b3c <__hi0bits>
 80085d8:	f1c0 0020 	rsb	r0, r0, #32
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	4418      	add	r0, r3
 80085e0:	f010 001f 	ands.w	r0, r0, #31
 80085e4:	f000 8086 	beq.w	80086f4 <_dtoa_r+0x91c>
 80085e8:	f1c0 0320 	rsb	r3, r0, #32
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	dd7f      	ble.n	80086f0 <_dtoa_r+0x918>
 80085f0:	f1c0 001c 	rsb	r0, r0, #28
 80085f4:	9b04      	ldr	r3, [sp, #16]
 80085f6:	4403      	add	r3, r0
 80085f8:	4480      	add	r8, r0
 80085fa:	4405      	add	r5, r0
 80085fc:	9304      	str	r3, [sp, #16]
 80085fe:	f1b8 0f00 	cmp.w	r8, #0
 8008602:	dd05      	ble.n	8008610 <_dtoa_r+0x838>
 8008604:	4659      	mov	r1, fp
 8008606:	4642      	mov	r2, r8
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fbfd 	bl	8008e08 <__lshift>
 800860e:	4683      	mov	fp, r0
 8008610:	9b04      	ldr	r3, [sp, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	dd05      	ble.n	8008622 <_dtoa_r+0x84a>
 8008616:	4631      	mov	r1, r6
 8008618:	461a      	mov	r2, r3
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fbf4 	bl	8008e08 <__lshift>
 8008620:	4606      	mov	r6, r0
 8008622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008624:	2b00      	cmp	r3, #0
 8008626:	d069      	beq.n	80086fc <_dtoa_r+0x924>
 8008628:	4631      	mov	r1, r6
 800862a:	4658      	mov	r0, fp
 800862c:	f000 fc58 	bl	8008ee0 <__mcmp>
 8008630:	2800      	cmp	r0, #0
 8008632:	da63      	bge.n	80086fc <_dtoa_r+0x924>
 8008634:	2300      	movs	r3, #0
 8008636:	4659      	mov	r1, fp
 8008638:	220a      	movs	r2, #10
 800863a:	4620      	mov	r0, r4
 800863c:	f000 fa34 	bl	8008aa8 <__multadd>
 8008640:	9b08      	ldr	r3, [sp, #32]
 8008642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008646:	4683      	mov	fp, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 818f 	beq.w	800896c <_dtoa_r+0xb94>
 800864e:	4639      	mov	r1, r7
 8008650:	2300      	movs	r3, #0
 8008652:	220a      	movs	r2, #10
 8008654:	4620      	mov	r0, r4
 8008656:	f000 fa27 	bl	8008aa8 <__multadd>
 800865a:	f1b9 0f00 	cmp.w	r9, #0
 800865e:	4607      	mov	r7, r0
 8008660:	f300 808e 	bgt.w	8008780 <_dtoa_r+0x9a8>
 8008664:	9b05      	ldr	r3, [sp, #20]
 8008666:	2b02      	cmp	r3, #2
 8008668:	dc50      	bgt.n	800870c <_dtoa_r+0x934>
 800866a:	e089      	b.n	8008780 <_dtoa_r+0x9a8>
 800866c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800866e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008672:	e75d      	b.n	8008530 <_dtoa_r+0x758>
 8008674:	9b01      	ldr	r3, [sp, #4]
 8008676:	1e5e      	subs	r6, r3, #1
 8008678:	9b06      	ldr	r3, [sp, #24]
 800867a:	42b3      	cmp	r3, r6
 800867c:	bfbf      	itttt	lt
 800867e:	9b06      	ldrlt	r3, [sp, #24]
 8008680:	9606      	strlt	r6, [sp, #24]
 8008682:	1af2      	sublt	r2, r6, r3
 8008684:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008686:	bfb6      	itet	lt
 8008688:	189b      	addlt	r3, r3, r2
 800868a:	1b9e      	subge	r6, r3, r6
 800868c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	bfb8      	it	lt
 8008692:	2600      	movlt	r6, #0
 8008694:	2b00      	cmp	r3, #0
 8008696:	bfb5      	itete	lt
 8008698:	eba8 0503 	sublt.w	r5, r8, r3
 800869c:	9b01      	ldrge	r3, [sp, #4]
 800869e:	2300      	movlt	r3, #0
 80086a0:	4645      	movge	r5, r8
 80086a2:	e747      	b.n	8008534 <_dtoa_r+0x75c>
 80086a4:	9e06      	ldr	r6, [sp, #24]
 80086a6:	9f08      	ldr	r7, [sp, #32]
 80086a8:	4645      	mov	r5, r8
 80086aa:	e74c      	b.n	8008546 <_dtoa_r+0x76e>
 80086ac:	9a06      	ldr	r2, [sp, #24]
 80086ae:	e775      	b.n	800859c <_dtoa_r+0x7c4>
 80086b0:	9b05      	ldr	r3, [sp, #20]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	dc18      	bgt.n	80086e8 <_dtoa_r+0x910>
 80086b6:	9b02      	ldr	r3, [sp, #8]
 80086b8:	b9b3      	cbnz	r3, 80086e8 <_dtoa_r+0x910>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c0:	b9a3      	cbnz	r3, 80086ec <_dtoa_r+0x914>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086c8:	0d1b      	lsrs	r3, r3, #20
 80086ca:	051b      	lsls	r3, r3, #20
 80086cc:	b12b      	cbz	r3, 80086da <_dtoa_r+0x902>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	f108 0801 	add.w	r8, r8, #1
 80086d8:	2301      	movs	r3, #1
 80086da:	9306      	str	r3, [sp, #24]
 80086dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f47f af74 	bne.w	80085cc <_dtoa_r+0x7f4>
 80086e4:	2001      	movs	r0, #1
 80086e6:	e779      	b.n	80085dc <_dtoa_r+0x804>
 80086e8:	2300      	movs	r3, #0
 80086ea:	e7f6      	b.n	80086da <_dtoa_r+0x902>
 80086ec:	9b02      	ldr	r3, [sp, #8]
 80086ee:	e7f4      	b.n	80086da <_dtoa_r+0x902>
 80086f0:	d085      	beq.n	80085fe <_dtoa_r+0x826>
 80086f2:	4618      	mov	r0, r3
 80086f4:	301c      	adds	r0, #28
 80086f6:	e77d      	b.n	80085f4 <_dtoa_r+0x81c>
 80086f8:	40240000 	.word	0x40240000
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dc38      	bgt.n	8008774 <_dtoa_r+0x99c>
 8008702:	9b05      	ldr	r3, [sp, #20]
 8008704:	2b02      	cmp	r3, #2
 8008706:	dd35      	ble.n	8008774 <_dtoa_r+0x99c>
 8008708:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800870c:	f1b9 0f00 	cmp.w	r9, #0
 8008710:	d10d      	bne.n	800872e <_dtoa_r+0x956>
 8008712:	4631      	mov	r1, r6
 8008714:	464b      	mov	r3, r9
 8008716:	2205      	movs	r2, #5
 8008718:	4620      	mov	r0, r4
 800871a:	f000 f9c5 	bl	8008aa8 <__multadd>
 800871e:	4601      	mov	r1, r0
 8008720:	4606      	mov	r6, r0
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fbdc 	bl	8008ee0 <__mcmp>
 8008728:	2800      	cmp	r0, #0
 800872a:	f73f adbd 	bgt.w	80082a8 <_dtoa_r+0x4d0>
 800872e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008730:	9d00      	ldr	r5, [sp, #0]
 8008732:	ea6f 0a03 	mvn.w	sl, r3
 8008736:	f04f 0800 	mov.w	r8, #0
 800873a:	4631      	mov	r1, r6
 800873c:	4620      	mov	r0, r4
 800873e:	f000 f991 	bl	8008a64 <_Bfree>
 8008742:	2f00      	cmp	r7, #0
 8008744:	f43f aeb4 	beq.w	80084b0 <_dtoa_r+0x6d8>
 8008748:	f1b8 0f00 	cmp.w	r8, #0
 800874c:	d005      	beq.n	800875a <_dtoa_r+0x982>
 800874e:	45b8      	cmp	r8, r7
 8008750:	d003      	beq.n	800875a <_dtoa_r+0x982>
 8008752:	4641      	mov	r1, r8
 8008754:	4620      	mov	r0, r4
 8008756:	f000 f985 	bl	8008a64 <_Bfree>
 800875a:	4639      	mov	r1, r7
 800875c:	4620      	mov	r0, r4
 800875e:	f000 f981 	bl	8008a64 <_Bfree>
 8008762:	e6a5      	b.n	80084b0 <_dtoa_r+0x6d8>
 8008764:	2600      	movs	r6, #0
 8008766:	4637      	mov	r7, r6
 8008768:	e7e1      	b.n	800872e <_dtoa_r+0x956>
 800876a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800876c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008770:	4637      	mov	r7, r6
 8008772:	e599      	b.n	80082a8 <_dtoa_r+0x4d0>
 8008774:	9b08      	ldr	r3, [sp, #32]
 8008776:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 80fd 	beq.w	800897a <_dtoa_r+0xba2>
 8008780:	2d00      	cmp	r5, #0
 8008782:	dd05      	ble.n	8008790 <_dtoa_r+0x9b8>
 8008784:	4639      	mov	r1, r7
 8008786:	462a      	mov	r2, r5
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fb3d 	bl	8008e08 <__lshift>
 800878e:	4607      	mov	r7, r0
 8008790:	9b06      	ldr	r3, [sp, #24]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d05c      	beq.n	8008850 <_dtoa_r+0xa78>
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4620      	mov	r0, r4
 800879a:	f000 f923 	bl	80089e4 <_Balloc>
 800879e:	4605      	mov	r5, r0
 80087a0:	b928      	cbnz	r0, 80087ae <_dtoa_r+0x9d6>
 80087a2:	4b80      	ldr	r3, [pc, #512]	; (80089a4 <_dtoa_r+0xbcc>)
 80087a4:	4602      	mov	r2, r0
 80087a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087aa:	f7ff bb2e 	b.w	8007e0a <_dtoa_r+0x32>
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	3202      	adds	r2, #2
 80087b2:	0092      	lsls	r2, r2, #2
 80087b4:	f107 010c 	add.w	r1, r7, #12
 80087b8:	300c      	adds	r0, #12
 80087ba:	f000 f905 	bl	80089c8 <memcpy>
 80087be:	2201      	movs	r2, #1
 80087c0:	4629      	mov	r1, r5
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fb20 	bl	8008e08 <__lshift>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	3301      	adds	r3, #1
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	9b00      	ldr	r3, [sp, #0]
 80087d0:	444b      	add	r3, r9
 80087d2:	9307      	str	r3, [sp, #28]
 80087d4:	9b02      	ldr	r3, [sp, #8]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	46b8      	mov	r8, r7
 80087dc:	9306      	str	r3, [sp, #24]
 80087de:	4607      	mov	r7, r0
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	4631      	mov	r1, r6
 80087e4:	3b01      	subs	r3, #1
 80087e6:	4658      	mov	r0, fp
 80087e8:	9302      	str	r3, [sp, #8]
 80087ea:	f7ff fa67 	bl	8007cbc <quorem>
 80087ee:	4603      	mov	r3, r0
 80087f0:	3330      	adds	r3, #48	; 0x30
 80087f2:	9004      	str	r0, [sp, #16]
 80087f4:	4641      	mov	r1, r8
 80087f6:	4658      	mov	r0, fp
 80087f8:	9308      	str	r3, [sp, #32]
 80087fa:	f000 fb71 	bl	8008ee0 <__mcmp>
 80087fe:	463a      	mov	r2, r7
 8008800:	4681      	mov	r9, r0
 8008802:	4631      	mov	r1, r6
 8008804:	4620      	mov	r0, r4
 8008806:	f000 fb87 	bl	8008f18 <__mdiff>
 800880a:	68c2      	ldr	r2, [r0, #12]
 800880c:	9b08      	ldr	r3, [sp, #32]
 800880e:	4605      	mov	r5, r0
 8008810:	bb02      	cbnz	r2, 8008854 <_dtoa_r+0xa7c>
 8008812:	4601      	mov	r1, r0
 8008814:	4658      	mov	r0, fp
 8008816:	f000 fb63 	bl	8008ee0 <__mcmp>
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	4602      	mov	r2, r0
 800881e:	4629      	mov	r1, r5
 8008820:	4620      	mov	r0, r4
 8008822:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008826:	f000 f91d 	bl	8008a64 <_Bfree>
 800882a:	9b05      	ldr	r3, [sp, #20]
 800882c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800882e:	9d01      	ldr	r5, [sp, #4]
 8008830:	ea43 0102 	orr.w	r1, r3, r2
 8008834:	9b06      	ldr	r3, [sp, #24]
 8008836:	430b      	orrs	r3, r1
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	d10d      	bne.n	8008858 <_dtoa_r+0xa80>
 800883c:	2b39      	cmp	r3, #57	; 0x39
 800883e:	d029      	beq.n	8008894 <_dtoa_r+0xabc>
 8008840:	f1b9 0f00 	cmp.w	r9, #0
 8008844:	dd01      	ble.n	800884a <_dtoa_r+0xa72>
 8008846:	9b04      	ldr	r3, [sp, #16]
 8008848:	3331      	adds	r3, #49	; 0x31
 800884a:	9a02      	ldr	r2, [sp, #8]
 800884c:	7013      	strb	r3, [r2, #0]
 800884e:	e774      	b.n	800873a <_dtoa_r+0x962>
 8008850:	4638      	mov	r0, r7
 8008852:	e7b9      	b.n	80087c8 <_dtoa_r+0x9f0>
 8008854:	2201      	movs	r2, #1
 8008856:	e7e2      	b.n	800881e <_dtoa_r+0xa46>
 8008858:	f1b9 0f00 	cmp.w	r9, #0
 800885c:	db06      	blt.n	800886c <_dtoa_r+0xa94>
 800885e:	9905      	ldr	r1, [sp, #20]
 8008860:	ea41 0909 	orr.w	r9, r1, r9
 8008864:	9906      	ldr	r1, [sp, #24]
 8008866:	ea59 0101 	orrs.w	r1, r9, r1
 800886a:	d120      	bne.n	80088ae <_dtoa_r+0xad6>
 800886c:	2a00      	cmp	r2, #0
 800886e:	ddec      	ble.n	800884a <_dtoa_r+0xa72>
 8008870:	4659      	mov	r1, fp
 8008872:	2201      	movs	r2, #1
 8008874:	4620      	mov	r0, r4
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	f000 fac6 	bl	8008e08 <__lshift>
 800887c:	4631      	mov	r1, r6
 800887e:	4683      	mov	fp, r0
 8008880:	f000 fb2e 	bl	8008ee0 <__mcmp>
 8008884:	2800      	cmp	r0, #0
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	dc02      	bgt.n	8008890 <_dtoa_r+0xab8>
 800888a:	d1de      	bne.n	800884a <_dtoa_r+0xa72>
 800888c:	07da      	lsls	r2, r3, #31
 800888e:	d5dc      	bpl.n	800884a <_dtoa_r+0xa72>
 8008890:	2b39      	cmp	r3, #57	; 0x39
 8008892:	d1d8      	bne.n	8008846 <_dtoa_r+0xa6e>
 8008894:	9a02      	ldr	r2, [sp, #8]
 8008896:	2339      	movs	r3, #57	; 0x39
 8008898:	7013      	strb	r3, [r2, #0]
 800889a:	462b      	mov	r3, r5
 800889c:	461d      	mov	r5, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088a4:	2a39      	cmp	r2, #57	; 0x39
 80088a6:	d050      	beq.n	800894a <_dtoa_r+0xb72>
 80088a8:	3201      	adds	r2, #1
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e745      	b.n	800873a <_dtoa_r+0x962>
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	dd03      	ble.n	80088ba <_dtoa_r+0xae2>
 80088b2:	2b39      	cmp	r3, #57	; 0x39
 80088b4:	d0ee      	beq.n	8008894 <_dtoa_r+0xabc>
 80088b6:	3301      	adds	r3, #1
 80088b8:	e7c7      	b.n	800884a <_dtoa_r+0xa72>
 80088ba:	9a01      	ldr	r2, [sp, #4]
 80088bc:	9907      	ldr	r1, [sp, #28]
 80088be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088c2:	428a      	cmp	r2, r1
 80088c4:	d02a      	beq.n	800891c <_dtoa_r+0xb44>
 80088c6:	4659      	mov	r1, fp
 80088c8:	2300      	movs	r3, #0
 80088ca:	220a      	movs	r2, #10
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 f8eb 	bl	8008aa8 <__multadd>
 80088d2:	45b8      	cmp	r8, r7
 80088d4:	4683      	mov	fp, r0
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	f04f 020a 	mov.w	r2, #10
 80088de:	4641      	mov	r1, r8
 80088e0:	4620      	mov	r0, r4
 80088e2:	d107      	bne.n	80088f4 <_dtoa_r+0xb1c>
 80088e4:	f000 f8e0 	bl	8008aa8 <__multadd>
 80088e8:	4680      	mov	r8, r0
 80088ea:	4607      	mov	r7, r0
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	3301      	adds	r3, #1
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	e775      	b.n	80087e0 <_dtoa_r+0xa08>
 80088f4:	f000 f8d8 	bl	8008aa8 <__multadd>
 80088f8:	4639      	mov	r1, r7
 80088fa:	4680      	mov	r8, r0
 80088fc:	2300      	movs	r3, #0
 80088fe:	220a      	movs	r2, #10
 8008900:	4620      	mov	r0, r4
 8008902:	f000 f8d1 	bl	8008aa8 <__multadd>
 8008906:	4607      	mov	r7, r0
 8008908:	e7f0      	b.n	80088ec <_dtoa_r+0xb14>
 800890a:	f1b9 0f00 	cmp.w	r9, #0
 800890e:	9a00      	ldr	r2, [sp, #0]
 8008910:	bfcc      	ite	gt
 8008912:	464d      	movgt	r5, r9
 8008914:	2501      	movle	r5, #1
 8008916:	4415      	add	r5, r2
 8008918:	f04f 0800 	mov.w	r8, #0
 800891c:	4659      	mov	r1, fp
 800891e:	2201      	movs	r2, #1
 8008920:	4620      	mov	r0, r4
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	f000 fa70 	bl	8008e08 <__lshift>
 8008928:	4631      	mov	r1, r6
 800892a:	4683      	mov	fp, r0
 800892c:	f000 fad8 	bl	8008ee0 <__mcmp>
 8008930:	2800      	cmp	r0, #0
 8008932:	dcb2      	bgt.n	800889a <_dtoa_r+0xac2>
 8008934:	d102      	bne.n	800893c <_dtoa_r+0xb64>
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	07db      	lsls	r3, r3, #31
 800893a:	d4ae      	bmi.n	800889a <_dtoa_r+0xac2>
 800893c:	462b      	mov	r3, r5
 800893e:	461d      	mov	r5, r3
 8008940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008944:	2a30      	cmp	r2, #48	; 0x30
 8008946:	d0fa      	beq.n	800893e <_dtoa_r+0xb66>
 8008948:	e6f7      	b.n	800873a <_dtoa_r+0x962>
 800894a:	9a00      	ldr	r2, [sp, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d1a5      	bne.n	800889c <_dtoa_r+0xac4>
 8008950:	f10a 0a01 	add.w	sl, sl, #1
 8008954:	2331      	movs	r3, #49	; 0x31
 8008956:	e779      	b.n	800884c <_dtoa_r+0xa74>
 8008958:	4b13      	ldr	r3, [pc, #76]	; (80089a8 <_dtoa_r+0xbd0>)
 800895a:	f7ff baaf 	b.w	8007ebc <_dtoa_r+0xe4>
 800895e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008960:	2b00      	cmp	r3, #0
 8008962:	f47f aa86 	bne.w	8007e72 <_dtoa_r+0x9a>
 8008966:	4b11      	ldr	r3, [pc, #68]	; (80089ac <_dtoa_r+0xbd4>)
 8008968:	f7ff baa8 	b.w	8007ebc <_dtoa_r+0xe4>
 800896c:	f1b9 0f00 	cmp.w	r9, #0
 8008970:	dc03      	bgt.n	800897a <_dtoa_r+0xba2>
 8008972:	9b05      	ldr	r3, [sp, #20]
 8008974:	2b02      	cmp	r3, #2
 8008976:	f73f aec9 	bgt.w	800870c <_dtoa_r+0x934>
 800897a:	9d00      	ldr	r5, [sp, #0]
 800897c:	4631      	mov	r1, r6
 800897e:	4658      	mov	r0, fp
 8008980:	f7ff f99c 	bl	8007cbc <quorem>
 8008984:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008988:	f805 3b01 	strb.w	r3, [r5], #1
 800898c:	9a00      	ldr	r2, [sp, #0]
 800898e:	1aaa      	subs	r2, r5, r2
 8008990:	4591      	cmp	r9, r2
 8008992:	ddba      	ble.n	800890a <_dtoa_r+0xb32>
 8008994:	4659      	mov	r1, fp
 8008996:	2300      	movs	r3, #0
 8008998:	220a      	movs	r2, #10
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f884 	bl	8008aa8 <__multadd>
 80089a0:	4683      	mov	fp, r0
 80089a2:	e7eb      	b.n	800897c <_dtoa_r+0xba4>
 80089a4:	0800a1fb 	.word	0x0800a1fb
 80089a8:	0800a154 	.word	0x0800a154
 80089ac:	0800a178 	.word	0x0800a178

080089b0 <_localeconv_r>:
 80089b0:	4800      	ldr	r0, [pc, #0]	; (80089b4 <_localeconv_r+0x4>)
 80089b2:	4770      	bx	lr
 80089b4:	20000160 	.word	0x20000160

080089b8 <malloc>:
 80089b8:	4b02      	ldr	r3, [pc, #8]	; (80089c4 <malloc+0xc>)
 80089ba:	4601      	mov	r1, r0
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f000 bbef 	b.w	80091a0 <_malloc_r>
 80089c2:	bf00      	nop
 80089c4:	2000000c 	.word	0x2000000c

080089c8 <memcpy>:
 80089c8:	440a      	add	r2, r1
 80089ca:	4291      	cmp	r1, r2
 80089cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d0:	d100      	bne.n	80089d4 <memcpy+0xc>
 80089d2:	4770      	bx	lr
 80089d4:	b510      	push	{r4, lr}
 80089d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089de:	4291      	cmp	r1, r2
 80089e0:	d1f9      	bne.n	80089d6 <memcpy+0xe>
 80089e2:	bd10      	pop	{r4, pc}

080089e4 <_Balloc>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	b976      	cbnz	r6, 8008a0c <_Balloc+0x28>
 80089ee:	2010      	movs	r0, #16
 80089f0:	f7ff ffe2 	bl	80089b8 <malloc>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6260      	str	r0, [r4, #36]	; 0x24
 80089f8:	b920      	cbnz	r0, 8008a04 <_Balloc+0x20>
 80089fa:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <_Balloc+0x78>)
 80089fc:	4818      	ldr	r0, [pc, #96]	; (8008a60 <_Balloc+0x7c>)
 80089fe:	2166      	movs	r1, #102	; 0x66
 8008a00:	f000 fd94 	bl	800952c <__assert_func>
 8008a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a08:	6006      	str	r6, [r0, #0]
 8008a0a:	60c6      	str	r6, [r0, #12]
 8008a0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a0e:	68f3      	ldr	r3, [r6, #12]
 8008a10:	b183      	cbz	r3, 8008a34 <_Balloc+0x50>
 8008a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a1a:	b9b8      	cbnz	r0, 8008a4c <_Balloc+0x68>
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8008a22:	1d72      	adds	r2, r6, #5
 8008a24:	0092      	lsls	r2, r2, #2
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 fb5a 	bl	80090e0 <_calloc_r>
 8008a2c:	b160      	cbz	r0, 8008a48 <_Balloc+0x64>
 8008a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a32:	e00e      	b.n	8008a52 <_Balloc+0x6e>
 8008a34:	2221      	movs	r2, #33	; 0x21
 8008a36:	2104      	movs	r1, #4
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fb51 	bl	80090e0 <_calloc_r>
 8008a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a40:	60f0      	str	r0, [r6, #12]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e4      	bne.n	8008a12 <_Balloc+0x2e>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	6802      	ldr	r2, [r0, #0]
 8008a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a52:	2300      	movs	r3, #0
 8008a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a58:	e7f7      	b.n	8008a4a <_Balloc+0x66>
 8008a5a:	bf00      	nop
 8008a5c:	0800a185 	.word	0x0800a185
 8008a60:	0800a20c 	.word	0x0800a20c

08008a64 <_Bfree>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a68:	4605      	mov	r5, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	b976      	cbnz	r6, 8008a8c <_Bfree+0x28>
 8008a6e:	2010      	movs	r0, #16
 8008a70:	f7ff ffa2 	bl	80089b8 <malloc>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6268      	str	r0, [r5, #36]	; 0x24
 8008a78:	b920      	cbnz	r0, 8008a84 <_Bfree+0x20>
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <_Bfree+0x3c>)
 8008a7c:	4809      	ldr	r0, [pc, #36]	; (8008aa4 <_Bfree+0x40>)
 8008a7e:	218a      	movs	r1, #138	; 0x8a
 8008a80:	f000 fd54 	bl	800952c <__assert_func>
 8008a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a88:	6006      	str	r6, [r0, #0]
 8008a8a:	60c6      	str	r6, [r0, #12]
 8008a8c:	b13c      	cbz	r4, 8008a9e <_Bfree+0x3a>
 8008a8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a90:	6862      	ldr	r2, [r4, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a98:	6021      	str	r1, [r4, #0]
 8008a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	0800a185 	.word	0x0800a185
 8008aa4:	0800a20c 	.word	0x0800a20c

08008aa8 <__multadd>:
 8008aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	690e      	ldr	r6, [r1, #16]
 8008aae:	4607      	mov	r7, r0
 8008ab0:	4698      	mov	r8, r3
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	f101 0014 	add.w	r0, r1, #20
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6805      	ldr	r5, [r0, #0]
 8008abc:	b2a9      	uxth	r1, r5
 8008abe:	fb02 8101 	mla	r1, r2, r1, r8
 8008ac2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008ac6:	0c2d      	lsrs	r5, r5, #16
 8008ac8:	fb02 c505 	mla	r5, r2, r5, ip
 8008acc:	b289      	uxth	r1, r1
 8008ace:	3301      	adds	r3, #1
 8008ad0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ad4:	429e      	cmp	r6, r3
 8008ad6:	f840 1b04 	str.w	r1, [r0], #4
 8008ada:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008ade:	dcec      	bgt.n	8008aba <__multadd+0x12>
 8008ae0:	f1b8 0f00 	cmp.w	r8, #0
 8008ae4:	d022      	beq.n	8008b2c <__multadd+0x84>
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	42b3      	cmp	r3, r6
 8008aea:	dc19      	bgt.n	8008b20 <__multadd+0x78>
 8008aec:	6861      	ldr	r1, [r4, #4]
 8008aee:	4638      	mov	r0, r7
 8008af0:	3101      	adds	r1, #1
 8008af2:	f7ff ff77 	bl	80089e4 <_Balloc>
 8008af6:	4605      	mov	r5, r0
 8008af8:	b928      	cbnz	r0, 8008b06 <__multadd+0x5e>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <__multadd+0x8c>)
 8008afe:	480e      	ldr	r0, [pc, #56]	; (8008b38 <__multadd+0x90>)
 8008b00:	21b5      	movs	r1, #181	; 0xb5
 8008b02:	f000 fd13 	bl	800952c <__assert_func>
 8008b06:	6922      	ldr	r2, [r4, #16]
 8008b08:	3202      	adds	r2, #2
 8008b0a:	f104 010c 	add.w	r1, r4, #12
 8008b0e:	0092      	lsls	r2, r2, #2
 8008b10:	300c      	adds	r0, #12
 8008b12:	f7ff ff59 	bl	80089c8 <memcpy>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff ffa3 	bl	8008a64 <_Bfree>
 8008b1e:	462c      	mov	r4, r5
 8008b20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008b24:	3601      	adds	r6, #1
 8008b26:	f8c3 8014 	str.w	r8, [r3, #20]
 8008b2a:	6126      	str	r6, [r4, #16]
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b32:	bf00      	nop
 8008b34:	0800a1fb 	.word	0x0800a1fb
 8008b38:	0800a20c 	.word	0x0800a20c

08008b3c <__hi0bits>:
 8008b3c:	0c03      	lsrs	r3, r0, #16
 8008b3e:	041b      	lsls	r3, r3, #16
 8008b40:	b9d3      	cbnz	r3, 8008b78 <__hi0bits+0x3c>
 8008b42:	0400      	lsls	r0, r0, #16
 8008b44:	2310      	movs	r3, #16
 8008b46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b4a:	bf04      	itt	eq
 8008b4c:	0200      	lsleq	r0, r0, #8
 8008b4e:	3308      	addeq	r3, #8
 8008b50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b54:	bf04      	itt	eq
 8008b56:	0100      	lsleq	r0, r0, #4
 8008b58:	3304      	addeq	r3, #4
 8008b5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b5e:	bf04      	itt	eq
 8008b60:	0080      	lsleq	r0, r0, #2
 8008b62:	3302      	addeq	r3, #2
 8008b64:	2800      	cmp	r0, #0
 8008b66:	db05      	blt.n	8008b74 <__hi0bits+0x38>
 8008b68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b6c:	f103 0301 	add.w	r3, r3, #1
 8008b70:	bf08      	it	eq
 8008b72:	2320      	moveq	r3, #32
 8008b74:	4618      	mov	r0, r3
 8008b76:	4770      	bx	lr
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e7e4      	b.n	8008b46 <__hi0bits+0xa>

08008b7c <__lo0bits>:
 8008b7c:	6803      	ldr	r3, [r0, #0]
 8008b7e:	f013 0207 	ands.w	r2, r3, #7
 8008b82:	4601      	mov	r1, r0
 8008b84:	d00b      	beq.n	8008b9e <__lo0bits+0x22>
 8008b86:	07da      	lsls	r2, r3, #31
 8008b88:	d424      	bmi.n	8008bd4 <__lo0bits+0x58>
 8008b8a:	0798      	lsls	r0, r3, #30
 8008b8c:	bf49      	itett	mi
 8008b8e:	085b      	lsrmi	r3, r3, #1
 8008b90:	089b      	lsrpl	r3, r3, #2
 8008b92:	2001      	movmi	r0, #1
 8008b94:	600b      	strmi	r3, [r1, #0]
 8008b96:	bf5c      	itt	pl
 8008b98:	600b      	strpl	r3, [r1, #0]
 8008b9a:	2002      	movpl	r0, #2
 8008b9c:	4770      	bx	lr
 8008b9e:	b298      	uxth	r0, r3
 8008ba0:	b9b0      	cbnz	r0, 8008bd0 <__lo0bits+0x54>
 8008ba2:	0c1b      	lsrs	r3, r3, #16
 8008ba4:	2010      	movs	r0, #16
 8008ba6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008baa:	bf04      	itt	eq
 8008bac:	0a1b      	lsreq	r3, r3, #8
 8008bae:	3008      	addeq	r0, #8
 8008bb0:	071a      	lsls	r2, r3, #28
 8008bb2:	bf04      	itt	eq
 8008bb4:	091b      	lsreq	r3, r3, #4
 8008bb6:	3004      	addeq	r0, #4
 8008bb8:	079a      	lsls	r2, r3, #30
 8008bba:	bf04      	itt	eq
 8008bbc:	089b      	lsreq	r3, r3, #2
 8008bbe:	3002      	addeq	r0, #2
 8008bc0:	07da      	lsls	r2, r3, #31
 8008bc2:	d403      	bmi.n	8008bcc <__lo0bits+0x50>
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	f100 0001 	add.w	r0, r0, #1
 8008bca:	d005      	beq.n	8008bd8 <__lo0bits+0x5c>
 8008bcc:	600b      	str	r3, [r1, #0]
 8008bce:	4770      	bx	lr
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	e7e8      	b.n	8008ba6 <__lo0bits+0x2a>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4770      	bx	lr
 8008bd8:	2020      	movs	r0, #32
 8008bda:	4770      	bx	lr

08008bdc <__i2b>:
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	460c      	mov	r4, r1
 8008be0:	2101      	movs	r1, #1
 8008be2:	f7ff feff 	bl	80089e4 <_Balloc>
 8008be6:	4602      	mov	r2, r0
 8008be8:	b928      	cbnz	r0, 8008bf6 <__i2b+0x1a>
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <__i2b+0x24>)
 8008bec:	4805      	ldr	r0, [pc, #20]	; (8008c04 <__i2b+0x28>)
 8008bee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bf2:	f000 fc9b 	bl	800952c <__assert_func>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	6144      	str	r4, [r0, #20]
 8008bfa:	6103      	str	r3, [r0, #16]
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	bf00      	nop
 8008c00:	0800a1fb 	.word	0x0800a1fb
 8008c04:	0800a20c 	.word	0x0800a20c

08008c08 <__multiply>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	690a      	ldr	r2, [r1, #16]
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	bfb8      	it	lt
 8008c16:	460b      	movlt	r3, r1
 8008c18:	460d      	mov	r5, r1
 8008c1a:	bfbc      	itt	lt
 8008c1c:	4625      	movlt	r5, r4
 8008c1e:	461c      	movlt	r4, r3
 8008c20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008c24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c28:	68ab      	ldr	r3, [r5, #8]
 8008c2a:	6869      	ldr	r1, [r5, #4]
 8008c2c:	eb0a 0709 	add.w	r7, sl, r9
 8008c30:	42bb      	cmp	r3, r7
 8008c32:	b085      	sub	sp, #20
 8008c34:	bfb8      	it	lt
 8008c36:	3101      	addlt	r1, #1
 8008c38:	f7ff fed4 	bl	80089e4 <_Balloc>
 8008c3c:	b930      	cbnz	r0, 8008c4c <__multiply+0x44>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	4b42      	ldr	r3, [pc, #264]	; (8008d4c <__multiply+0x144>)
 8008c42:	4843      	ldr	r0, [pc, #268]	; (8008d50 <__multiply+0x148>)
 8008c44:	f240 115d 	movw	r1, #349	; 0x15d
 8008c48:	f000 fc70 	bl	800952c <__assert_func>
 8008c4c:	f100 0614 	add.w	r6, r0, #20
 8008c50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c54:	4633      	mov	r3, r6
 8008c56:	2200      	movs	r2, #0
 8008c58:	4543      	cmp	r3, r8
 8008c5a:	d31e      	bcc.n	8008c9a <__multiply+0x92>
 8008c5c:	f105 0c14 	add.w	ip, r5, #20
 8008c60:	f104 0314 	add.w	r3, r4, #20
 8008c64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c6c:	9202      	str	r2, [sp, #8]
 8008c6e:	ebac 0205 	sub.w	r2, ip, r5
 8008c72:	3a15      	subs	r2, #21
 8008c74:	f022 0203 	bic.w	r2, r2, #3
 8008c78:	3204      	adds	r2, #4
 8008c7a:	f105 0115 	add.w	r1, r5, #21
 8008c7e:	458c      	cmp	ip, r1
 8008c80:	bf38      	it	cc
 8008c82:	2204      	movcc	r2, #4
 8008c84:	9201      	str	r2, [sp, #4]
 8008c86:	9a02      	ldr	r2, [sp, #8]
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d808      	bhi.n	8008ca0 <__multiply+0x98>
 8008c8e:	2f00      	cmp	r7, #0
 8008c90:	dc55      	bgt.n	8008d3e <__multiply+0x136>
 8008c92:	6107      	str	r7, [r0, #16]
 8008c94:	b005      	add	sp, #20
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	f843 2b04 	str.w	r2, [r3], #4
 8008c9e:	e7db      	b.n	8008c58 <__multiply+0x50>
 8008ca0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ca4:	f1ba 0f00 	cmp.w	sl, #0
 8008ca8:	d020      	beq.n	8008cec <__multiply+0xe4>
 8008caa:	f105 0e14 	add.w	lr, r5, #20
 8008cae:	46b1      	mov	r9, r6
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008cb6:	f8d9 b000 	ldr.w	fp, [r9]
 8008cba:	b2a1      	uxth	r1, r4
 8008cbc:	fa1f fb8b 	uxth.w	fp, fp
 8008cc0:	fb0a b101 	mla	r1, sl, r1, fp
 8008cc4:	4411      	add	r1, r2
 8008cc6:	f8d9 2000 	ldr.w	r2, [r9]
 8008cca:	0c24      	lsrs	r4, r4, #16
 8008ccc:	0c12      	lsrs	r2, r2, #16
 8008cce:	fb0a 2404 	mla	r4, sl, r4, r2
 8008cd2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008cd6:	b289      	uxth	r1, r1
 8008cd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cdc:	45f4      	cmp	ip, lr
 8008cde:	f849 1b04 	str.w	r1, [r9], #4
 8008ce2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ce6:	d8e4      	bhi.n	8008cb2 <__multiply+0xaa>
 8008ce8:	9901      	ldr	r1, [sp, #4]
 8008cea:	5072      	str	r2, [r6, r1]
 8008cec:	9a03      	ldr	r2, [sp, #12]
 8008cee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	d01f      	beq.n	8008d3a <__multiply+0x132>
 8008cfa:	6834      	ldr	r4, [r6, #0]
 8008cfc:	f105 0114 	add.w	r1, r5, #20
 8008d00:	46b6      	mov	lr, r6
 8008d02:	f04f 0a00 	mov.w	sl, #0
 8008d06:	880a      	ldrh	r2, [r1, #0]
 8008d08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008d0c:	fb09 b202 	mla	r2, r9, r2, fp
 8008d10:	4492      	add	sl, r2
 8008d12:	b2a4      	uxth	r4, r4
 8008d14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008d18:	f84e 4b04 	str.w	r4, [lr], #4
 8008d1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008d20:	f8be 2000 	ldrh.w	r2, [lr]
 8008d24:	0c24      	lsrs	r4, r4, #16
 8008d26:	fb09 2404 	mla	r4, r9, r4, r2
 8008d2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008d2e:	458c      	cmp	ip, r1
 8008d30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d34:	d8e7      	bhi.n	8008d06 <__multiply+0xfe>
 8008d36:	9a01      	ldr	r2, [sp, #4]
 8008d38:	50b4      	str	r4, [r6, r2]
 8008d3a:	3604      	adds	r6, #4
 8008d3c:	e7a3      	b.n	8008c86 <__multiply+0x7e>
 8008d3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1a5      	bne.n	8008c92 <__multiply+0x8a>
 8008d46:	3f01      	subs	r7, #1
 8008d48:	e7a1      	b.n	8008c8e <__multiply+0x86>
 8008d4a:	bf00      	nop
 8008d4c:	0800a1fb 	.word	0x0800a1fb
 8008d50:	0800a20c 	.word	0x0800a20c

08008d54 <__pow5mult>:
 8008d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d58:	4615      	mov	r5, r2
 8008d5a:	f012 0203 	ands.w	r2, r2, #3
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460f      	mov	r7, r1
 8008d62:	d007      	beq.n	8008d74 <__pow5mult+0x20>
 8008d64:	4c25      	ldr	r4, [pc, #148]	; (8008dfc <__pow5mult+0xa8>)
 8008d66:	3a01      	subs	r2, #1
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d6e:	f7ff fe9b 	bl	8008aa8 <__multadd>
 8008d72:	4607      	mov	r7, r0
 8008d74:	10ad      	asrs	r5, r5, #2
 8008d76:	d03d      	beq.n	8008df4 <__pow5mult+0xa0>
 8008d78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d7a:	b97c      	cbnz	r4, 8008d9c <__pow5mult+0x48>
 8008d7c:	2010      	movs	r0, #16
 8008d7e:	f7ff fe1b 	bl	80089b8 <malloc>
 8008d82:	4602      	mov	r2, r0
 8008d84:	6270      	str	r0, [r6, #36]	; 0x24
 8008d86:	b928      	cbnz	r0, 8008d94 <__pow5mult+0x40>
 8008d88:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <__pow5mult+0xac>)
 8008d8a:	481e      	ldr	r0, [pc, #120]	; (8008e04 <__pow5mult+0xb0>)
 8008d8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d90:	f000 fbcc 	bl	800952c <__assert_func>
 8008d94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d98:	6004      	str	r4, [r0, #0]
 8008d9a:	60c4      	str	r4, [r0, #12]
 8008d9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008da0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008da4:	b94c      	cbnz	r4, 8008dba <__pow5mult+0x66>
 8008da6:	f240 2171 	movw	r1, #625	; 0x271
 8008daa:	4630      	mov	r0, r6
 8008dac:	f7ff ff16 	bl	8008bdc <__i2b>
 8008db0:	2300      	movs	r3, #0
 8008db2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008db6:	4604      	mov	r4, r0
 8008db8:	6003      	str	r3, [r0, #0]
 8008dba:	f04f 0900 	mov.w	r9, #0
 8008dbe:	07eb      	lsls	r3, r5, #31
 8008dc0:	d50a      	bpl.n	8008dd8 <__pow5mult+0x84>
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f7ff ff1e 	bl	8008c08 <__multiply>
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4680      	mov	r8, r0
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7ff fe47 	bl	8008a64 <_Bfree>
 8008dd6:	4647      	mov	r7, r8
 8008dd8:	106d      	asrs	r5, r5, #1
 8008dda:	d00b      	beq.n	8008df4 <__pow5mult+0xa0>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	b938      	cbnz	r0, 8008df0 <__pow5mult+0x9c>
 8008de0:	4622      	mov	r2, r4
 8008de2:	4621      	mov	r1, r4
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff ff0f 	bl	8008c08 <__multiply>
 8008dea:	6020      	str	r0, [r4, #0]
 8008dec:	f8c0 9000 	str.w	r9, [r0]
 8008df0:	4604      	mov	r4, r0
 8008df2:	e7e4      	b.n	8008dbe <__pow5mult+0x6a>
 8008df4:	4638      	mov	r0, r7
 8008df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dfa:	bf00      	nop
 8008dfc:	0800a360 	.word	0x0800a360
 8008e00:	0800a185 	.word	0x0800a185
 8008e04:	0800a20c 	.word	0x0800a20c

08008e08 <__lshift>:
 8008e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	6849      	ldr	r1, [r1, #4]
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	4607      	mov	r7, r0
 8008e1a:	4691      	mov	r9, r2
 8008e1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e20:	f108 0601 	add.w	r6, r8, #1
 8008e24:	42b3      	cmp	r3, r6
 8008e26:	db0b      	blt.n	8008e40 <__lshift+0x38>
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff fddb 	bl	80089e4 <_Balloc>
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b948      	cbnz	r0, 8008e46 <__lshift+0x3e>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b28      	ldr	r3, [pc, #160]	; (8008ed8 <__lshift+0xd0>)
 8008e36:	4829      	ldr	r0, [pc, #164]	; (8008edc <__lshift+0xd4>)
 8008e38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e3c:	f000 fb76 	bl	800952c <__assert_func>
 8008e40:	3101      	adds	r1, #1
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	e7ee      	b.n	8008e24 <__lshift+0x1c>
 8008e46:	2300      	movs	r3, #0
 8008e48:	f100 0114 	add.w	r1, r0, #20
 8008e4c:	f100 0210 	add.w	r2, r0, #16
 8008e50:	4618      	mov	r0, r3
 8008e52:	4553      	cmp	r3, sl
 8008e54:	db33      	blt.n	8008ebe <__lshift+0xb6>
 8008e56:	6920      	ldr	r0, [r4, #16]
 8008e58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e5c:	f104 0314 	add.w	r3, r4, #20
 8008e60:	f019 091f 	ands.w	r9, r9, #31
 8008e64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e6c:	d02b      	beq.n	8008ec6 <__lshift+0xbe>
 8008e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e72:	468a      	mov	sl, r1
 8008e74:	2200      	movs	r2, #0
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	fa00 f009 	lsl.w	r0, r0, r9
 8008e7c:	4302      	orrs	r2, r0
 8008e7e:	f84a 2b04 	str.w	r2, [sl], #4
 8008e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e86:	459c      	cmp	ip, r3
 8008e88:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e8c:	d8f3      	bhi.n	8008e76 <__lshift+0x6e>
 8008e8e:	ebac 0304 	sub.w	r3, ip, r4
 8008e92:	3b15      	subs	r3, #21
 8008e94:	f023 0303 	bic.w	r3, r3, #3
 8008e98:	3304      	adds	r3, #4
 8008e9a:	f104 0015 	add.w	r0, r4, #21
 8008e9e:	4584      	cmp	ip, r0
 8008ea0:	bf38      	it	cc
 8008ea2:	2304      	movcc	r3, #4
 8008ea4:	50ca      	str	r2, [r1, r3]
 8008ea6:	b10a      	cbz	r2, 8008eac <__lshift+0xa4>
 8008ea8:	f108 0602 	add.w	r6, r8, #2
 8008eac:	3e01      	subs	r6, #1
 8008eae:	4638      	mov	r0, r7
 8008eb0:	612e      	str	r6, [r5, #16]
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f7ff fdd6 	bl	8008a64 <_Bfree>
 8008eb8:	4628      	mov	r0, r5
 8008eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	e7c5      	b.n	8008e52 <__lshift+0x4a>
 8008ec6:	3904      	subs	r1, #4
 8008ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ecc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ed0:	459c      	cmp	ip, r3
 8008ed2:	d8f9      	bhi.n	8008ec8 <__lshift+0xc0>
 8008ed4:	e7ea      	b.n	8008eac <__lshift+0xa4>
 8008ed6:	bf00      	nop
 8008ed8:	0800a1fb 	.word	0x0800a1fb
 8008edc:	0800a20c 	.word	0x0800a20c

08008ee0 <__mcmp>:
 8008ee0:	b530      	push	{r4, r5, lr}
 8008ee2:	6902      	ldr	r2, [r0, #16]
 8008ee4:	690c      	ldr	r4, [r1, #16]
 8008ee6:	1b12      	subs	r2, r2, r4
 8008ee8:	d10e      	bne.n	8008f08 <__mcmp+0x28>
 8008eea:	f100 0314 	add.w	r3, r0, #20
 8008eee:	3114      	adds	r1, #20
 8008ef0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ef8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008efc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f00:	42a5      	cmp	r5, r4
 8008f02:	d003      	beq.n	8008f0c <__mcmp+0x2c>
 8008f04:	d305      	bcc.n	8008f12 <__mcmp+0x32>
 8008f06:	2201      	movs	r2, #1
 8008f08:	4610      	mov	r0, r2
 8008f0a:	bd30      	pop	{r4, r5, pc}
 8008f0c:	4283      	cmp	r3, r0
 8008f0e:	d3f3      	bcc.n	8008ef8 <__mcmp+0x18>
 8008f10:	e7fa      	b.n	8008f08 <__mcmp+0x28>
 8008f12:	f04f 32ff 	mov.w	r2, #4294967295
 8008f16:	e7f7      	b.n	8008f08 <__mcmp+0x28>

08008f18 <__mdiff>:
 8008f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	4606      	mov	r6, r0
 8008f20:	4611      	mov	r1, r2
 8008f22:	4620      	mov	r0, r4
 8008f24:	4617      	mov	r7, r2
 8008f26:	f7ff ffdb 	bl	8008ee0 <__mcmp>
 8008f2a:	1e05      	subs	r5, r0, #0
 8008f2c:	d110      	bne.n	8008f50 <__mdiff+0x38>
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7ff fd57 	bl	80089e4 <_Balloc>
 8008f36:	b930      	cbnz	r0, 8008f46 <__mdiff+0x2e>
 8008f38:	4b39      	ldr	r3, [pc, #228]	; (8009020 <__mdiff+0x108>)
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	f240 2132 	movw	r1, #562	; 0x232
 8008f40:	4838      	ldr	r0, [pc, #224]	; (8009024 <__mdiff+0x10c>)
 8008f42:	f000 faf3 	bl	800952c <__assert_func>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	bfa4      	itt	ge
 8008f52:	463b      	movge	r3, r7
 8008f54:	4627      	movge	r7, r4
 8008f56:	4630      	mov	r0, r6
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	bfa6      	itte	ge
 8008f5c:	461c      	movge	r4, r3
 8008f5e:	2500      	movge	r5, #0
 8008f60:	2501      	movlt	r5, #1
 8008f62:	f7ff fd3f 	bl	80089e4 <_Balloc>
 8008f66:	b920      	cbnz	r0, 8008f72 <__mdiff+0x5a>
 8008f68:	4b2d      	ldr	r3, [pc, #180]	; (8009020 <__mdiff+0x108>)
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f70:	e7e6      	b.n	8008f40 <__mdiff+0x28>
 8008f72:	693e      	ldr	r6, [r7, #16]
 8008f74:	60c5      	str	r5, [r0, #12]
 8008f76:	6925      	ldr	r5, [r4, #16]
 8008f78:	f107 0114 	add.w	r1, r7, #20
 8008f7c:	f104 0914 	add.w	r9, r4, #20
 8008f80:	f100 0e14 	add.w	lr, r0, #20
 8008f84:	f107 0210 	add.w	r2, r7, #16
 8008f88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008f8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008f90:	46f2      	mov	sl, lr
 8008f92:	2700      	movs	r7, #0
 8008f94:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f9c:	fa1f f883 	uxth.w	r8, r3
 8008fa0:	fa17 f78b 	uxtah	r7, r7, fp
 8008fa4:	0c1b      	lsrs	r3, r3, #16
 8008fa6:	eba7 0808 	sub.w	r8, r7, r8
 8008faa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008fb2:	fa1f f888 	uxth.w	r8, r8
 8008fb6:	141f      	asrs	r7, r3, #16
 8008fb8:	454d      	cmp	r5, r9
 8008fba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008fbe:	f84a 3b04 	str.w	r3, [sl], #4
 8008fc2:	d8e7      	bhi.n	8008f94 <__mdiff+0x7c>
 8008fc4:	1b2b      	subs	r3, r5, r4
 8008fc6:	3b15      	subs	r3, #21
 8008fc8:	f023 0303 	bic.w	r3, r3, #3
 8008fcc:	3304      	adds	r3, #4
 8008fce:	3415      	adds	r4, #21
 8008fd0:	42a5      	cmp	r5, r4
 8008fd2:	bf38      	it	cc
 8008fd4:	2304      	movcc	r3, #4
 8008fd6:	4419      	add	r1, r3
 8008fd8:	4473      	add	r3, lr
 8008fda:	469e      	mov	lr, r3
 8008fdc:	460d      	mov	r5, r1
 8008fde:	4565      	cmp	r5, ip
 8008fe0:	d30e      	bcc.n	8009000 <__mdiff+0xe8>
 8008fe2:	f10c 0203 	add.w	r2, ip, #3
 8008fe6:	1a52      	subs	r2, r2, r1
 8008fe8:	f022 0203 	bic.w	r2, r2, #3
 8008fec:	3903      	subs	r1, #3
 8008fee:	458c      	cmp	ip, r1
 8008ff0:	bf38      	it	cc
 8008ff2:	2200      	movcc	r2, #0
 8008ff4:	441a      	add	r2, r3
 8008ff6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ffa:	b17b      	cbz	r3, 800901c <__mdiff+0x104>
 8008ffc:	6106      	str	r6, [r0, #16]
 8008ffe:	e7a5      	b.n	8008f4c <__mdiff+0x34>
 8009000:	f855 8b04 	ldr.w	r8, [r5], #4
 8009004:	fa17 f488 	uxtah	r4, r7, r8
 8009008:	1422      	asrs	r2, r4, #16
 800900a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800900e:	b2a4      	uxth	r4, r4
 8009010:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009014:	f84e 4b04 	str.w	r4, [lr], #4
 8009018:	1417      	asrs	r7, r2, #16
 800901a:	e7e0      	b.n	8008fde <__mdiff+0xc6>
 800901c:	3e01      	subs	r6, #1
 800901e:	e7ea      	b.n	8008ff6 <__mdiff+0xde>
 8009020:	0800a1fb 	.word	0x0800a1fb
 8009024:	0800a20c 	.word	0x0800a20c

08009028 <__d2b>:
 8009028:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800902c:	4689      	mov	r9, r1
 800902e:	2101      	movs	r1, #1
 8009030:	ec57 6b10 	vmov	r6, r7, d0
 8009034:	4690      	mov	r8, r2
 8009036:	f7ff fcd5 	bl	80089e4 <_Balloc>
 800903a:	4604      	mov	r4, r0
 800903c:	b930      	cbnz	r0, 800904c <__d2b+0x24>
 800903e:	4602      	mov	r2, r0
 8009040:	4b25      	ldr	r3, [pc, #148]	; (80090d8 <__d2b+0xb0>)
 8009042:	4826      	ldr	r0, [pc, #152]	; (80090dc <__d2b+0xb4>)
 8009044:	f240 310a 	movw	r1, #778	; 0x30a
 8009048:	f000 fa70 	bl	800952c <__assert_func>
 800904c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009054:	bb35      	cbnz	r5, 80090a4 <__d2b+0x7c>
 8009056:	2e00      	cmp	r6, #0
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	d028      	beq.n	80090ae <__d2b+0x86>
 800905c:	4668      	mov	r0, sp
 800905e:	9600      	str	r6, [sp, #0]
 8009060:	f7ff fd8c 	bl	8008b7c <__lo0bits>
 8009064:	9900      	ldr	r1, [sp, #0]
 8009066:	b300      	cbz	r0, 80090aa <__d2b+0x82>
 8009068:	9a01      	ldr	r2, [sp, #4]
 800906a:	f1c0 0320 	rsb	r3, r0, #32
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	430b      	orrs	r3, r1
 8009074:	40c2      	lsrs	r2, r0
 8009076:	6163      	str	r3, [r4, #20]
 8009078:	9201      	str	r2, [sp, #4]
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	61a3      	str	r3, [r4, #24]
 800907e:	2b00      	cmp	r3, #0
 8009080:	bf14      	ite	ne
 8009082:	2202      	movne	r2, #2
 8009084:	2201      	moveq	r2, #1
 8009086:	6122      	str	r2, [r4, #16]
 8009088:	b1d5      	cbz	r5, 80090c0 <__d2b+0x98>
 800908a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800908e:	4405      	add	r5, r0
 8009090:	f8c9 5000 	str.w	r5, [r9]
 8009094:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009098:	f8c8 0000 	str.w	r0, [r8]
 800909c:	4620      	mov	r0, r4
 800909e:	b003      	add	sp, #12
 80090a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090a8:	e7d5      	b.n	8009056 <__d2b+0x2e>
 80090aa:	6161      	str	r1, [r4, #20]
 80090ac:	e7e5      	b.n	800907a <__d2b+0x52>
 80090ae:	a801      	add	r0, sp, #4
 80090b0:	f7ff fd64 	bl	8008b7c <__lo0bits>
 80090b4:	9b01      	ldr	r3, [sp, #4]
 80090b6:	6163      	str	r3, [r4, #20]
 80090b8:	2201      	movs	r2, #1
 80090ba:	6122      	str	r2, [r4, #16]
 80090bc:	3020      	adds	r0, #32
 80090be:	e7e3      	b.n	8009088 <__d2b+0x60>
 80090c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090c8:	f8c9 0000 	str.w	r0, [r9]
 80090cc:	6918      	ldr	r0, [r3, #16]
 80090ce:	f7ff fd35 	bl	8008b3c <__hi0bits>
 80090d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090d6:	e7df      	b.n	8009098 <__d2b+0x70>
 80090d8:	0800a1fb 	.word	0x0800a1fb
 80090dc:	0800a20c 	.word	0x0800a20c

080090e0 <_calloc_r>:
 80090e0:	b513      	push	{r0, r1, r4, lr}
 80090e2:	434a      	muls	r2, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	9201      	str	r2, [sp, #4]
 80090e8:	f000 f85a 	bl	80091a0 <_malloc_r>
 80090ec:	4604      	mov	r4, r0
 80090ee:	b118      	cbz	r0, 80090f8 <_calloc_r+0x18>
 80090f0:	9a01      	ldr	r2, [sp, #4]
 80090f2:	2100      	movs	r1, #0
 80090f4:	f7fe f950 	bl	8007398 <memset>
 80090f8:	4620      	mov	r0, r4
 80090fa:	b002      	add	sp, #8
 80090fc:	bd10      	pop	{r4, pc}
	...

08009100 <_free_r>:
 8009100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009102:	2900      	cmp	r1, #0
 8009104:	d048      	beq.n	8009198 <_free_r+0x98>
 8009106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910a:	9001      	str	r0, [sp, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f1a1 0404 	sub.w	r4, r1, #4
 8009112:	bfb8      	it	lt
 8009114:	18e4      	addlt	r4, r4, r3
 8009116:	f000 fa65 	bl	80095e4 <__malloc_lock>
 800911a:	4a20      	ldr	r2, [pc, #128]	; (800919c <_free_r+0x9c>)
 800911c:	9801      	ldr	r0, [sp, #4]
 800911e:	6813      	ldr	r3, [r2, #0]
 8009120:	4615      	mov	r5, r2
 8009122:	b933      	cbnz	r3, 8009132 <_free_r+0x32>
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	6014      	str	r4, [r2, #0]
 8009128:	b003      	add	sp, #12
 800912a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800912e:	f000 ba5f 	b.w	80095f0 <__malloc_unlock>
 8009132:	42a3      	cmp	r3, r4
 8009134:	d90b      	bls.n	800914e <_free_r+0x4e>
 8009136:	6821      	ldr	r1, [r4, #0]
 8009138:	1862      	adds	r2, r4, r1
 800913a:	4293      	cmp	r3, r2
 800913c:	bf04      	itt	eq
 800913e:	681a      	ldreq	r2, [r3, #0]
 8009140:	685b      	ldreq	r3, [r3, #4]
 8009142:	6063      	str	r3, [r4, #4]
 8009144:	bf04      	itt	eq
 8009146:	1852      	addeq	r2, r2, r1
 8009148:	6022      	streq	r2, [r4, #0]
 800914a:	602c      	str	r4, [r5, #0]
 800914c:	e7ec      	b.n	8009128 <_free_r+0x28>
 800914e:	461a      	mov	r2, r3
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	b10b      	cbz	r3, 8009158 <_free_r+0x58>
 8009154:	42a3      	cmp	r3, r4
 8009156:	d9fa      	bls.n	800914e <_free_r+0x4e>
 8009158:	6811      	ldr	r1, [r2, #0]
 800915a:	1855      	adds	r5, r2, r1
 800915c:	42a5      	cmp	r5, r4
 800915e:	d10b      	bne.n	8009178 <_free_r+0x78>
 8009160:	6824      	ldr	r4, [r4, #0]
 8009162:	4421      	add	r1, r4
 8009164:	1854      	adds	r4, r2, r1
 8009166:	42a3      	cmp	r3, r4
 8009168:	6011      	str	r1, [r2, #0]
 800916a:	d1dd      	bne.n	8009128 <_free_r+0x28>
 800916c:	681c      	ldr	r4, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	6053      	str	r3, [r2, #4]
 8009172:	4421      	add	r1, r4
 8009174:	6011      	str	r1, [r2, #0]
 8009176:	e7d7      	b.n	8009128 <_free_r+0x28>
 8009178:	d902      	bls.n	8009180 <_free_r+0x80>
 800917a:	230c      	movs	r3, #12
 800917c:	6003      	str	r3, [r0, #0]
 800917e:	e7d3      	b.n	8009128 <_free_r+0x28>
 8009180:	6825      	ldr	r5, [r4, #0]
 8009182:	1961      	adds	r1, r4, r5
 8009184:	428b      	cmp	r3, r1
 8009186:	bf04      	itt	eq
 8009188:	6819      	ldreq	r1, [r3, #0]
 800918a:	685b      	ldreq	r3, [r3, #4]
 800918c:	6063      	str	r3, [r4, #4]
 800918e:	bf04      	itt	eq
 8009190:	1949      	addeq	r1, r1, r5
 8009192:	6021      	streq	r1, [r4, #0]
 8009194:	6054      	str	r4, [r2, #4]
 8009196:	e7c7      	b.n	8009128 <_free_r+0x28>
 8009198:	b003      	add	sp, #12
 800919a:	bd30      	pop	{r4, r5, pc}
 800919c:	20005034 	.word	0x20005034

080091a0 <_malloc_r>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	1ccd      	adds	r5, r1, #3
 80091a4:	f025 0503 	bic.w	r5, r5, #3
 80091a8:	3508      	adds	r5, #8
 80091aa:	2d0c      	cmp	r5, #12
 80091ac:	bf38      	it	cc
 80091ae:	250c      	movcc	r5, #12
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	4606      	mov	r6, r0
 80091b4:	db01      	blt.n	80091ba <_malloc_r+0x1a>
 80091b6:	42a9      	cmp	r1, r5
 80091b8:	d903      	bls.n	80091c2 <_malloc_r+0x22>
 80091ba:	230c      	movs	r3, #12
 80091bc:	6033      	str	r3, [r6, #0]
 80091be:	2000      	movs	r0, #0
 80091c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c2:	f000 fa0f 	bl	80095e4 <__malloc_lock>
 80091c6:	4921      	ldr	r1, [pc, #132]	; (800924c <_malloc_r+0xac>)
 80091c8:	680a      	ldr	r2, [r1, #0]
 80091ca:	4614      	mov	r4, r2
 80091cc:	b99c      	cbnz	r4, 80091f6 <_malloc_r+0x56>
 80091ce:	4f20      	ldr	r7, [pc, #128]	; (8009250 <_malloc_r+0xb0>)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	b923      	cbnz	r3, 80091de <_malloc_r+0x3e>
 80091d4:	4621      	mov	r1, r4
 80091d6:	4630      	mov	r0, r6
 80091d8:	f000 f998 	bl	800950c <_sbrk_r>
 80091dc:	6038      	str	r0, [r7, #0]
 80091de:	4629      	mov	r1, r5
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 f993 	bl	800950c <_sbrk_r>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	d123      	bne.n	8009232 <_malloc_r+0x92>
 80091ea:	230c      	movs	r3, #12
 80091ec:	6033      	str	r3, [r6, #0]
 80091ee:	4630      	mov	r0, r6
 80091f0:	f000 f9fe 	bl	80095f0 <__malloc_unlock>
 80091f4:	e7e3      	b.n	80091be <_malloc_r+0x1e>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	1b5b      	subs	r3, r3, r5
 80091fa:	d417      	bmi.n	800922c <_malloc_r+0x8c>
 80091fc:	2b0b      	cmp	r3, #11
 80091fe:	d903      	bls.n	8009208 <_malloc_r+0x68>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	441c      	add	r4, r3
 8009204:	6025      	str	r5, [r4, #0]
 8009206:	e004      	b.n	8009212 <_malloc_r+0x72>
 8009208:	6863      	ldr	r3, [r4, #4]
 800920a:	42a2      	cmp	r2, r4
 800920c:	bf0c      	ite	eq
 800920e:	600b      	streq	r3, [r1, #0]
 8009210:	6053      	strne	r3, [r2, #4]
 8009212:	4630      	mov	r0, r6
 8009214:	f000 f9ec 	bl	80095f0 <__malloc_unlock>
 8009218:	f104 000b 	add.w	r0, r4, #11
 800921c:	1d23      	adds	r3, r4, #4
 800921e:	f020 0007 	bic.w	r0, r0, #7
 8009222:	1ac2      	subs	r2, r0, r3
 8009224:	d0cc      	beq.n	80091c0 <_malloc_r+0x20>
 8009226:	1a1b      	subs	r3, r3, r0
 8009228:	50a3      	str	r3, [r4, r2]
 800922a:	e7c9      	b.n	80091c0 <_malloc_r+0x20>
 800922c:	4622      	mov	r2, r4
 800922e:	6864      	ldr	r4, [r4, #4]
 8009230:	e7cc      	b.n	80091cc <_malloc_r+0x2c>
 8009232:	1cc4      	adds	r4, r0, #3
 8009234:	f024 0403 	bic.w	r4, r4, #3
 8009238:	42a0      	cmp	r0, r4
 800923a:	d0e3      	beq.n	8009204 <_malloc_r+0x64>
 800923c:	1a21      	subs	r1, r4, r0
 800923e:	4630      	mov	r0, r6
 8009240:	f000 f964 	bl	800950c <_sbrk_r>
 8009244:	3001      	adds	r0, #1
 8009246:	d1dd      	bne.n	8009204 <_malloc_r+0x64>
 8009248:	e7cf      	b.n	80091ea <_malloc_r+0x4a>
 800924a:	bf00      	nop
 800924c:	20005034 	.word	0x20005034
 8009250:	20005038 	.word	0x20005038

08009254 <__ssputs_r>:
 8009254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	688e      	ldr	r6, [r1, #8]
 800925a:	429e      	cmp	r6, r3
 800925c:	4682      	mov	sl, r0
 800925e:	460c      	mov	r4, r1
 8009260:	4690      	mov	r8, r2
 8009262:	461f      	mov	r7, r3
 8009264:	d838      	bhi.n	80092d8 <__ssputs_r+0x84>
 8009266:	898a      	ldrh	r2, [r1, #12]
 8009268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800926c:	d032      	beq.n	80092d4 <__ssputs_r+0x80>
 800926e:	6825      	ldr	r5, [r4, #0]
 8009270:	6909      	ldr	r1, [r1, #16]
 8009272:	eba5 0901 	sub.w	r9, r5, r1
 8009276:	6965      	ldr	r5, [r4, #20]
 8009278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800927c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009280:	3301      	adds	r3, #1
 8009282:	444b      	add	r3, r9
 8009284:	106d      	asrs	r5, r5, #1
 8009286:	429d      	cmp	r5, r3
 8009288:	bf38      	it	cc
 800928a:	461d      	movcc	r5, r3
 800928c:	0553      	lsls	r3, r2, #21
 800928e:	d531      	bpl.n	80092f4 <__ssputs_r+0xa0>
 8009290:	4629      	mov	r1, r5
 8009292:	f7ff ff85 	bl	80091a0 <_malloc_r>
 8009296:	4606      	mov	r6, r0
 8009298:	b950      	cbnz	r0, 80092b0 <__ssputs_r+0x5c>
 800929a:	230c      	movs	r3, #12
 800929c:	f8ca 3000 	str.w	r3, [sl]
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b0:	6921      	ldr	r1, [r4, #16]
 80092b2:	464a      	mov	r2, r9
 80092b4:	f7ff fb88 	bl	80089c8 <memcpy>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	6126      	str	r6, [r4, #16]
 80092c6:	6165      	str	r5, [r4, #20]
 80092c8:	444e      	add	r6, r9
 80092ca:	eba5 0509 	sub.w	r5, r5, r9
 80092ce:	6026      	str	r6, [r4, #0]
 80092d0:	60a5      	str	r5, [r4, #8]
 80092d2:	463e      	mov	r6, r7
 80092d4:	42be      	cmp	r6, r7
 80092d6:	d900      	bls.n	80092da <__ssputs_r+0x86>
 80092d8:	463e      	mov	r6, r7
 80092da:	4632      	mov	r2, r6
 80092dc:	6820      	ldr	r0, [r4, #0]
 80092de:	4641      	mov	r1, r8
 80092e0:	f000 f966 	bl	80095b0 <memmove>
 80092e4:	68a3      	ldr	r3, [r4, #8]
 80092e6:	6822      	ldr	r2, [r4, #0]
 80092e8:	1b9b      	subs	r3, r3, r6
 80092ea:	4432      	add	r2, r6
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	6022      	str	r2, [r4, #0]
 80092f0:	2000      	movs	r0, #0
 80092f2:	e7db      	b.n	80092ac <__ssputs_r+0x58>
 80092f4:	462a      	mov	r2, r5
 80092f6:	f000 f981 	bl	80095fc <_realloc_r>
 80092fa:	4606      	mov	r6, r0
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1e1      	bne.n	80092c4 <__ssputs_r+0x70>
 8009300:	6921      	ldr	r1, [r4, #16]
 8009302:	4650      	mov	r0, sl
 8009304:	f7ff fefc 	bl	8009100 <_free_r>
 8009308:	e7c7      	b.n	800929a <__ssputs_r+0x46>
	...

0800930c <_svfiprintf_r>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	4698      	mov	r8, r3
 8009312:	898b      	ldrh	r3, [r1, #12]
 8009314:	061b      	lsls	r3, r3, #24
 8009316:	b09d      	sub	sp, #116	; 0x74
 8009318:	4607      	mov	r7, r0
 800931a:	460d      	mov	r5, r1
 800931c:	4614      	mov	r4, r2
 800931e:	d50e      	bpl.n	800933e <_svfiprintf_r+0x32>
 8009320:	690b      	ldr	r3, [r1, #16]
 8009322:	b963      	cbnz	r3, 800933e <_svfiprintf_r+0x32>
 8009324:	2140      	movs	r1, #64	; 0x40
 8009326:	f7ff ff3b 	bl	80091a0 <_malloc_r>
 800932a:	6028      	str	r0, [r5, #0]
 800932c:	6128      	str	r0, [r5, #16]
 800932e:	b920      	cbnz	r0, 800933a <_svfiprintf_r+0x2e>
 8009330:	230c      	movs	r3, #12
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	e0d1      	b.n	80094de <_svfiprintf_r+0x1d2>
 800933a:	2340      	movs	r3, #64	; 0x40
 800933c:	616b      	str	r3, [r5, #20]
 800933e:	2300      	movs	r3, #0
 8009340:	9309      	str	r3, [sp, #36]	; 0x24
 8009342:	2320      	movs	r3, #32
 8009344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009348:	f8cd 800c 	str.w	r8, [sp, #12]
 800934c:	2330      	movs	r3, #48	; 0x30
 800934e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094f8 <_svfiprintf_r+0x1ec>
 8009352:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009356:	f04f 0901 	mov.w	r9, #1
 800935a:	4623      	mov	r3, r4
 800935c:	469a      	mov	sl, r3
 800935e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009362:	b10a      	cbz	r2, 8009368 <_svfiprintf_r+0x5c>
 8009364:	2a25      	cmp	r2, #37	; 0x25
 8009366:	d1f9      	bne.n	800935c <_svfiprintf_r+0x50>
 8009368:	ebba 0b04 	subs.w	fp, sl, r4
 800936c:	d00b      	beq.n	8009386 <_svfiprintf_r+0x7a>
 800936e:	465b      	mov	r3, fp
 8009370:	4622      	mov	r2, r4
 8009372:	4629      	mov	r1, r5
 8009374:	4638      	mov	r0, r7
 8009376:	f7ff ff6d 	bl	8009254 <__ssputs_r>
 800937a:	3001      	adds	r0, #1
 800937c:	f000 80aa 	beq.w	80094d4 <_svfiprintf_r+0x1c8>
 8009380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009382:	445a      	add	r2, fp
 8009384:	9209      	str	r2, [sp, #36]	; 0x24
 8009386:	f89a 3000 	ldrb.w	r3, [sl]
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 80a2 	beq.w	80094d4 <_svfiprintf_r+0x1c8>
 8009390:	2300      	movs	r3, #0
 8009392:	f04f 32ff 	mov.w	r2, #4294967295
 8009396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800939a:	f10a 0a01 	add.w	sl, sl, #1
 800939e:	9304      	str	r3, [sp, #16]
 80093a0:	9307      	str	r3, [sp, #28]
 80093a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093a6:	931a      	str	r3, [sp, #104]	; 0x68
 80093a8:	4654      	mov	r4, sl
 80093aa:	2205      	movs	r2, #5
 80093ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b0:	4851      	ldr	r0, [pc, #324]	; (80094f8 <_svfiprintf_r+0x1ec>)
 80093b2:	f7f6 ff25 	bl	8000200 <memchr>
 80093b6:	9a04      	ldr	r2, [sp, #16]
 80093b8:	b9d8      	cbnz	r0, 80093f2 <_svfiprintf_r+0xe6>
 80093ba:	06d0      	lsls	r0, r2, #27
 80093bc:	bf44      	itt	mi
 80093be:	2320      	movmi	r3, #32
 80093c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c4:	0711      	lsls	r1, r2, #28
 80093c6:	bf44      	itt	mi
 80093c8:	232b      	movmi	r3, #43	; 0x2b
 80093ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ce:	f89a 3000 	ldrb.w	r3, [sl]
 80093d2:	2b2a      	cmp	r3, #42	; 0x2a
 80093d4:	d015      	beq.n	8009402 <_svfiprintf_r+0xf6>
 80093d6:	9a07      	ldr	r2, [sp, #28]
 80093d8:	4654      	mov	r4, sl
 80093da:	2000      	movs	r0, #0
 80093dc:	f04f 0c0a 	mov.w	ip, #10
 80093e0:	4621      	mov	r1, r4
 80093e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093e6:	3b30      	subs	r3, #48	; 0x30
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	d94e      	bls.n	800948a <_svfiprintf_r+0x17e>
 80093ec:	b1b0      	cbz	r0, 800941c <_svfiprintf_r+0x110>
 80093ee:	9207      	str	r2, [sp, #28]
 80093f0:	e014      	b.n	800941c <_svfiprintf_r+0x110>
 80093f2:	eba0 0308 	sub.w	r3, r0, r8
 80093f6:	fa09 f303 	lsl.w	r3, r9, r3
 80093fa:	4313      	orrs	r3, r2
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	46a2      	mov	sl, r4
 8009400:	e7d2      	b.n	80093a8 <_svfiprintf_r+0x9c>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	1d19      	adds	r1, r3, #4
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	9103      	str	r1, [sp, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	bfbb      	ittet	lt
 800940e:	425b      	neglt	r3, r3
 8009410:	f042 0202 	orrlt.w	r2, r2, #2
 8009414:	9307      	strge	r3, [sp, #28]
 8009416:	9307      	strlt	r3, [sp, #28]
 8009418:	bfb8      	it	lt
 800941a:	9204      	strlt	r2, [sp, #16]
 800941c:	7823      	ldrb	r3, [r4, #0]
 800941e:	2b2e      	cmp	r3, #46	; 0x2e
 8009420:	d10c      	bne.n	800943c <_svfiprintf_r+0x130>
 8009422:	7863      	ldrb	r3, [r4, #1]
 8009424:	2b2a      	cmp	r3, #42	; 0x2a
 8009426:	d135      	bne.n	8009494 <_svfiprintf_r+0x188>
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	1d1a      	adds	r2, r3, #4
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	9203      	str	r2, [sp, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	bfb8      	it	lt
 8009434:	f04f 33ff 	movlt.w	r3, #4294967295
 8009438:	3402      	adds	r4, #2
 800943a:	9305      	str	r3, [sp, #20]
 800943c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009508 <_svfiprintf_r+0x1fc>
 8009440:	7821      	ldrb	r1, [r4, #0]
 8009442:	2203      	movs	r2, #3
 8009444:	4650      	mov	r0, sl
 8009446:	f7f6 fedb 	bl	8000200 <memchr>
 800944a:	b140      	cbz	r0, 800945e <_svfiprintf_r+0x152>
 800944c:	2340      	movs	r3, #64	; 0x40
 800944e:	eba0 000a 	sub.w	r0, r0, sl
 8009452:	fa03 f000 	lsl.w	r0, r3, r0
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	4303      	orrs	r3, r0
 800945a:	3401      	adds	r4, #1
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009462:	4826      	ldr	r0, [pc, #152]	; (80094fc <_svfiprintf_r+0x1f0>)
 8009464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009468:	2206      	movs	r2, #6
 800946a:	f7f6 fec9 	bl	8000200 <memchr>
 800946e:	2800      	cmp	r0, #0
 8009470:	d038      	beq.n	80094e4 <_svfiprintf_r+0x1d8>
 8009472:	4b23      	ldr	r3, [pc, #140]	; (8009500 <_svfiprintf_r+0x1f4>)
 8009474:	bb1b      	cbnz	r3, 80094be <_svfiprintf_r+0x1b2>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	3307      	adds	r3, #7
 800947a:	f023 0307 	bic.w	r3, r3, #7
 800947e:	3308      	adds	r3, #8
 8009480:	9303      	str	r3, [sp, #12]
 8009482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009484:	4433      	add	r3, r6
 8009486:	9309      	str	r3, [sp, #36]	; 0x24
 8009488:	e767      	b.n	800935a <_svfiprintf_r+0x4e>
 800948a:	fb0c 3202 	mla	r2, ip, r2, r3
 800948e:	460c      	mov	r4, r1
 8009490:	2001      	movs	r0, #1
 8009492:	e7a5      	b.n	80093e0 <_svfiprintf_r+0xd4>
 8009494:	2300      	movs	r3, #0
 8009496:	3401      	adds	r4, #1
 8009498:	9305      	str	r3, [sp, #20]
 800949a:	4619      	mov	r1, r3
 800949c:	f04f 0c0a 	mov.w	ip, #10
 80094a0:	4620      	mov	r0, r4
 80094a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094a6:	3a30      	subs	r2, #48	; 0x30
 80094a8:	2a09      	cmp	r2, #9
 80094aa:	d903      	bls.n	80094b4 <_svfiprintf_r+0x1a8>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0c5      	beq.n	800943c <_svfiprintf_r+0x130>
 80094b0:	9105      	str	r1, [sp, #20]
 80094b2:	e7c3      	b.n	800943c <_svfiprintf_r+0x130>
 80094b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094b8:	4604      	mov	r4, r0
 80094ba:	2301      	movs	r3, #1
 80094bc:	e7f0      	b.n	80094a0 <_svfiprintf_r+0x194>
 80094be:	ab03      	add	r3, sp, #12
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	462a      	mov	r2, r5
 80094c4:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <_svfiprintf_r+0x1f8>)
 80094c6:	a904      	add	r1, sp, #16
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7fe f80d 	bl	80074e8 <_printf_float>
 80094ce:	1c42      	adds	r2, r0, #1
 80094d0:	4606      	mov	r6, r0
 80094d2:	d1d6      	bne.n	8009482 <_svfiprintf_r+0x176>
 80094d4:	89ab      	ldrh	r3, [r5, #12]
 80094d6:	065b      	lsls	r3, r3, #25
 80094d8:	f53f af2c 	bmi.w	8009334 <_svfiprintf_r+0x28>
 80094dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094de:	b01d      	add	sp, #116	; 0x74
 80094e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e4:	ab03      	add	r3, sp, #12
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	462a      	mov	r2, r5
 80094ea:	4b06      	ldr	r3, [pc, #24]	; (8009504 <_svfiprintf_r+0x1f8>)
 80094ec:	a904      	add	r1, sp, #16
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7fe fa9e 	bl	8007a30 <_printf_i>
 80094f4:	e7eb      	b.n	80094ce <_svfiprintf_r+0x1c2>
 80094f6:	bf00      	nop
 80094f8:	0800a36c 	.word	0x0800a36c
 80094fc:	0800a376 	.word	0x0800a376
 8009500:	080074e9 	.word	0x080074e9
 8009504:	08009255 	.word	0x08009255
 8009508:	0800a372 	.word	0x0800a372

0800950c <_sbrk_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d06      	ldr	r5, [pc, #24]	; (8009528 <_sbrk_r+0x1c>)
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7f8 fb4c 	bl	8001bb4 <_sbrk>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_sbrk_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_sbrk_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20005178 	.word	0x20005178

0800952c <__assert_func>:
 800952c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800952e:	4614      	mov	r4, r2
 8009530:	461a      	mov	r2, r3
 8009532:	4b09      	ldr	r3, [pc, #36]	; (8009558 <__assert_func+0x2c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4605      	mov	r5, r0
 8009538:	68d8      	ldr	r0, [r3, #12]
 800953a:	b14c      	cbz	r4, 8009550 <__assert_func+0x24>
 800953c:	4b07      	ldr	r3, [pc, #28]	; (800955c <__assert_func+0x30>)
 800953e:	9100      	str	r1, [sp, #0]
 8009540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009544:	4906      	ldr	r1, [pc, #24]	; (8009560 <__assert_func+0x34>)
 8009546:	462b      	mov	r3, r5
 8009548:	f000 f80e 	bl	8009568 <fiprintf>
 800954c:	f000 faa4 	bl	8009a98 <abort>
 8009550:	4b04      	ldr	r3, [pc, #16]	; (8009564 <__assert_func+0x38>)
 8009552:	461c      	mov	r4, r3
 8009554:	e7f3      	b.n	800953e <__assert_func+0x12>
 8009556:	bf00      	nop
 8009558:	2000000c 	.word	0x2000000c
 800955c:	0800a37d 	.word	0x0800a37d
 8009560:	0800a38a 	.word	0x0800a38a
 8009564:	0800a3b8 	.word	0x0800a3b8

08009568 <fiprintf>:
 8009568:	b40e      	push	{r1, r2, r3}
 800956a:	b503      	push	{r0, r1, lr}
 800956c:	4601      	mov	r1, r0
 800956e:	ab03      	add	r3, sp, #12
 8009570:	4805      	ldr	r0, [pc, #20]	; (8009588 <fiprintf+0x20>)
 8009572:	f853 2b04 	ldr.w	r2, [r3], #4
 8009576:	6800      	ldr	r0, [r0, #0]
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	f000 f88f 	bl	800969c <_vfiprintf_r>
 800957e:	b002      	add	sp, #8
 8009580:	f85d eb04 	ldr.w	lr, [sp], #4
 8009584:	b003      	add	sp, #12
 8009586:	4770      	bx	lr
 8009588:	2000000c 	.word	0x2000000c

0800958c <__ascii_mbtowc>:
 800958c:	b082      	sub	sp, #8
 800958e:	b901      	cbnz	r1, 8009592 <__ascii_mbtowc+0x6>
 8009590:	a901      	add	r1, sp, #4
 8009592:	b142      	cbz	r2, 80095a6 <__ascii_mbtowc+0x1a>
 8009594:	b14b      	cbz	r3, 80095aa <__ascii_mbtowc+0x1e>
 8009596:	7813      	ldrb	r3, [r2, #0]
 8009598:	600b      	str	r3, [r1, #0]
 800959a:	7812      	ldrb	r2, [r2, #0]
 800959c:	1e10      	subs	r0, r2, #0
 800959e:	bf18      	it	ne
 80095a0:	2001      	movne	r0, #1
 80095a2:	b002      	add	sp, #8
 80095a4:	4770      	bx	lr
 80095a6:	4610      	mov	r0, r2
 80095a8:	e7fb      	b.n	80095a2 <__ascii_mbtowc+0x16>
 80095aa:	f06f 0001 	mvn.w	r0, #1
 80095ae:	e7f8      	b.n	80095a2 <__ascii_mbtowc+0x16>

080095b0 <memmove>:
 80095b0:	4288      	cmp	r0, r1
 80095b2:	b510      	push	{r4, lr}
 80095b4:	eb01 0402 	add.w	r4, r1, r2
 80095b8:	d902      	bls.n	80095c0 <memmove+0x10>
 80095ba:	4284      	cmp	r4, r0
 80095bc:	4623      	mov	r3, r4
 80095be:	d807      	bhi.n	80095d0 <memmove+0x20>
 80095c0:	1e43      	subs	r3, r0, #1
 80095c2:	42a1      	cmp	r1, r4
 80095c4:	d008      	beq.n	80095d8 <memmove+0x28>
 80095c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ce:	e7f8      	b.n	80095c2 <memmove+0x12>
 80095d0:	4402      	add	r2, r0
 80095d2:	4601      	mov	r1, r0
 80095d4:	428a      	cmp	r2, r1
 80095d6:	d100      	bne.n	80095da <memmove+0x2a>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095e2:	e7f7      	b.n	80095d4 <memmove+0x24>

080095e4 <__malloc_lock>:
 80095e4:	4801      	ldr	r0, [pc, #4]	; (80095ec <__malloc_lock+0x8>)
 80095e6:	f000 bc17 	b.w	8009e18 <__retarget_lock_acquire_recursive>
 80095ea:	bf00      	nop
 80095ec:	20005180 	.word	0x20005180

080095f0 <__malloc_unlock>:
 80095f0:	4801      	ldr	r0, [pc, #4]	; (80095f8 <__malloc_unlock+0x8>)
 80095f2:	f000 bc12 	b.w	8009e1a <__retarget_lock_release_recursive>
 80095f6:	bf00      	nop
 80095f8:	20005180 	.word	0x20005180

080095fc <_realloc_r>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	4607      	mov	r7, r0
 8009600:	4614      	mov	r4, r2
 8009602:	460e      	mov	r6, r1
 8009604:	b921      	cbnz	r1, 8009610 <_realloc_r+0x14>
 8009606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800960a:	4611      	mov	r1, r2
 800960c:	f7ff bdc8 	b.w	80091a0 <_malloc_r>
 8009610:	b922      	cbnz	r2, 800961c <_realloc_r+0x20>
 8009612:	f7ff fd75 	bl	8009100 <_free_r>
 8009616:	4625      	mov	r5, r4
 8009618:	4628      	mov	r0, r5
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961c:	f000 fc62 	bl	8009ee4 <_malloc_usable_size_r>
 8009620:	42a0      	cmp	r0, r4
 8009622:	d20f      	bcs.n	8009644 <_realloc_r+0x48>
 8009624:	4621      	mov	r1, r4
 8009626:	4638      	mov	r0, r7
 8009628:	f7ff fdba 	bl	80091a0 <_malloc_r>
 800962c:	4605      	mov	r5, r0
 800962e:	2800      	cmp	r0, #0
 8009630:	d0f2      	beq.n	8009618 <_realloc_r+0x1c>
 8009632:	4631      	mov	r1, r6
 8009634:	4622      	mov	r2, r4
 8009636:	f7ff f9c7 	bl	80089c8 <memcpy>
 800963a:	4631      	mov	r1, r6
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff fd5f 	bl	8009100 <_free_r>
 8009642:	e7e9      	b.n	8009618 <_realloc_r+0x1c>
 8009644:	4635      	mov	r5, r6
 8009646:	e7e7      	b.n	8009618 <_realloc_r+0x1c>

08009648 <__sfputc_r>:
 8009648:	6893      	ldr	r3, [r2, #8]
 800964a:	3b01      	subs	r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	b410      	push	{r4}
 8009650:	6093      	str	r3, [r2, #8]
 8009652:	da08      	bge.n	8009666 <__sfputc_r+0x1e>
 8009654:	6994      	ldr	r4, [r2, #24]
 8009656:	42a3      	cmp	r3, r4
 8009658:	db01      	blt.n	800965e <__sfputc_r+0x16>
 800965a:	290a      	cmp	r1, #10
 800965c:	d103      	bne.n	8009666 <__sfputc_r+0x1e>
 800965e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009662:	f000 b94b 	b.w	80098fc <__swbuf_r>
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	1c58      	adds	r0, r3, #1
 800966a:	6010      	str	r0, [r2, #0]
 800966c:	7019      	strb	r1, [r3, #0]
 800966e:	4608      	mov	r0, r1
 8009670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009674:	4770      	bx	lr

08009676 <__sfputs_r>:
 8009676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	4614      	mov	r4, r2
 800967e:	18d5      	adds	r5, r2, r3
 8009680:	42ac      	cmp	r4, r5
 8009682:	d101      	bne.n	8009688 <__sfputs_r+0x12>
 8009684:	2000      	movs	r0, #0
 8009686:	e007      	b.n	8009698 <__sfputs_r+0x22>
 8009688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800968c:	463a      	mov	r2, r7
 800968e:	4630      	mov	r0, r6
 8009690:	f7ff ffda 	bl	8009648 <__sfputc_r>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d1f3      	bne.n	8009680 <__sfputs_r+0xa>
 8009698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800969c <_vfiprintf_r>:
 800969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	460d      	mov	r5, r1
 80096a2:	b09d      	sub	sp, #116	; 0x74
 80096a4:	4614      	mov	r4, r2
 80096a6:	4698      	mov	r8, r3
 80096a8:	4606      	mov	r6, r0
 80096aa:	b118      	cbz	r0, 80096b4 <_vfiprintf_r+0x18>
 80096ac:	6983      	ldr	r3, [r0, #24]
 80096ae:	b90b      	cbnz	r3, 80096b4 <_vfiprintf_r+0x18>
 80096b0:	f000 fb14 	bl	8009cdc <__sinit>
 80096b4:	4b89      	ldr	r3, [pc, #548]	; (80098dc <_vfiprintf_r+0x240>)
 80096b6:	429d      	cmp	r5, r3
 80096b8:	d11b      	bne.n	80096f2 <_vfiprintf_r+0x56>
 80096ba:	6875      	ldr	r5, [r6, #4]
 80096bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096be:	07d9      	lsls	r1, r3, #31
 80096c0:	d405      	bmi.n	80096ce <_vfiprintf_r+0x32>
 80096c2:	89ab      	ldrh	r3, [r5, #12]
 80096c4:	059a      	lsls	r2, r3, #22
 80096c6:	d402      	bmi.n	80096ce <_vfiprintf_r+0x32>
 80096c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ca:	f000 fba5 	bl	8009e18 <__retarget_lock_acquire_recursive>
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	071b      	lsls	r3, r3, #28
 80096d2:	d501      	bpl.n	80096d8 <_vfiprintf_r+0x3c>
 80096d4:	692b      	ldr	r3, [r5, #16]
 80096d6:	b9eb      	cbnz	r3, 8009714 <_vfiprintf_r+0x78>
 80096d8:	4629      	mov	r1, r5
 80096da:	4630      	mov	r0, r6
 80096dc:	f000 f96e 	bl	80099bc <__swsetup_r>
 80096e0:	b1c0      	cbz	r0, 8009714 <_vfiprintf_r+0x78>
 80096e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e4:	07dc      	lsls	r4, r3, #31
 80096e6:	d50e      	bpl.n	8009706 <_vfiprintf_r+0x6a>
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	b01d      	add	sp, #116	; 0x74
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	4b7b      	ldr	r3, [pc, #492]	; (80098e0 <_vfiprintf_r+0x244>)
 80096f4:	429d      	cmp	r5, r3
 80096f6:	d101      	bne.n	80096fc <_vfiprintf_r+0x60>
 80096f8:	68b5      	ldr	r5, [r6, #8]
 80096fa:	e7df      	b.n	80096bc <_vfiprintf_r+0x20>
 80096fc:	4b79      	ldr	r3, [pc, #484]	; (80098e4 <_vfiprintf_r+0x248>)
 80096fe:	429d      	cmp	r5, r3
 8009700:	bf08      	it	eq
 8009702:	68f5      	ldreq	r5, [r6, #12]
 8009704:	e7da      	b.n	80096bc <_vfiprintf_r+0x20>
 8009706:	89ab      	ldrh	r3, [r5, #12]
 8009708:	0598      	lsls	r0, r3, #22
 800970a:	d4ed      	bmi.n	80096e8 <_vfiprintf_r+0x4c>
 800970c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800970e:	f000 fb84 	bl	8009e1a <__retarget_lock_release_recursive>
 8009712:	e7e9      	b.n	80096e8 <_vfiprintf_r+0x4c>
 8009714:	2300      	movs	r3, #0
 8009716:	9309      	str	r3, [sp, #36]	; 0x24
 8009718:	2320      	movs	r3, #32
 800971a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800971e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009722:	2330      	movs	r3, #48	; 0x30
 8009724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098e8 <_vfiprintf_r+0x24c>
 8009728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800972c:	f04f 0901 	mov.w	r9, #1
 8009730:	4623      	mov	r3, r4
 8009732:	469a      	mov	sl, r3
 8009734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009738:	b10a      	cbz	r2, 800973e <_vfiprintf_r+0xa2>
 800973a:	2a25      	cmp	r2, #37	; 0x25
 800973c:	d1f9      	bne.n	8009732 <_vfiprintf_r+0x96>
 800973e:	ebba 0b04 	subs.w	fp, sl, r4
 8009742:	d00b      	beq.n	800975c <_vfiprintf_r+0xc0>
 8009744:	465b      	mov	r3, fp
 8009746:	4622      	mov	r2, r4
 8009748:	4629      	mov	r1, r5
 800974a:	4630      	mov	r0, r6
 800974c:	f7ff ff93 	bl	8009676 <__sfputs_r>
 8009750:	3001      	adds	r0, #1
 8009752:	f000 80aa 	beq.w	80098aa <_vfiprintf_r+0x20e>
 8009756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009758:	445a      	add	r2, fp
 800975a:	9209      	str	r2, [sp, #36]	; 0x24
 800975c:	f89a 3000 	ldrb.w	r3, [sl]
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 80a2 	beq.w	80098aa <_vfiprintf_r+0x20e>
 8009766:	2300      	movs	r3, #0
 8009768:	f04f 32ff 	mov.w	r2, #4294967295
 800976c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009770:	f10a 0a01 	add.w	sl, sl, #1
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800977c:	931a      	str	r3, [sp, #104]	; 0x68
 800977e:	4654      	mov	r4, sl
 8009780:	2205      	movs	r2, #5
 8009782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009786:	4858      	ldr	r0, [pc, #352]	; (80098e8 <_vfiprintf_r+0x24c>)
 8009788:	f7f6 fd3a 	bl	8000200 <memchr>
 800978c:	9a04      	ldr	r2, [sp, #16]
 800978e:	b9d8      	cbnz	r0, 80097c8 <_vfiprintf_r+0x12c>
 8009790:	06d1      	lsls	r1, r2, #27
 8009792:	bf44      	itt	mi
 8009794:	2320      	movmi	r3, #32
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979a:	0713      	lsls	r3, r2, #28
 800979c:	bf44      	itt	mi
 800979e:	232b      	movmi	r3, #43	; 0x2b
 80097a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a4:	f89a 3000 	ldrb.w	r3, [sl]
 80097a8:	2b2a      	cmp	r3, #42	; 0x2a
 80097aa:	d015      	beq.n	80097d8 <_vfiprintf_r+0x13c>
 80097ac:	9a07      	ldr	r2, [sp, #28]
 80097ae:	4654      	mov	r4, sl
 80097b0:	2000      	movs	r0, #0
 80097b2:	f04f 0c0a 	mov.w	ip, #10
 80097b6:	4621      	mov	r1, r4
 80097b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097bc:	3b30      	subs	r3, #48	; 0x30
 80097be:	2b09      	cmp	r3, #9
 80097c0:	d94e      	bls.n	8009860 <_vfiprintf_r+0x1c4>
 80097c2:	b1b0      	cbz	r0, 80097f2 <_vfiprintf_r+0x156>
 80097c4:	9207      	str	r2, [sp, #28]
 80097c6:	e014      	b.n	80097f2 <_vfiprintf_r+0x156>
 80097c8:	eba0 0308 	sub.w	r3, r0, r8
 80097cc:	fa09 f303 	lsl.w	r3, r9, r3
 80097d0:	4313      	orrs	r3, r2
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	46a2      	mov	sl, r4
 80097d6:	e7d2      	b.n	800977e <_vfiprintf_r+0xe2>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	1d19      	adds	r1, r3, #4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	9103      	str	r1, [sp, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bfbb      	ittet	lt
 80097e4:	425b      	neglt	r3, r3
 80097e6:	f042 0202 	orrlt.w	r2, r2, #2
 80097ea:	9307      	strge	r3, [sp, #28]
 80097ec:	9307      	strlt	r3, [sp, #28]
 80097ee:	bfb8      	it	lt
 80097f0:	9204      	strlt	r2, [sp, #16]
 80097f2:	7823      	ldrb	r3, [r4, #0]
 80097f4:	2b2e      	cmp	r3, #46	; 0x2e
 80097f6:	d10c      	bne.n	8009812 <_vfiprintf_r+0x176>
 80097f8:	7863      	ldrb	r3, [r4, #1]
 80097fa:	2b2a      	cmp	r3, #42	; 0x2a
 80097fc:	d135      	bne.n	800986a <_vfiprintf_r+0x1ce>
 80097fe:	9b03      	ldr	r3, [sp, #12]
 8009800:	1d1a      	adds	r2, r3, #4
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	9203      	str	r2, [sp, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	bfb8      	it	lt
 800980a:	f04f 33ff 	movlt.w	r3, #4294967295
 800980e:	3402      	adds	r4, #2
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098f8 <_vfiprintf_r+0x25c>
 8009816:	7821      	ldrb	r1, [r4, #0]
 8009818:	2203      	movs	r2, #3
 800981a:	4650      	mov	r0, sl
 800981c:	f7f6 fcf0 	bl	8000200 <memchr>
 8009820:	b140      	cbz	r0, 8009834 <_vfiprintf_r+0x198>
 8009822:	2340      	movs	r3, #64	; 0x40
 8009824:	eba0 000a 	sub.w	r0, r0, sl
 8009828:	fa03 f000 	lsl.w	r0, r3, r0
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	4303      	orrs	r3, r0
 8009830:	3401      	adds	r4, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009838:	482c      	ldr	r0, [pc, #176]	; (80098ec <_vfiprintf_r+0x250>)
 800983a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800983e:	2206      	movs	r2, #6
 8009840:	f7f6 fcde 	bl	8000200 <memchr>
 8009844:	2800      	cmp	r0, #0
 8009846:	d03f      	beq.n	80098c8 <_vfiprintf_r+0x22c>
 8009848:	4b29      	ldr	r3, [pc, #164]	; (80098f0 <_vfiprintf_r+0x254>)
 800984a:	bb1b      	cbnz	r3, 8009894 <_vfiprintf_r+0x1f8>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	3307      	adds	r3, #7
 8009850:	f023 0307 	bic.w	r3, r3, #7
 8009854:	3308      	adds	r3, #8
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985a:	443b      	add	r3, r7
 800985c:	9309      	str	r3, [sp, #36]	; 0x24
 800985e:	e767      	b.n	8009730 <_vfiprintf_r+0x94>
 8009860:	fb0c 3202 	mla	r2, ip, r2, r3
 8009864:	460c      	mov	r4, r1
 8009866:	2001      	movs	r0, #1
 8009868:	e7a5      	b.n	80097b6 <_vfiprintf_r+0x11a>
 800986a:	2300      	movs	r3, #0
 800986c:	3401      	adds	r4, #1
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	4619      	mov	r1, r3
 8009872:	f04f 0c0a 	mov.w	ip, #10
 8009876:	4620      	mov	r0, r4
 8009878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800987c:	3a30      	subs	r2, #48	; 0x30
 800987e:	2a09      	cmp	r2, #9
 8009880:	d903      	bls.n	800988a <_vfiprintf_r+0x1ee>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0c5      	beq.n	8009812 <_vfiprintf_r+0x176>
 8009886:	9105      	str	r1, [sp, #20]
 8009888:	e7c3      	b.n	8009812 <_vfiprintf_r+0x176>
 800988a:	fb0c 2101 	mla	r1, ip, r1, r2
 800988e:	4604      	mov	r4, r0
 8009890:	2301      	movs	r3, #1
 8009892:	e7f0      	b.n	8009876 <_vfiprintf_r+0x1da>
 8009894:	ab03      	add	r3, sp, #12
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	462a      	mov	r2, r5
 800989a:	4b16      	ldr	r3, [pc, #88]	; (80098f4 <_vfiprintf_r+0x258>)
 800989c:	a904      	add	r1, sp, #16
 800989e:	4630      	mov	r0, r6
 80098a0:	f7fd fe22 	bl	80074e8 <_printf_float>
 80098a4:	4607      	mov	r7, r0
 80098a6:	1c78      	adds	r0, r7, #1
 80098a8:	d1d6      	bne.n	8009858 <_vfiprintf_r+0x1bc>
 80098aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ac:	07d9      	lsls	r1, r3, #31
 80098ae:	d405      	bmi.n	80098bc <_vfiprintf_r+0x220>
 80098b0:	89ab      	ldrh	r3, [r5, #12]
 80098b2:	059a      	lsls	r2, r3, #22
 80098b4:	d402      	bmi.n	80098bc <_vfiprintf_r+0x220>
 80098b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098b8:	f000 faaf 	bl	8009e1a <__retarget_lock_release_recursive>
 80098bc:	89ab      	ldrh	r3, [r5, #12]
 80098be:	065b      	lsls	r3, r3, #25
 80098c0:	f53f af12 	bmi.w	80096e8 <_vfiprintf_r+0x4c>
 80098c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c6:	e711      	b.n	80096ec <_vfiprintf_r+0x50>
 80098c8:	ab03      	add	r3, sp, #12
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	462a      	mov	r2, r5
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <_vfiprintf_r+0x258>)
 80098d0:	a904      	add	r1, sp, #16
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7fe f8ac 	bl	8007a30 <_printf_i>
 80098d8:	e7e4      	b.n	80098a4 <_vfiprintf_r+0x208>
 80098da:	bf00      	nop
 80098dc:	0800a4e4 	.word	0x0800a4e4
 80098e0:	0800a504 	.word	0x0800a504
 80098e4:	0800a4c4 	.word	0x0800a4c4
 80098e8:	0800a36c 	.word	0x0800a36c
 80098ec:	0800a376 	.word	0x0800a376
 80098f0:	080074e9 	.word	0x080074e9
 80098f4:	08009677 	.word	0x08009677
 80098f8:	0800a372 	.word	0x0800a372

080098fc <__swbuf_r>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	460e      	mov	r6, r1
 8009900:	4614      	mov	r4, r2
 8009902:	4605      	mov	r5, r0
 8009904:	b118      	cbz	r0, 800990e <__swbuf_r+0x12>
 8009906:	6983      	ldr	r3, [r0, #24]
 8009908:	b90b      	cbnz	r3, 800990e <__swbuf_r+0x12>
 800990a:	f000 f9e7 	bl	8009cdc <__sinit>
 800990e:	4b21      	ldr	r3, [pc, #132]	; (8009994 <__swbuf_r+0x98>)
 8009910:	429c      	cmp	r4, r3
 8009912:	d12b      	bne.n	800996c <__swbuf_r+0x70>
 8009914:	686c      	ldr	r4, [r5, #4]
 8009916:	69a3      	ldr	r3, [r4, #24]
 8009918:	60a3      	str	r3, [r4, #8]
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	071a      	lsls	r2, r3, #28
 800991e:	d52f      	bpl.n	8009980 <__swbuf_r+0x84>
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	b36b      	cbz	r3, 8009980 <__swbuf_r+0x84>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	6820      	ldr	r0, [r4, #0]
 8009928:	1ac0      	subs	r0, r0, r3
 800992a:	6963      	ldr	r3, [r4, #20]
 800992c:	b2f6      	uxtb	r6, r6
 800992e:	4283      	cmp	r3, r0
 8009930:	4637      	mov	r7, r6
 8009932:	dc04      	bgt.n	800993e <__swbuf_r+0x42>
 8009934:	4621      	mov	r1, r4
 8009936:	4628      	mov	r0, r5
 8009938:	f000 f93c 	bl	8009bb4 <_fflush_r>
 800993c:	bb30      	cbnz	r0, 800998c <__swbuf_r+0x90>
 800993e:	68a3      	ldr	r3, [r4, #8]
 8009940:	3b01      	subs	r3, #1
 8009942:	60a3      	str	r3, [r4, #8]
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	6022      	str	r2, [r4, #0]
 800994a:	701e      	strb	r6, [r3, #0]
 800994c:	6963      	ldr	r3, [r4, #20]
 800994e:	3001      	adds	r0, #1
 8009950:	4283      	cmp	r3, r0
 8009952:	d004      	beq.n	800995e <__swbuf_r+0x62>
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	07db      	lsls	r3, r3, #31
 8009958:	d506      	bpl.n	8009968 <__swbuf_r+0x6c>
 800995a:	2e0a      	cmp	r6, #10
 800995c:	d104      	bne.n	8009968 <__swbuf_r+0x6c>
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	f000 f927 	bl	8009bb4 <_fflush_r>
 8009966:	b988      	cbnz	r0, 800998c <__swbuf_r+0x90>
 8009968:	4638      	mov	r0, r7
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <__swbuf_r+0x9c>)
 800996e:	429c      	cmp	r4, r3
 8009970:	d101      	bne.n	8009976 <__swbuf_r+0x7a>
 8009972:	68ac      	ldr	r4, [r5, #8]
 8009974:	e7cf      	b.n	8009916 <__swbuf_r+0x1a>
 8009976:	4b09      	ldr	r3, [pc, #36]	; (800999c <__swbuf_r+0xa0>)
 8009978:	429c      	cmp	r4, r3
 800997a:	bf08      	it	eq
 800997c:	68ec      	ldreq	r4, [r5, #12]
 800997e:	e7ca      	b.n	8009916 <__swbuf_r+0x1a>
 8009980:	4621      	mov	r1, r4
 8009982:	4628      	mov	r0, r5
 8009984:	f000 f81a 	bl	80099bc <__swsetup_r>
 8009988:	2800      	cmp	r0, #0
 800998a:	d0cb      	beq.n	8009924 <__swbuf_r+0x28>
 800998c:	f04f 37ff 	mov.w	r7, #4294967295
 8009990:	e7ea      	b.n	8009968 <__swbuf_r+0x6c>
 8009992:	bf00      	nop
 8009994:	0800a4e4 	.word	0x0800a4e4
 8009998:	0800a504 	.word	0x0800a504
 800999c:	0800a4c4 	.word	0x0800a4c4

080099a0 <__ascii_wctomb>:
 80099a0:	b149      	cbz	r1, 80099b6 <__ascii_wctomb+0x16>
 80099a2:	2aff      	cmp	r2, #255	; 0xff
 80099a4:	bf85      	ittet	hi
 80099a6:	238a      	movhi	r3, #138	; 0x8a
 80099a8:	6003      	strhi	r3, [r0, #0]
 80099aa:	700a      	strbls	r2, [r1, #0]
 80099ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80099b0:	bf98      	it	ls
 80099b2:	2001      	movls	r0, #1
 80099b4:	4770      	bx	lr
 80099b6:	4608      	mov	r0, r1
 80099b8:	4770      	bx	lr
	...

080099bc <__swsetup_r>:
 80099bc:	4b32      	ldr	r3, [pc, #200]	; (8009a88 <__swsetup_r+0xcc>)
 80099be:	b570      	push	{r4, r5, r6, lr}
 80099c0:	681d      	ldr	r5, [r3, #0]
 80099c2:	4606      	mov	r6, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	b125      	cbz	r5, 80099d2 <__swsetup_r+0x16>
 80099c8:	69ab      	ldr	r3, [r5, #24]
 80099ca:	b913      	cbnz	r3, 80099d2 <__swsetup_r+0x16>
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 f985 	bl	8009cdc <__sinit>
 80099d2:	4b2e      	ldr	r3, [pc, #184]	; (8009a8c <__swsetup_r+0xd0>)
 80099d4:	429c      	cmp	r4, r3
 80099d6:	d10f      	bne.n	80099f8 <__swsetup_r+0x3c>
 80099d8:	686c      	ldr	r4, [r5, #4]
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099e0:	0719      	lsls	r1, r3, #28
 80099e2:	d42c      	bmi.n	8009a3e <__swsetup_r+0x82>
 80099e4:	06dd      	lsls	r5, r3, #27
 80099e6:	d411      	bmi.n	8009a0c <__swsetup_r+0x50>
 80099e8:	2309      	movs	r3, #9
 80099ea:	6033      	str	r3, [r6, #0]
 80099ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099f0:	81a3      	strh	r3, [r4, #12]
 80099f2:	f04f 30ff 	mov.w	r0, #4294967295
 80099f6:	e03e      	b.n	8009a76 <__swsetup_r+0xba>
 80099f8:	4b25      	ldr	r3, [pc, #148]	; (8009a90 <__swsetup_r+0xd4>)
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d101      	bne.n	8009a02 <__swsetup_r+0x46>
 80099fe:	68ac      	ldr	r4, [r5, #8]
 8009a00:	e7eb      	b.n	80099da <__swsetup_r+0x1e>
 8009a02:	4b24      	ldr	r3, [pc, #144]	; (8009a94 <__swsetup_r+0xd8>)
 8009a04:	429c      	cmp	r4, r3
 8009a06:	bf08      	it	eq
 8009a08:	68ec      	ldreq	r4, [r5, #12]
 8009a0a:	e7e6      	b.n	80099da <__swsetup_r+0x1e>
 8009a0c:	0758      	lsls	r0, r3, #29
 8009a0e:	d512      	bpl.n	8009a36 <__swsetup_r+0x7a>
 8009a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a12:	b141      	cbz	r1, 8009a26 <__swsetup_r+0x6a>
 8009a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d002      	beq.n	8009a22 <__swsetup_r+0x66>
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff fb6f 	bl	8009100 <_free_r>
 8009a22:	2300      	movs	r3, #0
 8009a24:	6363      	str	r3, [r4, #52]	; 0x34
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6063      	str	r3, [r4, #4]
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	f043 0308 	orr.w	r3, r3, #8
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	6923      	ldr	r3, [r4, #16]
 8009a40:	b94b      	cbnz	r3, 8009a56 <__swsetup_r+0x9a>
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a4c:	d003      	beq.n	8009a56 <__swsetup_r+0x9a>
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4630      	mov	r0, r6
 8009a52:	f000 fa07 	bl	8009e64 <__smakebuf_r>
 8009a56:	89a0      	ldrh	r0, [r4, #12]
 8009a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a5c:	f010 0301 	ands.w	r3, r0, #1
 8009a60:	d00a      	beq.n	8009a78 <__swsetup_r+0xbc>
 8009a62:	2300      	movs	r3, #0
 8009a64:	60a3      	str	r3, [r4, #8]
 8009a66:	6963      	ldr	r3, [r4, #20]
 8009a68:	425b      	negs	r3, r3
 8009a6a:	61a3      	str	r3, [r4, #24]
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	b943      	cbnz	r3, 8009a82 <__swsetup_r+0xc6>
 8009a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a74:	d1ba      	bne.n	80099ec <__swsetup_r+0x30>
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	0781      	lsls	r1, r0, #30
 8009a7a:	bf58      	it	pl
 8009a7c:	6963      	ldrpl	r3, [r4, #20]
 8009a7e:	60a3      	str	r3, [r4, #8]
 8009a80:	e7f4      	b.n	8009a6c <__swsetup_r+0xb0>
 8009a82:	2000      	movs	r0, #0
 8009a84:	e7f7      	b.n	8009a76 <__swsetup_r+0xba>
 8009a86:	bf00      	nop
 8009a88:	2000000c 	.word	0x2000000c
 8009a8c:	0800a4e4 	.word	0x0800a4e4
 8009a90:	0800a504 	.word	0x0800a504
 8009a94:	0800a4c4 	.word	0x0800a4c4

08009a98 <abort>:
 8009a98:	b508      	push	{r3, lr}
 8009a9a:	2006      	movs	r0, #6
 8009a9c:	f000 fa52 	bl	8009f44 <raise>
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	f7f8 f80f 	bl	8001ac4 <_exit>
	...

08009aa8 <__sflush_r>:
 8009aa8:	898a      	ldrh	r2, [r1, #12]
 8009aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aae:	4605      	mov	r5, r0
 8009ab0:	0710      	lsls	r0, r2, #28
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	d458      	bmi.n	8009b68 <__sflush_r+0xc0>
 8009ab6:	684b      	ldr	r3, [r1, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dc05      	bgt.n	8009ac8 <__sflush_r+0x20>
 8009abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dc02      	bgt.n	8009ac8 <__sflush_r+0x20>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aca:	2e00      	cmp	r6, #0
 8009acc:	d0f9      	beq.n	8009ac2 <__sflush_r+0x1a>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ad4:	682f      	ldr	r7, [r5, #0]
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	d032      	beq.n	8009b40 <__sflush_r+0x98>
 8009ada:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	075a      	lsls	r2, r3, #29
 8009ae0:	d505      	bpl.n	8009aee <__sflush_r+0x46>
 8009ae2:	6863      	ldr	r3, [r4, #4]
 8009ae4:	1ac0      	subs	r0, r0, r3
 8009ae6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ae8:	b10b      	cbz	r3, 8009aee <__sflush_r+0x46>
 8009aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009aec:	1ac0      	subs	r0, r0, r3
 8009aee:	2300      	movs	r3, #0
 8009af0:	4602      	mov	r2, r0
 8009af2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009af4:	6a21      	ldr	r1, [r4, #32]
 8009af6:	4628      	mov	r0, r5
 8009af8:	47b0      	blx	r6
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	d106      	bne.n	8009b0e <__sflush_r+0x66>
 8009b00:	6829      	ldr	r1, [r5, #0]
 8009b02:	291d      	cmp	r1, #29
 8009b04:	d82c      	bhi.n	8009b60 <__sflush_r+0xb8>
 8009b06:	4a2a      	ldr	r2, [pc, #168]	; (8009bb0 <__sflush_r+0x108>)
 8009b08:	40ca      	lsrs	r2, r1
 8009b0a:	07d6      	lsls	r6, r2, #31
 8009b0c:	d528      	bpl.n	8009b60 <__sflush_r+0xb8>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	6062      	str	r2, [r4, #4]
 8009b12:	04d9      	lsls	r1, r3, #19
 8009b14:	6922      	ldr	r2, [r4, #16]
 8009b16:	6022      	str	r2, [r4, #0]
 8009b18:	d504      	bpl.n	8009b24 <__sflush_r+0x7c>
 8009b1a:	1c42      	adds	r2, r0, #1
 8009b1c:	d101      	bne.n	8009b22 <__sflush_r+0x7a>
 8009b1e:	682b      	ldr	r3, [r5, #0]
 8009b20:	b903      	cbnz	r3, 8009b24 <__sflush_r+0x7c>
 8009b22:	6560      	str	r0, [r4, #84]	; 0x54
 8009b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b26:	602f      	str	r7, [r5, #0]
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	d0ca      	beq.n	8009ac2 <__sflush_r+0x1a>
 8009b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b30:	4299      	cmp	r1, r3
 8009b32:	d002      	beq.n	8009b3a <__sflush_r+0x92>
 8009b34:	4628      	mov	r0, r5
 8009b36:	f7ff fae3 	bl	8009100 <_free_r>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	6360      	str	r0, [r4, #52]	; 0x34
 8009b3e:	e7c1      	b.n	8009ac4 <__sflush_r+0x1c>
 8009b40:	6a21      	ldr	r1, [r4, #32]
 8009b42:	2301      	movs	r3, #1
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b0      	blx	r6
 8009b48:	1c41      	adds	r1, r0, #1
 8009b4a:	d1c7      	bne.n	8009adc <__sflush_r+0x34>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0c4      	beq.n	8009adc <__sflush_r+0x34>
 8009b52:	2b1d      	cmp	r3, #29
 8009b54:	d001      	beq.n	8009b5a <__sflush_r+0xb2>
 8009b56:	2b16      	cmp	r3, #22
 8009b58:	d101      	bne.n	8009b5e <__sflush_r+0xb6>
 8009b5a:	602f      	str	r7, [r5, #0]
 8009b5c:	e7b1      	b.n	8009ac2 <__sflush_r+0x1a>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	e7ad      	b.n	8009ac4 <__sflush_r+0x1c>
 8009b68:	690f      	ldr	r7, [r1, #16]
 8009b6a:	2f00      	cmp	r7, #0
 8009b6c:	d0a9      	beq.n	8009ac2 <__sflush_r+0x1a>
 8009b6e:	0793      	lsls	r3, r2, #30
 8009b70:	680e      	ldr	r6, [r1, #0]
 8009b72:	bf08      	it	eq
 8009b74:	694b      	ldreq	r3, [r1, #20]
 8009b76:	600f      	str	r7, [r1, #0]
 8009b78:	bf18      	it	ne
 8009b7a:	2300      	movne	r3, #0
 8009b7c:	eba6 0807 	sub.w	r8, r6, r7
 8009b80:	608b      	str	r3, [r1, #8]
 8009b82:	f1b8 0f00 	cmp.w	r8, #0
 8009b86:	dd9c      	ble.n	8009ac2 <__sflush_r+0x1a>
 8009b88:	6a21      	ldr	r1, [r4, #32]
 8009b8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b8c:	4643      	mov	r3, r8
 8009b8e:	463a      	mov	r2, r7
 8009b90:	4628      	mov	r0, r5
 8009b92:	47b0      	blx	r6
 8009b94:	2800      	cmp	r0, #0
 8009b96:	dc06      	bgt.n	8009ba6 <__sflush_r+0xfe>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba4:	e78e      	b.n	8009ac4 <__sflush_r+0x1c>
 8009ba6:	4407      	add	r7, r0
 8009ba8:	eba8 0800 	sub.w	r8, r8, r0
 8009bac:	e7e9      	b.n	8009b82 <__sflush_r+0xda>
 8009bae:	bf00      	nop
 8009bb0:	20400001 	.word	0x20400001

08009bb4 <_fflush_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	690b      	ldr	r3, [r1, #16]
 8009bb8:	4605      	mov	r5, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	b913      	cbnz	r3, 8009bc4 <_fflush_r+0x10>
 8009bbe:	2500      	movs	r5, #0
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	b118      	cbz	r0, 8009bce <_fflush_r+0x1a>
 8009bc6:	6983      	ldr	r3, [r0, #24]
 8009bc8:	b90b      	cbnz	r3, 8009bce <_fflush_r+0x1a>
 8009bca:	f000 f887 	bl	8009cdc <__sinit>
 8009bce:	4b14      	ldr	r3, [pc, #80]	; (8009c20 <_fflush_r+0x6c>)
 8009bd0:	429c      	cmp	r4, r3
 8009bd2:	d11b      	bne.n	8009c0c <_fflush_r+0x58>
 8009bd4:	686c      	ldr	r4, [r5, #4]
 8009bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0ef      	beq.n	8009bbe <_fflush_r+0xa>
 8009bde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009be0:	07d0      	lsls	r0, r2, #31
 8009be2:	d404      	bmi.n	8009bee <_fflush_r+0x3a>
 8009be4:	0599      	lsls	r1, r3, #22
 8009be6:	d402      	bmi.n	8009bee <_fflush_r+0x3a>
 8009be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bea:	f000 f915 	bl	8009e18 <__retarget_lock_acquire_recursive>
 8009bee:	4628      	mov	r0, r5
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	f7ff ff59 	bl	8009aa8 <__sflush_r>
 8009bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bf8:	07da      	lsls	r2, r3, #31
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	d4e0      	bmi.n	8009bc0 <_fflush_r+0xc>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	059b      	lsls	r3, r3, #22
 8009c02:	d4dd      	bmi.n	8009bc0 <_fflush_r+0xc>
 8009c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c06:	f000 f908 	bl	8009e1a <__retarget_lock_release_recursive>
 8009c0a:	e7d9      	b.n	8009bc0 <_fflush_r+0xc>
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <_fflush_r+0x70>)
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	d101      	bne.n	8009c16 <_fflush_r+0x62>
 8009c12:	68ac      	ldr	r4, [r5, #8]
 8009c14:	e7df      	b.n	8009bd6 <_fflush_r+0x22>
 8009c16:	4b04      	ldr	r3, [pc, #16]	; (8009c28 <_fflush_r+0x74>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	bf08      	it	eq
 8009c1c:	68ec      	ldreq	r4, [r5, #12]
 8009c1e:	e7da      	b.n	8009bd6 <_fflush_r+0x22>
 8009c20:	0800a4e4 	.word	0x0800a4e4
 8009c24:	0800a504 	.word	0x0800a504
 8009c28:	0800a4c4 	.word	0x0800a4c4

08009c2c <std>:
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	b510      	push	{r4, lr}
 8009c30:	4604      	mov	r4, r0
 8009c32:	e9c0 3300 	strd	r3, r3, [r0]
 8009c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c3a:	6083      	str	r3, [r0, #8]
 8009c3c:	8181      	strh	r1, [r0, #12]
 8009c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8009c40:	81c2      	strh	r2, [r0, #14]
 8009c42:	6183      	str	r3, [r0, #24]
 8009c44:	4619      	mov	r1, r3
 8009c46:	2208      	movs	r2, #8
 8009c48:	305c      	adds	r0, #92	; 0x5c
 8009c4a:	f7fd fba5 	bl	8007398 <memset>
 8009c4e:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <std+0x38>)
 8009c50:	6263      	str	r3, [r4, #36]	; 0x24
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <std+0x3c>)
 8009c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c56:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <std+0x40>)
 8009c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c5a:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <std+0x44>)
 8009c5c:	6224      	str	r4, [r4, #32]
 8009c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009c60:	bd10      	pop	{r4, pc}
 8009c62:	bf00      	nop
 8009c64:	08009f7d 	.word	0x08009f7d
 8009c68:	08009f9f 	.word	0x08009f9f
 8009c6c:	08009fd7 	.word	0x08009fd7
 8009c70:	08009ffb 	.word	0x08009ffb

08009c74 <_cleanup_r>:
 8009c74:	4901      	ldr	r1, [pc, #4]	; (8009c7c <_cleanup_r+0x8>)
 8009c76:	f000 b8af 	b.w	8009dd8 <_fwalk_reent>
 8009c7a:	bf00      	nop
 8009c7c:	08009bb5 	.word	0x08009bb5

08009c80 <__sfmoreglue>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	1e4a      	subs	r2, r1, #1
 8009c84:	2568      	movs	r5, #104	; 0x68
 8009c86:	4355      	muls	r5, r2
 8009c88:	460e      	mov	r6, r1
 8009c8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c8e:	f7ff fa87 	bl	80091a0 <_malloc_r>
 8009c92:	4604      	mov	r4, r0
 8009c94:	b140      	cbz	r0, 8009ca8 <__sfmoreglue+0x28>
 8009c96:	2100      	movs	r1, #0
 8009c98:	e9c0 1600 	strd	r1, r6, [r0]
 8009c9c:	300c      	adds	r0, #12
 8009c9e:	60a0      	str	r0, [r4, #8]
 8009ca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ca4:	f7fd fb78 	bl	8007398 <memset>
 8009ca8:	4620      	mov	r0, r4
 8009caa:	bd70      	pop	{r4, r5, r6, pc}

08009cac <__sfp_lock_acquire>:
 8009cac:	4801      	ldr	r0, [pc, #4]	; (8009cb4 <__sfp_lock_acquire+0x8>)
 8009cae:	f000 b8b3 	b.w	8009e18 <__retarget_lock_acquire_recursive>
 8009cb2:	bf00      	nop
 8009cb4:	20005184 	.word	0x20005184

08009cb8 <__sfp_lock_release>:
 8009cb8:	4801      	ldr	r0, [pc, #4]	; (8009cc0 <__sfp_lock_release+0x8>)
 8009cba:	f000 b8ae 	b.w	8009e1a <__retarget_lock_release_recursive>
 8009cbe:	bf00      	nop
 8009cc0:	20005184 	.word	0x20005184

08009cc4 <__sinit_lock_acquire>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__sinit_lock_acquire+0x8>)
 8009cc6:	f000 b8a7 	b.w	8009e18 <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	2000517f 	.word	0x2000517f

08009cd0 <__sinit_lock_release>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__sinit_lock_release+0x8>)
 8009cd2:	f000 b8a2 	b.w	8009e1a <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	2000517f 	.word	0x2000517f

08009cdc <__sinit>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	f7ff fff0 	bl	8009cc4 <__sinit_lock_acquire>
 8009ce4:	69a3      	ldr	r3, [r4, #24]
 8009ce6:	b11b      	cbz	r3, 8009cf0 <__sinit+0x14>
 8009ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cec:	f7ff bff0 	b.w	8009cd0 <__sinit_lock_release>
 8009cf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cf4:	6523      	str	r3, [r4, #80]	; 0x50
 8009cf6:	4b13      	ldr	r3, [pc, #76]	; (8009d44 <__sinit+0x68>)
 8009cf8:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <__sinit+0x6c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cfe:	42a3      	cmp	r3, r4
 8009d00:	bf04      	itt	eq
 8009d02:	2301      	moveq	r3, #1
 8009d04:	61a3      	streq	r3, [r4, #24]
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 f820 	bl	8009d4c <__sfp>
 8009d0c:	6060      	str	r0, [r4, #4]
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 f81c 	bl	8009d4c <__sfp>
 8009d14:	60a0      	str	r0, [r4, #8]
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 f818 	bl	8009d4c <__sfp>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	60e0      	str	r0, [r4, #12]
 8009d20:	2104      	movs	r1, #4
 8009d22:	6860      	ldr	r0, [r4, #4]
 8009d24:	f7ff ff82 	bl	8009c2c <std>
 8009d28:	68a0      	ldr	r0, [r4, #8]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	2109      	movs	r1, #9
 8009d2e:	f7ff ff7d 	bl	8009c2c <std>
 8009d32:	68e0      	ldr	r0, [r4, #12]
 8009d34:	2202      	movs	r2, #2
 8009d36:	2112      	movs	r1, #18
 8009d38:	f7ff ff78 	bl	8009c2c <std>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	61a3      	str	r3, [r4, #24]
 8009d40:	e7d2      	b.n	8009ce8 <__sinit+0xc>
 8009d42:	bf00      	nop
 8009d44:	0800a140 	.word	0x0800a140
 8009d48:	08009c75 	.word	0x08009c75

08009d4c <__sfp>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	4607      	mov	r7, r0
 8009d50:	f7ff ffac 	bl	8009cac <__sfp_lock_acquire>
 8009d54:	4b1e      	ldr	r3, [pc, #120]	; (8009dd0 <__sfp+0x84>)
 8009d56:	681e      	ldr	r6, [r3, #0]
 8009d58:	69b3      	ldr	r3, [r6, #24]
 8009d5a:	b913      	cbnz	r3, 8009d62 <__sfp+0x16>
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f7ff ffbd 	bl	8009cdc <__sinit>
 8009d62:	3648      	adds	r6, #72	; 0x48
 8009d64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	d503      	bpl.n	8009d74 <__sfp+0x28>
 8009d6c:	6833      	ldr	r3, [r6, #0]
 8009d6e:	b30b      	cbz	r3, 8009db4 <__sfp+0x68>
 8009d70:	6836      	ldr	r6, [r6, #0]
 8009d72:	e7f7      	b.n	8009d64 <__sfp+0x18>
 8009d74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d78:	b9d5      	cbnz	r5, 8009db0 <__sfp+0x64>
 8009d7a:	4b16      	ldr	r3, [pc, #88]	; (8009dd4 <__sfp+0x88>)
 8009d7c:	60e3      	str	r3, [r4, #12]
 8009d7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d82:	6665      	str	r5, [r4, #100]	; 0x64
 8009d84:	f000 f847 	bl	8009e16 <__retarget_lock_init_recursive>
 8009d88:	f7ff ff96 	bl	8009cb8 <__sfp_lock_release>
 8009d8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d94:	6025      	str	r5, [r4, #0]
 8009d96:	61a5      	str	r5, [r4, #24]
 8009d98:	2208      	movs	r2, #8
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009da0:	f7fd fafa 	bl	8007398 <memset>
 8009da4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009da8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dac:	4620      	mov	r0, r4
 8009dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db0:	3468      	adds	r4, #104	; 0x68
 8009db2:	e7d9      	b.n	8009d68 <__sfp+0x1c>
 8009db4:	2104      	movs	r1, #4
 8009db6:	4638      	mov	r0, r7
 8009db8:	f7ff ff62 	bl	8009c80 <__sfmoreglue>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	6030      	str	r0, [r6, #0]
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d1d5      	bne.n	8009d70 <__sfp+0x24>
 8009dc4:	f7ff ff78 	bl	8009cb8 <__sfp_lock_release>
 8009dc8:	230c      	movs	r3, #12
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	e7ee      	b.n	8009dac <__sfp+0x60>
 8009dce:	bf00      	nop
 8009dd0:	0800a140 	.word	0x0800a140
 8009dd4:	ffff0001 	.word	0xffff0001

08009dd8 <_fwalk_reent>:
 8009dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ddc:	4606      	mov	r6, r0
 8009dde:	4688      	mov	r8, r1
 8009de0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009de4:	2700      	movs	r7, #0
 8009de6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dea:	f1b9 0901 	subs.w	r9, r9, #1
 8009dee:	d505      	bpl.n	8009dfc <_fwalk_reent+0x24>
 8009df0:	6824      	ldr	r4, [r4, #0]
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	d1f7      	bne.n	8009de6 <_fwalk_reent+0xe>
 8009df6:	4638      	mov	r0, r7
 8009df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dfc:	89ab      	ldrh	r3, [r5, #12]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d907      	bls.n	8009e12 <_fwalk_reent+0x3a>
 8009e02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e06:	3301      	adds	r3, #1
 8009e08:	d003      	beq.n	8009e12 <_fwalk_reent+0x3a>
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	47c0      	blx	r8
 8009e10:	4307      	orrs	r7, r0
 8009e12:	3568      	adds	r5, #104	; 0x68
 8009e14:	e7e9      	b.n	8009dea <_fwalk_reent+0x12>

08009e16 <__retarget_lock_init_recursive>:
 8009e16:	4770      	bx	lr

08009e18 <__retarget_lock_acquire_recursive>:
 8009e18:	4770      	bx	lr

08009e1a <__retarget_lock_release_recursive>:
 8009e1a:	4770      	bx	lr

08009e1c <__swhatbuf_r>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	460e      	mov	r6, r1
 8009e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e24:	2900      	cmp	r1, #0
 8009e26:	b096      	sub	sp, #88	; 0x58
 8009e28:	4614      	mov	r4, r2
 8009e2a:	461d      	mov	r5, r3
 8009e2c:	da07      	bge.n	8009e3e <__swhatbuf_r+0x22>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	89b3      	ldrh	r3, [r6, #12]
 8009e34:	061a      	lsls	r2, r3, #24
 8009e36:	d410      	bmi.n	8009e5a <__swhatbuf_r+0x3e>
 8009e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e3c:	e00e      	b.n	8009e5c <__swhatbuf_r+0x40>
 8009e3e:	466a      	mov	r2, sp
 8009e40:	f000 f902 	bl	800a048 <_fstat_r>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	dbf2      	blt.n	8009e2e <__swhatbuf_r+0x12>
 8009e48:	9a01      	ldr	r2, [sp, #4]
 8009e4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e52:	425a      	negs	r2, r3
 8009e54:	415a      	adcs	r2, r3
 8009e56:	602a      	str	r2, [r5, #0]
 8009e58:	e7ee      	b.n	8009e38 <__swhatbuf_r+0x1c>
 8009e5a:	2340      	movs	r3, #64	; 0x40
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	b016      	add	sp, #88	; 0x58
 8009e62:	bd70      	pop	{r4, r5, r6, pc}

08009e64 <__smakebuf_r>:
 8009e64:	898b      	ldrh	r3, [r1, #12]
 8009e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e68:	079d      	lsls	r5, r3, #30
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	d507      	bpl.n	8009e80 <__smakebuf_r+0x1c>
 8009e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	6163      	str	r3, [r4, #20]
 8009e7c:	b002      	add	sp, #8
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	ab01      	add	r3, sp, #4
 8009e82:	466a      	mov	r2, sp
 8009e84:	f7ff ffca 	bl	8009e1c <__swhatbuf_r>
 8009e88:	9900      	ldr	r1, [sp, #0]
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff f987 	bl	80091a0 <_malloc_r>
 8009e92:	b948      	cbnz	r0, 8009ea8 <__smakebuf_r+0x44>
 8009e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e98:	059a      	lsls	r2, r3, #22
 8009e9a:	d4ef      	bmi.n	8009e7c <__smakebuf_r+0x18>
 8009e9c:	f023 0303 	bic.w	r3, r3, #3
 8009ea0:	f043 0302 	orr.w	r3, r3, #2
 8009ea4:	81a3      	strh	r3, [r4, #12]
 8009ea6:	e7e3      	b.n	8009e70 <__smakebuf_r+0xc>
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <__smakebuf_r+0x7c>)
 8009eaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	6020      	str	r0, [r4, #0]
 8009eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	9b00      	ldr	r3, [sp, #0]
 8009eb8:	6163      	str	r3, [r4, #20]
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	6120      	str	r0, [r4, #16]
 8009ebe:	b15b      	cbz	r3, 8009ed8 <__smakebuf_r+0x74>
 8009ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f000 f8d1 	bl	800a06c <_isatty_r>
 8009eca:	b128      	cbz	r0, 8009ed8 <__smakebuf_r+0x74>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f023 0303 	bic.w	r3, r3, #3
 8009ed2:	f043 0301 	orr.w	r3, r3, #1
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	89a0      	ldrh	r0, [r4, #12]
 8009eda:	4305      	orrs	r5, r0
 8009edc:	81a5      	strh	r5, [r4, #12]
 8009ede:	e7cd      	b.n	8009e7c <__smakebuf_r+0x18>
 8009ee0:	08009c75 	.word	0x08009c75

08009ee4 <_malloc_usable_size_r>:
 8009ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee8:	1f18      	subs	r0, r3, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bfbc      	itt	lt
 8009eee:	580b      	ldrlt	r3, [r1, r0]
 8009ef0:	18c0      	addlt	r0, r0, r3
 8009ef2:	4770      	bx	lr

08009ef4 <_raise_r>:
 8009ef4:	291f      	cmp	r1, #31
 8009ef6:	b538      	push	{r3, r4, r5, lr}
 8009ef8:	4604      	mov	r4, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	d904      	bls.n	8009f08 <_raise_r+0x14>
 8009efe:	2316      	movs	r3, #22
 8009f00:	6003      	str	r3, [r0, #0]
 8009f02:	f04f 30ff 	mov.w	r0, #4294967295
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f0a:	b112      	cbz	r2, 8009f12 <_raise_r+0x1e>
 8009f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f10:	b94b      	cbnz	r3, 8009f26 <_raise_r+0x32>
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f830 	bl	8009f78 <_getpid_r>
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f22:	f000 b817 	b.w	8009f54 <_kill_r>
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d00a      	beq.n	8009f40 <_raise_r+0x4c>
 8009f2a:	1c59      	adds	r1, r3, #1
 8009f2c:	d103      	bne.n	8009f36 <_raise_r+0x42>
 8009f2e:	2316      	movs	r3, #22
 8009f30:	6003      	str	r3, [r0, #0]
 8009f32:	2001      	movs	r0, #1
 8009f34:	e7e7      	b.n	8009f06 <_raise_r+0x12>
 8009f36:	2400      	movs	r4, #0
 8009f38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	4798      	blx	r3
 8009f40:	2000      	movs	r0, #0
 8009f42:	e7e0      	b.n	8009f06 <_raise_r+0x12>

08009f44 <raise>:
 8009f44:	4b02      	ldr	r3, [pc, #8]	; (8009f50 <raise+0xc>)
 8009f46:	4601      	mov	r1, r0
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	f7ff bfd3 	b.w	8009ef4 <_raise_r>
 8009f4e:	bf00      	nop
 8009f50:	2000000c 	.word	0x2000000c

08009f54 <_kill_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d07      	ldr	r5, [pc, #28]	; (8009f74 <_kill_r+0x20>)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	f7f7 fd9f 	bl	8001aa4 <_kill>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	d102      	bne.n	8009f70 <_kill_r+0x1c>
 8009f6a:	682b      	ldr	r3, [r5, #0]
 8009f6c:	b103      	cbz	r3, 8009f70 <_kill_r+0x1c>
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	bd38      	pop	{r3, r4, r5, pc}
 8009f72:	bf00      	nop
 8009f74:	20005178 	.word	0x20005178

08009f78 <_getpid_r>:
 8009f78:	f7f7 bd8c 	b.w	8001a94 <_getpid>

08009f7c <__sread>:
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	460c      	mov	r4, r1
 8009f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f84:	f000 f894 	bl	800a0b0 <_read_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	bfab      	itete	ge
 8009f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009f90:	181b      	addge	r3, r3, r0
 8009f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f96:	bfac      	ite	ge
 8009f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f9a:	81a3      	strhlt	r3, [r4, #12]
 8009f9c:	bd10      	pop	{r4, pc}

08009f9e <__swrite>:
 8009f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa2:	461f      	mov	r7, r3
 8009fa4:	898b      	ldrh	r3, [r1, #12]
 8009fa6:	05db      	lsls	r3, r3, #23
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	4616      	mov	r6, r2
 8009fae:	d505      	bpl.n	8009fbc <__swrite+0x1e>
 8009fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f000 f868 	bl	800a08c <_lseek_r>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	4632      	mov	r2, r6
 8009fca:	463b      	mov	r3, r7
 8009fcc:	4628      	mov	r0, r5
 8009fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd2:	f000 b817 	b.w	800a004 <_write_r>

08009fd6 <__sseek>:
 8009fd6:	b510      	push	{r4, lr}
 8009fd8:	460c      	mov	r4, r1
 8009fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fde:	f000 f855 	bl	800a08c <_lseek_r>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	bf15      	itete	ne
 8009fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ff2:	81a3      	strheq	r3, [r4, #12]
 8009ff4:	bf18      	it	ne
 8009ff6:	81a3      	strhne	r3, [r4, #12]
 8009ff8:	bd10      	pop	{r4, pc}

08009ffa <__sclose>:
 8009ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffe:	f000 b813 	b.w	800a028 <_close_r>
	...

0800a004 <_write_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	; (800a024 <_write_r+0x20>)
 800a008:	4604      	mov	r4, r0
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	2200      	movs	r2, #0
 800a010:	602a      	str	r2, [r5, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f7f7 fd7d 	bl	8001b12 <_write>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_write_r+0x1e>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_write_r+0x1e>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	20005178 	.word	0x20005178

0800a028 <_close_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d06      	ldr	r5, [pc, #24]	; (800a044 <_close_r+0x1c>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7f7 fd89 	bl	8001b4a <_close>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_close_r+0x1a>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_close_r+0x1a>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	20005178 	.word	0x20005178

0800a048 <_fstat_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d07      	ldr	r5, [pc, #28]	; (800a068 <_fstat_r+0x20>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	4611      	mov	r1, r2
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	f7f7 fd84 	bl	8001b62 <_fstat>
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	d102      	bne.n	800a064 <_fstat_r+0x1c>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	b103      	cbz	r3, 800a064 <_fstat_r+0x1c>
 800a062:	6023      	str	r3, [r4, #0]
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	bf00      	nop
 800a068:	20005178 	.word	0x20005178

0800a06c <_isatty_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4d06      	ldr	r5, [pc, #24]	; (800a088 <_isatty_r+0x1c>)
 800a070:	2300      	movs	r3, #0
 800a072:	4604      	mov	r4, r0
 800a074:	4608      	mov	r0, r1
 800a076:	602b      	str	r3, [r5, #0]
 800a078:	f7f7 fd83 	bl	8001b82 <_isatty>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_isatty_r+0x1a>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_isatty_r+0x1a>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	20005178 	.word	0x20005178

0800a08c <_lseek_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <_lseek_r+0x20>)
 800a090:	4604      	mov	r4, r0
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	2200      	movs	r2, #0
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f7f7 fd7c 	bl	8001b98 <_lseek>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_lseek_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_lseek_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	20005178 	.word	0x20005178

0800a0b0 <_read_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	; (800a0d0 <_read_r+0x20>)
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	602a      	str	r2, [r5, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f7f7 fd0a 	bl	8001ad8 <_read>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_read_r+0x1e>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_read_r+0x1e>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	20005178 	.word	0x20005178

0800a0d4 <_init>:
 800a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d6:	bf00      	nop
 800a0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0da:	bc08      	pop	{r3}
 800a0dc:	469e      	mov	lr, r3
 800a0de:	4770      	bx	lr

0800a0e0 <_fini>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	bf00      	nop
 800a0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e6:	bc08      	pop	{r3}
 800a0e8:	469e      	mov	lr, r3
 800a0ea:	4770      	bx	lr
