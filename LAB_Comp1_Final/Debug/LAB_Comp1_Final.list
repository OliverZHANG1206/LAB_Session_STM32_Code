
LAB_Comp1_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023fc  08010960  08010960  00020960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d5c  08012d5c  000302ac  2**0
                  CONTENTS
  4 .ARM          00000008  08012d5c  08012d5c  00022d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d64  08012d64  000302ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d64  08012d64  00022d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d68  08012d68  00022d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  08012d6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  200002b0  08013018  000302b0  2**3
                  ALLOC
 10 ._user_heap_stack 00004000  20000bc8  08013018  00030bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035cec  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e6b  00000000  00000000  00065fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002890  00000000  00000000  0006be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002610  00000000  00000000  0006e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000336a4  00000000  00000000  00070cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e77c  00000000  00000000  000a437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ea57  00000000  00000000  000d2af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020154f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd80  00000000  00000000  002015a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010948 	.word	0x08010948

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b4 	.word	0x200002b4
 80001ec:	08010948 	.word	0x08010948

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000ee4:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <MX_ADC1_Init+0xe8>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000eea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f46:	f005 fa2f 	bl	80063a8 <HAL_ADC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f50:	f001 faa6 	bl	80024a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f60:	f005 ffae 	bl	8006ec0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f6a:	f001 fa99 	bl	80024a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_ADC1_Init+0xec>)
 8000f70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f72:	2306      	movs	r3, #6
 8000f74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7a:	237f      	movs	r3, #127	; 0x7f
 8000f7c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000f8c:	f005 fb66 	bl	800665c <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f96:	f001 fa83 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000043c 	.word	0x2000043c
 8000fa8:	50040000 	.word	0x50040000
 8000fac:	10c00010 	.word	0x10c00010

08000fb0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <MX_ADC2_Init+0xbc>)
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <MX_ADC2_Init+0xc0>)
 8000fca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_ADC2_Init+0xbc>)
 8000fce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_ADC2_Init+0xbc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <MX_ADC2_Init+0xbc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_ADC2_Init+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_ADC2_Init+0xbc>)
 8000fe8:	2204      	movs	r2, #4
 8000fea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_ADC2_Init+0xbc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_ADC2_Init+0xbc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_ADC2_Init+0xbc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_ADC2_Init+0xbc>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_ADC2_Init+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_ADC2_Init+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_ADC2_Init+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_ADC2_Init+0xbc>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_ADC2_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <MX_ADC2_Init+0xbc>)
 800102a:	f005 f9bd 	bl	80063a8 <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001034:	f001 fa34 	bl	80024a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_ADC2_Init+0xc4>)
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2306      	movs	r3, #6
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001044:	237f      	movs	r3, #127	; 0x7f
 8001046:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001048:	2304      	movs	r3, #4
 800104a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_ADC2_Init+0xbc>)
 8001056:	f005 fb01 	bl	800665c <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001060:	f001 fa1e 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200003d4 	.word	0x200003d4
 8001070:	50040100 	.word	0x50040100
 8001074:	25b00200 	.word	0x25b00200

08001078 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <HAL_ADC_MspInit+0x11c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12d      	bne.n	80010f6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <HAL_ADC_MspInit+0x120>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a3d      	ldr	r2, [pc, #244]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80010a4:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d10b      	bne.n	80010c4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_ADC_MspInit+0x124>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	4a3a      	ldr	r2, [pc, #232]	; (800119c <HAL_ADC_MspInit+0x124>)
 80010b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_ADC_MspInit+0x124>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <HAL_ADC_MspInit+0x124>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	4a34      	ldr	r2, [pc, #208]	; (800119c <HAL_ADC_MspInit+0x124>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d0:	4b32      	ldr	r3, [pc, #200]	; (800119c <HAL_ADC_MspInit+0x124>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 80010dc:	2318      	movs	r3, #24
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010e0:	230b      	movs	r3, #11
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	482c      	ldr	r0, [pc, #176]	; (80011a0 <HAL_ADC_MspInit+0x128>)
 80010f0:	f006 faec 	bl	80076cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80010f4:	e04a      	b.n	800118c <HAL_ADC_MspInit+0x114>
  else if(adcHandle->Instance==ADC2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <HAL_ADC_MspInit+0x12c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d145      	bne.n	800118c <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a24      	ldr	r2, [pc, #144]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001108:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_ADC_MspInit+0x120>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d10b      	bne.n	800112a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001118:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_ADC_MspInit+0x124>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800115e:	230b      	movs	r3, #11
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <HAL_ADC_MspInit+0x128>)
 800116e:	f006 faad 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001172:	2312      	movs	r3, #18
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001176:	230b      	movs	r3, #11
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f006 faa0 	bl	80076cc <HAL_GPIO_Init>
}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	50040000 	.word	0x50040000
 8001198:	200002cc 	.word	0x200002cc
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000800 	.word	0x48000800
 80011a4:	50040100 	.word	0x50040100

080011a8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_DCMI_Init+0x60>)
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_DCMI_Init+0x64>)
 80011b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_DCMI_Init+0x60>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_DCMI_Init+0x60>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_DCMI_Init+0x60>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_DCMI_Init+0x60>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_DCMI_Init+0x60>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_DCMI_Init+0x60>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_DCMI_Init+0x60>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_DCMI_Init+0x60>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_DCMI_Init+0x60>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_DCMI_Init+0x60>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_DCMI_Init+0x60>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_DCMI_Init+0x60>)
 80011f6:	f006 f857 	bl	80072a8 <HAL_DCMI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001200:	f001 f94e 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200004a4 	.word	0x200004a4
 800120c:	50050000 	.word	0x50050000

08001210 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a33      	ldr	r2, [pc, #204]	; (80012fc <HAL_DCMI_MspInit+0xec>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d160      	bne.n	80012f4 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a2c      	ldr	r2, [pc, #176]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001262:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_DCMI_MspInit+0xf0>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8001292:	f645 7320 	movw	r3, #24352	; 0x5f20
 8001296:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012a4:	230a      	movs	r3, #10
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <HAL_DCMI_MspInit+0xf4>)
 80012b0:	f006 fa0c 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80012b4:	23b0      	movs	r3, #176	; 0xb0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012c4:	230a      	movs	r3, #10
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <HAL_DCMI_MspInit+0xf8>)
 80012d0:	f006 f9fc 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80012d4:	2320      	movs	r3, #32
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012e4:	230a      	movs	r3, #10
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <HAL_DCMI_MspInit+0xfc>)
 80012f0:	f006 f9ec 	bl	80076cc <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	50050000 	.word	0x50050000
 8001300:	40021000 	.word	0x40021000
 8001304:	48001c00 	.word	0x48001c00
 8001308:	48002000 	.word	0x48002000
 800130c:	48001000 	.word	0x48001000

08001310 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001316:	4a31      	ldr	r2, [pc, #196]	; (80013dc <MX_DFSDM1_Init+0xcc>)
 8001318:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 800131c:	2201      	movs	r2, #1
 800131e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001328:	2202      	movs	r2, #2
 800132a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001346:	2204      	movs	r2, #4
 8001348:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001352:	2201      	movs	r2, #1
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001362:	481d      	ldr	r0, [pc, #116]	; (80013d8 <MX_DFSDM1_Init+0xc8>)
 8001364:	f006 f826 	bl	80073b4 <HAL_DFSDM_ChannelInit>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800136e:	f001 f897 	bl	80024a0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <MX_DFSDM1_Init+0xd4>)
 8001376:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 800137a:	2201      	movs	r2, #1
 800137c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 8001386:	2202      	movs	r2, #2
 8001388:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 8001398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80013c2:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_DFSDM1_Init+0xd0>)
 80013c4:	f005 fff6 	bl	80073b4 <HAL_DFSDM_ChannelInit>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 80013ce:	f001 f867 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000508 	.word	0x20000508
 80013dc:	40016020 	.word	0x40016020
 80013e0:	20000540 	.word	0x20000540
 80013e4:	40016040 	.word	0x40016040

080013e8 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ae      	sub	sp, #184	; 0xb8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	228c      	movs	r2, #140	; 0x8c
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00c fc0f 	bl	800dc2c <memset>
  if(DFSDM1_Init == 0)
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d163      	bne.n	80014de <HAL_DFSDM_ChannelMspInit+0xf6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f008 fa36 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001432:	f001 f835 	bl	80024a0 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a20      	ldr	r2, [pc, #128]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x104>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800147e:	2384      	movs	r3, #132	; 0x84
 8001480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001496:	2306      	movs	r3, #6
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x108>)
 80014a4:	f006 f912 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014c2:	2306      	movs	r3, #6
 80014c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80014d0:	f006 f8fc 	bl	80076cc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <HAL_DFSDM_ChannelMspInit+0x100>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <HAL_DFSDM_ChannelMspInit+0x100>)
 80014dc:	6013      	str	r3, [r2, #0]
  }
}
 80014de:	bf00      	nop
 80014e0:	37b8      	adds	r7, #184	; 0xb8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002d0 	.word	0x200002d0
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000400 	.word	0x48000400

080014f8 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80014fe:	463b      	mov	r3, r7
 8001500:	2220      	movs	r2, #32
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f00c fb91 	bl	800dc2c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <MX_FMC_Init+0x150>)
 800150c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001510:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001512:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <MX_FMC_Init+0x150>)
 8001514:	4a4d      	ldr	r2, [pc, #308]	; (800164c <MX_FMC_Init+0x154>)
 8001516:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <MX_FMC_Init+0x150>)
 800151a:	2202      	movs	r2, #2
 800151c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <MX_FMC_Init+0x150>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <MX_FMC_Init+0x150>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <MX_FMC_Init+0x150>)
 800152c:	2210      	movs	r2, #16
 800152e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <MX_FMC_Init+0x150>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <MX_FMC_Init+0x150>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800153c:	4b42      	ldr	r3, [pc, #264]	; (8001648 <MX_FMC_Init+0x150>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <MX_FMC_Init+0x150>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <MX_FMC_Init+0x150>)
 800154a:	2200      	movs	r2, #0
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <MX_FMC_Init+0x150>)
 8001550:	2200      	movs	r2, #0
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <MX_FMC_Init+0x150>)
 8001556:	2200      	movs	r2, #0
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <MX_FMC_Init+0x150>)
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <MX_FMC_Init+0x150>)
 8001562:	2200      	movs	r2, #0
 8001564:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <MX_FMC_Init+0x150>)
 8001568:	2200      	movs	r2, #0
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <MX_FMC_Init+0x150>)
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001572:	230f      	movs	r3, #15
 8001574:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001576:	230f      	movs	r3, #15
 8001578:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800157a:	23ff      	movs	r3, #255	; 0xff
 800157c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800157e:	230f      	movs	r3, #15
 8001580:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001582:	2310      	movs	r3, #16
 8001584:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001586:	2311      	movs	r3, #17
 8001588:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	482c      	ldr	r0, [pc, #176]	; (8001648 <MX_FMC_Init+0x150>)
 8001596:	f009 ff54 	bl	800b442 <HAL_SRAM_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80015a0:	f000 ff7e 	bl	80024a0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <MX_FMC_Init+0x158>)
 80015a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015aa:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <MX_FMC_Init+0x158>)
 80015ae:	4a27      	ldr	r2, [pc, #156]	; (800164c <MX_FMC_Init+0x154>)
 80015b0:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <MX_FMC_Init+0x158>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MX_FMC_Init+0x158>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <MX_FMC_Init+0x158>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_FMC_Init+0x158>)
 80015c6:	2210      	movs	r2, #16
 80015c8:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_FMC_Init+0x158>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_FMC_Init+0x158>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_FMC_Init+0x158>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_FMC_Init+0x158>)
 80015de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_FMC_Init+0x158>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_FMC_Init+0x158>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_FMC_Init+0x158>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_FMC_Init+0x158>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_FMC_Init+0x158>)
 80015fe:	2200      	movs	r2, #0
 8001600:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_FMC_Init+0x158>)
 8001604:	2200      	movs	r2, #0
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_FMC_Init+0x158>)
 800160a:	2200      	movs	r2, #0
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800160e:	230f      	movs	r3, #15
 8001610:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001612:	230f      	movs	r3, #15
 8001614:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001616:	23ff      	movs	r3, #255	; 0xff
 8001618:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800161a:	230f      	movs	r3, #15
 800161c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800161e:	2310      	movs	r3, #16
 8001620:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001622:	2311      	movs	r3, #17
 8001624:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	2200      	movs	r2, #0
 800162e:	4619      	mov	r1, r3
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_FMC_Init+0x158>)
 8001632:	f009 ff06 	bl	800b442 <HAL_SRAM_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 800163c:	f000 ff30 	bl	80024a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000578 	.word	0x20000578
 800164c:	a0000104 	.word	0xa0000104
 8001650:	200005c8 	.word	0x200005c8

08001654 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_FMC_MspInit+0xc4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d14f      	bne.n	8001710 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_FMC_MspInit+0xc4>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_FMC_MspInit+0xc8>)
 8001678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167a:	4a28      	ldr	r2, [pc, #160]	; (800171c <HAL_FMC_MspInit+0xc8>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6513      	str	r3, [r2, #80]	; 0x50
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_FMC_MspInit+0xc8>)
 8001684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 800168e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001692:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a0:	230c      	movs	r3, #12
 80016a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	481d      	ldr	r0, [pc, #116]	; (8001720 <HAL_FMC_MspInit+0xcc>)
 80016aa:	f006 f80f 	bl	80076cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 80016ae:	f240 233f 	movw	r3, #575	; 0x23f
 80016b2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c0:	230c      	movs	r3, #12
 80016c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <HAL_FMC_MspInit+0xd0>)
 80016ca:	f005 ffff 	bl	80076cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 80016ce:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80016d2:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e0:	230c      	movs	r3, #12
 80016e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	480f      	ldr	r0, [pc, #60]	; (8001728 <HAL_FMC_MspInit+0xd4>)
 80016ea:	f005 ffef 	bl	80076cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80016ee:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80016f2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001700:	230c      	movs	r3, #12
 8001702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4808      	ldr	r0, [pc, #32]	; (800172c <HAL_FMC_MspInit+0xd8>)
 800170a:	f005 ffdf 	bl	80076cc <HAL_GPIO_Init>
 800170e:	e000      	b.n	8001712 <HAL_FMC_MspInit+0xbe>
    return;
 8001710:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002d4 	.word	0x200002d4
 800171c:	40021000 	.word	0x40021000
 8001720:	48001000 	.word	0x48001000
 8001724:	48001800 	.word	0x48001800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001400 	.word	0x48001400

08001730 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001738:	f7ff ff8c 	bl	8001654 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MX_GPIO_Init>:
     PC9   ------> SDMMC1_D1
     PC8   ------> SDMMC1_D0
     PF10   ------> ADC3_IN13
*/
void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	; 0x38
 8001748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800175a:	4bb0      	ldr	r3, [pc, #704]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4aaf      	ldr	r2, [pc, #700]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4bad      	ldr	r3, [pc, #692]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001772:	4baa      	ldr	r3, [pc, #680]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4aa9      	ldr	r2, [pc, #676]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4ba7      	ldr	r3, [pc, #668]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178a:	4ba4      	ldr	r3, [pc, #656]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	4aa3      	ldr	r2, [pc, #652]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001796:	4ba1      	ldr	r3, [pc, #644]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	4b9e      	ldr	r3, [pc, #632]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a9d      	ldr	r2, [pc, #628]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b9b      	ldr	r3, [pc, #620]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b98      	ldr	r3, [pc, #608]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a97      	ldr	r2, [pc, #604]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b95      	ldr	r3, [pc, #596]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d2:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a91      	ldr	r2, [pc, #580]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80017ea:	f007 f957 	bl	8008a9c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a8a      	ldr	r2, [pc, #552]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b85      	ldr	r3, [pc, #532]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a84      	ldr	r2, [pc, #528]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a7e      	ldr	r2, [pc, #504]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <MX_GPIO_Init+0x2d8>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2101      	movs	r1, #1
 800183a:	4879      	ldr	r0, [pc, #484]	; (8001a20 <MX_GPIO_Init+0x2dc>)
 800183c:	f006 f9ca 	bl	8007bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2143      	movs	r1, #67	; 0x43
 8001844:	4877      	ldr	r0, [pc, #476]	; (8001a24 <MX_GPIO_Init+0x2e0>)
 8001846:	f006 f9c5 	bl	8007bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	4876      	ldr	r0, [pc, #472]	; (8001a28 <MX_GPIO_Init+0x2e4>)
 8001850:	f006 f9c0 	bl	8007bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	4874      	ldr	r0, [pc, #464]	; (8001a2c <MX_GPIO_Init+0x2e8>)
 800185c:	f006 f9ba 	bl	8007bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI10 PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8001860:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001866:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <MX_GPIO_Init+0x2ec>)
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800186a:	2302      	movs	r3, #2
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	486a      	ldr	r0, [pc, #424]	; (8001a20 <MX_GPIO_Init+0x2dc>)
 8001876:	f005 ff29 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800187a:	2304      	movs	r3, #4
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187e:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <MX_GPIO_Init+0x2ec>)
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	4865      	ldr	r0, [pc, #404]	; (8001a24 <MX_GPIO_Init+0x2e0>)
 800188e:	f005 ff1d 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001892:	2301      	movs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a6:	4619      	mov	r1, r3
 80018a8:	485d      	ldr	r0, [pc, #372]	; (8001a20 <MX_GPIO_Init+0x2dc>)
 80018aa:	f005 ff0f 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 80018ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	4619      	mov	r1, r3
 80018c2:	4857      	ldr	r0, [pc, #348]	; (8001a20 <MX_GPIO_Init+0x2dc>)
 80018c4:	f005 ff02 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80018c8:	2304      	movs	r3, #4
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018d8:	230c      	movs	r3, #12
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4854      	ldr	r0, [pc, #336]	; (8001a34 <MX_GPIO_Init+0x2f0>)
 80018e4:	f005 fef2 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 80018e8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018fa:	230c      	movs	r3, #12
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	4848      	ldr	r0, [pc, #288]	; (8001a28 <MX_GPIO_Init+0x2e4>)
 8001906:	f005 fee1 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	4841      	ldr	r0, [pc, #260]	; (8001a24 <MX_GPIO_Init+0x2e0>)
 800191e:	f005 fed5 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8001922:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001934:	230a      	movs	r3, #10
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f005 fec3 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001946:	2343      	movs	r3, #67	; 0x43
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195a:	4619      	mov	r1, r3
 800195c:	4831      	ldr	r0, [pc, #196]	; (8001a24 <MX_GPIO_Init+0x2e0>)
 800195e:	f005 feb5 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001962:	2340      	movs	r3, #64	; 0x40
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	482b      	ldr	r0, [pc, #172]	; (8001a28 <MX_GPIO_Init+0x2e4>)
 800197a:	f005 fea7 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800197e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_GPIO_Init+0x2ec>)
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4829      	ldr	r0, [pc, #164]	; (8001a38 <MX_GPIO_Init+0x2f4>)
 8001994:	f005 fe9a 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80019aa:	230e      	movs	r3, #14
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f005 fe88 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 80019bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019c2:	230b      	movs	r3, #11
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	4619      	mov	r1, r3
 80019d0:	481a      	ldr	r0, [pc, #104]	; (8001a3c <MX_GPIO_Init+0x2f8>)
 80019d2:	f005 fe7b 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d6:	2301      	movs	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_GPIO_Init+0x2ec>)
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019de:	2302      	movs	r3, #2
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <MX_GPIO_Init+0x2e4>)
 80019ea:	f005 fe6f 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80019ee:	2320      	movs	r3, #32
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_GPIO_Init+0x2ec>)
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <MX_GPIO_Init+0x2e4>)
 8001a02:	f005 fe63 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	e011      	b.n	8001a40 <MX_GPIO_Init+0x2fc>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	48002000 	.word	0x48002000
 8001a24:	48001c00 	.word	0x48001c00
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	10110000 	.word	0x10110000
 8001a34:	48000c00 	.word	0x48000c00
 8001a38:	48001800 	.word	0x48001800
 8001a3c:	48001400 	.word	0x48001400
 8001a40:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <MX_GPIO_Init+0x370>)
 8001a42:	f005 fe43 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001a46:	2304      	movs	r3, #4
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	4817      	ldr	r0, [pc, #92]	; (8001ab8 <MX_GPIO_Init+0x374>)
 8001a5a:	f005 fe37 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	4619      	mov	r1, r3
 8001a76:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <MX_GPIO_Init+0x374>)
 8001a78:	f005 fe28 	bl	80076cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2006      	movs	r0, #6
 8001a82:	f005 fbcc 	bl	800721e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a86:	2006      	movs	r0, #6
 8001a88:	f005 fbe5 	bl	8007256 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2017      	movs	r0, #23
 8001a92:	f005 fbc4 	bl	800721e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a96:	2017      	movs	r0, #23
 8001a98:	f005 fbdd 	bl	8007256 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2028      	movs	r0, #40	; 0x28
 8001aa2:	f005 fbbc 	bl	800721e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aa6:	2028      	movs	r0, #40	; 0x28
 8001aa8:	f005 fbd5 	bl	8007256 <HAL_NVIC_EnableIRQ>

}
 8001aac:	bf00      	nop
 8001aae:	3738      	adds	r7, #56	; 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	48001400 	.word	0x48001400
 8001ab8:	48000400 	.word	0x48000400

08001abc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <MX_I2C1_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <MX_I2C1_Init+0x7c>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001af8:	f006 f8b6 	bl	8007c68 <HAL_I2C_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b02:	f000 fccd 	bl	80024a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4809      	ldr	r0, [pc, #36]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001b0a:	f006 fecb 	bl	80088a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b14:	f000 fcc4 	bl	80024a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001b1c:	f006 ff0d 	bl	800893a <HAL_I2CEx_ConfigDigitalFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f000 fcbb 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000618 	.word	0x20000618
 8001b34:	40005400 	.word	0x40005400
 8001b38:	10909cec 	.word	0x10909cec

08001b3c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <MX_I2C2_Init+0x78>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <MX_I2C2_Init+0x7c>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b76:	480e      	ldr	r0, [pc, #56]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b78:	f006 f876 	bl	8007c68 <HAL_I2C_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b82:	f000 fc8d 	bl	80024a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b86:	2100      	movs	r1, #0
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b8a:	f006 fe8b 	bl	80088a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b94:	f000 fc84 	bl	80024a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b9c:	f006 fecd 	bl	800893a <HAL_I2CEx_ConfigDigitalFilter>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ba6:	f000 fc7b 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000664 	.word	0x20000664
 8001bb4:	40005800 	.word	0x40005800
 8001bb8:	10909cec 	.word	0x10909cec

08001bbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0b0      	sub	sp, #192	; 0xc0
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	228c      	movs	r2, #140	; 0x8c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00c f825 	bl	800dc2c <memset>
  if(i2cHandle->Instance==I2C1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a53      	ldr	r2, [pc, #332]	; (8001d34 <HAL_I2C_MspInit+0x178>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d13c      	bne.n	8001c66 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bec:	2340      	movs	r3, #64	; 0x40
 8001bee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f007 fe4d 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c04:	f000 fc4c 	bl	80024a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	4a4a      	ldr	r2, [pc, #296]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c14:	4b48      	ldr	r3, [pc, #288]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c20:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c28:	2312      	movs	r3, #18
 8001c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c44:	4619      	mov	r1, r3
 8001c46:	483d      	ldr	r0, [pc, #244]	; (8001d3c <HAL_I2C_MspInit+0x180>)
 8001c48:	f005 fd40 	bl	80076cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	4a39      	ldr	r2, [pc, #228]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c56:	6593      	str	r3, [r2, #88]	; 0x58
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c64:	e061      	b.n	8001d2a <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_I2C_MspInit+0x184>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d15c      	bne.n	8001d2a <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f007 fe0b 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001c88:	f000 fc0a 	bl	80024a0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc2:	2312      	movs	r3, #18
 8001cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4818      	ldr	r0, [pc, #96]	; (8001d44 <HAL_I2C_MspInit+0x188>)
 8001ce2:	f005 fcf3 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001ce6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d00:	2304      	movs	r3, #4
 8001d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <HAL_I2C_MspInit+0x180>)
 8001d0e:	f005 fcdd 	bl	80076cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_I2C_MspInit+0x17c>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
}
 8001d2a:	bf00      	nop
 8001d2c:	37c0      	adds	r7, #192	; 0xc0
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40005400 	.word	0x40005400
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	40005800 	.word	0x40005800
 8001d44:	48001c00 	.word	0x48001c00

08001d48 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <HAL_I2C_MspDeInit+0x64>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10f      	bne.n	8001d7a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_I2C_MspDeInit+0x68>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_I2C_MspDeInit+0x68>)
 8001d60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6a:	4812      	ldr	r0, [pc, #72]	; (8001db4 <HAL_I2C_MspDeInit+0x6c>)
 8001d6c:	f005 fe40 	bl	80079f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	4810      	ldr	r0, [pc, #64]	; (8001db4 <HAL_I2C_MspDeInit+0x6c>)
 8001d74:	f005 fe3c 	bl	80079f0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001d78:	e013      	b.n	8001da2 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_I2C_MspDeInit+0x70>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10e      	bne.n	8001da2 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_I2C_MspDeInit+0x68>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_I2C_MspDeInit+0x68>)
 8001d8a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d8e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001d90:	2110      	movs	r1, #16
 8001d92:	480a      	ldr	r0, [pc, #40]	; (8001dbc <HAL_I2C_MspDeInit+0x74>)
 8001d94:	f005 fe2c 	bl	80079f0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001d98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_I2C_MspDeInit+0x6c>)
 8001d9e:	f005 fe27 	bl	80079f0 <HAL_GPIO_DeInit>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40005400 	.word	0x40005400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	48000400 	.word	0x48000400
 8001db8:	40005800 	.word	0x40005800
 8001dbc:	48001c00 	.word	0x48001c00

08001dc0 <speed_calculation>:
int Trigger = 0;
double speed = 0.0f;
double frequency = 0.0f;

void speed_calculation(void)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	frequency = (double)CLKF / ((double)timecircle * PERIOD + (double)TIM3->CNT + 1) + BIAS;
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <speed_calculation+0xe0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbbb 	bl	8000544 <__aeabi_i2d>
 8001dce:	a32a      	add	r3, pc, #168	; (adr r3, 8001e78 <speed_calculation+0xb8>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fc20 	bl	8000618 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4614      	mov	r4, r2
 8001dde:	461d      	mov	r5, r3
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <speed_calculation+0xe4>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb9d 	bl	8000524 <__aeabi_ui2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe fa5b 	bl	80002ac <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <speed_calculation+0xe8>)
 8001e04:	f7fe fa52 	bl	80002ac <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	a11c      	add	r1, pc, #112	; (adr r1, 8001e80 <speed_calculation+0xc0>)
 8001e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e12:	f7fe fd2b 	bl	800086c <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	a31a      	add	r3, pc, #104	; (adr r3, 8001e88 <speed_calculation+0xc8>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fa42 	bl	80002ac <__adddf3>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	491f      	ldr	r1, [pc, #124]	; (8001eac <speed_calculation+0xec>)
 8001e2e:	e9c1 2300 	strd	r2, r3, [r1]
	speed = frequency * LIGHT_SPEED / TRANS_FEQ /2;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <speed_calculation+0xec>)
 8001e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e38:	a315      	add	r3, pc, #84	; (adr r3, 8001e90 <speed_calculation+0xd0>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fbeb 	bl	8000618 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	a313      	add	r3, pc, #76	; (adr r3, 8001e98 <speed_calculation+0xd8>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fd0c 	bl	800086c <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e64:	f7fe fd02 	bl	800086c <__aeabi_ddiv>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4910      	ldr	r1, [pc, #64]	; (8001eb0 <speed_calculation+0xf0>)
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001e72:	bf00      	nop
 8001e74:	bdb0      	pop	{r4, r5, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40c38800 	.word	0x40c38800
 8001e80:	00000000 	.word	0x00000000
 8001e84:	414e8480 	.word	0x414e8480
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	3fc99999 	.word	0x3fc99999
 8001e90:	00000000 	.word	0x00000000
 8001e94:	41b1e1a3 	.word	0x41b1e1a3
 8001e98:	0a000000 	.word	0x0a000000
 8001e9c:	42039ab6 	.word	0x42039ab6
 8001ea0:	200002d8 	.word	0x200002d8
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	3ff00000 	.word	0x3ff00000
 8001eac:	200002f0 	.word	0x200002f0
 8001eb0:	200002e8 	.word	0x200002e8

08001eb4 <LCD_Print>:

void LCD_Print(int status, double frequency, double speed)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6178      	str	r0, [r7, #20]
 8001ebc:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ec0:	ed87 1b00 	vstr	d1, [r7]
	static int last_status = 1;
	static char Display1[20] = "";
	static char Display2[20] = "";
	static char Display3[20] = "";
	if (frequency == -1)
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <LCD_Print+0xb8>)
 8001eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ece:	f7fe fe0b 	bl	8000ae8 <__aeabi_dcmpeq>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <LCD_Print+0x36>
	{
		sprintf(Display1, " Out of Range "); sprintf(Display2, " Out of Range ");
 8001ed8:	4925      	ldr	r1, [pc, #148]	; (8001f70 <LCD_Print+0xbc>)
 8001eda:	4826      	ldr	r0, [pc, #152]	; (8001f74 <LCD_Print+0xc0>)
 8001edc:	f00c fb18 	bl	800e510 <siprintf>
 8001ee0:	4923      	ldr	r1, [pc, #140]	; (8001f70 <LCD_Print+0xbc>)
 8001ee2:	4825      	ldr	r0, [pc, #148]	; (8001f78 <LCD_Print+0xc4>)
 8001ee4:	f00c fb14 	bl	800e510 <siprintf>
 8001ee8:	e00b      	b.n	8001f02 <LCD_Print+0x4e>
	}
	else
	{
		sprintf(Display1, "%9.2f Hz ", frequency); sprintf(Display2, "%9.3f m/s", speed);
 8001eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eee:	4923      	ldr	r1, [pc, #140]	; (8001f7c <LCD_Print+0xc8>)
 8001ef0:	4820      	ldr	r0, [pc, #128]	; (8001f74 <LCD_Print+0xc0>)
 8001ef2:	f00c fb0d 	bl	800e510 <siprintf>
 8001ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001efa:	4921      	ldr	r1, [pc, #132]	; (8001f80 <LCD_Print+0xcc>)
 8001efc:	481e      	ldr	r0, [pc, #120]	; (8001f78 <LCD_Print+0xc4>)
 8001efe:	f00c fb07 	bl	800e510 <siprintf>
	}
	BSP_LCD_DisplayStringAtLine(2,(uint8_t*)Display1);
 8001f02:	491c      	ldr	r1, [pc, #112]	; (8001f74 <LCD_Print+0xc0>)
 8001f04:	2002      	movs	r0, #2
 8001f06:	f003 fe61 	bl	8005bcc <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(6,(uint8_t*)Display2);
 8001f0a:	491b      	ldr	r1, [pc, #108]	; (8001f78 <LCD_Print+0xc4>)
 8001f0c:	2006      	movs	r0, #6
 8001f0e:	f003 fe5d 	bl	8005bcc <BSP_LCD_DisplayStringAtLine>
	if (last_status != status)
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <LCD_Print+0xd0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d01f      	beq.n	8001f5c <LCD_Print+0xa8>
	{
		BSP_LCD_ClearStringLine(8);
 8001f1c:	2008      	movs	r0, #8
 8001f1e:	f003 fd71 	bl	8005a04 <BSP_LCD_ClearStringLine>
		sprintf(Display3, "Status: %s", (status == 0) ? "OFF":"ON");
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <LCD_Print+0x78>
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <LCD_Print+0xd4>)
 8001f2a:	e000      	b.n	8001f2e <LCD_Print+0x7a>
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <LCD_Print+0xd8>)
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4917      	ldr	r1, [pc, #92]	; (8001f90 <LCD_Print+0xdc>)
 8001f32:	4818      	ldr	r0, [pc, #96]	; (8001f94 <LCD_Print+0xe0>)
 8001f34:	f00c faec 	bl	800e510 <siprintf>
		BSP_LCD_SetTextColor((status == 0) ? LCD_COLOR_RED : LCD_COLOR_GREEN);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <LCD_Print+0x90>
 8001f3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f42:	e001      	b.n	8001f48 <LCD_Print+0x94>
 8001f44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 fd1f 	bl	800598c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(8,(uint8_t*)Display3);
 8001f4e:	4911      	ldr	r1, [pc, #68]	; (8001f94 <LCD_Print+0xe0>)
 8001f50:	2008      	movs	r0, #8
 8001f52:	f003 fe3b 	bl	8005bcc <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f003 fd18 	bl	800598c <BSP_LCD_SetTextColor>
	}
	last_status = status;
 8001f5c:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <LCD_Print+0xd0>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	6013      	str	r3, [r2, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	bff00000 	.word	0xbff00000
 8001f70:	08010960 	.word	0x08010960
 8001f74:	200002f8 	.word	0x200002f8
 8001f78:	2000030c 	.word	0x2000030c
 8001f7c:	08010970 	.word	0x08010970
 8001f80:	0801097c 	.word	0x0801097c
 8001f84:	20000000 	.word	0x20000000
 8001f88:	08010988 	.word	0x08010988
 8001f8c:	0801098c 	.word	0x0801098c
 8001f90:	08010990 	.word	0x08010990
 8001f94:	20000320 	.word	0x20000320

08001f98 <LCD_Config>:

void LCD_Config(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    BSP_LCD_Init();
 8001f9c:	f003 fc3c 	bl	8005818 <BSP_LCD_Init>

    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fa0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fa4:	f003 fd02 	bl	80059ac <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font24);
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <LCD_Config+0x40>)
 8001faa:	f003 fd0f 	bl	80059cc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Frequency:");
 8001fae:	490b      	ldr	r1, [pc, #44]	; (8001fdc <LCD_Config+0x44>)
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f003 fe0b 	bl	8005bcc <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(4,(uint8_t*)"Speed:");
 8001fb6:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <LCD_Config+0x48>)
 8001fb8:	2004      	movs	r0, #4
 8001fba:	f003 fe07 	bl	8005bcc <BSP_LCD_DisplayStringAtLine>
    LCD_Print(0,0,0);
 8001fbe:	ed9f 1b04 	vldr	d1, [pc, #16]	; 8001fd0 <LCD_Config+0x38>
 8001fc2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8001fd0 <LCD_Config+0x38>
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff ff74 	bl	8001eb4 <LCD_Print>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
	...
 8001fd8:	200000c0 	.word	0x200000c0
 8001fdc:	0801099c 	.word	0x0801099c
 8001fe0:	080109a8 	.word	0x080109a8

08001fe4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	static int noncnt = 0;
	if (htim->Instance == TIM3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d105      	bne.n	8002002 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		timecircle++;
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ffe:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"---Time out!---\r\n", sizeof("---Time out!---\r\n"));
			noncnt = 0; Startflag = 0; frequency = 0; speed = 0; TIM4->CNT=0;
		}
	}
}
 8002000:	e042      	b.n	8002088 <HAL_TIM_PeriodElapsedCallback+0xa4>
	else if (htim->Instance == TIM4)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d13d      	bne.n	8002088 <HAL_TIM_PeriodElapsedCallback+0xa4>
		if (frequency == -1) noncnt++;
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800200e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002018:	f7fe fd66 	bl	8000ae8 <__aeabi_dcmpeq>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e002      	b.n	8002034 <HAL_TIM_PeriodElapsedCallback+0x50>
		else noncnt = 0;
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
		if (noncnt == 1000)
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800203c:	d124      	bne.n	8002088 <HAL_TIM_PeriodElapsedCallback+0xa4>
			HAL_TIM_Base_Stop(&htim4);
 800203e:	481a      	ldr	r0, [pc, #104]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002040:	f009 fa9e 	bl	800b580 <HAL_TIM_Base_Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204a:	4818      	ldr	r0, [pc, #96]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800204c:	f005 fdc2 	bl	8007bd4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"---Time out!---\r\n", sizeof("---Time out!---\r\n"));
 8002050:	2212      	movs	r2, #18
 8002052:	4917      	ldr	r1, [pc, #92]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002054:	4817      	ldr	r0, [pc, #92]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002056:	f00a fd49 	bl	800caec <HAL_UART_Transmit_IT>
			noncnt = 0; Startflag = 0; frequency = 0; speed = 0; TIM4->CNT=0;
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	490d      	ldr	r1, [pc, #52]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
 8002074:	4911      	ldr	r1, [pc, #68]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	e9c1 2300 	strd	r2, r3, [r1]
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002084:	2200      	movs	r2, #0
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40000400 	.word	0x40000400
 8002094:	200002d8 	.word	0x200002d8
 8002098:	40000800 	.word	0x40000800
 800209c:	200002f0 	.word	0x200002f0
 80020a0:	bff00000 	.word	0xbff00000
 80020a4:	20000334 	.word	0x20000334
 80020a8:	20000918 	.word	0x20000918
 80020ac:	48000400 	.word	0x48000400
 80020b0:	080109b0 	.word	0x080109b0
 80020b4:	20000ab8 	.word	0x20000ab8
 80020b8:	200002dc 	.word	0x200002dc
 80020bc:	200002e8 	.word	0x200002e8

080020c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
	static double last_feq = 0.0;
	if (GPIO_Pin == GPIO_PIN_10)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d0:	d11d      	bne.n	800210e <HAL_GPIO_EXTI_Callback+0x4e>
	{
		Startflag = (Startflag == 0) ? 1: 0;
 80020d2:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <HAL_GPIO_EXTI_Callback+0x188>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf0c      	ite	eq
 80020da:	2301      	moveq	r3, #1
 80020dc:	2300      	movne	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_GPIO_EXTI_Callback+0x188>)
 80020e4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80020e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ea:	4858      	ldr	r0, [pc, #352]	; (800224c <HAL_GPIO_EXTI_Callback+0x18c>)
 80020ec:	f005 fd8a 	bl	8007c04 <HAL_GPIO_TogglePin>

		if (Startflag == 1) HAL_TIM_Base_Start_IT(&htim4);
 80020f0:	4b55      	ldr	r3, [pc, #340]	; (8002248 <HAL_GPIO_EXTI_Callback+0x188>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d103      	bne.n	8002100 <HAL_GPIO_EXTI_Callback+0x40>
 80020f8:	4855      	ldr	r0, [pc, #340]	; (8002250 <HAL_GPIO_EXTI_Callback+0x190>)
 80020fa:	f009 fa69 	bl	800b5d0 <HAL_TIM_Base_Start_IT>
 80020fe:	e092      	b.n	8002226 <HAL_GPIO_EXTI_Callback+0x166>
		else HAL_TIM_Base_Stop(&htim4),TIM4->CNT=0;
 8002100:	4853      	ldr	r0, [pc, #332]	; (8002250 <HAL_GPIO_EXTI_Callback+0x190>)
 8002102:	f009 fa3d 	bl	800b580 <HAL_TIM_Base_Stop>
 8002106:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_GPIO_EXTI_Callback+0x194>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
 800210c:	e08b      	b.n	8002226 <HAL_GPIO_EXTI_Callback+0x166>
	}
	else if(GPIO_Pin == GPIO_PIN_8)
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002114:	d129      	bne.n	800216a <HAL_GPIO_EXTI_Callback+0xaa>
	{
		HAL_TIM_Base_Stop(&htim4); HAL_TIM_Base_Stop(&htim3);
 8002116:	484e      	ldr	r0, [pc, #312]	; (8002250 <HAL_GPIO_EXTI_Callback+0x190>)
 8002118:	f009 fa32 	bl	800b580 <HAL_TIM_Base_Stop>
 800211c:	484e      	ldr	r0, [pc, #312]	; (8002258 <HAL_GPIO_EXTI_Callback+0x198>)
 800211e:	f009 fa2f 	bl	800b580 <HAL_TIM_Base_Stop>
		Startflag = 0; timecircle = 0; Trigger = 0; TIM3->CNT = 0; TIM4->CNT=0; frequency = 0; speed = 0;
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_GPIO_EXTI_Callback+0x188>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_GPIO_EXTI_Callback+0x19c>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_GPIO_EXTI_Callback+0x194>)
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
 8002140:	4949      	ldr	r1, [pc, #292]	; (8002268 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9c1 2300 	strd	r2, r3, [r1]
 800214e:	4947      	ldr	r1, [pc, #284]	; (800226c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002162:	483a      	ldr	r0, [pc, #232]	; (800224c <HAL_GPIO_EXTI_Callback+0x18c>)
 8002164:	f005 fd36 	bl	8007bd4 <HAL_GPIO_WritePin>
 8002168:	e05d      	b.n	8002226 <HAL_GPIO_EXTI_Callback+0x166>
	}
	else if(GPIO_Pin == GPIO_PIN_0)
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d15a      	bne.n	8002226 <HAL_GPIO_EXTI_Callback+0x166>
	{
		if (Startflag == 0) return;
 8002170:	4b35      	ldr	r3, [pc, #212]	; (8002248 <HAL_GPIO_EXTI_Callback+0x188>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d055      	beq.n	8002224 <HAL_GPIO_EXTI_Callback+0x164>

		if (Trigger == 0)
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <HAL_GPIO_EXTI_Callback+0xce>
		{
			HAL_TIM_Base_Start_IT(&htim3);
 8002180:	4835      	ldr	r0, [pc, #212]	; (8002258 <HAL_GPIO_EXTI_Callback+0x198>)
 8002182:	f009 fa25 	bl	800b5d0 <HAL_TIM_Base_Start_IT>
			Trigger = 1;
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e04b      	b.n	8002226 <HAL_GPIO_EXTI_Callback+0x166>
		}
		else if (Trigger == 1)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d147      	bne.n	8002226 <HAL_GPIO_EXTI_Callback+0x166>
		{
			HAL_TIM_Base_Stop(&htim3);
 8002196:	4830      	ldr	r0, [pc, #192]	; (8002258 <HAL_GPIO_EXTI_Callback+0x198>)
 8002198:	f009 f9f2 	bl	800b580 <HAL_TIM_Base_Stop>
			speed_calculation();
 800219c:	f7ff fe10 	bl	8001dc0 <speed_calculation>
			if (frequency > 100000) frequency = last_feq, speed = frequency * LIGHT_SPEED / TRANS_FEQ /2;
 80021a0:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80021a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a6:	a322      	add	r3, pc, #136	; (adr r3, 8002230 <HAL_GPIO_EXTI_Callback+0x170>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fcc4 	bl	8000b38 <__aeabi_dcmpgt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d026      	beq.n	8002204 <HAL_GPIO_EXTI_Callback+0x144>
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	492a      	ldr	r1, [pc, #168]	; (8002268 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80021be:	e9c1 2300 	strd	r2, r3, [r1]
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80021c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c8:	a31b      	add	r3, pc, #108	; (adr r3, 8002238 <HAL_GPIO_EXTI_Callback+0x178>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe fa23 	bl	8000618 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	a319      	add	r3, pc, #100	; (adr r3, 8002240 <HAL_GPIO_EXTI_Callback+0x180>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe fb44 	bl	800086c <__aeabi_ddiv>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f4:	f7fe fb3a 	bl	800086c <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	491b      	ldr	r1, [pc, #108]	; (800226c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80021fe:	e9c1 2300 	strd	r2, r3, [r1]
 8002202:	e005      	b.n	8002210 <HAL_GPIO_EXTI_Callback+0x150>
			else last_feq = frequency;
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	4919      	ldr	r1, [pc, #100]	; (8002270 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800220c:	e9c1 2300 	strd	r2, r3, [r1]
			timecircle = 0; Trigger = 0; TIM3->CNT = 0;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_GPIO_EXTI_Callback+0x19c>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
 8002222:	e000      	b.n	8002226 <HAL_GPIO_EXTI_Callback+0x166>
		if (Startflag == 0) return;
 8002224:	bf00      	nop
		}
	}
}
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	f3af 8000 	nop.w
 8002230:	00000000 	.word	0x00000000
 8002234:	40f86a00 	.word	0x40f86a00
 8002238:	00000000 	.word	0x00000000
 800223c:	41b1e1a3 	.word	0x41b1e1a3
 8002240:	0a000000 	.word	0x0a000000
 8002244:	42039ab6 	.word	0x42039ab6
 8002248:	200002dc 	.word	0x200002dc
 800224c:	48000400 	.word	0x48000400
 8002250:	20000918 	.word	0x20000918
 8002254:	40000800 	.word	0x40000800
 8002258:	20000964 	.word	0x20000964
 800225c:	200002d8 	.word	0x200002d8
 8002260:	200002e0 	.word	0x200002e0
 8002264:	40000400 	.word	0x40000400
 8002268:	200002f0 	.word	0x200002f0
 800226c:	200002e8 	.word	0x200002e8
 8002270:	20000338 	.word	0x20000338

08002274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b093      	sub	sp, #76	; 0x4c
 8002278:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char Txmsg[60] = "";
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	2238      	movs	r2, #56	; 0x38
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f00b fcd0 	bl	800dc2c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800228c:	f003 fe54 	bl	8005f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002290:	f000 f884 	bl	800239c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002294:	f000 f8d4 	bl	8002440 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002298:	f7ff fa54 	bl	8001744 <MX_GPIO_Init>
  MX_ADC1_Init();
 800229c:	f7fe fe10 	bl	8000ec0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80022a0:	f7fe fe86 	bl	8000fb0 <MX_ADC2_Init>
  MX_DCMI_Init();
 80022a4:	f7fe ff80 	bl	80011a8 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80022a8:	f7ff f832 	bl	8001310 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80022ac:	f7ff f924 	bl	80014f8 <MX_FMC_Init>
  MX_I2C1_Init();
 80022b0:	f7ff fc04 	bl	8001abc <MX_I2C1_Init>
  MX_I2C2_Init();
 80022b4:	f7ff fc42 	bl	8001b3c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80022b8:	f000 ff70 	bl	800319c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80022bc:	f000 ff9c 	bl	80031f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80022c0:	f000 ffca 	bl	8003258 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 80022c4:	f000 f8f2 	bl	80024ac <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80022c8:	f000 f97e 	bl	80025c8 <MX_SAI1_Init>
  MX_SPI1_Init();
 80022cc:	f000 fa9e 	bl	800280c <MX_SPI1_Init>
  MX_SPI2_Init();
 80022d0:	f000 fada 	bl	8002888 <MX_SPI2_Init>
  MX_TIM3_Init();
 80022d4:	f000 fd48 	bl	8002d68 <MX_TIM3_Init>
  MX_TIM8_Init();
 80022d8:	f000 fde2 	bl	8002ea0 <MX_TIM8_Init>
  MX_TIM4_Init();
 80022dc:	f000 fd92 	bl	8002e04 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  LCD_Config();
 80022e0:	f7ff fe5a 	bl	8001f98 <LCD_Config>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80022e4:	2104      	movs	r1, #4
 80022e6:	4824      	ldr	r0, [pc, #144]	; (8002378 <main+0x104>)
 80022e8:	f009 fa3a 	bl	800b760 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f2:	4822      	ldr	r0, [pc, #136]	; (800237c <main+0x108>)
 80022f4:	f005 fc6e 	bl	8007bd4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//if (Startflag == 1 && (frequency < 70 || frequency > 1200 || timecircle > 5)) frequency = -1, timecircle = 0;
	LCD_Print(Startflag, frequency, speed);
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <main+0x10c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <main+0x110>)
 80022fe:	ed92 7b00 	vldr	d7, [r2]
 8002302:	4a21      	ldr	r2, [pc, #132]	; (8002388 <main+0x114>)
 8002304:	ed92 6b00 	vldr	d6, [r2]
 8002308:	eeb0 1a46 	vmov.f32	s2, s12
 800230c:	eef0 1a66 	vmov.f32	s3, s13
 8002310:	eeb0 0a47 	vmov.f32	s0, s14
 8002314:	eef0 0a67 	vmov.f32	s1, s15
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fdcb 	bl	8001eb4 <LCD_Print>
	if (Startflag == 0) continue;
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <main+0x10c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d026      	beq.n	8002374 <main+0x100>
	if (frequency == -1)
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <main+0x110>)
 8002328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <main+0x118>)
 8002332:	f7fe fbd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <main+0xd4>
	{
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Out of Range!\r\n", sizeof("Out of Range!\r\n"));
 800233c:	2210      	movs	r2, #16
 800233e:	4914      	ldr	r1, [pc, #80]	; (8002390 <main+0x11c>)
 8002340:	4814      	ldr	r0, [pc, #80]	; (8002394 <main+0x120>)
 8002342:	f00a fbd3 	bl	800caec <HAL_UART_Transmit_IT>
 8002346:	e7d7      	b.n	80022f8 <main+0x84>
	}
	else
	{
		sprintf(Txmsg, "Doppler frequency: %7.2f  Speed: %6.3f m/s \r\n", frequency, speed);
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <main+0x110>)
 800234a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <main+0x114>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	1d3c      	adds	r4, r7, #4
 8002356:	e9cd 2300 	strd	r2, r3, [sp]
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	490e      	ldr	r1, [pc, #56]	; (8002398 <main+0x124>)
 8002360:	4620      	mov	r0, r4
 8002362:	f00c f8d5 	bl	800e510 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)Txmsg, sizeof(Txmsg));
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	223c      	movs	r2, #60	; 0x3c
 800236a:	4619      	mov	r1, r3
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <main+0x120>)
 800236e:	f00a fbbd 	bl	800caec <HAL_UART_Transmit_IT>
 8002372:	e7c1      	b.n	80022f8 <main+0x84>
	if (Startflag == 0) continue;
 8002374:	bf00      	nop
	LCD_Print(Startflag, frequency, speed);
 8002376:	e7bf      	b.n	80022f8 <main+0x84>
 8002378:	200008cc 	.word	0x200008cc
 800237c:	48000400 	.word	0x48000400
 8002380:	200002dc 	.word	0x200002dc
 8002384:	200002f0 	.word	0x200002f0
 8002388:	200002e8 	.word	0x200002e8
 800238c:	bff00000 	.word	0xbff00000
 8002390:	080109c4 	.word	0x080109c4
 8002394:	20000ab8 	.word	0x20000ab8
 8002398:	080109d4 	.word	0x080109d4

0800239c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b096      	sub	sp, #88	; 0x58
 80023a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	2244      	movs	r2, #68	; 0x44
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f00b fc3e 	bl	800dc2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b0:	463b      	mov	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80023be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023c2:	f006 fb15 	bl	80089f0 <HAL_PWREx_ControlVoltageScaling>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023cc:	f000 f868 	bl	80024a0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023d0:	2302      	movs	r3, #2
 80023d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023da:	2340      	movs	r3, #64	; 0x40
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023de:	2302      	movs	r3, #2
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023e2:	2302      	movs	r3, #2
 80023e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80023ea:	230a      	movs	r3, #10
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023ee:	2304      	movs	r3, #4
 80023f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80023f2:	2304      	movs	r3, #4
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023f6:	2302      	movs	r3, #2
 80023f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4618      	mov	r0, r3
 8002400:	f006 fc1e 	bl	8008c40 <HAL_RCC_OscConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800240a:	f000 f849 	bl	80024a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240e:	230f      	movs	r3, #15
 8002410:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002412:	2303      	movs	r3, #3
 8002414:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	2104      	movs	r1, #4
 8002426:	4618      	mov	r0, r3
 8002428:	f007 f830 	bl	800948c <HAL_RCC_ClockConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002432:	f000 f835 	bl	80024a0 <Error_Handler>
  }
}
 8002436:	bf00      	nop
 8002438:	3758      	adds	r7, #88	; 0x58
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0a4      	sub	sp, #144	; 0x90
 8002444:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	228c      	movs	r2, #140	; 0x8c
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f00b fbed 	bl	800dc2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8002452:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002456:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002458:	2300      	movs	r3, #0
 800245a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800245c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002464:	2302      	movs	r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800246c:	2310      	movs	r3, #16
 800246e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV4;
 8002470:	2304      	movs	r3, #4
 8002472:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002474:	2302      	movs	r3, #2
 8002476:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002478:	2304      	movs	r3, #4
 800247a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <PeriphCommonClock_Config+0x5c>)
 800247e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f007 fa08 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800248e:	f000 f807 	bl	80024a0 <Error_Handler>
  }
}
 8002492:	bf00      	nop
 8002494:	3790      	adds	r7, #144	; 0x90
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	01010000 	.word	0x01010000

080024a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a4:	b672      	cpsid	i
}
 80024a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <Error_Handler+0x8>
	...

080024ac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024b2:	4a13      	ldr	r2, [pc, #76]	; (8002500 <MX_QUADSPI_Init+0x54>)
 80024b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024b8:	2202      	movs	r2, #2
 80024ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024be:	2204      	movs	r2, #4
 80024c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024c4:	2210      	movs	r2, #16
 80024c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024ca:	2217      	movs	r2, #23
 80024cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_QUADSPI_Init+0x50>)
 80024e8:	f006 fae8 	bl	8008abc <HAL_QSPI_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80024f2:	f7ff ffd5 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200006b0 	.word	0x200006b0
 8002500:	a0001000 	.word	0xa0001000

08002504 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <HAL_QSPI_MspInit+0xb8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d145      	bne.n	80025b2 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6513      	str	r3, [r2, #80]	; 0x50
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_QSPI_MspInit+0xbc>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800256e:	f640 0303 	movw	r3, #2051	; 0x803
 8002572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002580:	230a      	movs	r3, #10
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	480e      	ldr	r0, [pc, #56]	; (80025c4 <HAL_QSPI_MspInit+0xc0>)
 800258c:	f005 f89e 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8002590:	23c8      	movs	r3, #200	; 0xc8
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025a0:	230a      	movs	r3, #10
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ae:	f005 f88d 	bl	80076cc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	a0001000 	.word	0xa0001000
 80025c0:	40021000 	.word	0x40021000
 80025c4:	48000400 	.word	0x48000400

080025c8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80025cc:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025ce:	4a4e      	ldr	r2, [pc, #312]	; (8002708 <MX_SAI1_Init+0x140>)
 80025d0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80025d8:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025e0:	2240      	movs	r2, #64	; 0x40
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80025e4:	4b47      	ldr	r3, [pc, #284]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80025f0:	4b44      	ldr	r3, [pc, #272]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <MX_SAI1_Init+0x13c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002602:	4b40      	ldr	r3, [pc, #256]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002608:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <MX_SAI1_Init+0x13c>)
 800260a:	4a40      	ldr	r2, [pc, #256]	; (800270c <MX_SAI1_Init+0x144>)
 800260c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002614:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <MX_SAI1_Init+0x13c>)
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002622:	2200      	movs	r2, #0
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002628:	2208      	movs	r2, #8
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800262c:	4b35      	ldr	r3, [pc, #212]	; (8002704 <MX_SAI1_Init+0x13c>)
 800262e:	2201      	movs	r2, #1
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002632:	4b34      	ldr	r3, [pc, #208]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002634:	2200      	movs	r2, #0
 8002636:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002638:	4b32      	ldr	r3, [pc, #200]	; (8002704 <MX_SAI1_Init+0x13c>)
 800263a:	2200      	movs	r2, #0
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800263e:	4b31      	ldr	r3, [pc, #196]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002640:	2200      	movs	r2, #0
 8002642:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002646:	2200      	movs	r2, #0
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800264a:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <MX_SAI1_Init+0x13c>)
 800264c:	2200      	movs	r2, #0
 800264e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002652:	2201      	movs	r2, #1
 8002654:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <MX_SAI1_Init+0x13c>)
 8002658:	2200      	movs	r2, #0
 800265a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800265c:	4829      	ldr	r0, [pc, #164]	; (8002704 <MX_SAI1_Init+0x13c>)
 800265e:	f008 fca1 	bl	800afa4 <HAL_SAI_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8002668:	f7ff ff1a 	bl	80024a0 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <MX_SAI1_Init+0x148>)
 800266e:	4a29      	ldr	r2, [pc, #164]	; (8002714 <MX_SAI1_Init+0x14c>)
 8002670:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <MX_SAI1_Init+0x148>)
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <MX_SAI1_Init+0x148>)
 800267a:	2203      	movs	r2, #3
 800267c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <MX_SAI1_Init+0x148>)
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <MX_SAI1_Init+0x148>)
 8002686:	2200      	movs	r2, #0
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_SAI1_Init+0x148>)
 800268c:	2200      	movs	r2, #0
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_SAI1_Init+0x148>)
 8002692:	2201      	movs	r2, #1
 8002694:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_SAI1_Init+0x148>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_SAI1_Init+0x148>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <MX_SAI1_Init+0x148>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_SAI1_Init+0x148>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_SAI1_Init+0x148>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MX_SAI1_Init+0x148>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_SAI1_Init+0x148>)
 80026bc:	2208      	movs	r2, #8
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <MX_SAI1_Init+0x148>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <MX_SAI1_Init+0x148>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <MX_SAI1_Init+0x148>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_SAI1_Init+0x148>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <MX_SAI1_Init+0x148>)
 80026da:	2200      	movs	r2, #0
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_SAI1_Init+0x148>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <MX_SAI1_Init+0x148>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_SAI1_Init+0x148>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80026f0:	4807      	ldr	r0, [pc, #28]	; (8002710 <MX_SAI1_Init+0x148>)
 80026f2:	f008 fc57 	bl	800afa4 <HAL_SAI_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80026fc:	f7ff fed0 	bl	80024a0 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000780 	.word	0x20000780
 8002708:	40015404 	.word	0x40015404
 800270c:	0002ee00 	.word	0x0002ee00
 8002710:	200006fc 	.word	0x200006fc
 8002714:	40015424 	.word	0x40015424

08002718 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_SAI_MspInit+0xdc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d135      	bne.n	8002796 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_SAI_MspInit+0xe0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002732:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_SAI_MspInit+0xe4>)
 8002734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002736:	4a31      	ldr	r2, [pc, #196]	; (80027fc <HAL_SAI_MspInit+0xe4>)
 8002738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800273c:	6613      	str	r3, [r2, #96]	; 0x60
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <HAL_SAI_MspInit+0xe4>)
 8002740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800274a:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_SAI_MspInit+0xe0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <HAL_SAI_MspInit+0xe0>)
 8002752:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8002754:	2354      	movs	r3, #84	; 0x54
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002764:	230d      	movs	r3, #13
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4824      	ldr	r0, [pc, #144]	; (8002800 <HAL_SAI_MspInit+0xe8>)
 8002770:	f004 ffac 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002786:	230d      	movs	r3, #13
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	481c      	ldr	r0, [pc, #112]	; (8002804 <HAL_SAI_MspInit+0xec>)
 8002792:	f004 ff9b 	bl	80076cc <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_SAI_MspInit+0xf0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d124      	bne.n	80027ea <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_SAI_MspInit+0xe0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10b      	bne.n	80027c0 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_SAI_MspInit+0xe4>)
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	4a13      	ldr	r2, [pc, #76]	; (80027fc <HAL_SAI_MspInit+0xe4>)
 80027ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027b2:	6613      	str	r3, [r2, #96]	; 0x60
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_SAI_MspInit+0xe4>)
 80027b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_SAI_MspInit+0xe0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <HAL_SAI_MspInit+0xe0>)
 80027c8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80027ca:	2308      	movs	r3, #8
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80027da:	230d      	movs	r3, #13
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	4806      	ldr	r0, [pc, #24]	; (8002800 <HAL_SAI_MspInit+0xe8>)
 80027e6:	f004 ff71 	bl	80076cc <HAL_GPIO_Init>

    }
}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	; 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40015404 	.word	0x40015404
 80027f8:	20000340 	.word	0x20000340
 80027fc:	40021000 	.word	0x40021000
 8002800:	48001000 	.word	0x48001000
 8002804:	48000400 	.word	0x48000400
 8002808:	40015424 	.word	0x40015424

0800280c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <MX_SPI1_Init+0x74>)
 8002812:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <MX_SPI1_Init+0x78>)
 8002814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <MX_SPI1_Init+0x74>)
 8002818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800281c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_SPI1_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <MX_SPI1_Init+0x74>)
 8002826:	f44f 7240 	mov.w	r2, #768	; 0x300
 800282a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_SPI1_Init+0x74>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_SPI1_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_SPI1_Init+0x74>)
 800283a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800283e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <MX_SPI1_Init+0x74>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_SPI1_Init+0x74>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_SPI1_Init+0x74>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_SPI1_Init+0x74>)
 8002854:	2200      	movs	r2, #0
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_SPI1_Init+0x74>)
 800285a:	2207      	movs	r2, #7
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_SPI1_Init+0x74>)
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_SPI1_Init+0x74>)
 8002866:	2208      	movs	r2, #8
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_SPI1_Init+0x74>)
 800286c:	f008 fd46 	bl	800b2fc <HAL_SPI_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002876:	f7ff fe13 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000868 	.word	0x20000868
 8002884:	40013000 	.word	0x40013000

08002888 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <MX_SPI2_Init+0x74>)
 800288e:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <MX_SPI2_Init+0x78>)
 8002890:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <MX_SPI2_Init+0x74>)
 8002894:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002898:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <MX_SPI2_Init+0x74>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <MX_SPI2_Init+0x74>)
 80028a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80028a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <MX_SPI2_Init+0x74>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_SPI2_Init+0x74>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_SPI2_Init+0x74>)
 80028b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <MX_SPI2_Init+0x74>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_SPI2_Init+0x74>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <MX_SPI2_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_SPI2_Init+0x74>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_SPI2_Init+0x74>)
 80028d6:	2207      	movs	r2, #7
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_SPI2_Init+0x74>)
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_SPI2_Init+0x74>)
 80028e2:	2208      	movs	r2, #8
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_SPI2_Init+0x74>)
 80028e8:	f008 fd08 	bl	800b2fc <HAL_SPI_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80028f2:	f7ff fdd5 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000804 	.word	0x20000804
 8002900:	40003800 	.word	0x40003800

08002904 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08e      	sub	sp, #56	; 0x38
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_SPI_MspInit+0x14c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d146      	bne.n	80029b4 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002926:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 800292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002930:	6613      	str	r3, [r2, #96]	; 0x60
 8002932:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	4b45      	ldr	r3, [pc, #276]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	4a44      	ldr	r2, [pc, #272]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294a:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4a3e      	ldr	r2, [pc, #248]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800296e:	2330      	movs	r3, #48	; 0x30
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800297e:	2305      	movs	r3, #5
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002986:	4619      	mov	r1, r3
 8002988:	4833      	ldr	r0, [pc, #204]	; (8002a58 <HAL_SPI_MspInit+0x154>)
 800298a:	f004 fe9f 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800298e:	f248 0320 	movw	r3, #32800	; 0x8020
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029a0:	2305      	movs	r3, #5
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a8:	4619      	mov	r1, r3
 80029aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ae:	f004 fe8d 	bl	80076cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029b2:	e049      	b.n	8002a48 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <HAL_SPI_MspInit+0x158>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d144      	bne.n	8002a48 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_SPI_MspInit+0x150>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002a06:	2306      	movs	r3, #6
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a16:	2305      	movs	r3, #5
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1e:	4619      	mov	r1, r3
 8002a20:	480f      	ldr	r0, [pc, #60]	; (8002a60 <HAL_SPI_MspInit+0x15c>)
 8002a22:	f004 fe53 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a38:	2305      	movs	r3, #5
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <HAL_SPI_MspInit+0x154>)
 8002a44:	f004 fe42 	bl	80076cc <HAL_GPIO_Init>
}
 8002a48:	bf00      	nop
 8002a4a:	3738      	adds	r7, #56	; 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40013000 	.word	0x40013000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	48000400 	.word	0x48000400
 8002a5c:	40003800 	.word	0x40003800
 8002a60:	48002000 	.word	0x48002000

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6613      	str	r3, [r2, #96]	; 0x60
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_MspInit+0x44>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <HardFault_Handler+0x4>

08002ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <MemManage_Handler+0x4>

08002abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <BusFault_Handler+0x4>

08002ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <UsageFault_Handler+0x4>

08002aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af8:	f003 fa72 	bl	8005fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b04:	2001      	movs	r0, #1
 8002b06:	f005 f897 	bl	8007c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b12:	2020      	movs	r0, #32
 8002b14:	f005 f890 	bl	8007c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002b18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b1c:	f005 f88c 	bl	8007c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <TIM3_IRQHandler+0x10>)
 8002b2a:	f008 ff1f 	bl	800b96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000964 	.word	0x20000964

08002b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <TIM4_IRQHandler+0x10>)
 8002b3e:	f008 ff15 	bl	800b96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000918 	.word	0x20000918

08002b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <USART2_IRQHandler+0x10>)
 8002b52:	f00a f827 	bl	800cba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000ab8 	.word	0x20000ab8

08002b60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002b64:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b68:	f005 f866 	bl	8007c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002b6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b70:	f005 f862 	bl	8007c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
	return 1;
 8002b7c:	2301      	movs	r3, #1
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <_kill>:

int _kill(int pid, int sig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b92:	f00b f813 	bl	800dbbc <__errno>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2216      	movs	r2, #22
 8002b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_exit>:

void _exit (int status)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ffe7 	bl	8002b88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bba:	e7fe      	b.n	8002bba <_exit+0x12>

08002bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e00a      	b.n	8002be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bce:	f3af 8000 	nop.w
 8002bd2:	4601      	mov	r1, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	60ba      	str	r2, [r7, #8]
 8002bda:	b2ca      	uxtb	r2, r1
 8002bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3301      	adds	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	dbf0      	blt.n	8002bce <_read+0x12>
	}

return len;
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e009      	b.n	8002c1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	60ba      	str	r2, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	dbf1      	blt.n	8002c08 <_write+0x12>
	}
	return len;
 8002c24:	687b      	ldr	r3, [r7, #4]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_close>:

int _close(int file)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	return -1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c56:	605a      	str	r2, [r3, #4]
	return 0;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <_isatty>:

int _isatty(int file)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
	return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <_sbrk+0x5c>)
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <_sbrk+0x60>)
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <_sbrk+0x64>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <_sbrk+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc8:	f00a ff78 	bl	800dbbc <__errno>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	220c      	movs	r2, #12
 8002cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e009      	b.n	8002cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <_sbrk+0x64>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <_sbrk+0x64>)
 8002ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20040000 	.word	0x20040000
 8002cf8:	00002000 	.word	0x00002000
 8002cfc:	20000344 	.word	0x20000344
 8002d00:	20000bc8 	.word	0x20000bc8

08002d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <SystemInit+0x5c>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <SystemInit+0x5c>)
 8002d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <SystemInit+0x60>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <SystemInit+0x60>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <SystemInit+0x60>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <SystemInit+0x60>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <SystemInit+0x60>)
 8002d30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <SystemInit+0x60>)
 8002d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <SystemInit+0x60>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <SystemInit+0x60>)
 8002d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <SystemInit+0x60>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00
 8002d64:	40021000 	.word	0x40021000

08002d68 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <MX_TIM3_Init+0x98>)
 8002d8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002d8e:	2213      	movs	r2, #19
 8002d90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002d9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dac:	4813      	ldr	r0, [pc, #76]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002dae:	f008 fb90 	bl	800b4d2 <HAL_TIM_Base_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002db8:	f7ff fb72 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dc2:	f107 0310 	add.w	r3, r7, #16
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002dca:	f008 ffff 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002dd4:	f7ff fb64 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_TIM3_Init+0x94>)
 8002de6:	f009 fd0f 	bl	800c808 <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002df0:	f7ff fb56 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000964 	.word	0x20000964
 8002e00:	40000400 	.word	0x40000400

08002e04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	f107 0310 	add.w	r3, r7, #16
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <MX_TIM4_Init+0x98>)
 8002e26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e2a:	224f      	movs	r2, #79	; 0x4f
 8002e2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e36:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e48:	4813      	ldr	r0, [pc, #76]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e4a:	f008 fb42 	bl	800b4d2 <HAL_TIM_Base_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e54:	f7ff fb24 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	4619      	mov	r1, r3
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e66:	f008 ffb1 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002e70:	f7ff fb16 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4805      	ldr	r0, [pc, #20]	; (8002e98 <MX_TIM4_Init+0x94>)
 8002e82:	f009 fcc1 	bl	800c808 <HAL_TIMEx_MasterConfigSynchronization>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e8c:	f7ff fb08 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e90:	bf00      	nop
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000918 	.word	0x20000918
 8002e9c:	40000800 	.word	0x40000800

08002ea0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b09a      	sub	sp, #104	; 0x68
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
 8002ed0:	615a      	str	r2, [r3, #20]
 8002ed2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	222c      	movs	r2, #44	; 0x2c
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f00a fea6 	bl	800dc2c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002ee2:	4a44      	ldr	r2, [pc, #272]	; (8002ff4 <MX_TIM8_Init+0x154>)
 8002ee4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8002ee6:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002ee8:	224f      	movs	r2, #79	; 0x4f
 8002eea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eec:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ef8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f0c:	4838      	ldr	r0, [pc, #224]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002f0e:	f008 fae0 	bl	800b4d2 <HAL_TIM_Base_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002f18:	f7ff fac2 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f26:	4619      	mov	r1, r3
 8002f28:	4831      	ldr	r0, [pc, #196]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002f2a:	f008 ff4f 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002f34:	f7ff fab4 	bl	80024a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f38:	482d      	ldr	r0, [pc, #180]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002f3a:	f008 fbb9 	bl	800b6b0 <HAL_TIM_PWM_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002f44:	f7ff faac 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4825      	ldr	r0, [pc, #148]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002f5c:	f009 fc54 	bl	800c808 <HAL_TIMEx_MasterConfigSynchronization>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002f66:	f7ff fa9b 	bl	80024a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f6a:	2360      	movs	r3, #96	; 0x60
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 49;
 8002f6e:	2331      	movs	r3, #49	; 0x31
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f72:	2300      	movs	r3, #0
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f76:	2300      	movs	r3, #0
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4818      	ldr	r0, [pc, #96]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002f90:	f008 fe0c 	bl	800bbac <HAL_TIM_PWM_ConfigChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002f9a:	f7ff fa81 	bl	80024a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002fd4:	f009 fca0 	bl	800c918 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002fde:	f7ff fa5f 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002fe2:	4803      	ldr	r0, [pc, #12]	; (8002ff0 <MX_TIM8_Init+0x150>)
 8002fe4:	f000 f884 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 8002fe8:	bf00      	nop
 8002fea:	3768      	adds	r7, #104	; 0x68
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	200008cc 	.word	0x200008cc
 8002ff4:	40013400 	.word	0x40013400

08002ff8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 031c 	add.w	r3, r7, #28
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a31      	ldr	r2, [pc, #196]	; (80030dc <HAL_TIM_Base_MspInit+0xe4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d114      	bne.n	8003044 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	4a30      	ldr	r2, [pc, #192]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	6593      	str	r3, [r2, #88]	; 0x58
 8003026:	4b2e      	ldr	r3, [pc, #184]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	69bb      	ldr	r3, [r7, #24]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2100      	movs	r1, #0
 8003036:	201d      	movs	r0, #29
 8003038:	f004 f8f1 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800303c:	201d      	movs	r0, #29
 800303e:	f004 f90a 	bl	8007256 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003042:	e047      	b.n	80030d4 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM4)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_TIM_Base_MspInit+0xec>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d131      	bne.n	80030b2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6593      	str	r3, [r2, #88]	; 0x58
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 800307e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003090:	2302      	movs	r3, #2
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	4813      	ldr	r0, [pc, #76]	; (80030e8 <HAL_TIM_Base_MspInit+0xf0>)
 800309c:	f004 fb16 	bl	80076cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	201e      	movs	r0, #30
 80030a6:	f004 f8ba 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030aa:	201e      	movs	r0, #30
 80030ac:	f004 f8d3 	bl	8007256 <HAL_NVIC_EnableIRQ>
}
 80030b0:	e010      	b.n	80030d4 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM8)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <HAL_TIM_Base_MspInit+0xf4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10b      	bne.n	80030d4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 80030c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030c6:	6613      	str	r3, [r2, #96]	; 0x60
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_TIM_Base_MspInit+0xe8>)
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3730      	adds	r7, #48	; 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40000800 	.word	0x40000800
 80030e8:	48000400 	.word	0x48000400
 80030ec:	40013400 	.word	0x40013400

080030f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_TIM_MspPostInit+0x9c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d138      	bne.n	8003184 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003112:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <HAL_TIM_MspPostInit+0xa0>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_TIM_MspPostInit+0xa0>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <HAL_TIM_MspPostInit+0xa0>)
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_TIM_MspPostInit+0xa0>)
 800312c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_TIM_MspPostInit+0xa0>)
 8003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_TIM_MspPostInit+0xa0>)
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    PH15     ------> TIM8_CH3N
    PH13     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003142:	2340      	movs	r3, #64	; 0x40
 8003144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003152:	2303      	movs	r3, #3
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	480d      	ldr	r0, [pc, #52]	; (8003194 <HAL_TIM_MspPostInit+0xa4>)
 800315e:	f004 fab5 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8003162:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003174:	2303      	movs	r3, #3
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <HAL_TIM_MspPostInit+0xa8>)
 8003180:	f004 faa4 	bl	80076cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003184:	bf00      	nop
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40013400 	.word	0x40013400
 8003190:	40021000 	.word	0x40021000
 8003194:	48002000 	.word	0x48002000
 8003198:	48001c00 	.word	0x48001c00

0800319c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031a2:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <MX_LPUART1_UART_Init+0x54>)
 80031a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <MX_LPUART1_UART_Init+0x58>)
 80031aa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031c2:	220c      	movs	r2, #12
 80031c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80031d8:	4804      	ldr	r0, [pc, #16]	; (80031ec <MX_LPUART1_UART_Init+0x50>)
 80031da:	f009 fc39 	bl	800ca50 <HAL_UART_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80031e4:	f7ff f95c 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	200009b0 	.word	0x200009b0
 80031f0:	40008000 	.word	0x40008000
 80031f4:	00033324 	.word	0x00033324

080031f8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <MX_USART1_UART_Init+0x58>)
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <MX_USART1_UART_Init+0x5c>)
 8003200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <MX_USART1_UART_Init+0x58>)
 8003204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_USART1_UART_Init+0x58>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <MX_USART1_UART_Init+0x58>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MX_USART1_UART_Init+0x58>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <MX_USART1_UART_Init+0x58>)
 800321e:	220c      	movs	r2, #12
 8003220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <MX_USART1_UART_Init+0x58>)
 8003224:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003228:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_USART1_UART_Init+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <MX_USART1_UART_Init+0x58>)
 8003232:	2200      	movs	r2, #0
 8003234:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_USART1_UART_Init+0x58>)
 8003238:	2200      	movs	r2, #0
 800323a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800323c:	4804      	ldr	r0, [pc, #16]	; (8003250 <MX_USART1_UART_Init+0x58>)
 800323e:	f009 fc07 	bl	800ca50 <HAL_UART_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8003248:	f7ff f92a 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000a34 	.word	0x20000a34
 8003254:	40013800 	.word	0x40013800

08003258 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <MX_USART2_UART_Init+0x5c>)
 8003260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 8003264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 800327e:	220c      	movs	r2, #12
 8003280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 8003290:	2200      	movs	r2, #0
 8003292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 8003296:	2200      	movs	r2, #0
 8003298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <MX_USART2_UART_Init+0x58>)
 800329c:	f009 fbd8 	bl	800ca50 <HAL_UART_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80032a6:	f7ff f8fb 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000ab8 	.word	0x20000ab8
 80032b4:	40004400 	.word	0x40004400

080032b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b0b2      	sub	sp, #200	; 0xc8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032d4:	228c      	movs	r2, #140	; 0x8c
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f00a fca7 	bl	800dc2c <memset>
  if(uartHandle->Instance==LPUART1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a8a      	ldr	r2, [pc, #552]	; (800350c <HAL_UART_MspInit+0x254>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d13e      	bne.n	8003366 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80032e8:	2320      	movs	r3, #32
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80032ec:	2300      	movs	r3, #0
 80032ee:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032f4:	4618      	mov	r0, r3
 80032f6:	f006 facf 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003300:	f7ff f8ce 	bl	80024a0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003304:	4b82      	ldr	r3, [pc, #520]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	4a81      	ldr	r2, [pc, #516]	; (8003510 <HAL_UART_MspInit+0x258>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003310:	4b7f      	ldr	r3, [pc, #508]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800331c:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <HAL_UART_MspInit+0x258>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003320:	4a7b      	ldr	r2, [pc, #492]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003328:	4b79      	ldr	r3, [pc, #484]	; (8003510 <HAL_UART_MspInit+0x258>)
 800332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8003334:	f005 fbb2 	bl	8008a9c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003338:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800333c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003352:	2308      	movs	r3, #8
 8003354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003358:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800335c:	4619      	mov	r1, r3
 800335e:	486d      	ldr	r0, [pc, #436]	; (8003514 <HAL_UART_MspInit+0x25c>)
 8003360:	f004 f9b4 	bl	80076cc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003364:	e0ce      	b.n	8003504 <HAL_UART_MspInit+0x24c>
  else if(uartHandle->Instance==USART1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6b      	ldr	r2, [pc, #428]	; (8003518 <HAL_UART_MspInit+0x260>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d15f      	bne.n	8003430 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003370:	2301      	movs	r3, #1
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003374:	2300      	movs	r3, #0
 8003376:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800337c:	4618      	mov	r0, r3
 800337e:	f006 fa8b 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003388:	f7ff f88a 	bl	80024a0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800338c:	4b60      	ldr	r3, [pc, #384]	; (8003510 <HAL_UART_MspInit+0x258>)
 800338e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003390:	4a5f      	ldr	r2, [pc, #380]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003396:	6613      	str	r3, [r2, #96]	; 0x60
 8003398:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <HAL_UART_MspInit+0x258>)
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <HAL_UART_MspInit+0x258>)
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a8:	4a59      	ldr	r2, [pc, #356]	; (8003510 <HAL_UART_MspInit+0x258>)
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b0:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_UART_MspInit+0x258>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033bc:	4b54      	ldr	r3, [pc, #336]	; (8003510 <HAL_UART_MspInit+0x258>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c0:	4a53      	ldr	r2, [pc, #332]	; (8003510 <HAL_UART_MspInit+0x258>)
 80033c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c8:	4b51      	ldr	r3, [pc, #324]	; (8003510 <HAL_UART_MspInit+0x258>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80033d4:	f005 fb62 	bl	8008a9c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ea:	2303      	movs	r3, #3
 80033ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033f0:	2307      	movs	r3, #7
 80033f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80033f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4847      	ldr	r0, [pc, #284]	; (800351c <HAL_UART_MspInit+0x264>)
 80033fe:	f004 f965 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8003402:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003416:	2303      	movs	r3, #3
 8003418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800341c:	2307      	movs	r3, #7
 800341e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003422:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003426:	4619      	mov	r1, r3
 8003428:	483a      	ldr	r0, [pc, #232]	; (8003514 <HAL_UART_MspInit+0x25c>)
 800342a:	f004 f94f 	bl	80076cc <HAL_GPIO_Init>
}
 800342e:	e069      	b.n	8003504 <HAL_UART_MspInit+0x24c>
  else if(uartHandle->Instance==USART2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3a      	ldr	r2, [pc, #232]	; (8003520 <HAL_UART_MspInit+0x268>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d164      	bne.n	8003504 <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800343a:	2302      	movs	r3, #2
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800343e:	2300      	movs	r3, #0
 8003440:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003446:	4618      	mov	r0, r3
 8003448:	f006 fa26 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003452:	f7ff f825 	bl	80024a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003456:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <HAL_UART_MspInit+0x258>)
 800345c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003460:	6593      	str	r3, [r2, #88]	; 0x58
 8003462:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	4a27      	ldr	r2, [pc, #156]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_UART_MspInit+0x258>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_UART_MspInit+0x258>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_UART_MspInit+0x258>)
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800349e:	2340      	movs	r3, #64	; 0x40
 80034a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034b6:	2307      	movs	r3, #7
 80034b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4818      	ldr	r0, [pc, #96]	; (8003524 <HAL_UART_MspInit+0x26c>)
 80034c4:	f004 f902 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80034c8:	2304      	movs	r3, #4
 80034ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034da:	2303      	movs	r3, #3
 80034dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034e0:	2307      	movs	r3, #7
 80034e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80034e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034ea:	4619      	mov	r1, r3
 80034ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f0:	f004 f8ec 	bl	80076cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	2026      	movs	r0, #38	; 0x26
 80034fa:	f003 fe90 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034fe:	2026      	movs	r0, #38	; 0x26
 8003500:	f003 fea9 	bl	8007256 <HAL_NVIC_EnableIRQ>
}
 8003504:	bf00      	nop
 8003506:	37c8      	adds	r7, #200	; 0xc8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40008000 	.word	0x40008000
 8003510:	40021000 	.word	0x40021000
 8003514:	48001800 	.word	0x48001800
 8003518:	40013800 	.word	0x40013800
 800351c:	48000400 	.word	0x48000400
 8003520:	40004400 	.word	0x40004400
 8003524:	48000c00 	.word	0x48000c00

08003528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003560 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800352c:	f7ff fbea 	bl	8002d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003530:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003532:	e003      	b.n	800353c <LoopCopyDataInit>

08003534 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003536:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003538:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800353a:	3104      	adds	r1, #4

0800353c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800353c:	480a      	ldr	r0, [pc, #40]	; (8003568 <LoopForever+0xa>)
	ldr	r3, =_edata
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003540:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003542:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003544:	d3f6      	bcc.n	8003534 <CopyDataInit>
	ldr	r2, =_sbss
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003548:	e002      	b.n	8003550 <LoopFillZerobss>

0800354a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800354a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800354c:	f842 3b04 	str.w	r3, [r2], #4

08003550 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <LoopForever+0x16>)
	cmp	r2, r3
 8003552:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003554:	d3f9      	bcc.n	800354a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003556:	f00a fb37 	bl	800dbc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800355a:	f7fe fe8b 	bl	8002274 <main>

0800355e <LoopForever>:

LoopForever:
    b LoopForever
 800355e:	e7fe      	b.n	800355e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003560:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8003564:	08012d6c 	.word	0x08012d6c
	ldr	r0, =_sdata
 8003568:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800356c:	200002ac 	.word	0x200002ac
	ldr	r2, =_sbss
 8003570:	200002b0 	.word	0x200002b0
	ldr	r3, = _ebss
 8003574:	20000bc8 	.word	0x20000bc8

08003578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003578:	e7fe      	b.n	8003578 <ADC1_2_IRQHandler>
	...

0800357c <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 ffd1 	bl	8004530 <mfxstm32l152_GetInstance>
 800358e:	4603      	mov	r3, r0
 8003590:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	2bff      	cmp	r3, #255	; 0xff
 8003596:	d10e      	bne.n	80035b6 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8003598:	2000      	movs	r0, #0
 800359a:	f000 ffc9 	bl	8004530 <mfxstm32l152_GetInstance>
 800359e:	4603      	mov	r3, r0
 80035a0:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 80035a2:	7bbb      	ldrb	r3, [r7, #14]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d806      	bhi.n	80035b6 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 80035a8:	7bbb      	ldrb	r3, [r7, #14]
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	b2d1      	uxtb	r1, r2
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <mfxstm32l152_Init+0x58>)
 80035b0:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 80035b2:	f001 fe87 	bl	80052c4 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f8db 	bl	8003776 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f8fc 	bl	80037c2 <mfxstm32l152_SetIrqOutPinType>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000348 	.word	0x20000348

080035d8 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 ffc3 	bl	8004570 <mfxstm32l152_ReleaseInstance>
 80035ea:	4603      	mov	r3, r0
 80035ec:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2bff      	cmp	r3, #255	; 0xff
 80035f2:	d001      	beq.n	80035f8 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80035f4:	f001 fe76 	bl	80052e4 <MFX_IO_DeInit>
  }
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	2140      	movs	r1, #64	; 0x40
 8003610:	4618      	mov	r0, r3
 8003612:	f001 ff09 	bl	8005428 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8003616:	200a      	movs	r0, #10
 8003618:	f001 ff48 	bl	80054ac <MFX_IO_Delay>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2240      	movs	r2, #64	; 0x40
 8003632:	2140      	movs	r1, #64	; 0x40
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fef7 	bl	8005428 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 800363a:	f001 febd 	bl	80053b8 <MFX_IO_EnableWakeupPin>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff6c 	bl	8004530 <mfxstm32l152_GetInstance>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2bff      	cmp	r3, #255	; 0xff
 8003660:	d101      	bne.n	8003666 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8003662:	f001 fea9 	bl	80053b8 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8003666:	f001 fecb 	bl	8005400 <MFX_IO_Wakeup>
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 800367c:	2001      	movs	r0, #1
 800367e:	f001 ff15 	bl	80054ac <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8003682:	f001 fe1f 	bl	80052c4 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fee0 	bl	8005450 <MFX_IO_Read>
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	b29b      	uxth	r3, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	460a      	mov	r2, r1
 80036aa:	80fb      	strh	r3, [r7, #6]
 80036ac:	4613      	mov	r3, r2
 80036ae:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	2142      	movs	r1, #66	; 0x42
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fec9 	bl	8005450 <MFX_IO_Read>
 80036be:	4603      	mov	r3, r0
 80036c0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	797b      	ldrb	r3, [r7, #5]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2142      	movs	r1, #66	; 0x42
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fea9 	bl	8005428 <MFX_IO_Write>
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	460a      	mov	r2, r1
 80036e8:	80fb      	strh	r3, [r7, #6]
 80036ea:	4613      	mov	r3, r2
 80036ec:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2142      	movs	r1, #66	; 0x42
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 feaa 	bl	8005450 <MFX_IO_Read>
 80036fc:	4603      	mov	r3, r0
 80036fe:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8003700:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003704:	43db      	mvns	r3, r3
 8003706:	b25a      	sxtb	r2, r3
 8003708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370c:	4013      	ands	r3, r2
 800370e:	b25b      	sxtb	r3, r3
 8003710:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	2142      	movs	r1, #66	; 0x42
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fe85 	bl	8005428 <MFX_IO_Write>
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	460a      	mov	r2, r1
 8003730:	80fb      	strh	r3, [r7, #6]
 8003732:	4613      	mov	r3, r2
 8003734:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	2108      	movs	r1, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fe88 	bl	8005450 <MFX_IO_Read>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	797b      	ldrb	r3, [r7, #5]
 8003746:	4013      	ands	r3, r2
 8003748:	b2db      	uxtb	r3, r3
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	460a      	mov	r2, r1
 800375c:	80fb      	strh	r3, [r7, #6]
 800375e:	4613      	mov	r3, r2
 8003760:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8003762:	797a      	ldrb	r2, [r7, #5]
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	2144      	movs	r1, #68	; 0x44
 8003768:	4618      	mov	r0, r3
 800376a:	f001 fe5d 	bl	8005428 <MFX_IO_Write>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	460a      	mov	r2, r1
 8003780:	80fb      	strh	r3, [r7, #6]
 8003782:	4613      	mov	r3, r2
 8003784:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	2141      	movs	r1, #65	; 0x41
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fe5e 	bl	8005450 <MFX_IO_Read>
 8003794:	4603      	mov	r3, r0
 8003796:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	f023 0302 	bic.w	r3, r3, #2
 800379e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	797b      	ldrb	r3, [r7, #5]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2141      	movs	r1, #65	; 0x41
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fe3a 	bl	8005428 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80037b4:	2001      	movs	r0, #1
 80037b6:	f001 fe79 	bl	80054ac <MFX_IO_Delay>

}
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	460a      	mov	r2, r1
 80037cc:	80fb      	strh	r3, [r7, #6]
 80037ce:	4613      	mov	r3, r2
 80037d0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	2141      	movs	r1, #65	; 0x41
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fe38 	bl	8005450 <MFX_IO_Read>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	797b      	ldrb	r3, [r7, #5]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	2141      	movs	r1, #65	; 0x41
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fe14 	bl	8005428 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003800:	2001      	movs	r0, #1
 8003802:	f001 fe53 	bl	80054ac <MFX_IO_Delay>

}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	6039      	str	r1, [r7, #0]
 8003818:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fe16 	bl	8005450 <MFX_IO_Read>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003836:	d304      	bcc.n	8003842 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	f043 0308 	orr.w	r3, r3, #8
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e003      	b.n	800384a <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	f023 0308 	bic.w	r3, r3, #8
 8003848:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	2140      	movs	r1, #64	; 0x40
 8003850:	4618      	mov	r0, r3
 8003852:	f001 fde9 	bl	8005428 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003856:	2001      	movs	r0, #1
 8003858:	f001 fe28 	bl	80054ac <MFX_IO_Delay>
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	80fb      	strh	r3, [r7, #6]
 8003870:	4613      	mov	r3, r2
 8003872:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8003878:	797b      	ldrb	r3, [r7, #5]
 800387a:	2b17      	cmp	r3, #23
 800387c:	f200 82d4 	bhi.w	8003e28 <mfxstm32l152_IO_Config+0x5c4>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <mfxstm32l152_IO_Config+0x24>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003919 	.word	0x08003919
 800388c:	080039a9 	.word	0x080039a9
 8003890:	08003a69 	.word	0x08003a69
 8003894:	08003b59 	.word	0x08003b59
 8003898:	08003c49 	.word	0x08003c49
 800389c:	08003d39 	.word	0x08003d39
 80038a0:	080038e9 	.word	0x080038e9
 80038a4:	080038e9 	.word	0x080038e9
 80038a8:	08003949 	.word	0x08003949
 80038ac:	08003979 	.word	0x08003979
 80038b0:	08003e29 	.word	0x08003e29
 80038b4:	08003a39 	.word	0x08003a39
 80038b8:	08003a09 	.word	0x08003a09
 80038bc:	08003e29 	.word	0x08003e29
 80038c0:	080039d9 	.word	0x080039d9
 80038c4:	080039a9 	.word	0x080039a9
 80038c8:	08003ab9 	.word	0x08003ab9
 80038cc:	08003b09 	.word	0x08003b09
 80038d0:	08003ba9 	.word	0x08003ba9
 80038d4:	08003bf9 	.word	0x08003bf9
 80038d8:	08003c99 	.word	0x08003c99
 80038dc:	08003ce9 	.word	0x08003ce9
 80038e0:	08003d89 	.word	0x08003d89
 80038e4:	08003dd9 	.word	0x08003dd9
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	6839      	ldr	r1, [r7, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fb67 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2200      	movs	r2, #0
 80038f6:	6839      	ldr	r1, [r7, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fa9d 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80038fe:	88f8      	ldrh	r0, [r7, #6]
 8003900:	2300      	movs	r3, #0
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	2164      	movs	r1, #100	; 0x64
 8003906:	f000 fe57 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800390a:	88f8      	ldrh	r0, [r7, #6]
 800390c:	2300      	movs	r3, #0
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	2168      	movs	r1, #104	; 0x68
 8003912:	f000 fe51 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003916:	e28a      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fb4f 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2200      	movs	r2, #0
 8003926:	6839      	ldr	r1, [r7, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa85 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800392e:	88f8      	ldrh	r0, [r7, #6]
 8003930:	2300      	movs	r3, #0
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	2164      	movs	r1, #100	; 0x64
 8003936:	f000 fe3f 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800393a:	88f8      	ldrh	r0, [r7, #6]
 800393c:	2301      	movs	r3, #1
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	2168      	movs	r1, #104	; 0x68
 8003942:	f000 fe39 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003946:	e272      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fb37 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	2200      	movs	r2, #0
 8003956:	6839      	ldr	r1, [r7, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fa6d 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800395e:	88f8      	ldrh	r0, [r7, #6]
 8003960:	2301      	movs	r3, #1
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	2164      	movs	r1, #100	; 0x64
 8003966:	f000 fe27 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800396a:	88f8      	ldrh	r0, [r7, #6]
 800396c:	2301      	movs	r3, #1
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	2168      	movs	r1, #104	; 0x68
 8003972:	f000 fe21 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003976:	e25a      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fb1f 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2200      	movs	r2, #0
 8003986:	6839      	ldr	r1, [r7, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fa55 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800398e:	88f8      	ldrh	r0, [r7, #6]
 8003990:	2301      	movs	r3, #1
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	2164      	movs	r1, #100	; 0x64
 8003996:	f000 fe0f 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800399a:	88f8      	ldrh	r0, [r7, #6]
 800399c:	2300      	movs	r3, #0
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	2168      	movs	r1, #104	; 0x68
 80039a2:	f000 fe09 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 80039a6:	e242      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fb07 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	2201      	movs	r2, #1
 80039b6:	6839      	ldr	r1, [r7, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fa3d 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80039be:	88f8      	ldrh	r0, [r7, #6]
 80039c0:	2300      	movs	r3, #0
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	2164      	movs	r1, #100	; 0x64
 80039c6:	f000 fdf7 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80039ca:	88f8      	ldrh	r0, [r7, #6]
 80039cc:	2300      	movs	r3, #0
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	2168      	movs	r1, #104	; 0x68
 80039d2:	f000 fdf1 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 80039d6:	e22a      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 faef 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2201      	movs	r2, #1
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fa25 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80039ee:	88f8      	ldrh	r0, [r7, #6]
 80039f0:	2300      	movs	r3, #0
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	2164      	movs	r1, #100	; 0x64
 80039f6:	f000 fddf 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80039fa:	88f8      	ldrh	r0, [r7, #6]
 80039fc:	2301      	movs	r3, #1
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	2168      	movs	r1, #104	; 0x68
 8003a02:	f000 fdd9 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003a06:	e212      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	6839      	ldr	r1, [r7, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fad7 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	2201      	movs	r2, #1
 8003a16:	6839      	ldr	r1, [r7, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fa0d 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003a1e:	88f8      	ldrh	r0, [r7, #6]
 8003a20:	2301      	movs	r3, #1
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	2164      	movs	r1, #100	; 0x64
 8003a26:	f000 fdc7 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003a2a:	88f8      	ldrh	r0, [r7, #6]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	2168      	movs	r1, #104	; 0x68
 8003a32:	f000 fdc1 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003a36:	e1fa      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	6839      	ldr	r1, [r7, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fabf 	bl	8003fc0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2201      	movs	r2, #1
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 f9f5 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003a4e:	88f8      	ldrh	r0, [r7, #6]
 8003a50:	2301      	movs	r3, #1
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	2164      	movs	r1, #100	; 0x64
 8003a56:	f000 fdaf 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003a5a:	88f8      	ldrh	r0, [r7, #6]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	2168      	movs	r1, #104	; 0x68
 8003a62:	f000 fda9 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003a66:	e1e2      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fa7a 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	2200      	movs	r2, #0
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f9de 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003a7c:	88f8      	ldrh	r0, [r7, #6]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	2164      	movs	r1, #100	; 0x64
 8003a84:	f000 fd98 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003a88:	88f8      	ldrh	r0, [r7, #6]
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	2168      	movs	r1, #104	; 0x68
 8003a90:	f000 fd92 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	2201      	movs	r2, #1
 8003a98:	6839      	ldr	r1, [r7, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9de 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f9ed 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	6839      	ldr	r1, [r7, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fa75 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003ab6:	e1ba      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa52 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f9b6 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003acc:	88f8      	ldrh	r0, [r7, #6]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	2164      	movs	r1, #100	; 0x64
 8003ad4:	f000 fd70 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003ad8:	88f8      	ldrh	r0, [r7, #6]
 8003ada:	2301      	movs	r3, #1
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	2168      	movs	r1, #104	; 0x68
 8003ae0:	f000 fd6a 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f9b6 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	2201      	movs	r2, #1
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f9c5 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fa4d 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003b06:	e192      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fa2a 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2200      	movs	r2, #0
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f98e 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003b1c:	88f8      	ldrh	r0, [r7, #6]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	2164      	movs	r1, #100	; 0x64
 8003b24:	f000 fd48 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003b28:	88f8      	ldrh	r0, [r7, #6]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	2168      	movs	r1, #104	; 0x68
 8003b30:	f000 fd42 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	2201      	movs	r2, #1
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f98e 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2201      	movs	r2, #1
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f99d 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	6839      	ldr	r1, [r7, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fa25 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003b56:	e16a      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa02 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	2200      	movs	r2, #0
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f966 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003b6c:	88f8      	ldrh	r0, [r7, #6]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	f000 fd20 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003b78:	88f8      	ldrh	r0, [r7, #6]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	2168      	movs	r1, #104	; 0x68
 8003b80:	f000 fd1a 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	2201      	movs	r2, #1
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f966 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	2200      	movs	r2, #0
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f975 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f9fd 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003ba6:	e142      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f9da 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f93e 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003bbc:	88f8      	ldrh	r0, [r7, #6]
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	2164      	movs	r1, #100	; 0x64
 8003bc4:	f000 fcf8 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003bc8:	88f8      	ldrh	r0, [r7, #6]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	2168      	movs	r1, #104	; 0x68
 8003bd0:	f000 fcf2 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	6839      	ldr	r1, [r7, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f93e 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2200      	movs	r2, #0
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f94d 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	6839      	ldr	r1, [r7, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f9d5 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003bf6:	e11a      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f9b2 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	2200      	movs	r2, #0
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f916 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003c0c:	88f8      	ldrh	r0, [r7, #6]
 8003c0e:	2301      	movs	r3, #1
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	2164      	movs	r1, #100	; 0x64
 8003c14:	f000 fcd0 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003c18:	88f8      	ldrh	r0, [r7, #6]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	2168      	movs	r1, #104	; 0x68
 8003c20:	f000 fcca 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2201      	movs	r2, #1
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f916 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	2200      	movs	r2, #0
 8003c34:	6839      	ldr	r1, [r7, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f925 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	6839      	ldr	r1, [r7, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f9ad 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003c46:	e0f2      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f98a 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	2200      	movs	r2, #0
 8003c54:	6839      	ldr	r1, [r7, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f8ee 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003c5c:	88f8      	ldrh	r0, [r7, #6]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	2164      	movs	r1, #100	; 0x64
 8003c64:	f000 fca8 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003c68:	88f8      	ldrh	r0, [r7, #6]
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	2168      	movs	r1, #104	; 0x68
 8003c70:	f000 fca2 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	2200      	movs	r2, #0
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f8ee 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	2200      	movs	r2, #0
 8003c84:	6839      	ldr	r1, [r7, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f8fd 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	6839      	ldr	r1, [r7, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f985 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003c96:	e0ca      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f962 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f8c6 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003cac:	88f8      	ldrh	r0, [r7, #6]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	f000 fc80 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003cb8:	88f8      	ldrh	r0, [r7, #6]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	2168      	movs	r1, #104	; 0x68
 8003cc0:	f000 fc7a 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f8c6 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f8d5 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f95d 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003ce6:	e0a2      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f93a 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f89e 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003cfc:	88f8      	ldrh	r0, [r7, #6]
 8003cfe:	2301      	movs	r3, #1
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	2164      	movs	r1, #100	; 0x64
 8003d04:	f000 fc58 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003d08:	88f8      	ldrh	r0, [r7, #6]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	2168      	movs	r1, #104	; 0x68
 8003d10:	f000 fc52 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	2200      	movs	r2, #0
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f89e 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	2200      	movs	r2, #0
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f8ad 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f935 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003d36:	e07a      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f912 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2200      	movs	r2, #0
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f876 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003d4c:	88f8      	ldrh	r0, [r7, #6]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	f000 fc30 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003d58:	88f8      	ldrh	r0, [r7, #6]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	2168      	movs	r1, #104	; 0x68
 8003d60:	f000 fc2a 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	2200      	movs	r2, #0
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f876 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2201      	movs	r2, #1
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f885 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f90d 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003d86:	e052      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f8ea 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	2200      	movs	r2, #0
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f84e 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003d9c:	88f8      	ldrh	r0, [r7, #6]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	2164      	movs	r1, #100	; 0x64
 8003da4:	f000 fc08 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003da8:	88f8      	ldrh	r0, [r7, #6]
 8003daa:	2301      	movs	r3, #1
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	2168      	movs	r1, #104	; 0x68
 8003db0:	f000 fc02 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2200      	movs	r2, #0
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f84e 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f85d 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f8e5 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003dd6:	e02a      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f8c2 	bl	8003f64 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2200      	movs	r2, #0
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f826 	bl	8003e38 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003dec:	88f8      	ldrh	r0, [r7, #6]
 8003dee:	2301      	movs	r3, #1
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	2164      	movs	r1, #100	; 0x64
 8003df4:	f000 fbe0 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003df8:	88f8      	ldrh	r0, [r7, #6]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	2168      	movs	r1, #104	; 0x68
 8003e00:	f000 fbda 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	2200      	movs	r2, #0
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f826 	bl	8003e5c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	2201      	movs	r2, #1
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f835 	bl	8003e86 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f8bd 	bl	8003fa0 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003e26:	e002      	b.n	8003e2e <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8003e28:	797b      	ldrb	r3, [r7, #5]
 8003e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8003e2c:	bf00      	nop
  }

  return error_code;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	80fb      	strh	r3, [r7, #6]
 8003e44:	4613      	mov	r3, r2
 8003e46:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8003e48:	797b      	ldrb	r3, [r7, #5]
 8003e4a:	88f8      	ldrh	r0, [r7, #6]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	2160      	movs	r1, #96	; 0x60
 8003e50:	f000 fbb2 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	80fb      	strh	r3, [r7, #6]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8003e6c:	797b      	ldrb	r3, [r7, #5]
 8003e6e:	88f8      	ldrh	r0, [r7, #6]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	214c      	movs	r1, #76	; 0x4c
 8003e74:	f000 fba0 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003e78:	2001      	movs	r0, #1
 8003e7a:	f001 fb17 	bl	80054ac <MFX_IO_Delay>
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	6039      	str	r1, [r7, #0]
 8003e90:	80fb      	strh	r3, [r7, #6]
 8003e92:	4613      	mov	r3, r2
 8003e94:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8003e96:	797b      	ldrb	r3, [r7, #5]
 8003e98:	88f8      	ldrh	r0, [r7, #6]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	2150      	movs	r1, #80	; 0x50
 8003e9e:	f000 fb8b 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	f001 fb02 	bl	80054ac <MFX_IO_Delay>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	80fb      	strh	r3, [r7, #6]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8003ec0:	797b      	ldrb	r3, [r7, #5]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8003ec6:	88f8      	ldrh	r0, [r7, #6]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	216c      	movs	r1, #108	; 0x6c
 8003ece:	f000 fb73 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8003ed2:	e005      	b.n	8003ee0 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8003ed4:	88f8      	ldrh	r0, [r7, #6]
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	2170      	movs	r1, #112	; 0x70
 8003edc:	f000 fb6c 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	2110      	movs	r1, #16
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 fa9f 	bl	8005450 <MFX_IO_Read>
 8003f12:	4603      	mov	r3, r0
 8003f14:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	2111      	movs	r1, #17
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fa93 	bl	8005450 <MFX_IO_Read>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	2112      	movs	r1, #18
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fa87 	bl	8005450 <MFX_IO_Read>
 8003f42:	4603      	mov	r3, r0
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	4413      	add	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4013      	ands	r3, r2
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003f6e:	f001 f9f5 	bl	800535c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fb92 	bl	80036a0 <mfxstm32l152_EnableITSource>
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fba3 	bl	80036de <mfxstm32l152_DisableITSource>
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	6039      	str	r1, [r7, #0]
 8003faa:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8003fac:	88f8      	ldrh	r0, [r7, #6]
 8003fae:	2301      	movs	r3, #1
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	2148      	movs	r1, #72	; 0x48
 8003fb4:	f000 fb00 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8003fcc:	88f8      	ldrh	r0, [r7, #6]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	2148      	movs	r1, #72	; 0x48
 8003fd4:	f000 faf0 	bl	80045b8 <mfxstm32l152_reg24_setPinValue>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d006      	beq.n	800400e <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	210c      	movs	r1, #12
 8004004:	4618      	mov	r0, r3
 8004006:	f001 fa23 	bl	8005450 <MFX_IO_Read>
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004014:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	210d      	movs	r1, #13
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fa15 	bl	8005450 <MFX_IO_Read>
 8004026:	4603      	mov	r3, r0
 8004028:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d006      	beq.n	8004042 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	210e      	movs	r1, #14
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fa09 	bl	8005450 <MFX_IO_Read>
 800403e:	4603      	mov	r3, r0
 8004040:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	89bb      	ldrh	r3, [r7, #12]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	4413      	add	r3, r2
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	4413      	add	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4013      	ands	r3, r2
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	6039      	str	r1, [r7, #0]
 800406c:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2154      	movs	r1, #84	; 0x54
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f9cc 	bl	8005428 <MFX_IO_Write>
  }
  if (pin_8_15)
 8004090:	7bbb      	ldrb	r3, [r7, #14]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8004096:	7bba      	ldrb	r2, [r7, #14]
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	2155      	movs	r1, #85	; 0x55
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f9c3 	bl	8005428 <MFX_IO_Write>
  }
  if (pin_16_23)
 80040a2:	7b7b      	ldrb	r3, [r7, #13]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 80040a8:	7b7a      	ldrb	r2, [r7, #13]
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2156      	movs	r1, #86	; 0x56
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f9ba 	bl	8005428 <MFX_IO_Write>
  }
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 f9bc 	bl	8005450 <MFX_IO_Read>
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 f99a 	bl	8005428 <MFX_IO_Write>
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80040fc:	b084      	sub	sp, #16
 80040fe:	b590      	push	{r4, r7, lr}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	4604      	mov	r4, r0
 8004106:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800410a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800410e:	4623      	mov	r3, r4
 8004110:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	b29b      	uxth	r3, r3
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	4618      	mov	r0, r3
 8004124:	f001 f994 	bl	8005450 <MFX_IO_Read>
 8004128:	4603      	mov	r3, r0
 800412a:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 800412c:	7bbb      	ldrb	r3, [r7, #14]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8004136:	7bbb      	ldrb	r3, [r7, #14]
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	b29b      	uxth	r3, r3
 8004144:	7bba      	ldrb	r2, [r7, #14]
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	4618      	mov	r0, r3
 800414a:	f001 f96d 	bl	8005428 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 800414e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 030e 	and.w	r3, r3, #14
 800415a:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 800415c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004160:	b25b      	sxtb	r3, r3
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	b25a      	sxtb	r2, r3
 8004168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416c:	4313      	orrs	r3, r2
 800416e:	b25b      	sxtb	r3, r3
 8004170:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8004172:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004176:	b25b      	sxtb	r3, r3
 8004178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800417c:	b25a      	sxtb	r2, r3
 800417e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004182:	4313      	orrs	r3, r2
 8004184:	b25b      	sxtb	r3, r3
 8004186:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	b29b      	uxth	r3, r3
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f948 	bl	8005428 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004198:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041a2:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 80041a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80041a8:	b25b      	sxtb	r3, r3
 80041aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ae:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	2181      	movs	r1, #129	; 0x81
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 f931 	bl	8005428 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 80041c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	2182      	movs	r1, #130	; 0x82
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f925 	bl	8005428 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 80041de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041e0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	2183      	movs	r1, #131	; 0x83
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 f91b 	bl	8005428 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80041f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	b29b      	uxth	r3, r3
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	2184      	movs	r1, #132	; 0x84
 8004204:	4618      	mov	r0, r3
 8004206:	f001 f90f 	bl	8005428 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 800420a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800420c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	b29b      	uxth	r3, r3
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	2185      	movs	r1, #133	; 0x85
 8004218:	4618      	mov	r0, r3
 800421a:	f001 f905 	bl	8005428 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 800421e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	b29b      	uxth	r3, r3
 8004224:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	2186      	movs	r1, #134	; 0x86
 8004230:	4618      	mov	r0, r3
 8004232:	f001 f8f9 	bl	8005428 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8004236:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004238:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	b29b      	uxth	r3, r3
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	2187      	movs	r1, #135	; 0x87
 8004244:	4618      	mov	r0, r3
 8004246:	f001 f8ef 	bl	8005428 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 800424a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	b29b      	uxth	r3, r3
 8004250:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	2188      	movs	r1, #136	; 0x88
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f8e3 	bl	8005428 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8004262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004264:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	2189      	movs	r1, #137	; 0x89
 8004270:	4618      	mov	r0, r3
 8004272:	f001 f8d9 	bl	8005428 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8004276:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	b29b      	uxth	r3, r3
 800427c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	218a      	movs	r1, #138	; 0x8a
 8004288:	4618      	mov	r0, r3
 800428a:	f001 f8cd 	bl	8005428 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 800428e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004290:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	b29b      	uxth	r3, r3
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	218b      	movs	r1, #139	; 0x8b
 800429c:	4618      	mov	r0, r3
 800429e:	f001 f8c3 	bl	8005428 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 80042a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042a4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	2190      	movs	r1, #144	; 0x90
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 f8b9 	bl	8005428 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 80042b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	b29b      	uxth	r3, r3
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	2191      	movs	r1, #145	; 0x91
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f8af 	bl	8005428 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 80042ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042cc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	2192      	movs	r1, #146	; 0x92
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 f8a5 	bl	8005428 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 80042de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042e0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	2193      	movs	r1, #147	; 0x93
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f89b 	bl	8005428 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80042f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80042f4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	2194      	movs	r1, #148	; 0x94
 8004300:	4618      	mov	r0, r3
 8004302:	f001 f891 	bl	8005428 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8004306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	b29b      	uxth	r3, r3
 800430c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	b29b      	uxth	r3, r3
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	218c      	movs	r1, #140	; 0x8c
 8004318:	4618      	mov	r0, r3
 800431a:	f001 f885 	bl	8005428 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 800431e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004320:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	b29b      	uxth	r3, r3
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	218d      	movs	r1, #141	; 0x8d
 800432c:	4618      	mov	r0, r3
 800432e:	f001 f87b 	bl	8005428 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8004332:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	b29b      	uxth	r3, r3
 8004338:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	218e      	movs	r1, #142	; 0x8e
 8004344:	4618      	mov	r0, r3
 8004346:	f001 f86f 	bl	8005428 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 800434a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800434c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	b29b      	uxth	r3, r3
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	218f      	movs	r1, #143	; 0x8f
 8004358:	4618      	mov	r0, r3
 800435a:	f001 f865 	bl	8005428 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 800435e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004362:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	2196      	movs	r1, #150	; 0x96
 800436e:	4618      	mov	r0, r3
 8004370:	f001 f85a 	bl	8005428 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8004374:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004378:	b25b      	sxtb	r3, r3
 800437a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800437e:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8004380:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004384:	b25b      	sxtb	r3, r3
 8004386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800438a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800438c:	4313      	orrs	r3, r2
 800438e:	b25b      	sxtb	r3, r3
 8004390:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	b29b      	uxth	r3, r3
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	2197      	movs	r1, #151	; 0x97
 800439c:	4618      	mov	r0, r3
 800439e:	f001 f843 	bl	8005428 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 80043a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80043a6:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	2198      	movs	r1, #152	; 0x98
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 f838 	bl	8005428 <MFX_IO_Write>
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80043c2:	b004      	add	sp, #16
 80043c4:	4770      	bx	lr

080043c6 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	6039      	str	r1, [r7, #0]
 80043d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	b298      	uxth	r0, r3
 80043d8:	f107 020c 	add.w	r2, r7, #12
 80043dc:	2303      	movs	r3, #3
 80043de:	2114      	movs	r1, #20
 80043e0:	f001 f84a 	bl	8005478 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 80043e4:	7b3b      	ldrb	r3, [r7, #12]
 80043e6:	041a      	lsls	r2, r3, #16
 80043e8:	7b7b      	ldrb	r3, [r7, #13]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	4313      	orrs	r3, r2
 80043ee:	7bba      	ldrb	r2, [r7, #14]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	461a      	mov	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	601a      	str	r2, [r3, #0]

}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800440a:	f000 ffa7 	bl	800535c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2102      	movs	r1, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f944 	bl	80036a0 <mfxstm32l152_EnableITSource>
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2102      	movs	r1, #2
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f98f 	bl	8003752 <mfxstm32l152_ClearGlobalIT>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff f96b 	bl	8003726 <mfxstm32l152_GlobalITStatus>
 8004450:	4603      	mov	r3, r0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	2102      	movs	r1, #2
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f938 	bl	80036de <mfxstm32l152_DisableITSource>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	4603      	mov	r3, r0
 800447e:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	b29b      	uxth	r3, r3
 8004486:	2103      	movs	r1, #3
 8004488:	4618      	mov	r0, r3
 800448a:	f000 ffe1 	bl	8005450 <MFX_IO_Read>
 800448e:	4603      	mov	r3, r0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2104      	movs	r1, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 ffd0 	bl	8005450 <MFX_IO_Read>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80044c4:	f000 ff4a 	bl	800535c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2104      	movs	r1, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff f8e7 	bl	80036a0 <mfxstm32l152_EnableITSource>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	4603      	mov	r3, r0
 80044e2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	2104      	movs	r1, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff f932 	bl	8003752 <mfxstm32l152_ClearGlobalIT>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	4603      	mov	r3, r0
 80044fe:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2104      	movs	r1, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f90e 	bl	8003726 <mfxstm32l152_GlobalITStatus>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2104      	movs	r1, #4
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f8db 	bl	80036de <mfxstm32l152_DisableITSource>
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	e00b      	b.n	8004558 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	4a0a      	ldr	r2, [pc, #40]	; (800456c <mfxstm32l152_GetInstance+0x3c>)
 8004544:	5cd3      	ldrb	r3, [r2, r3]
 8004546:	b29b      	uxth	r3, r3
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	429a      	cmp	r2, r3
 800454c:	d101      	bne.n	8004552 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	e006      	b.n	8004560 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	3301      	adds	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d9f0      	bls.n	8004540 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 800455e:	23ff      	movs	r3, #255	; 0xff
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000348 	.word	0x20000348

08004570 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e00f      	b.n	80045a0 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	4a0c      	ldr	r2, [pc, #48]	; (80045b4 <mfxstm32l152_ReleaseInstance+0x44>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	b29b      	uxth	r3, r3
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	429a      	cmp	r2, r3
 800458c:	d105      	bne.n	800459a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <mfxstm32l152_ReleaseInstance+0x44>)
 8004592:	2100      	movs	r1, #0
 8004594:	54d1      	strb	r1, [r2, r3]
      return idx;
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	e006      	b.n	80045a8 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	3301      	adds	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d9ec      	bls.n	8004580 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 80045a6:	23ff      	movs	r3, #255	; 0xff
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	20000348 	.word	0x20000348

080045b8 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	603a      	str	r2, [r7, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	80fb      	strh	r3, [r7, #6]
 80045c6:	460b      	mov	r3, r1
 80045c8:	717b      	strb	r3, [r7, #5]
 80045ca:	4613      	mov	r3, r2
 80045cc:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 80045e2:	7bbb      	ldrb	r3, [r7, #14]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01e      	beq.n	8004626 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80045e8:	797a      	ldrb	r2, [r7, #5]
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 ff2e 	bl	8005450 <MFX_IO_Read>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80045f8:	793b      	ldrb	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	4313      	orrs	r3, r2
 8004604:	73fb      	strb	r3, [r7, #15]
 8004606:	e008      	b.n	800461a <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8004608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800460c:	43db      	mvns	r3, r3
 800460e:	b25a      	sxtb	r2, r3
 8004610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004614:	4013      	ands	r3, r2
 8004616:	b25b      	sxtb	r3, r3
 8004618:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 800461a:	7bfa      	ldrb	r2, [r7, #15]
 800461c:	7979      	ldrb	r1, [r7, #5]
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 ff01 	bl	8005428 <MFX_IO_Write>
  }

  if (pin_8_15)
 8004626:	7b7b      	ldrb	r3, [r7, #13]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d022      	beq.n	8004672 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 800462c:	797b      	ldrb	r3, [r7, #5]
 800462e:	3301      	adds	r3, #1
 8004630:	b2da      	uxtb	r2, r3
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 ff0a 	bl	8005450 <MFX_IO_Read>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004640:	793b      	ldrb	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	7b7b      	ldrb	r3, [r7, #13]
 800464a:	4313      	orrs	r3, r2
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e008      	b.n	8004662 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8004650:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004654:	43db      	mvns	r3, r3
 8004656:	b25a      	sxtb	r2, r3
 8004658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465c:	4013      	ands	r3, r2
 800465e:	b25b      	sxtb	r3, r3
 8004660:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8004662:	797b      	ldrb	r3, [r7, #5]
 8004664:	3301      	adds	r3, #1
 8004666:	b2d9      	uxtb	r1, r3
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fedb 	bl	8005428 <MFX_IO_Write>
  }

  if (pin_16_23)
 8004672:	7b3b      	ldrb	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d022      	beq.n	80046be <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8004678:	797b      	ldrb	r3, [r7, #5]
 800467a:	3302      	adds	r3, #2
 800467c:	b2da      	uxtb	r2, r3
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fee4 	bl	8005450 <MFX_IO_Read>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800468c:	793b      	ldrb	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8004692:	7bfa      	ldrb	r2, [r7, #15]
 8004694:	7b3b      	ldrb	r3, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e008      	b.n	80046ae <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 800469c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	b25a      	sxtb	r2, r3
 80046a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a8:	4013      	ands	r3, r2
 80046aa:	b25b      	sxtb	r3, r3
 80046ac:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 80046ae:	797b      	ldrb	r3, [r7, #5]
 80046b0:	3302      	adds	r3, #2
 80046b2:	b2d9      	uxtb	r1, r3
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 feb5 	bl	8005428 <MFX_IO_Write>
  }
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80046cc:	f000 fff6 	bl	80056bc <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80046d0:	2200      	movs	r2, #0
 80046d2:	2100      	movs	r1, #0
 80046d4:	2010      	movs	r0, #16
 80046d6:	f000 f9e4 	bl	8004aa2 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80046da:	200a      	movs	r0, #10
 80046dc:	f001 f815 	bl	800570a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80046e0:	2200      	movs	r2, #0
 80046e2:	2100      	movs	r1, #0
 80046e4:	2001      	movs	r0, #1
 80046e6:	f000 f9dc 	bl	8004aa2 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80046ea:	20c8      	movs	r0, #200	; 0xc8
 80046ec:	f001 f80d 	bl	800570a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80046f0:	2200      	movs	r2, #0
 80046f2:	2100      	movs	r1, #0
 80046f4:	2011      	movs	r0, #17
 80046f6:	f000 f9d4 	bl	8004aa2 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80046fa:	2078      	movs	r0, #120	; 0x78
 80046fc:	f001 f805 	bl	800570a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8004700:	2300      	movs	r3, #0
 8004702:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8004704:	463b      	mov	r3, r7
 8004706:	2201      	movs	r2, #1
 8004708:	4619      	mov	r1, r3
 800470a:	2036      	movs	r0, #54	; 0x36
 800470c:	f000 f9c9 	bl	8004aa2 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8004710:	2305      	movs	r3, #5
 8004712:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8004714:	463b      	mov	r3, r7
 8004716:	2201      	movs	r2, #1
 8004718:	4619      	mov	r1, r3
 800471a:	203a      	movs	r0, #58	; 0x3a
 800471c:	f000 f9c1 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8004720:	2200      	movs	r2, #0
 8004722:	2100      	movs	r1, #0
 8004724:	2021      	movs	r0, #33	; 0x21
 8004726:	f000 f9bc 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 800472a:	2300      	movs	r3, #0
 800472c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800472e:	2300      	movs	r3, #0
 8004730:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004732:	2300      	movs	r3, #0
 8004734:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004736:	23ef      	movs	r3, #239	; 0xef
 8004738:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800473a:	463b      	mov	r3, r7
 800473c:	2204      	movs	r2, #4
 800473e:	4619      	mov	r1, r3
 8004740:	202a      	movs	r0, #42	; 0x2a
 8004742:	f000 f9ae 	bl	8004aa2 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8004746:	2300      	movs	r3, #0
 8004748:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800474a:	2300      	movs	r3, #0
 800474c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800474e:	2300      	movs	r3, #0
 8004750:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004752:	23ef      	movs	r3, #239	; 0xef
 8004754:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004756:	463b      	mov	r3, r7
 8004758:	2204      	movs	r2, #4
 800475a:	4619      	mov	r1, r3
 800475c:	202b      	movs	r0, #43	; 0x2b
 800475e:	f000 f9a0 	bl	8004aa2 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8004762:	230c      	movs	r3, #12
 8004764:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8004766:	230c      	movs	r3, #12
 8004768:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800476a:	2300      	movs	r3, #0
 800476c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800476e:	2333      	movs	r3, #51	; 0x33
 8004770:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8004772:	2333      	movs	r3, #51	; 0x33
 8004774:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8004776:	463b      	mov	r3, r7
 8004778:	2205      	movs	r2, #5
 800477a:	4619      	mov	r1, r3
 800477c:	20b2      	movs	r0, #178	; 0xb2
 800477e:	f000 f990 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8004782:	2335      	movs	r3, #53	; 0x35
 8004784:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8004786:	463b      	mov	r3, r7
 8004788:	2201      	movs	r2, #1
 800478a:	4619      	mov	r1, r3
 800478c:	20b7      	movs	r0, #183	; 0xb7
 800478e:	f000 f988 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8004792:	231f      	movs	r3, #31
 8004794:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8004796:	463b      	mov	r3, r7
 8004798:	2201      	movs	r2, #1
 800479a:	4619      	mov	r1, r3
 800479c:	20bb      	movs	r0, #187	; 0xbb
 800479e:	f000 f980 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80047a2:	232c      	movs	r3, #44	; 0x2c
 80047a4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80047a6:	463b      	mov	r3, r7
 80047a8:	2201      	movs	r2, #1
 80047aa:	4619      	mov	r1, r3
 80047ac:	20c0      	movs	r0, #192	; 0xc0
 80047ae:	f000 f978 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80047b2:	2301      	movs	r3, #1
 80047b4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80047b6:	23c3      	movs	r3, #195	; 0xc3
 80047b8:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80047ba:	463b      	mov	r3, r7
 80047bc:	2202      	movs	r2, #2
 80047be:	4619      	mov	r1, r3
 80047c0:	20c2      	movs	r0, #194	; 0xc2
 80047c2:	f000 f96e 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80047c6:	2320      	movs	r3, #32
 80047c8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80047ca:	463b      	mov	r3, r7
 80047cc:	2201      	movs	r2, #1
 80047ce:	4619      	mov	r1, r3
 80047d0:	20c4      	movs	r0, #196	; 0xc4
 80047d2:	f000 f966 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80047d6:	230f      	movs	r3, #15
 80047d8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80047da:	463b      	mov	r3, r7
 80047dc:	2201      	movs	r2, #1
 80047de:	4619      	mov	r1, r3
 80047e0:	20c6      	movs	r0, #198	; 0xc6
 80047e2:	f000 f95e 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80047e6:	23a4      	movs	r3, #164	; 0xa4
 80047e8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80047ea:	23a1      	movs	r3, #161	; 0xa1
 80047ec:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 80047ee:	463b      	mov	r3, r7
 80047f0:	2202      	movs	r2, #2
 80047f2:	4619      	mov	r1, r3
 80047f4:	20d0      	movs	r0, #208	; 0xd0
 80047f6:	f000 f954 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80047fa:	23d0      	movs	r3, #208	; 0xd0
 80047fc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80047fe:	2308      	movs	r3, #8
 8004800:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8004802:	2311      	movs	r3, #17
 8004804:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004806:	2308      	movs	r3, #8
 8004808:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 800480a:	230c      	movs	r3, #12
 800480c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800480e:	2315      	movs	r3, #21
 8004810:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004812:	2339      	movs	r3, #57	; 0x39
 8004814:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8004816:	2333      	movs	r3, #51	; 0x33
 8004818:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 800481a:	2350      	movs	r3, #80	; 0x50
 800481c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800481e:	2336      	movs	r3, #54	; 0x36
 8004820:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8004822:	2313      	movs	r3, #19
 8004824:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004826:	2314      	movs	r3, #20
 8004828:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 800482a:	2329      	movs	r3, #41	; 0x29
 800482c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800482e:	232d      	movs	r3, #45	; 0x2d
 8004830:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8004832:	463b      	mov	r3, r7
 8004834:	220e      	movs	r2, #14
 8004836:	4619      	mov	r1, r3
 8004838:	20e0      	movs	r0, #224	; 0xe0
 800483a:	f000 f932 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800483e:	23d0      	movs	r3, #208	; 0xd0
 8004840:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8004842:	2308      	movs	r3, #8
 8004844:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8004846:	2310      	movs	r3, #16
 8004848:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800484a:	2308      	movs	r3, #8
 800484c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800484e:	2306      	movs	r3, #6
 8004850:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8004852:	2306      	movs	r3, #6
 8004854:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004856:	2339      	movs	r3, #57	; 0x39
 8004858:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 800485a:	2344      	movs	r3, #68	; 0x44
 800485c:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800485e:	2351      	movs	r3, #81	; 0x51
 8004860:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8004862:	230b      	movs	r3, #11
 8004864:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8004866:	2316      	movs	r3, #22
 8004868:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800486a:	2314      	movs	r3, #20
 800486c:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800486e:	232f      	movs	r3, #47	; 0x2f
 8004870:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8004872:	2331      	movs	r3, #49	; 0x31
 8004874:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8004876:	463b      	mov	r3, r7
 8004878:	220e      	movs	r2, #14
 800487a:	4619      	mov	r1, r3
 800487c:	20e1      	movs	r0, #225	; 0xe1
 800487e:	f000 f910 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8004882:	f000 f847 	bl	8004914 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8004886:	2300      	movs	r3, #0
 8004888:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800488a:	463b      	mov	r3, r7
 800488c:	2201      	movs	r2, #1
 800488e:	4619      	mov	r1, r3
 8004890:	2035      	movs	r0, #53	; 0x35
 8004892:	f000 f906 	bl	8004aa2 <ST7789H2_WriteReg>

}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80048ac:	2300      	movs	r3, #0
 80048ae:	723b      	strb	r3, [r7, #8]
 80048b0:	e025      	b.n	80048fe <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d120      	bne.n	80048fa <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80048b8:	2300      	movs	r3, #0
 80048ba:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80048bc:	2300      	movs	r3, #0
 80048be:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80048c0:	2301      	movs	r3, #1
 80048c2:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80048c4:	23f0      	movs	r3, #240	; 0xf0
 80048c6:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80048c8:	2300      	movs	r3, #0
 80048ca:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80048cc:	2300      	movs	r3, #0
 80048ce:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80048d0:	f107 0308 	add.w	r3, r7, #8
 80048d4:	2206      	movs	r2, #6
 80048d6:	4619      	mov	r1, r3
 80048d8:	2033      	movs	r0, #51	; 0x33
 80048da:	f000 f8e2 	bl	8004aa2 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80048de:	2300      	movs	r3, #0
 80048e0:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80048e2:	2350      	movs	r3, #80	; 0x50
 80048e4:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80048e6:	f107 0308 	add.w	r3, r7, #8
 80048ea:	2202      	movs	r2, #2
 80048ec:	4619      	mov	r1, r3
 80048ee:	2037      	movs	r0, #55	; 0x37
 80048f0:	f000 f8d7 	bl	8004aa2 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80048f4:	23c0      	movs	r3, #192	; 0xc0
 80048f6:	723b      	strb	r3, [r7, #8]
 80048f8:	e001      	b.n	80048fe <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80048fa:	2360      	movs	r3, #96	; 0x60
 80048fc:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	2201      	movs	r2, #1
 8004904:	4619      	mov	r1, r3
 8004906:	2036      	movs	r0, #54	; 0x36
 8004908:	f000 f8cb 	bl	8004aa2 <ST7789H2_WriteReg>
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8004918:	2200      	movs	r2, #0
 800491a:	2100      	movs	r1, #0
 800491c:	2029      	movs	r0, #41	; 0x29
 800491e:	f000 f8c0 	bl	8004aa2 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8004922:	2200      	movs	r2, #0
 8004924:	2100      	movs	r1, #0
 8004926:	2011      	movs	r0, #17
 8004928:	f000 f8bb 	bl	8004aa2 <ST7789H2_WriteReg>
}
 800492c:	bf00      	nop
 800492e:	bd80      	pop	{r7, pc}

08004930 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8004936:	23fe      	movs	r3, #254	; 0xfe
 8004938:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	2201      	movs	r2, #1
 800493e:	4619      	mov	r1, r3
 8004940:	20bd      	movs	r0, #189	; 0xbd
 8004942:	f000 f8ae 	bl	8004aa2 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	2010      	movs	r0, #16
 800494c:	f000 f8a9 	bl	8004aa2 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004950:	200a      	movs	r0, #10
 8004952:	f000 feda 	bl	800570a <LCD_IO_Delay>
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8004962:	23f0      	movs	r3, #240	; 0xf0
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800496e:	b480      	push	{r7}
 8004970:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8004972:	23f0      	movs	r3, #240	; 0xf0
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004982:	f000 fe9b 	bl	80056bc <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8004986:	2004      	movs	r0, #4
 8004988:	f000 f8ae 	bl	8004ae8 <ST7789H2_ReadReg>
 800498c:	4603      	mov	r3, r0
 800498e:	b29b      	uxth	r3, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}

08004994 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	460a      	mov	r2, r1
 800499e:	80fb      	strh	r3, [r7, #6]
 80049a0:	4613      	mov	r3, r2
 80049a2:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80049a4:	2300      	movs	r3, #0
 80049a6:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	3b11      	subs	r3, #17
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	2204      	movs	r2, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	202a      	movs	r0, #42	; 0x2a
 80049c6:	f000 f86c 	bl	8004aa2 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80049ca:	2300      	movs	r3, #0
 80049cc:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80049ce:	88bb      	ldrh	r3, [r7, #4]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80049d8:	88bb      	ldrh	r3, [r7, #4]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3b11      	subs	r3, #17
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80049e2:	f107 030c 	add.w	r3, r7, #12
 80049e6:	2204      	movs	r2, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	202b      	movs	r0, #43	; 0x2b
 80049ec:	f000 f859 	bl	8004aa2 <ST7789H2_WriteReg>
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	80fb      	strh	r3, [r7, #6]
 8004a02:	460b      	mov	r3, r1
 8004a04:	80bb      	strh	r3, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004a0a:	88ba      	ldrh	r2, [r7, #4]
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ffbf 	bl	8004994 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	202c      	movs	r0, #44	; 0x2c
 8004a1c:	f000 f841 	bl	8004aa2 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fe50 	bl	80056c8 <LCD_IO_WriteData>
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	460a      	mov	r2, r1
 8004a3a:	80fb      	strh	r3, [r7, #6]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004a40:	88ba      	ldrh	r2, [r7, #4]
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ffa4 	bl	8004994 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8004a4c:	88ba      	ldrh	r2, [r7, #4]
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f9c0 	bl	8004dd8 <ST7789H2_ReadPixel_rgb888>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	733a      	strb	r2, [r7, #12]
 8004a5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004a62:	737a      	strb	r2, [r7, #13]
 8004a64:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004a68:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8004a6a:	7b3b      	ldrb	r3, [r7, #12]
 8004a6c:	08db      	lsrs	r3, r3, #3
 8004a6e:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8004a70:	7b7b      	ldrb	r3, [r7, #13]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8004a76:	7bbb      	ldrb	r3, [r7, #14]
 8004a78:	08db      	lsrs	r3, r3, #3
 8004a7a:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	02db      	lsls	r3, r3, #11
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	7dbb      	ldrb	r3, [r7, #22]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	015b      	lsls	r3, r3, #5
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	7d7b      	ldrb	r3, [r7, #21]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8004a98:	8a7b      	ldrh	r3, [r7, #18]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	6039      	str	r1, [r7, #0]
 8004aac:	71fb      	strb	r3, [r7, #7]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fe14 	bl	80056e2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	e00a      	b.n	8004ad6 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fdfc 	bl	80056c8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	79bb      	ldrb	r3, [r7, #6]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d3f0      	bcc.n	8004ac0 <ST7789H2_WriteReg+0x1e>
  }
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fdf4 	bl	80056e2 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8004afa:	f000 fdff 	bl	80056fc <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8004afe:	f000 fdfd 	bl	80056fc <LCD_IO_ReadData>
 8004b02:	4603      	mov	r3, r0
 8004b04:	b2db      	uxtb	r3, r3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004b10:	b490      	push	{r4, r7}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4623      	mov	r3, r4
 8004b20:	80fb      	strh	r3, [r7, #6]
 8004b22:	4603      	mov	r3, r0
 8004b24:	80bb      	strh	r3, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	807b      	strh	r3, [r7, #2]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	2bef      	cmp	r3, #239	; 0xef
 8004b32:	d803      	bhi.n	8004b3c <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8004b34:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <ST7789H2_SetDisplayWindow+0x94>)
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	8013      	strh	r3, [r2, #0]
 8004b3a:	e002      	b.n	8004b42 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <ST7789H2_SetDisplayWindow+0x94>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8004b42:	88bb      	ldrh	r3, [r7, #4]
 8004b44:	2bef      	cmp	r3, #239	; 0xef
 8004b46:	d803      	bhi.n	8004b50 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <ST7789H2_SetDisplayWindow+0x98>)
 8004b4a:	88bb      	ldrh	r3, [r7, #4]
 8004b4c:	8013      	strh	r3, [r2, #0]
 8004b4e:	e002      	b.n	8004b56 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8004b50:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <ST7789H2_SetDisplayWindow+0x98>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	2bf0      	cmp	r3, #240	; 0xf0
 8004b5e:	dc08      	bgt.n	8004b72 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8004b60:	887a      	ldrh	r2, [r7, #2]
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	4413      	add	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <ST7789H2_SetDisplayWindow+0x9c>)
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e002      	b.n	8004b78 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <ST7789H2_SetDisplayWindow+0x9c>)
 8004b74:	22ef      	movs	r2, #239	; 0xef
 8004b76:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8004b78:	883a      	ldrh	r2, [r7, #0]
 8004b7a:	88bb      	ldrh	r3, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	2bf0      	cmp	r3, #240	; 0xf0
 8004b80:	dc08      	bgt.n	8004b94 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8004b82:	883a      	ldrh	r2, [r7, #0]
 8004b84:	88bb      	ldrh	r3, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <ST7789H2_SetDisplayWindow+0xa0>)
 8004b90:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8004b92:	e002      	b.n	8004b9a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <ST7789H2_SetDisplayWindow+0xa0>)
 8004b96:	22ef      	movs	r2, #239	; 0xef
 8004b98:	801a      	strh	r2, [r3, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc90      	pop	{r4, r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	2000034c 	.word	0x2000034c
 8004ba8:	2000034e 	.word	0x2000034e
 8004bac:	200000b8 	.word	0x200000b8
 8004bb0:	200000ba 	.word	0x200000ba

08004bb4 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	80fb      	strh	r3, [r7, #6]
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80bb      	strh	r3, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	807b      	strh	r3, [r7, #2]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	88bb      	ldrh	r3, [r7, #4]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fedb 	bl	8004994 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004bde:	2200      	movs	r2, #0
 8004be0:	2100      	movs	r1, #0
 8004be2:	202c      	movs	r0, #44	; 0x2c
 8004be4:	f7ff ff5d 	bl	8004aa2 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8004be8:	2300      	movs	r3, #0
 8004bea:	81fb      	strh	r3, [r7, #14]
 8004bec:	e006      	b.n	8004bfc <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fd69 	bl	80056c8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	81fb      	strh	r3, [r7, #14]
 8004bfc:	89fa      	ldrh	r2, [r7, #14]
 8004bfe:	883b      	ldrh	r3, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3f4      	bcc.n	8004bee <ST7789H2_DrawHLine+0x3a>
  }  
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}

08004c0e <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004c0e:	b590      	push	{r4, r7, lr}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4604      	mov	r4, r0
 8004c16:	4608      	mov	r0, r1
 8004c18:	4611      	mov	r1, r2
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	80fb      	strh	r3, [r7, #6]
 8004c20:	4603      	mov	r3, r0
 8004c22:	80bb      	strh	r3, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004c2c:	887a      	ldrh	r2, [r7, #2]
 8004c2e:	88bb      	ldrh	r3, [r7, #4]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff feae 	bl	8004994 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	202c      	movs	r0, #44	; 0x2c
 8004c3e:	f7ff ff30 	bl	8004aa2 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	81fb      	strh	r3, [r7, #14]
 8004c46:	e00b      	b.n	8004c60 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004c48:	887a      	ldrh	r2, [r7, #2]
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	88bb      	ldrh	r3, [r7, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fecf 	bl	80049f8 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8004c5a:	89fb      	ldrh	r3, [r7, #14]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	81fb      	strh	r3, [r7, #14]
 8004c60:	89fa      	ldrh	r2, [r7, #14]
 8004c62:	883b      	ldrh	r3, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d3ef      	bcc.n	8004c48 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd90      	pop	{r4, r7, pc}
	...

08004c74 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	603a      	str	r2, [r7, #0]
 8004c7e:	80fb      	strh	r3, [r7, #6]
 8004c80:	460b      	mov	r3, r1
 8004c82:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <ST7789H2_DrawBitmap+0xe0>)
 8004c92:	881a      	ldrh	r2, [r3, #0]
 8004c94:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <ST7789H2_DrawBitmap+0xe4>)
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <ST7789H2_DrawBitmap+0xe8>)
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <ST7789H2_DrawBitmap+0xec>)
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	330a      	adds	r3, #10
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004cfa:	88ba      	ldrh	r2, [r7, #4]
 8004cfc:	89bb      	ldrh	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	e01d      	b.n	8004d40 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fe3f 	bl	8004994 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b299      	uxth	r1, r3
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	89fa      	ldrh	r2, [r7, #14]
 8004d2e:	88f8      	ldrh	r0, [r7, #6]
 8004d30:	f000 f89c 	bl	8004e6c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	88bb      	ldrh	r3, [r7, #4]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d8dd      	bhi.n	8004d04 <ST7789H2_DrawBitmap+0x90>
  }
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200000b8 	.word	0x200000b8
 8004d58:	2000034c 	.word	0x2000034c
 8004d5c:	200000ba 	.word	0x200000ba
 8004d60:	2000034e 	.word	0x2000034e

08004d64 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	461a      	mov	r2, r3
 8004d72:	4623      	mov	r3, r4
 8004d74:	80fb      	strh	r3, [r7, #6]
 8004d76:	4603      	mov	r3, r0
 8004d78:	80bb      	strh	r3, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	807b      	strh	r3, [r7, #2]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004d86:	88bb      	ldrh	r3, [r7, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e019      	b.n	8004dc0 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fdfd 	bl	8004994 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	b299      	uxth	r1, r3
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	4413      	add	r3, r2
 8004dac:	887a      	ldrh	r2, [r7, #2]
 8004dae:	88f8      	ldrh	r0, [r7, #6]
 8004db0:	f000 f85c 	bl	8004e6c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	88ba      	ldrh	r2, [r7, #4]
 8004dc2:	883b      	ldrh	r3, [r7, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d3de      	bcc.n	8004d8c <ST7789H2_DrawRGBImage+0x28>
  }
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd90      	pop	{r4, r7, pc}

08004dd8 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	460a      	mov	r2, r1
 8004de2:	80fb      	strh	r3, [r7, #6]
 8004de4:	4613      	mov	r3, r2
 8004de6:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004de8:	88ba      	ldrh	r2, [r7, #4]
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	4611      	mov	r1, r2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fdd0 	bl	8004994 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8004df4:	2200      	movs	r2, #0
 8004df6:	2100      	movs	r1, #0
 8004df8:	202e      	movs	r0, #46	; 0x2e
 8004dfa:	f7ff fe52 	bl	8004aa2 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8004dfe:	f000 fc7d 	bl	80056fc <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8004e02:	f000 fc7b 	bl	80056fc <LCD_IO_ReadData>
 8004e06:	4603      	mov	r3, r0
 8004e08:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8004e0a:	f000 fc77 	bl	80056fc <LCD_IO_ReadData>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8004e12:	8afb      	ldrh	r3, [r7, #22]
 8004e14:	121b      	asrs	r3, r3, #8
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8004e20:	8afb      	ldrh	r3, [r7, #22]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f023 0303 	bic.w	r3, r3, #3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8004e2c:	8abb      	ldrh	r3, [r7, #20]
 8004e2e:	121b      	asrs	r3, r3, #8
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8004e3a:	f107 0310 	add.w	r3, r7, #16
 8004e3e:	f107 020c 	add.w	r2, r7, #12
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	4611      	mov	r1, r2
 8004e46:	8019      	strh	r1, [r3, #0]
 8004e48:	3302      	adds	r3, #2
 8004e4a:	0c12      	lsrs	r2, r2, #16
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	7c3a      	ldrb	r2, [r7, #16]
 8004e52:	f362 0307 	bfi	r3, r2, #0, #8
 8004e56:	7c7a      	ldrb	r2, [r7, #17]
 8004e58:	f362 230f 	bfi	r3, r2, #8, #8
 8004e5c:	7cba      	ldrb	r2, [r7, #18]
 8004e5e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	4603      	mov	r3, r0
 8004e76:	81fb      	strh	r3, [r7, #14]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	81bb      	strh	r3, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	202c      	movs	r0, #44	; 0x2c
 8004e8e:	f7ff fe08 	bl	8004aa2 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004e92:	89fb      	ldrh	r3, [r7, #14]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	e029      	b.n	8004eec <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <ST7789H2_DrawRGBHLine+0x98>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d320      	bcc.n	8004ee6 <ST7789H2_DrawRGBHLine+0x7a>
 8004ea4:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <ST7789H2_DrawRGBHLine+0x9c>)
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	89ba      	ldrh	r2, [r7, #12]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d31b      	bcc.n	8004ee6 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004eae:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <ST7789H2_DrawRGBHLine+0xa0>)
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d815      	bhi.n	8004ee6 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004eba:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <ST7789H2_DrawRGBHLine+0xa4>)
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	89ba      	ldrh	r2, [r7, #12]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d810      	bhi.n	8004ee6 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8004ec4:	897a      	ldrh	r2, [r7, #10]
 8004ec6:	89fb      	ldrh	r3, [r7, #14]
 8004ec8:	441a      	add	r2, r3
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d007      	beq.n	8004ee0 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fbf4 	bl	80056c8 <LCD_IO_WriteData>
      }      
      i++;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	897a      	ldrh	r2, [r7, #10]
 8004eee:	89fb      	ldrh	r3, [r7, #14]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d3ce      	bcc.n	8004e98 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	2000034c 	.word	0x2000034c
 8004f08:	2000034e 	.word	0x2000034e
 8004f0c:	200000b8 	.word	0x200000b8
 8004f10:	200000ba 	.word	0x200000ba

08004f14 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  while (1);
 8004f18:	e7fe      	b.n	8004f18 <BSP_ErrorHandler+0x4>
	...

08004f1c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8004f20:	4812      	ldr	r0, [pc, #72]	; (8004f6c <I2C2_Init+0x50>)
 8004f22:	f003 fa94 	bl	800844e <HAL_I2C_GetState>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11d      	bne.n	8004f68 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <I2C2_Init+0x50>)
 8004f2e:	4a10      	ldr	r2, [pc, #64]	; (8004f70 <I2C2_Init+0x54>)
 8004f30:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <I2C2_Init+0x50>)
 8004f34:	4a0f      	ldr	r2, [pc, #60]	; (8004f74 <I2C2_Init+0x58>)
 8004f36:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <I2C2_Init+0x50>)
 8004f3a:	2270      	movs	r2, #112	; 0x70
 8004f3c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <I2C2_Init+0x50>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <I2C2_Init+0x50>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <I2C2_Init+0x50>)
 8004f4c:	22ff      	movs	r2, #255	; 0xff
 8004f4e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <I2C2_Init+0x50>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <I2C2_Init+0x50>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8004f5c:	4803      	ldr	r0, [pc, #12]	; (8004f6c <I2C2_Init+0x50>)
 8004f5e:	f000 f80b 	bl	8004f78 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8004f62:	4802      	ldr	r0, [pc, #8]	; (8004f6c <I2C2_Init+0x50>)
 8004f64:	f002 fe80 	bl	8007c68 <HAL_I2C_Init>
  }
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000350 	.word	0x20000350
 8004f70:	40005800 	.word	0x40005800
 8004f74:	40403e5d 	.word	0x40403e5d

08004f78 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b0ae      	sub	sp, #184	; 0xb8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a37      	ldr	r2, [pc, #220]	; (8005064 <I2C2_MspInit+0xec>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d168      	bne.n	800505c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8004f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f92:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004f94:	f107 0318 	add.w	r3, r7, #24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f004 fc7d 	bl	8009898 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8004f9e:	4b32      	ldr	r3, [pc, #200]	; (8005068 <I2C2_MspInit+0xf0>)
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	4a31      	ldr	r2, [pc, #196]	; (8005068 <I2C2_MspInit+0xf0>)
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004faa:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <I2C2_MspInit+0xf0>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8004fb6:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <I2C2_MspInit+0xf0>)
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <I2C2_MspInit+0xf0>)
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fc2:	4b29      	ldr	r3, [pc, #164]	; (8005068 <I2C2_MspInit+0xf0>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8004fce:	2310      	movs	r3, #16
 8004fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8004fd4:	2312      	movs	r3, #18
 8004fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8004fec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	481e      	ldr	r0, [pc, #120]	; (800506c <I2C2_MspInit+0xf4>)
 8004ff4:	f002 fb6a 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8004ff8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8005000:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005004:	4619      	mov	r1, r3
 8005006:	481a      	ldr	r0, [pc, #104]	; (8005070 <I2C2_MspInit+0xf8>)
 8005008:	f002 fb60 	bl	80076cc <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <I2C2_MspInit+0xf0>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <I2C2_MspInit+0xf0>)
 8005012:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005016:	6593      	str	r3, [r2, #88]	; 0x58
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <I2C2_MspInit+0xf0>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <I2C2_MspInit+0xf0>)
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <I2C2_MspInit+0xf0>)
 800502a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800502e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <I2C2_MspInit+0xf0>)
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <I2C2_MspInit+0xf0>)
 8005036:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800503a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800503c:	2200      	movs	r2, #0
 800503e:	2100      	movs	r1, #0
 8005040:	2021      	movs	r0, #33	; 0x21
 8005042:	f002 f8ec 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8005046:	2021      	movs	r0, #33	; 0x21
 8005048:	f002 f905 	bl	8007256 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800504c:	2200      	movs	r2, #0
 800504e:	2100      	movs	r1, #0
 8005050:	2022      	movs	r0, #34	; 0x22
 8005052:	f002 f8e4 	bl	800721e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8005056:	2022      	movs	r0, #34	; 0x22
 8005058:	f002 f8fd 	bl	8007256 <HAL_NVIC_EnableIRQ>
  }
}
 800505c:	bf00      	nop
 800505e:	37b8      	adds	r7, #184	; 0xb8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40005800 	.word	0x40005800
 8005068:	40021000 	.word	0x40021000
 800506c:	48001c00 	.word	0x48001c00
 8005070:	48000400 	.word	0x48000400

08005074 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8005078:	4806      	ldr	r0, [pc, #24]	; (8005094 <I2C2_DeInit+0x20>)
 800507a:	f003 f9e8 	bl	800844e <HAL_I2C_GetState>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8005084:	4803      	ldr	r0, [pc, #12]	; (8005094 <I2C2_DeInit+0x20>)
 8005086:	f002 fe7e 	bl	8007d86 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800508a:	4802      	ldr	r0, [pc, #8]	; (8005094 <I2C2_DeInit+0x20>)
 800508c:	f000 f804 	bl	8005098 <I2C2_MspDeInit>
  }
}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000350 	.word	0x20000350

08005098 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <I2C2_MspDeInit+0x8c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d138      	bne.n	800511c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80050aa:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050b6:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80050c2:	4b19      	ldr	r3, [pc, #100]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 80050da:	2110      	movs	r1, #16
 80050dc:	4813      	ldr	r0, [pc, #76]	; (800512c <I2C2_MspDeInit+0x94>)
 80050de:	f002 fc87 	bl	80079f0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 80050e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050e6:	4812      	ldr	r0, [pc, #72]	; (8005130 <I2C2_MspDeInit+0x98>)
 80050e8:	f002 fc82 	bl	80079f0 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050f6:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <I2C2_MspDeInit+0x90>)
 80050fe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005102:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <I2C2_MspDeInit+0x90>)
 8005106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005108:	4a07      	ldr	r2, [pc, #28]	; (8005128 <I2C2_MspDeInit+0x90>)
 800510a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800510e:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8005110:	2021      	movs	r0, #33	; 0x21
 8005112:	f002 f8ae 	bl	8007272 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8005116:	2022      	movs	r0, #34	; 0x22
 8005118:	f002 f8ab 	bl	8007272 <HAL_NVIC_DisableIRQ>
  }
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40005800 	.word	0x40005800
 8005128:	40021000 	.word	0x40021000
 800512c:	48001c00 	.word	0x48001c00
 8005130:	48000400 	.word	0x48000400

08005134 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b089      	sub	sp, #36	; 0x24
 8005138:	af04      	add	r7, sp, #16
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	461a      	mov	r2, r3
 8005142:	4623      	mov	r3, r4
 8005144:	80fb      	strh	r3, [r7, #6]
 8005146:	4603      	mov	r3, r0
 8005148:	80bb      	strh	r3, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	807b      	strh	r3, [r7, #2]
 800514e:	4613      	mov	r3, r2
 8005150:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005156:	b672      	cpsid	i
}
 8005158:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800515a:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <I2C2_WriteData+0x5c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	8878      	ldrh	r0, [r7, #2]
 8005160:	88ba      	ldrh	r2, [r7, #4]
 8005162:	88f9      	ldrh	r1, [r7, #6]
 8005164:	9302      	str	r3, [sp, #8]
 8005166:	2301      	movs	r3, #1
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	1c7b      	adds	r3, r7, #1
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	4603      	mov	r3, r0
 8005170:	4808      	ldr	r0, [pc, #32]	; (8005194 <I2C2_WriteData+0x60>)
 8005172:	f002 fe37 	bl	8007de4 <HAL_I2C_Mem_Write>
 8005176:	4603      	mov	r3, r0
 8005178:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800517a:	b662      	cpsie	i
}
 800517c:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8005184:	f000 f890 	bl	80052a8 <I2C2_Error>
  }
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	200000bc 	.word	0x200000bc
 8005194:	20000350 	.word	0x20000350

08005198 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af04      	add	r7, sp, #16
 800519e:	4603      	mov	r3, r0
 80051a0:	80fb      	strh	r3, [r7, #6]
 80051a2:	460b      	mov	r3, r1
 80051a4:	80bb      	strh	r3, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80051b2:	b672      	cpsid	i
}
 80051b4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <I2C2_ReadData+0x60>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	8878      	ldrh	r0, [r7, #2]
 80051bc:	88ba      	ldrh	r2, [r7, #4]
 80051be:	88f9      	ldrh	r1, [r7, #6]
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	2301      	movs	r3, #1
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	f107 030e 	add.w	r3, r7, #14
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	4603      	mov	r3, r0
 80051ce:	480b      	ldr	r0, [pc, #44]	; (80051fc <I2C2_ReadData+0x64>)
 80051d0:	f002 ff1c 	bl	800800c <HAL_I2C_Mem_Read>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80051d8:	b662      	cpsie	i
}
 80051da:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80051e2:	f000 f861 	bl	80052a8 <I2C2_Error>
    HAL_Delay(200);
 80051e6:	20c8      	movs	r0, #200	; 0xc8
 80051e8:	f000 ff1a 	bl	8006020 <HAL_Delay>
  }

  return value;
 80051ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200000bc 	.word	0x200000bc
 80051fc:	20000350 	.word	0x20000350

08005200 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	6039      	str	r1, [r7, #0]
 800520a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8005210:	2300      	movs	r3, #0
 8005212:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8005214:	b672      	cpsid	i
}
 8005216:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8005218:	88f9      	ldrh	r1, [r7, #6]
 800521a:	2332      	movs	r3, #50	; 0x32
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	480a      	ldr	r0, [pc, #40]	; (8005248 <I2C2_isDeviceReady+0x48>)
 8005220:	f003 f80e 	bl	8008240 <HAL_I2C_IsDeviceReady>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005228:	b662      	cpsie	i
}
 800522a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8005232:	f000 f839 	bl	80052a8 <I2C2_Error>
    HAL_Delay(200);
 8005236:	20c8      	movs	r0, #200	; 0xc8
 8005238:	f000 fef2 	bl	8006020 <HAL_Delay>
  }

  return value;
 800523c:	7bbb      	ldrb	r3, [r7, #14]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000350 	.word	0x20000350

0800524c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af04      	add	r7, sp, #16
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	4603      	mov	r3, r0
 8005256:	81fb      	strh	r3, [r7, #14]
 8005258:	460b      	mov	r3, r1
 800525a:	81bb      	strh	r3, [r7, #12]
 800525c:	4613      	mov	r3, r2
 800525e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8005264:	b672      	cpsid	i
}
 8005266:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <I2C2_ReadBuffer+0x54>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	8978      	ldrh	r0, [r7, #10]
 800526e:	89ba      	ldrh	r2, [r7, #12]
 8005270:	89f9      	ldrh	r1, [r7, #14]
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	8c3b      	ldrh	r3, [r7, #32]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	4603      	mov	r3, r0
 800527e:	4809      	ldr	r0, [pc, #36]	; (80052a4 <I2C2_ReadBuffer+0x58>)
 8005280:	f002 fec4 	bl	800800c <HAL_I2C_Mem_Read>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8005288:	b662      	cpsie	i
}
 800528a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8005292:	f000 f809 	bl	80052a8 <I2C2_Error>
  }

  return status;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	200000bc 	.word	0x200000bc
 80052a4:	20000350 	.word	0x20000350

080052a8 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80052ac:	f7ff fe32 	bl	8004f14 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80052b0:	4803      	ldr	r0, [pc, #12]	; (80052c0 <I2C2_Error+0x18>)
 80052b2:	f002 fd68 	bl	8007d86 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 80052b6:	f7ff fe31 	bl	8004f1c <I2C2_Init>
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000350 	.word	0x20000350

080052c4 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 80052c8:	f7ff fe28 	bl	8004f1c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 80052cc:	2104      	movs	r1, #4
 80052ce:	2084      	movs	r0, #132	; 0x84
 80052d0:	f7ff ff96 	bl	8005200 <I2C2_isDeviceReady>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 80052da:	f7ff fe1b 	bl	8004f14 <BSP_ErrorHandler>
  }
}
 80052de:	bf00      	nop
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80052ea:	4b19      	ldr	r3, [pc, #100]	; (8005350 <MFX_IO_DeInit+0x6c>)
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	4a18      	ldr	r2, [pc, #96]	; (8005350 <MFX_IO_DeInit+0x6c>)
 80052f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052f6:	4b16      	ldr	r3, [pc, #88]	; (8005350 <MFX_IO_DeInit+0x6c>)
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005306:	2301      	movs	r3, #1
 8005308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800530e:	2302      	movs	r3, #2
 8005310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	4619      	mov	r1, r3
 8005318:	480e      	ldr	r0, [pc, #56]	; (8005354 <MFX_IO_DeInit+0x70>)
 800531a:	f002 f9d7 	bl	80076cc <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800531e:	2017      	movs	r0, #23
 8005320:	f001 ffa7 	bl	8007272 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <MFX_IO_DeInit+0x6c>)
 8005326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <MFX_IO_DeInit+0x6c>)
 800532a:	f043 0304 	orr.w	r3, r3, #4
 800532e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <MFX_IO_DeInit+0x6c>)
 8005332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800533c:	2120      	movs	r1, #32
 800533e:	4806      	ldr	r0, [pc, #24]	; (8005358 <MFX_IO_DeInit+0x74>)
 8005340:	f002 fb56 	bl	80079f0 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8005344:	f7ff fe96 	bl	8005074 <I2C2_DeInit>
}
 8005348:	bf00      	nop
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40021000 	.word	0x40021000
 8005354:	48001c00 	.word	0x48001c00
 8005358:	48000800 	.word	0x48000800

0800535c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <MFX_IO_ITConfig+0x50>)
 8005364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005366:	4a11      	ldr	r2, [pc, #68]	; (80053ac <MFX_IO_ITConfig+0x50>)
 8005368:	f043 0304 	orr.w	r3, r3, #4
 800536c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800536e:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <MFX_IO_ITConfig+0x50>)
 8005370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 800537a:	2320      	movs	r3, #32
 800537c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8005386:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <MFX_IO_ITConfig+0x54>)
 8005388:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 800538a:	1d3b      	adds	r3, r7, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4809      	ldr	r0, [pc, #36]	; (80053b4 <MFX_IO_ITConfig+0x58>)
 8005390:	f002 f99c 	bl	80076cc <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8005394:	220f      	movs	r2, #15
 8005396:	210f      	movs	r1, #15
 8005398:	2017      	movs	r0, #23
 800539a:	f001 ff40 	bl	800721e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800539e:	2017      	movs	r0, #23
 80053a0:	f001 ff59 	bl	8007256 <HAL_NVIC_EnableIRQ>
}
 80053a4:	bf00      	nop
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000
 80053b0:	10110000 	.word	0x10110000
 80053b4:	48000800 	.word	0x48000800

080053b8 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80053be:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <MFX_IO_EnableWakeupPin+0x40>)
 80053c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c2:	4a0d      	ldr	r2, [pc, #52]	; (80053f8 <MFX_IO_EnableWakeupPin+0x40>)
 80053c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <MFX_IO_EnableWakeupPin+0x40>)
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80053d6:	2340      	movs	r3, #64	; 0x40
 80053d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80053da:	2301      	movs	r3, #1
 80053dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053de:	2302      	movs	r3, #2
 80053e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4804      	ldr	r0, [pc, #16]	; (80053fc <MFX_IO_EnableWakeupPin+0x44>)
 80053ec:	f002 f96e 	bl	80076cc <HAL_GPIO_Init>
}
 80053f0:	bf00      	nop
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000
 80053fc:	48001c00 	.word	0x48001c00

08005400 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8005404:	2201      	movs	r2, #1
 8005406:	2140      	movs	r1, #64	; 0x40
 8005408:	4806      	ldr	r0, [pc, #24]	; (8005424 <MFX_IO_Wakeup+0x24>)
 800540a:	f002 fbe3 	bl	8007bd4 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800540e:	2001      	movs	r0, #1
 8005410:	f000 fe06 	bl	8006020 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8005414:	2200      	movs	r2, #0
 8005416:	2140      	movs	r1, #64	; 0x40
 8005418:	4802      	ldr	r0, [pc, #8]	; (8005424 <MFX_IO_Wakeup+0x24>)
 800541a:	f002 fbdb 	bl	8007bd4 <HAL_GPIO_WritePin>
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	48001c00 	.word	0x48001c00

08005428 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	80fb      	strh	r3, [r7, #6]
 8005432:	460b      	mov	r3, r1
 8005434:	717b      	strb	r3, [r7, #5]
 8005436:	4613      	mov	r3, r2
 8005438:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800543a:	797b      	ldrb	r3, [r7, #5]
 800543c:	b299      	uxth	r1, r3
 800543e:	793b      	ldrb	r3, [r7, #4]
 8005440:	88f8      	ldrh	r0, [r7, #6]
 8005442:	2201      	movs	r2, #1
 8005444:	f7ff fe76 	bl	8005134 <I2C2_WriteData>
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	460a      	mov	r2, r1
 800545a:	80fb      	strh	r3, [r7, #6]
 800545c:	4613      	mov	r3, r2
 800545e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8005460:	797b      	ldrb	r3, [r7, #5]
 8005462:	b299      	uxth	r1, r3
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	2201      	movs	r2, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fe95 	bl	8005198 <I2C2_ReadData>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	60ba      	str	r2, [r7, #8]
 8005480:	461a      	mov	r2, r3
 8005482:	4603      	mov	r3, r0
 8005484:	81fb      	strh	r3, [r7, #14]
 8005486:	460b      	mov	r3, r1
 8005488:	737b      	strb	r3, [r7, #13]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800548e:	7b7b      	ldrb	r3, [r7, #13]
 8005490:	b299      	uxth	r1, r3
 8005492:	89f8      	ldrh	r0, [r7, #14]
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2201      	movs	r2, #1
 800549c:	f7ff fed6 	bl	800524c <I2C2_ReadBuffer>
 80054a0:	4603      	mov	r3, r0
 80054a2:	b29b      	uxth	r3, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fdb3 	bl	8006020 <HAL_Delay>
}
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08c      	sub	sp, #48	; 0x30
 80054c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80054ca:	4b38      	ldr	r3, [pc, #224]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 80054cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ce:	4a37      	ldr	r2, [pc, #220]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6513      	str	r3, [r2, #80]	; 0x50
 80054d6:	4b35      	ldr	r3, [pc, #212]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 80054d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054e2:	4b32      	ldr	r3, [pc, #200]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 80054e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e6:	4a31      	ldr	r2, [pc, #196]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80054fa:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	4a2b      	ldr	r2, [pc, #172]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005500:	f043 0310 	orr.w	r3, r3, #16
 8005504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005506:	4b29      	ldr	r3, [pc, #164]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	4a25      	ldr	r2, [pc, #148]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005518:	f043 0320 	orr.w	r3, r3, #32
 800551c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800552a:	4b20      	ldr	r3, [pc, #128]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005536:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005542:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	4a19      	ldr	r2, [pc, #100]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554c:	6593      	str	r3, [r2, #88]	; 0x58
 800554e:	4b17      	ldr	r3, [pc, #92]	; (80055ac <FMC_BANK1_MspInit+0xe8>)
 8005550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	607b      	str	r3, [r7, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800555a:	f003 fa9f 	bl	8008a9c <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800555e:	2302      	movs	r3, #2
 8005560:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8005562:	2301      	movs	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005566:	2303      	movs	r3, #3
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 800556a:	230c      	movs	r3, #12
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 800556e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8005572:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8005574:	f107 031c 	add.w	r3, r7, #28
 8005578:	4619      	mov	r1, r3
 800557a:	480d      	ldr	r0, [pc, #52]	; (80055b0 <FMC_BANK1_MspInit+0xec>)
 800557c:	f002 f8a6 	bl	80076cc <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8005580:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005584:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8005586:	f107 031c 	add.w	r3, r7, #28
 800558a:	4619      	mov	r1, r3
 800558c:	4809      	ldr	r0, [pc, #36]	; (80055b4 <FMC_BANK1_MspInit+0xf0>)
 800558e:	f002 f89d 	bl	80076cc <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 8005592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8005598:	f107 031c 	add.w	r3, r7, #28
 800559c:	4619      	mov	r1, r3
 800559e:	4804      	ldr	r0, [pc, #16]	; (80055b0 <FMC_BANK1_MspInit+0xec>)
 80055a0:	f002 f894 	bl	80076cc <HAL_GPIO_Init>

}
 80055a4:	bf00      	nop
 80055a6:	3730      	adds	r7, #48	; 0x30
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	48000c00 	.word	0x48000c00
 80055b4:	48001000 	.word	0x48001000

080055b8 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b0a4      	sub	sp, #144	; 0x90
 80055bc:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 80055be:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80055c2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 80055c4:	4b26      	ldr	r3, [pc, #152]	; (8005660 <FMC_BANK1_Init+0xa8>)
 80055c6:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 80055c8:	2301      	movs	r3, #1
 80055ca:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 80055cc:	2301      	movs	r3, #1
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 80055d8:	2302      	movs	r3, #2
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 80055dc:	2302      	movs	r3, #2
 80055de:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 80055e0:	2300      	movs	r3, #0
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 80055e4:	2305      	movs	r3, #5
 80055e6:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 80055ec:	2303      	movs	r3, #3
 80055ee:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 80055f0:	2302      	movs	r3, #2
 80055f2:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 80055f4:	2302      	movs	r3, #2
 80055f6:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 80055f8:	2302      	movs	r3, #2
 80055fa:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8005600:	2300      	movs	r3, #0
 8005602:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 8005604:	2300      	movs	r3, #0
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8005608:	2300      	movs	r3, #0
 800560a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800560c:	2310      	movs	r3, #16
 800560e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8005610:	2300      	movs	r3, #0
 8005612:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8005614:	2300      	movs	r3, #0
 8005616:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8005618:	2300      	movs	r3, #0
 800561a:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 800561c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005620:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 8005622:	2300      	movs	r3, #0
 8005624:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 8005626:	2300      	movs	r3, #0
 8005628:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800562a:	2300      	movs	r3, #0
 800562c:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800562e:	2300      	movs	r3, #0
 8005630:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 8005632:	2300      	movs	r3, #0
 8005634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8005638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800563c:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800563e:	2300      	movs	r3, #0
 8005640:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 8005642:	f7ff ff3f 	bl	80054c4 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8005646:	463a      	mov	r2, r7
 8005648:	f107 0120 	add.w	r1, r7, #32
 800564c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005650:	4618      	mov	r0, r3
 8005652:	f005 fef6 	bl	800b442 <HAL_SRAM_Init>

}
 8005656:	bf00      	nop
 8005658:	3790      	adds	r7, #144	; 0x90
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	a0000104 	.word	0xa0000104

08005664 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 800566e:	4a04      	ldr	r2, [pc, #16]	; (8005680 <FMC_BANK1_WriteData+0x1c>)
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	8013      	strh	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	60080000 	.word	0x60080000

08005684 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 800568e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005692:	79fa      	ldrb	r2, [r7, #7]
 8005694:	b292      	uxth	r2, r2
 8005696:	801a      	strh	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 80056a8:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <FMC_BANK1_ReadData+0x14>)
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	60080000 	.word	0x60080000

080056bc <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 80056c0:	f7ff ff7a 	bl	80055b8 <FMC_BANK1_Init>
}
 80056c4:	bf00      	nop
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff ffc5 	bl	8005664 <FMC_BANK1_WriteData>
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	4603      	mov	r3, r0
 80056ea:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff ffc8 	bl	8005684 <FMC_BANK1_WriteReg>
}
 80056f4:	bf00      	nop
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8005700:	f7ff ffd0 	bl	80056a4 <FMC_BANK1_ReadData>
 8005704:	4603      	mov	r3, r0
}
 8005706:	4618      	mov	r0, r3
 8005708:	bd80      	pop	{r7, pc}

0800570a <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fc84 	bl	8006020 <HAL_Delay>
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <BSP_IO_Init+0x78>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d128      	bne.n	8005788 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8005736:	4b19      	ldr	r3, [pc, #100]	; (800579c <BSP_IO_Init+0x7c>)
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	2084      	movs	r0, #132	; 0x84
 800573c:	4798      	blx	r3

    HAL_Delay(10);
 800573e:	200a      	movs	r0, #10
 8005740:	f000 fc6e 	bl	8006020 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <BSP_IO_Init+0x80>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2084      	movs	r0, #132	; 0x84
 800574a:	4798      	blx	r3
 800574c:	4603      	mov	r3, r0
 800574e:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8005750:	79bb      	ldrb	r3, [r7, #6]
 8005752:	2b7b      	cmp	r3, #123	; 0x7b
 8005754:	d002      	beq.n	800575c <BSP_IO_Init+0x3c>
 8005756:	79bb      	ldrb	r3, [r7, #6]
 8005758:	2b79      	cmp	r3, #121	; 0x79
 800575a:	d117      	bne.n	800578c <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <BSP_IO_Init+0x78>)
 800575e:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <BSP_IO_Init+0x80>)
 8005760:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <BSP_IO_Init+0x78>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00f      	beq.n	800578c <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <BSP_IO_Init+0x78>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2084      	movs	r0, #132	; 0x84
 8005774:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8005776:	4b08      	ldr	r3, [pc, #32]	; (8005798 <BSP_IO_Init+0x78>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4909      	ldr	r1, [pc, #36]	; (80057a4 <BSP_IO_Init+0x84>)
 800577e:	2084      	movs	r0, #132	; 0x84
 8005780:	4798      	blx	r3

        ret = IO_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	71fb      	strb	r3, [r7, #7]
 8005786:	e001      	b.n	800578c <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8005788:	2303      	movs	r3, #3
 800578a:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800578c:	79fb      	ldrb	r3, [r7, #7]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	2000039c 	.word	0x2000039c
 800579c:	20000034 	.word	0x20000034
 80057a0:	20000008 	.word	0x20000008
 80057a4:	000301ff 	.word	0x000301ff

080057a8 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <BSP_IO_ConfigPin+0x30>)
 80057bc:	4013      	ands	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <BSP_IO_ConfigPin+0x34>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	2084      	movs	r0, #132	; 0x84
 80057cc:	4798      	blx	r3

  return IO_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	000301ff 	.word	0x000301ff
 80057dc:	2000039c 	.word	0x2000039c

080057e0 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <BSP_IO_WritePin+0x30>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <BSP_IO_WritePin+0x34>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	2084      	movs	r0, #132	; 0x84
 8005804:	4798      	blx	r3

}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	000301ff 	.word	0x000301ff
 8005814:	2000039c 	.word	0x2000039c

08005818 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800581c:	2001      	movs	r0, #1
 800581e:	f000 f803 	bl	8005828 <BSP_LCD_InitEx>
 8005822:	4603      	mov	r3, r0
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}

08005828 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8005838:	4b33      	ldr	r3, [pc, #204]	; (8005908 <BSP_LCD_InitEx+0xe0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]
 8005844:	e05b      	b.n	80058fe <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8005846:	f7ff ff6b 	bl	8005720 <BSP_IO_Init>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8005850:	f7ff fb60 	bl	8004f14 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8005854:	f000 fa7a 	bl	8005d4c <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8005858:	2200      	movs	r2, #0
 800585a:	2101      	movs	r1, #1
 800585c:	482b      	ldr	r0, [pc, #172]	; (800590c <BSP_LCD_InitEx+0xe4>)
 800585e:	f002 f9b9 	bl	8007bd4 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8005862:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <BSP_LCD_InitEx+0xe8>)
 8005864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005868:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 800586a:	4b29      	ldr	r3, [pc, #164]	; (8005910 <BSP_LCD_InitEx+0xe8>)
 800586c:	4a29      	ldr	r2, [pc, #164]	; (8005914 <BSP_LCD_InitEx+0xec>)
 800586e:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8005870:	4b27      	ldr	r3, [pc, #156]	; (8005910 <BSP_LCD_InitEx+0xe8>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8005876:	4b28      	ldr	r3, [pc, #160]	; (8005918 <BSP_LCD_InitEx+0xf0>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <BSP_LCD_InitEx+0x68>
 800587e:	4b27      	ldr	r3, [pc, #156]	; (800591c <BSP_LCD_InitEx+0xf4>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005886:	2201      	movs	r2, #1
 8005888:	2101      	movs	r1, #1
 800588a:	4825      	ldr	r0, [pc, #148]	; (8005920 <BSP_LCD_InitEx+0xf8>)
 800588c:	f002 f9a2 	bl	8007bd4 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8005890:	f000 f850 	bl	8005934 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8005894:	4b23      	ldr	r3, [pc, #140]	; (8005924 <BSP_LCD_InitEx+0xfc>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4798      	blx	r3
 800589a:	4603      	mov	r3, r0
 800589c:	2b85      	cmp	r3, #133	; 0x85
 800589e:	d12e      	bne.n	80058fe <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 80058a0:	4b21      	ldr	r3, [pc, #132]	; (8005928 <BSP_LCD_InitEx+0x100>)
 80058a2:	4a20      	ldr	r2, [pc, #128]	; (8005924 <BSP_LCD_InitEx+0xfc>)
 80058a4:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 80058a6:	4b20      	ldr	r3, [pc, #128]	; (8005928 <BSP_LCD_InitEx+0x100>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 80058ae:	2200      	movs	r2, #0
 80058b0:	2100      	movs	r1, #0
 80058b2:	202c      	movs	r0, #44	; 0x2c
 80058b4:	f7ff f8f5 	bl	8004aa2 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	e006      	b.n	80058cc <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 80058be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80058c2:	f7ff ff01 	bl	80056c8 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 80058d2:	d3f4      	bcc.n	80058be <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 80058da:	2000      	movs	r0, #0
 80058dc:	f7fe ffdf 	bl	800489e <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <BSP_LCD_InitEx+0x104>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e002      	b.n	80058ee <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 80058e8:	4b10      	ldr	r3, [pc, #64]	; (800592c <BSP_LCD_InitEx+0x104>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80058ee:	4810      	ldr	r0, [pc, #64]	; (8005930 <BSP_LCD_InitEx+0x108>)
 80058f0:	f000 f86c 	bl	80059cc <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <BSP_LCD_InitEx+0xe0>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	200003a0 	.word	0x200003a0
 800590c:	48001c00 	.word	0x48001c00
 8005910:	20000b3c 	.word	0x20000b3c
 8005914:	200000c0 	.word	0x200000c0
 8005918:	20000b65 	.word	0x20000b65
 800591c:	20000b64 	.word	0x20000b64
 8005920:	48002000 	.word	0x48002000
 8005924:	20000080 	.word	0x20000080
 8005928:	200003a4 	.word	0x200003a4
 800592c:	200000d0 	.word	0x200000d0
 8005930:	200000c8 	.word	0x200000c8

08005934 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005938:	2100      	movs	r1, #0
 800593a:	2004      	movs	r0, #4
 800593c:	f7ff ff50 	bl	80057e0 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8005940:	2005      	movs	r0, #5
 8005942:	f000 fb6d 	bl	8006020 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8005946:	2101      	movs	r1, #1
 8005948:	2004      	movs	r0, #4
 800594a:	f7ff ff49 	bl	80057e0 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800594e:	200a      	movs	r0, #10
 8005950:	f000 fb66 	bl	8006020 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005954:	2100      	movs	r1, #0
 8005956:	2004      	movs	r0, #4
 8005958:	f7ff ff42 	bl	80057e0 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800595c:	2014      	movs	r0, #20
 800595e:	f000 fb5f 	bl	8006020 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8005962:	2101      	movs	r1, #1
 8005964:	2004      	movs	r0, #4
 8005966:	f7ff ff3b 	bl	80057e0 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800596a:	200a      	movs	r0, #10
 800596c:	f000 fb58 	bl	8006020 <HAL_Delay>
}
 8005970:	bf00      	nop
 8005972:	bd80      	pop	{r7, pc}

08005974 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <BSP_LCD_GetXSize+0x14>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	4798      	blx	r3
 8005980:	4603      	mov	r3, r0
}
 8005982:	4618      	mov	r0, r3
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	200003a4 	.word	0x200003a4

0800598c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <BSP_LCD_SetTextColor+0x1c>)
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	20000b3c 	.word	0x20000b3c

080059ac <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	4a03      	ldr	r2, [pc, #12]	; (80059c8 <BSP_LCD_SetBackColor+0x1c>)
 80059ba:	6053      	str	r3, [r2, #4]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	20000b3c 	.word	0x20000b3c

080059cc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <BSP_LCD_SetFont+0x1c>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6093      	str	r3, [r2, #8]
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	20000b3c 	.word	0x20000b3c

080059ec <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <BSP_LCD_GetFont+0x14>)
 80059f2:	689b      	ldr	r3, [r3, #8]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20000b3c 	.word	0x20000b3c

08005a04 <BSP_LCD_ClearStringLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint16_t Line)
{
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t color_backup = DrawProp.TextColor;
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <BSP_LCD_ClearStringLine+0x58>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = DrawProp.BackColor;;
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <BSP_LCD_ClearStringLine+0x58>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a10      	ldr	r2, [pc, #64]	; (8005a5c <BSP_LCD_ClearStringLine+0x58>)
 8005a1a:	6013      	str	r3, [r2, #0]

  /* Draw a rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp.pFont->Height), BSP_LCD_GetXSize(), DrawProp.pFont->Height);
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <BSP_LCD_ClearStringLine+0x58>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	88db      	ldrh	r3, [r3, #6]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	fb12 f303 	smulbb	r3, r2, r3
 8005a28:	b29c      	uxth	r4, r3
 8005a2a:	f7ff ffa3 	bl	8005974 <BSP_LCD_GetXSize>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <BSP_LCD_ClearStringLine+0x58>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	88db      	ldrh	r3, [r3, #6]
 8005a38:	4621      	mov	r1, r4
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f000 f934 	bl	8005ca8 <BSP_LCD_FillRect>

  DrawProp.TextColor = color_backup;
 8005a40:	4a06      	ldr	r2, [pc, #24]	; (8005a5c <BSP_LCD_ClearStringLine+0x58>)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <BSP_LCD_ClearStringLine+0x58>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ff9d 	bl	800598c <BSP_LCD_SetTextColor>
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd90      	pop	{r4, r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000b3c 	.word	0x20000b3c

08005a60 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	80fb      	strh	r3, [r7, #6]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	80bb      	strh	r3, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005a72:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <BSP_LCD_DisplayChar+0x50>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005a7c:	490c      	ldr	r1, [pc, #48]	; (8005ab0 <BSP_LCD_DisplayChar+0x50>)
 8005a7e:	6889      	ldr	r1, [r1, #8]
 8005a80:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005a82:	fb01 f103 	mul.w	r1, r1, r3
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <BSP_LCD_DisplayChar+0x50>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	889b      	ldrh	r3, [r3, #4]
 8005a8c:	3307      	adds	r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da00      	bge.n	8005a94 <BSP_LCD_DisplayChar+0x34>
 8005a92:	3307      	adds	r3, #7
 8005a94:	10db      	asrs	r3, r3, #3
 8005a96:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005a9a:	441a      	add	r2, r3
 8005a9c:	88b9      	ldrh	r1, [r7, #4]
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 f9af 	bl	8005e04 <DrawChar>
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000b3c 	.word	0x20000b3c

08005ab4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60ba      	str	r2, [r7, #8]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4603      	mov	r3, r0
 8005ac0:	81fb      	strh	r3, [r7, #14]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	81bb      	strh	r3, [r7, #12]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8005aca:	2301      	movs	r3, #1
 8005acc:	83fb      	strh	r3, [r7, #30]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 8005ade:	e002      	b.n	8005ae6 <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	617a      	str	r2, [r7, #20]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f6      	bne.n	8005ae0 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 8005af2:	f7ff ff3f 	bl	8005974 <BSP_LCD_GetXSize>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <BSP_LCD_DisplayStringAt+0x114>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	889b      	ldrh	r3, [r3, #4]
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d014      	beq.n	8005b34 <BSP_LCD_DisplayStringAt+0x80>
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	dc23      	bgt.n	8005b56 <BSP_LCD_DisplayStringAt+0xa2>
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d002      	beq.n	8005b18 <BSP_LCD_DisplayStringAt+0x64>
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d011      	beq.n	8005b3a <BSP_LCD_DisplayStringAt+0x86>
 8005b16:	e01e      	b.n	8005b56 <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <BSP_LCD_DisplayStringAt+0x114>)
 8005b20:	6892      	ldr	r2, [r2, #8]
 8005b22:	8892      	ldrh	r2, [r2, #4]
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	89fb      	ldrh	r3, [r7, #14]
 8005b2e:	4413      	add	r3, r2
 8005b30:	83fb      	strh	r3, [r7, #30]
      break;
 8005b32:	e013      	b.n	8005b5c <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 8005b34:	89fb      	ldrh	r3, [r7, #14]
 8005b36:	83fb      	strh	r3, [r7, #30]
      break;
 8005b38:	e010      	b.n	8005b5c <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <BSP_LCD_DisplayStringAt+0x114>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	889b      	ldrh	r3, [r3, #4]
 8005b48:	fb12 f303 	smulbb	r3, r2, r3
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	89fb      	ldrh	r3, [r7, #14]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	83fb      	strh	r3, [r7, #30]
      break;
 8005b54:	e002      	b.n	8005b5c <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 8005b56:	89fb      	ldrh	r3, [r7, #14]
 8005b58:	83fb      	strh	r3, [r7, #30]
      break;
 8005b5a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8005b5c:	8bfb      	ldrh	r3, [r7, #30]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <BSP_LCD_DisplayStringAt+0xb6>
 8005b62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da15      	bge.n	8005b96 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8005b6e:	e012      	b.n	8005b96 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	89b9      	ldrh	r1, [r7, #12]
 8005b76:	8bfb      	ldrh	r3, [r7, #30]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ff71 	bl	8005a60 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8005b7e:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <BSP_LCD_DisplayStringAt+0x114>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	889a      	ldrh	r2, [r3, #4]
 8005b84:	8bfb      	ldrh	r3, [r7, #30]
 8005b86:	4413      	add	r3, r2
 8005b88:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60bb      	str	r3, [r7, #8]
    i++;
 8005b90:	8bbb      	ldrh	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00f      	beq.n	8005bbe <BSP_LCD_DisplayStringAt+0x10a>
 8005b9e:	f7ff fee9 	bl	8005974 <BSP_LCD_GetXSize>
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	8bbb      	ldrh	r3, [r7, #28]
 8005ba6:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <BSP_LCD_DisplayStringAt+0x114>)
 8005ba8:	6892      	ldr	r2, [r2, #8]
 8005baa:	8892      	ldrh	r2, [r2, #4]
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	1acb      	subs	r3, r1, r3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	4a04      	ldr	r2, [pc, #16]	; (8005bc8 <BSP_LCD_DisplayStringAt+0x114>)
 8005bb6:	6892      	ldr	r2, [r2, #8]
 8005bb8:	8892      	ldrh	r2, [r2, #4]
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d2d8      	bcs.n	8005b70 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000b3c 	.word	0x20000b3c

08005bcc <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	6039      	str	r1, [r7, #0]
 8005bd6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8005bd8:	f7ff ff08 	bl	80059ec <BSP_LCD_GetFont>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	88db      	ldrh	r3, [r3, #6]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	fb12 f303 	smulbb	r3, r2, r3
 8005be6:	b299      	uxth	r1, r3
 8005be8:	2303      	movs	r3, #3
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	2000      	movs	r0, #0
 8005bee:	f7ff ff61 	bl	8005ab4 <BSP_LCD_DisplayStringAt>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	80fb      	strh	r3, [r7, #6]
 8005c06:	460b      	mov	r3, r1
 8005c08:	80bb      	strh	r3, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <BSP_LCD_DrawPixel+0x34>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d006      	beq.n	8005c26 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <BSP_LCD_DrawPixel+0x34>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	88b9      	ldrh	r1, [r7, #4]
 8005c22:	88f8      	ldrh	r0, [r7, #6]
 8005c24:	4798      	blx	r3
  }
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200003a4 	.word	0x200003a4

08005c34 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	80fb      	strh	r3, [r7, #6]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	80bb      	strh	r3, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 8005c4a:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <BSP_LCD_DrawHLine+0x6c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8005c54:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <BSP_LCD_DrawHLine+0x6c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a1c      	ldr	r4, [r3, #32]
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <BSP_LCD_DrawHLine+0x70>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	b298      	uxth	r0, r3
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	88ba      	ldrh	r2, [r7, #4]
 8005c64:	88f9      	ldrh	r1, [r7, #6]
 8005c66:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8005c68:	e015      	b.n	8005c96 <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	e00e      	b.n	8005c8e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	88fb      	ldrh	r3, [r7, #6]
 8005c76:	4413      	add	r3, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <BSP_LCD_DrawHLine+0x70>)
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	b292      	uxth	r2, r2
 8005c80:	88b9      	ldrh	r1, [r7, #4]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff ffba 	bl	8005bfc <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	887b      	ldrh	r3, [r7, #2]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d3ec      	bcc.n	8005c70 <BSP_LCD_DrawHLine+0x3c>
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd90      	pop	{r4, r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	200003a4 	.word	0x200003a4
 8005ca4:	20000b3c 	.word	0x20000b3c

08005ca8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4604      	mov	r4, r0
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	80fb      	strh	r3, [r7, #6]
 8005cba:	4603      	mov	r3, r0
 8005cbc:	80bb      	strh	r3, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	807b      	strh	r3, [r7, #2]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <BSP_LCD_FillRect+0x50>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fe5d 	bl	800598c <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);
 8005cd2:	88bb      	ldrh	r3, [r7, #4]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	80ba      	strh	r2, [r7, #4]
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	88f8      	ldrh	r0, [r7, #6]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f7ff ffa9 	bl	8005c34 <BSP_LCD_DrawHLine>
  }
  while (Height--);
 8005ce2:	883b      	ldrh	r3, [r7, #0]
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	803a      	strh	r2, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f2      	bne.n	8005cd2 <BSP_LCD_FillRect+0x2a>
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000b3c 	.word	0x20000b3c

08005cfc <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <HAL_TIM_PWM_MspInit+0x48>)
 8005d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d08:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <HAL_TIM_PWM_MspInit+0x48>)
 8005d0a:	f043 0308 	orr.w	r3, r3, #8
 8005d0e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d10:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <HAL_TIM_PWM_MspInit+0x48>)
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d20:	2301      	movs	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d24:	2303      	movs	r3, #3
 8005d26:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	4619      	mov	r1, r3
 8005d36:	4804      	ldr	r0, [pc, #16]	; (8005d48 <HAL_TIM_PWM_MspInit+0x4c>)
 8005d38:	f001 fcc8 	bl	80076cc <HAL_GPIO_Init>
}
 8005d3c:	bf00      	nop
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	48002000 	.word	0x48002000

08005d4c <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 8005d52:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d56:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d5e:	4b26      	ldr	r3, [pc, #152]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d6a:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6e:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 8005d82:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d86:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d8e:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <BSP_LCD_MspInit+0xac>)
 8005d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8005d9a:	f7ff fcc1 	bl	8005720 <BSP_IO_Init>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 8005da4:	f7ff f8b6 	bl	8004f14 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8005da8:	2101      	movs	r1, #1
 8005daa:	2004      	movs	r0, #4
 8005dac:	f7ff fcfc 	bl	80057a8 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8005db0:	2301      	movs	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005db4:	2301      	movs	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8005dc4:	f107 030c 	add.w	r3, r7, #12
 8005dc8:	4619      	mov	r1, r3
 8005dca:	480c      	ldr	r0, [pc, #48]	; (8005dfc <BSP_LCD_MspInit+0xb0>)
 8005dcc:	f001 fc7e 	bl	80076cc <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	4619      	mov	r1, r3
 8005dea:	4805      	ldr	r0, [pc, #20]	; (8005e00 <BSP_LCD_MspInit+0xb4>)
 8005dec:	f001 fc6e 	bl	80076cc <HAL_GPIO_Init>
}
 8005df0:	bf00      	nop
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	48002000 	.word	0x48002000
 8005e00:	48001c00 	.word	0x48001c00

08005e04 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	603a      	str	r2, [r7, #0]
 8005e0e:	80fb      	strh	r3, [r7, #6]
 8005e10:	460b      	mov	r3, r1
 8005e12:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 8005e1c:	4b45      	ldr	r3, [pc, #276]	; (8005f34 <DrawChar+0x130>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	88db      	ldrh	r3, [r3, #6]
 8005e22:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8005e24:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <DrawChar+0x130>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	889b      	ldrh	r3, [r3, #4]
 8005e2a:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 8005e2c:	8a3b      	ldrh	r3, [r7, #16]
 8005e2e:	3307      	adds	r3, #7
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da00      	bge.n	8005e36 <DrawChar+0x32>
 8005e34:	3307      	adds	r3, #7
 8005e36:	10db      	asrs	r3, r3, #3
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	8a3b      	ldrh	r3, [r7, #16]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	e069      	b.n	8005f20 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8005e4c:	8a3b      	ldrh	r3, [r7, #16]
 8005e4e:	3307      	adds	r3, #7
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da00      	bge.n	8005e56 <DrawChar+0x52>
 8005e54:	3307      	adds	r3, #7
 8005e56:	10db      	asrs	r3, r3, #3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	fb03 f302 	mul.w	r3, r3, r2
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	4413      	add	r3, r2
 8005e64:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8005e66:	8a3b      	ldrh	r3, [r7, #16]
 8005e68:	3307      	adds	r3, #7
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da00      	bge.n	8005e70 <DrawChar+0x6c>
 8005e6e:	3307      	adds	r3, #7
 8005e70:	10db      	asrs	r3, r3, #3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d002      	beq.n	8005e7c <DrawChar+0x78>
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d004      	beq.n	8005e84 <DrawChar+0x80>
 8005e7a:	e00c      	b.n	8005e96 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	617b      	str	r3, [r7, #20]
        break;
 8005e82:	e016      	b.n	8005eb2 <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	3201      	adds	r2, #1
 8005e8e:	7812      	ldrb	r2, [r2, #0]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
        break;
 8005e94:	e00d      	b.n	8005eb2 <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	041a      	lsls	r2, r3, #16
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	3202      	adds	r2, #2
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
        break;
 8005eb0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	e029      	b.n	8005f0c <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 8005eb8:	8a3a      	ldrh	r2, [r7, #16]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00c      	beq.n	8005eee <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	4413      	add	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <DrawChar+0x130>)
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	88b9      	ldrh	r1, [r7, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fe88 	bl	8005bfc <BSP_LCD_DrawPixel>
 8005eec:	e00b      	b.n	8005f06 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	4a0e      	ldr	r2, [pc, #56]	; (8005f34 <DrawChar+0x130>)
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	b292      	uxth	r2, r2
 8005efe:	88b9      	ldrh	r1, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fe7b 	bl	8005bfc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	8a3b      	ldrh	r3, [r7, #16]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d3d1      	bcc.n	8005eb8 <DrawChar+0xb4>
      }
    }
    Ypos++;
 8005f14:	88bb      	ldrh	r3, [r7, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d391      	bcc.n	8005e4c <DrawChar+0x48>
  }
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000b3c 	.word	0x20000b3c

08005f38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f42:	2003      	movs	r0, #3
 8005f44:	f001 f960 	bl	8007208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f000 f80d 	bl	8005f68 <HAL_InitTick>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	71fb      	strb	r3, [r7, #7]
 8005f58:	e001      	b.n	8005f5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f5a:	f7fc fd83 	bl	8002a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005f74:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <HAL_InitTick+0x6c>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d023      	beq.n	8005fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <HAL_InitTick+0x70>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <HAL_InitTick+0x6c>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 f97b 	bl	800728e <HAL_SYSTICK_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10f      	bne.n	8005fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b0f      	cmp	r3, #15
 8005fa2:	d809      	bhi.n	8005fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	f001 f937 	bl	800721e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <HAL_InitTick+0x74>)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e007      	b.n	8005fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e004      	b.n	8005fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	e001      	b.n	8005fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200000d8 	.word	0x200000d8
 8005fd8:	20000004 	.word	0x20000004
 8005fdc:	200000d4 	.word	0x200000d4

08005fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_IncTick+0x20>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_IncTick+0x24>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4413      	add	r3, r2
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <HAL_IncTick+0x24>)
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	200000d8 	.word	0x200000d8
 8006004:	20000bb4 	.word	0x20000bb4

08006008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  return uwTick;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <HAL_GetTick+0x14>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000bb4 	.word	0x20000bb4

08006020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006028:	f7ff ffee 	bl	8006008 <HAL_GetTick>
 800602c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d005      	beq.n	8006046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800603a:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <HAL_Delay+0x44>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006046:	bf00      	nop
 8006048:	f7ff ffde 	bl	8006008 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	429a      	cmp	r2, r3
 8006056:	d8f7      	bhi.n	8006048 <HAL_Delay+0x28>
  {
  }
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200000d8 	.word	0x200000d8

08006068 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	609a      	str	r2, [r3, #8]
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3360      	adds	r3, #96	; 0x60
 80060e2:	461a      	mov	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b08      	ldr	r3, [pc, #32]	; (8006114 <LL_ADC_SetOffset+0x44>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	4313      	orrs	r3, r2
 8006100:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	03fff000 	.word	0x03fff000

08006118 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3360      	adds	r3, #96	; 0x60
 8006126:	461a      	mov	r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3360      	adds	r3, #96	; 0x60
 8006154:	461a      	mov	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	431a      	orrs	r2, r3
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	615a      	str	r2, [r3, #20]
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3330      	adds	r3, #48	; 0x30
 80061b0:	461a      	mov	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	0a1b      	lsrs	r3, r3, #8
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	f003 030c 	and.w	r3, r3, #12
 80061bc:	4413      	add	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	211f      	movs	r1, #31
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	0e9b      	lsrs	r3, r3, #26
 80061d8:	f003 011f 	and.w	r1, r3, #31
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	431a      	orrs	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3314      	adds	r3, #20
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	0e5b      	lsrs	r3, r3, #25
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	4413      	add	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	0d1b      	lsrs	r3, r3, #20
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	2107      	movs	r1, #7
 8006226:	fa01 f303 	lsl.w	r3, r1, r3
 800622a:	43db      	mvns	r3, r3
 800622c:	401a      	ands	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	0d1b      	lsrs	r3, r3, #20
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	fa01 f303 	lsl.w	r3, r1, r3
 800623c:	431a      	orrs	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006268:	43db      	mvns	r3, r3
 800626a:	401a      	ands	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f003 0318 	and.w	r3, r3, #24
 8006272:	4908      	ldr	r1, [pc, #32]	; (8006294 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006274:	40d9      	lsrs	r1, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	400b      	ands	r3, r1
 800627a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627e:	431a      	orrs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	0007ffff 	.word	0x0007ffff

08006298 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80062a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6093      	str	r3, [r2, #8]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d0:	d101      	bne.n	80062d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80062f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006320:	d101      	bne.n	8006326 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <LL_ADC_IsEnabled+0x18>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <LL_ADC_IsEnabled+0x1a>
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b04      	cmp	r3, #4
 800636c:	d101      	bne.n	8006372 <LL_ADC_REG_IsConversionOngoing+0x18>
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b08      	cmp	r3, #8
 8006392:	d101      	bne.n	8006398 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
	...

080063a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b089      	sub	sp, #36	; 0x24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e139      	b.n	8006636 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fa fe51 	bl	8001078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ff67 	bl	80062bc <LL_ADC_IsDeepPowerDownEnabled>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff ff4d 	bl	8006298 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ff82 	bl	800630c <LL_ADC_IsInternalRegulatorEnabled>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d115      	bne.n	800643a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff ff66 	bl	80062e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006418:	4b89      	ldr	r3, [pc, #548]	; (8006640 <HAL_ADC_Init+0x298>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	099b      	lsrs	r3, r3, #6
 800641e:	4a89      	ldr	r2, [pc, #548]	; (8006644 <HAL_ADC_Init+0x29c>)
 8006420:	fba2 2303 	umull	r2, r3, r2, r3
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	3301      	adds	r3, #1
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800642c:	e002      	b.n	8006434 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	3b01      	subs	r3, #1
 8006432:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f9      	bne.n	800642e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff ff64 	bl	800630c <LL_ADC_IsInternalRegulatorEnabled>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10d      	bne.n	8006466 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644e:	f043 0210 	orr.w	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	f043 0201 	orr.w	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff ff75 	bl	800635a <LL_ADC_REG_IsConversionOngoing>
 8006470:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 80d2 	bne.w	8006624 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 80ce 	bne.w	8006624 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006490:	f043 0202 	orr.w	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff ff49 	bl	8006334 <LL_ADC_IsEnabled>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d115      	bne.n	80064d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064a8:	4867      	ldr	r0, [pc, #412]	; (8006648 <HAL_ADC_Init+0x2a0>)
 80064aa:	f7ff ff43 	bl	8006334 <LL_ADC_IsEnabled>
 80064ae:	4604      	mov	r4, r0
 80064b0:	4866      	ldr	r0, [pc, #408]	; (800664c <HAL_ADC_Init+0x2a4>)
 80064b2:	f7ff ff3f 	bl	8006334 <LL_ADC_IsEnabled>
 80064b6:	4603      	mov	r3, r0
 80064b8:	431c      	orrs	r4, r3
 80064ba:	4865      	ldr	r0, [pc, #404]	; (8006650 <HAL_ADC_Init+0x2a8>)
 80064bc:	f7ff ff3a 	bl	8006334 <LL_ADC_IsEnabled>
 80064c0:	4603      	mov	r3, r0
 80064c2:	4323      	orrs	r3, r4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4619      	mov	r1, r3
 80064ce:	4861      	ldr	r0, [pc, #388]	; (8006654 <HAL_ADC_Init+0x2ac>)
 80064d0:	f7ff fdca 	bl	8006068 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	7e5b      	ldrb	r3, [r3, #25]
 80064d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80064e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80064ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064f4:	4313      	orrs	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d106      	bne.n	8006510 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	3b01      	subs	r3, #1
 8006508:	045b      	lsls	r3, r3, #17
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	4313      	orrs	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	2b00      	cmp	r3, #0
 8006516:	d009      	beq.n	800652c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4313      	orrs	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	4b49      	ldr	r3, [pc, #292]	; (8006658 <HAL_ADC_Init+0x2b0>)
 8006534:	4013      	ands	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	69b9      	ldr	r1, [r7, #24]
 800653c:	430b      	orrs	r3, r1
 800653e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff ff08 	bl	800635a <LL_ADC_REG_IsConversionOngoing>
 800654a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff ff15 	bl	8006380 <LL_ADC_INJ_IsConversionOngoing>
 8006556:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d140      	bne.n	80065e0 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d13d      	bne.n	80065e0 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	7e1b      	ldrb	r3, [r3, #24]
 800656c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800656e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006576:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006586:	f023 0306 	bic.w	r3, r3, #6
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	69b9      	ldr	r1, [r7, #24]
 8006590:	430b      	orrs	r3, r1
 8006592:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800659a:	2b01      	cmp	r3, #1
 800659c:	d118      	bne.n	80065d0 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065a8:	f023 0304 	bic.w	r3, r3, #4
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80065b4:	4311      	orrs	r1, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80065ba:	4311      	orrs	r1, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065c0:	430a      	orrs	r2, r1
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0201 	orr.w	r2, r2, #1
 80065cc:	611a      	str	r2, [r3, #16]
 80065ce:	e007      	b.n	80065e0 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10c      	bne.n	8006602 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f023 010f 	bic.w	r1, r3, #15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006600:	e007      	b.n	8006612 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 020f 	bic.w	r2, r2, #15
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	f043 0201 	orr.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	659a      	str	r2, [r3, #88]	; 0x58
 8006622:	e007      	b.n	8006634 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	f043 0210 	orr.w	r2, r3, #16
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006634:	7ffb      	ldrb	r3, [r7, #31]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3724      	adds	r7, #36	; 0x24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd90      	pop	{r4, r7, pc}
 800663e:	bf00      	nop
 8006640:	20000004 	.word	0x20000004
 8006644:	053e2d63 	.word	0x053e2d63
 8006648:	50040000 	.word	0x50040000
 800664c:	50040100 	.word	0x50040100
 8006650:	50040200 	.word	0x50040200
 8006654:	50040300 	.word	0x50040300
 8006658:	fff0c007 	.word	0xfff0c007

0800665c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b0b6      	sub	sp, #216	; 0xd8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_ADC_ConfigChannel+0x22>
 800667a:	2302      	movs	r3, #2
 800667c:	e3e3      	b.n	8006e46 <HAL_ADC_ConfigChannel+0x7ea>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fe65 	bl	800635a <LL_ADC_REG_IsConversionOngoing>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	f040 83c4 	bne.w	8006e20 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b05      	cmp	r3, #5
 800669e:	d824      	bhi.n	80066ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	3b02      	subs	r3, #2
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d81b      	bhi.n	80066e2 <HAL_ADC_ConfigChannel+0x86>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <HAL_ADC_ConfigChannel+0x54>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066c9 	.word	0x080066c9
 80066b8:	080066d1 	.word	0x080066d1
 80066bc:	080066d9 	.word	0x080066d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	220c      	movs	r2, #12
 80066c4:	605a      	str	r2, [r3, #4]
          break;
 80066c6:	e011      	b.n	80066ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2212      	movs	r2, #18
 80066cc:	605a      	str	r2, [r3, #4]
          break;
 80066ce:	e00d      	b.n	80066ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2218      	movs	r2, #24
 80066d4:	605a      	str	r2, [r3, #4]
          break;
 80066d6:	e009      	b.n	80066ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066de:	605a      	str	r2, [r3, #4]
          break;
 80066e0:	e004      	b.n	80066ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2206      	movs	r2, #6
 80066e6:	605a      	str	r2, [r3, #4]
          break;
 80066e8:	e000      	b.n	80066ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80066ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	f7ff fd51 	bl	80061a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fe29 	bl	800635a <LL_ADC_REG_IsConversionOngoing>
 8006708:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fe35 	bl	8006380 <LL_ADC_INJ_IsConversionOngoing>
 8006716:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800671a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 81c1 	bne.w	8006aa6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 81bc 	bne.w	8006aa6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006736:	d10f      	bne.n	8006758 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	4619      	mov	r1, r3
 8006744:	f7ff fd58 	bl	80061f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fd12 	bl	800617a <LL_ADC_SetSamplingTimeCommonConfig>
 8006756:	e00e      	b.n	8006776 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6819      	ldr	r1, [r3, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	461a      	mov	r2, r3
 8006766:	f7ff fd47 	bl	80061f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fd02 	bl	800617a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695a      	ldr	r2, [r3, #20]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	08db      	lsrs	r3, r3, #3
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b04      	cmp	r3, #4
 8006796:	d00a      	beq.n	80067ae <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	6919      	ldr	r1, [r3, #16]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067a8:	f7ff fc92 	bl	80060d0 <LL_ADC_SetOffset>
 80067ac:	e17b      	b.n	8006aa6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fcaf 	bl	8006118 <LL_ADC_GetOffsetChannel>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <HAL_ADC_ConfigChannel+0x17e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fca4 	bl	8006118 <LL_ADC_GetOffsetChannel>
 80067d0:	4603      	mov	r3, r0
 80067d2:	0e9b      	lsrs	r3, r3, #26
 80067d4:	f003 021f 	and.w	r2, r3, #31
 80067d8:	e01e      	b.n	8006818 <HAL_ADC_ConfigChannel+0x1bc>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fc99 	bl	8006118 <LL_ADC_GetOffsetChannel>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067f0:	fa93 f3a3 	rbit	r3, r3
 80067f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80067f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8006808:	2320      	movs	r3, #32
 800680a:	e004      	b.n	8006816 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800680c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006810:	fab3 f383 	clz	r3, r3
 8006814:	b2db      	uxtb	r3, r3
 8006816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_ADC_ConfigChannel+0x1d4>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	0e9b      	lsrs	r3, r3, #26
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	e018      	b.n	8006862 <HAL_ADC_ConfigChannel+0x206>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800683c:	fa93 f3a3 	rbit	r3, r3
 8006840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800684c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8006854:	2320      	movs	r3, #32
 8006856:	e004      	b.n	8006862 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8006858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800685c:	fab3 f383 	clz	r3, r3
 8006860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006862:	429a      	cmp	r2, r3
 8006864:	d106      	bne.n	8006874 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	2100      	movs	r1, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fc68 	bl	8006144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fc4c 	bl	8006118 <LL_ADC_GetOffsetChannel>
 8006880:	4603      	mov	r3, r0
 8006882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <HAL_ADC_ConfigChannel+0x244>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2101      	movs	r1, #1
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fc41 	bl	8006118 <LL_ADC_GetOffsetChannel>
 8006896:	4603      	mov	r3, r0
 8006898:	0e9b      	lsrs	r3, r3, #26
 800689a:	f003 021f 	and.w	r2, r3, #31
 800689e:	e01e      	b.n	80068de <HAL_ADC_ConfigChannel+0x282>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2101      	movs	r1, #1
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fc36 	bl	8006118 <LL_ADC_GetOffsetChannel>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068b6:	fa93 f3a3 	rbit	r3, r3
 80068ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80068be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80068c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80068ce:	2320      	movs	r3, #32
 80068d0:	e004      	b.n	80068dc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80068d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068d6:	fab3 f383 	clz	r3, r3
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <HAL_ADC_ConfigChannel+0x29a>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	0e9b      	lsrs	r3, r3, #26
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	e018      	b.n	8006928 <HAL_ADC_ConfigChannel+0x2cc>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006902:	fa93 f3a3 	rbit	r3, r3
 8006906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800690a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800690e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800691a:	2320      	movs	r3, #32
 800691c:	e004      	b.n	8006928 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800691e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006922:	fab3 f383 	clz	r3, r3
 8006926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006928:	429a      	cmp	r2, r3
 800692a:	d106      	bne.n	800693a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2200      	movs	r2, #0
 8006932:	2101      	movs	r1, #1
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff fc05 	bl	8006144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2102      	movs	r1, #2
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fbe9 	bl	8006118 <LL_ADC_GetOffsetChannel>
 8006946:	4603      	mov	r3, r0
 8006948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <HAL_ADC_ConfigChannel+0x30a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2102      	movs	r1, #2
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fbde 	bl	8006118 <LL_ADC_GetOffsetChannel>
 800695c:	4603      	mov	r3, r0
 800695e:	0e9b      	lsrs	r3, r3, #26
 8006960:	f003 021f 	and.w	r2, r3, #31
 8006964:	e01e      	b.n	80069a4 <HAL_ADC_ConfigChannel+0x348>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2102      	movs	r1, #2
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fbd3 	bl	8006118 <LL_ADC_GetOffsetChannel>
 8006972:	4603      	mov	r3, r0
 8006974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800697c:	fa93 f3a3 	rbit	r3, r3
 8006980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800698c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8006994:	2320      	movs	r3, #32
 8006996:	e004      	b.n	80069a2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8006998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800699c:	fab3 f383 	clz	r3, r3
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x360>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	0e9b      	lsrs	r3, r3, #26
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	e016      	b.n	80069ea <HAL_ADC_ConfigChannel+0x38e>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069c8:	fa93 f3a3 	rbit	r3, r3
 80069cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80069ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80069d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80069dc:	2320      	movs	r3, #32
 80069de:	e004      	b.n	80069ea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80069e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e4:	fab3 f383 	clz	r3, r3
 80069e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d106      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	2102      	movs	r1, #2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fba4 	bl	8006144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2103      	movs	r1, #3
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fb88 	bl	8006118 <LL_ADC_GetOffsetChannel>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <HAL_ADC_ConfigChannel+0x3cc>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2103      	movs	r1, #3
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff fb7d 	bl	8006118 <LL_ADC_GetOffsetChannel>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	0e9b      	lsrs	r3, r3, #26
 8006a22:	f003 021f 	and.w	r2, r3, #31
 8006a26:	e017      	b.n	8006a58 <HAL_ADC_ConfigChannel+0x3fc>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2103      	movs	r1, #3
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fb72 	bl	8006118 <LL_ADC_GetOffsetChannel>
 8006a34:	4603      	mov	r3, r0
 8006a36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a3a:	fa93 f3a3 	rbit	r3, r3
 8006a3e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a42:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8006a4a:	2320      	movs	r3, #32
 8006a4c:	e003      	b.n	8006a56 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8006a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a50:	fab3 f383 	clz	r3, r3
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <HAL_ADC_ConfigChannel+0x414>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	0e9b      	lsrs	r3, r3, #26
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	e011      	b.n	8006a94 <HAL_ADC_ConfigChannel+0x438>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a78:	fa93 f3a3 	rbit	r3, r3
 8006a7c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8006a88:	2320      	movs	r3, #32
 8006a8a:	e003      	b.n	8006a94 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8006a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8e:	fab3 f383 	clz	r3, r3
 8006a92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d106      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2103      	movs	r1, #3
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fb4f 	bl	8006144 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fc42 	bl	8006334 <LL_ADC_IsEnabled>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 8140 	bne.w	8006d38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6819      	ldr	r1, [r3, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f7ff fbc3 	bl	8006250 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4a8f      	ldr	r2, [pc, #572]	; (8006d0c <HAL_ADC_ConfigChannel+0x6b0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	f040 8131 	bne.w	8006d38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <HAL_ADC_ConfigChannel+0x4a2>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	0e9b      	lsrs	r3, r3, #26
 8006aec:	3301      	adds	r3, #1
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	2b09      	cmp	r3, #9
 8006af4:	bf94      	ite	ls
 8006af6:	2301      	movls	r3, #1
 8006af8:	2300      	movhi	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	e019      	b.n	8006b32 <HAL_ADC_ConfigChannel+0x4d6>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b06:	fa93 f3a3 	rbit	r3, r3
 8006b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8006b16:	2320      	movs	r3, #32
 8006b18:	e003      	b.n	8006b22 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8006b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b1c:	fab3 f383 	clz	r3, r3
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	3301      	adds	r3, #1
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	bf94      	ite	ls
 8006b2c:	2301      	movls	r3, #1
 8006b2e:	2300      	movhi	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d079      	beq.n	8006c2a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d107      	bne.n	8006b52 <HAL_ADC_ConfigChannel+0x4f6>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	0e9b      	lsrs	r3, r3, #26
 8006b48:	3301      	adds	r3, #1
 8006b4a:	069b      	lsls	r3, r3, #26
 8006b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b50:	e015      	b.n	8006b7e <HAL_ADC_ConfigChannel+0x522>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b5a:	fa93 f3a3 	rbit	r3, r3
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8006b6a:	2320      	movs	r3, #32
 8006b6c:	e003      	b.n	8006b76 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8006b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b70:	fab3 f383 	clz	r3, r3
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	3301      	adds	r3, #1
 8006b78:	069b      	lsls	r3, r3, #26
 8006b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <HAL_ADC_ConfigChannel+0x542>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	0e9b      	lsrs	r3, r3, #26
 8006b90:	3301      	adds	r3, #1
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	2101      	movs	r1, #1
 8006b98:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9c:	e017      	b.n	8006bce <HAL_ADC_ConfigChannel+0x572>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba6:	fa93 f3a3 	rbit	r3, r3
 8006baa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8006bb6:	2320      	movs	r3, #32
 8006bb8:	e003      	b.n	8006bc2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8006bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbc:	fab3 f383 	clz	r3, r3
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2101      	movs	r1, #1
 8006bca:	fa01 f303 	lsl.w	r3, r1, r3
 8006bce:	ea42 0103 	orr.w	r1, r2, r3
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <HAL_ADC_ConfigChannel+0x598>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	0e9b      	lsrs	r3, r3, #26
 8006be4:	3301      	adds	r3, #1
 8006be6:	f003 021f 	and.w	r2, r3, #31
 8006bea:	4613      	mov	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4413      	add	r3, r2
 8006bf0:	051b      	lsls	r3, r3, #20
 8006bf2:	e018      	b.n	8006c26 <HAL_ADC_ConfigChannel+0x5ca>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	fa93 f3a3 	rbit	r3, r3
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	e003      	b.n	8006c18 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c12:	fab3 f383 	clz	r3, r3
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	3301      	adds	r3, #1
 8006c1a:	f003 021f 	and.w	r2, r3, #31
 8006c1e:	4613      	mov	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4413      	add	r3, r2
 8006c24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c26:	430b      	orrs	r3, r1
 8006c28:	e081      	b.n	8006d2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d107      	bne.n	8006c46 <HAL_ADC_ConfigChannel+0x5ea>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	0e9b      	lsrs	r3, r3, #26
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	069b      	lsls	r3, r3, #26
 8006c40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c44:	e015      	b.n	8006c72 <HAL_ADC_ConfigChannel+0x616>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	fa93 f3a3 	rbit	r3, r3
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8006c5e:	2320      	movs	r3, #32
 8006c60:	e003      	b.n	8006c6a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	fab3 f383 	clz	r3, r3
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	069b      	lsls	r3, r3, #26
 8006c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <HAL_ADC_ConfigChannel+0x636>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	0e9b      	lsrs	r3, r3, #26
 8006c84:	3301      	adds	r3, #1
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	e017      	b.n	8006cc2 <HAL_ADC_ConfigChannel+0x666>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	fa93 f3a3 	rbit	r3, r3
 8006c9e:	61fb      	str	r3, [r7, #28]
  return result;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8006caa:	2320      	movs	r3, #32
 8006cac:	e003      	b.n	8006cb6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	fab3 f383 	clz	r3, r3
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	ea42 0103 	orr.w	r1, r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <HAL_ADC_ConfigChannel+0x692>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	0e9b      	lsrs	r3, r3, #26
 8006cd8:	3301      	adds	r3, #1
 8006cda:	f003 021f 	and.w	r2, r3, #31
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3b1e      	subs	r3, #30
 8006ce6:	051b      	lsls	r3, r3, #20
 8006ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cec:	e01e      	b.n	8006d2c <HAL_ADC_ConfigChannel+0x6d0>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	fa93 f3a3 	rbit	r3, r3
 8006cfa:	613b      	str	r3, [r7, #16]
  return result;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006d06:	2320      	movs	r3, #32
 8006d08:	e006      	b.n	8006d18 <HAL_ADC_ConfigChannel+0x6bc>
 8006d0a:	bf00      	nop
 8006d0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	fab3 f383 	clz	r3, r3
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f003 021f 	and.w	r2, r3, #31
 8006d1e:	4613      	mov	r3, r2
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	3b1e      	subs	r3, #30
 8006d26:	051b      	lsls	r3, r3, #20
 8006d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	6892      	ldr	r2, [r2, #8]
 8006d32:	4619      	mov	r1, r3
 8006d34:	f7ff fa60 	bl	80061f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b44      	ldr	r3, [pc, #272]	; (8006e50 <HAL_ADC_ConfigChannel+0x7f4>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d07a      	beq.n	8006e3a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d44:	4843      	ldr	r0, [pc, #268]	; (8006e54 <HAL_ADC_ConfigChannel+0x7f8>)
 8006d46:	f7ff f9b5 	bl	80060b4 <LL_ADC_GetCommonPathInternalCh>
 8006d4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a41      	ldr	r2, [pc, #260]	; (8006e58 <HAL_ADC_ConfigChannel+0x7fc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d12c      	bne.n	8006db2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d126      	bne.n	8006db2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a3c      	ldr	r2, [pc, #240]	; (8006e5c <HAL_ADC_ConfigChannel+0x800>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <HAL_ADC_ConfigChannel+0x71c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a3b      	ldr	r2, [pc, #236]	; (8006e60 <HAL_ADC_ConfigChannel+0x804>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d15d      	bne.n	8006e34 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d80:	4619      	mov	r1, r3
 8006d82:	4834      	ldr	r0, [pc, #208]	; (8006e54 <HAL_ADC_ConfigChannel+0x7f8>)
 8006d84:	f7ff f983 	bl	800608e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <HAL_ADC_ConfigChannel+0x808>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	099b      	lsrs	r3, r3, #6
 8006d8e:	4a36      	ldr	r2, [pc, #216]	; (8006e68 <HAL_ADC_ConfigChannel+0x80c>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	099b      	lsrs	r3, r3, #6
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	4613      	mov	r3, r2
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006da2:	e002      	b.n	8006daa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f9      	bne.n	8006da4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006db0:	e040      	b.n	8006e34 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2d      	ldr	r2, [pc, #180]	; (8006e6c <HAL_ADC_ConfigChannel+0x810>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d118      	bne.n	8006dee <HAL_ADC_ConfigChannel+0x792>
 8006dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d112      	bne.n	8006dee <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a23      	ldr	r2, [pc, #140]	; (8006e5c <HAL_ADC_ConfigChannel+0x800>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_ADC_ConfigChannel+0x780>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <HAL_ADC_ConfigChannel+0x804>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d12d      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ddc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006de4:	4619      	mov	r1, r3
 8006de6:	481b      	ldr	r0, [pc, #108]	; (8006e54 <HAL_ADC_ConfigChannel+0x7f8>)
 8006de8:	f7ff f951 	bl	800608e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dec:	e024      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1f      	ldr	r2, [pc, #124]	; (8006e70 <HAL_ADC_ConfigChannel+0x814>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d120      	bne.n	8006e3a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d11a      	bne.n	8006e3a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a14      	ldr	r2, [pc, #80]	; (8006e5c <HAL_ADC_ConfigChannel+0x800>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d115      	bne.n	8006e3a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e16:	4619      	mov	r1, r3
 8006e18:	480e      	ldr	r0, [pc, #56]	; (8006e54 <HAL_ADC_ConfigChannel+0x7f8>)
 8006e1a:	f7ff f938 	bl	800608e <LL_ADC_SetCommonPathInternalCh>
 8006e1e:	e00c      	b.n	8006e3a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	f043 0220 	orr.w	r2, r3, #32
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006e32:	e002      	b.n	8006e3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006e42:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	37d8      	adds	r7, #216	; 0xd8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	80080000 	.word	0x80080000
 8006e54:	50040300 	.word	0x50040300
 8006e58:	c7520000 	.word	0xc7520000
 8006e5c:	50040000 	.word	0x50040000
 8006e60:	50040200 	.word	0x50040200
 8006e64:	20000004 	.word	0x20000004
 8006e68:	053e2d63 	.word	0x053e2d63
 8006e6c:	cb840000 	.word	0xcb840000
 8006e70:	80000001 	.word	0x80000001

08006e74 <LL_ADC_IsEnabled>:
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <LL_ADC_IsEnabled+0x18>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <LL_ADC_IsEnabled+0x1a>
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_ADC_REG_IsConversionOngoing>:
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d101      	bne.n	8006eb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ec0:	b590      	push	{r4, r7, lr}
 8006ec2:	b0a1      	sub	sp, #132	; 0x84
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e093      	b.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006eea:	2300      	movs	r3, #0
 8006eec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a47      	ldr	r2, [pc, #284]	; (8007010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d102      	bne.n	8006efe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006ef8:	4b46      	ldr	r3, [pc, #280]	; (8007014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e001      	b.n	8006f02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	f043 0220 	orr.w	r2, r3, #32
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e072      	b.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ffb9 	bl	8006e9a <LL_ADC_REG_IsConversionOngoing>
 8006f28:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff ffb3 	bl	8006e9a <LL_ADC_REG_IsConversionOngoing>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d154      	bne.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d151      	bne.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f40:	4b35      	ldr	r3, [pc, #212]	; (8007018 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006f42:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d02c      	beq.n	8006fa6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	6859      	ldr	r1, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f5e:	035b      	lsls	r3, r3, #13
 8006f60:	430b      	orrs	r3, r1
 8006f62:	431a      	orrs	r2, r3
 8006f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f68:	4829      	ldr	r0, [pc, #164]	; (8007010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006f6a:	f7ff ff83 	bl	8006e74 <LL_ADC_IsEnabled>
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4828      	ldr	r0, [pc, #160]	; (8007014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006f72:	f7ff ff7f 	bl	8006e74 <LL_ADC_IsEnabled>
 8006f76:	4603      	mov	r3, r0
 8006f78:	431c      	orrs	r4, r3
 8006f7a:	4828      	ldr	r0, [pc, #160]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006f7c:	f7ff ff7a 	bl	8006e74 <LL_ADC_IsEnabled>
 8006f80:	4603      	mov	r3, r0
 8006f82:	4323      	orrs	r3, r4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d137      	bne.n	8006ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006f90:	f023 030f 	bic.w	r3, r3, #15
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	6811      	ldr	r1, [r2, #0]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	6892      	ldr	r2, [r2, #8]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fa4:	e028      	b.n	8006ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fb2:	4817      	ldr	r0, [pc, #92]	; (8007010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006fb4:	f7ff ff5e 	bl	8006e74 <LL_ADC_IsEnabled>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	4816      	ldr	r0, [pc, #88]	; (8007014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006fbc:	f7ff ff5a 	bl	8006e74 <LL_ADC_IsEnabled>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	431c      	orrs	r4, r3
 8006fc4:	4815      	ldr	r0, [pc, #84]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006fc6:	f7ff ff55 	bl	8006e74 <LL_ADC_IsEnabled>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4323      	orrs	r3, r4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d112      	bne.n	8006ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006fda:	f023 030f 	bic.w	r3, r3, #15
 8006fde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006fe0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fe2:	e009      	b.n	8006ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	f043 0220 	orr.w	r2, r3, #32
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006ff6:	e000      	b.n	8006ffa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007002:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007006:	4618      	mov	r0, r3
 8007008:	3784      	adds	r7, #132	; 0x84
 800700a:	46bd      	mov	sp, r7
 800700c:	bd90      	pop	{r4, r7, pc}
 800700e:	bf00      	nop
 8007010:	50040000 	.word	0x50040000
 8007014:	50040100 	.word	0x50040100
 8007018:	50040300 	.word	0x50040300
 800701c:	50040200 	.word	0x50040200

08007020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <__NVIC_SetPriorityGrouping+0x44>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800703c:	4013      	ands	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800704c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007052:	4a04      	ldr	r2, [pc, #16]	; (8007064 <__NVIC_SetPriorityGrouping+0x44>)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	60d3      	str	r3, [r2, #12]
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <__NVIC_GetPriorityGrouping+0x18>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	f003 0307 	and.w	r3, r3, #7
}
 8007076:	4618      	mov	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800708e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007092:	2b00      	cmp	r3, #0
 8007094:	db0b      	blt.n	80070ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	f003 021f 	and.w	r2, r3, #31
 800709c:	4907      	ldr	r1, [pc, #28]	; (80070bc <__NVIC_EnableIRQ+0x38>)
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	2001      	movs	r0, #1
 80070a6:	fa00 f202 	lsl.w	r2, r0, r2
 80070aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	e000e100 	.word	0xe000e100

080070c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	db12      	blt.n	80070f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	f003 021f 	and.w	r2, r3, #31
 80070d8:	490a      	ldr	r1, [pc, #40]	; (8007104 <__NVIC_DisableIRQ+0x44>)
 80070da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	2001      	movs	r0, #1
 80070e2:	fa00 f202 	lsl.w	r2, r0, r2
 80070e6:	3320      	adds	r3, #32
 80070e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80070ec:	f3bf 8f4f 	dsb	sy
}
 80070f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80070f2:	f3bf 8f6f 	isb	sy
}
 80070f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	e000e100 	.word	0xe000e100

08007108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007118:	2b00      	cmp	r3, #0
 800711a:	db0a      	blt.n	8007132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	490c      	ldr	r1, [pc, #48]	; (8007154 <__NVIC_SetPriority+0x4c>)
 8007122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007126:	0112      	lsls	r2, r2, #4
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	440b      	add	r3, r1
 800712c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007130:	e00a      	b.n	8007148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	4908      	ldr	r1, [pc, #32]	; (8007158 <__NVIC_SetPriority+0x50>)
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	3b04      	subs	r3, #4
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	440b      	add	r3, r1
 8007146:	761a      	strb	r2, [r3, #24]
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	e000e100 	.word	0xe000e100
 8007158:	e000ed00 	.word	0xe000ed00

0800715c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800715c:	b480      	push	{r7}
 800715e:	b089      	sub	sp, #36	; 0x24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f1c3 0307 	rsb	r3, r3, #7
 8007176:	2b04      	cmp	r3, #4
 8007178:	bf28      	it	cs
 800717a:	2304      	movcs	r3, #4
 800717c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	3304      	adds	r3, #4
 8007182:	2b06      	cmp	r3, #6
 8007184:	d902      	bls.n	800718c <NVIC_EncodePriority+0x30>
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3b03      	subs	r3, #3
 800718a:	e000      	b.n	800718e <NVIC_EncodePriority+0x32>
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007190:	f04f 32ff 	mov.w	r2, #4294967295
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43da      	mvns	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	401a      	ands	r2, r3
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071a4:	f04f 31ff 	mov.w	r1, #4294967295
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	43d9      	mvns	r1, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b4:	4313      	orrs	r3, r2
         );
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3724      	adds	r7, #36	; 0x24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071d4:	d301      	bcc.n	80071da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071d6:	2301      	movs	r3, #1
 80071d8:	e00f      	b.n	80071fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071da:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <SysTick_Config+0x40>)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3b01      	subs	r3, #1
 80071e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071e2:	210f      	movs	r1, #15
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	f7ff ff8e 	bl	8007108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <SysTick_Config+0x40>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071f2:	4b04      	ldr	r3, [pc, #16]	; (8007204 <SysTick_Config+0x40>)
 80071f4:	2207      	movs	r2, #7
 80071f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	e000e010 	.word	0xe000e010

08007208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff05 	bl	8007020 <__NVIC_SetPriorityGrouping>
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
 8007224:	4603      	mov	r3, r0
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007230:	f7ff ff1a 	bl	8007068 <__NVIC_GetPriorityGrouping>
 8007234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	6978      	ldr	r0, [r7, #20]
 800723c:	f7ff ff8e 	bl	800715c <NVIC_EncodePriority>
 8007240:	4602      	mov	r2, r0
 8007242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff ff5d 	bl	8007108 <__NVIC_SetPriority>
}
 800724e:	bf00      	nop
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	4603      	mov	r3, r0
 800725e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff ff0d 	bl	8007084 <__NVIC_EnableIRQ>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	4603      	mov	r3, r0
 800727a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800727c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff1d 	bl	80070c0 <__NVIC_DisableIRQ>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff ff94 	bl	80071c4 <SysTick_Config>
 800729c:	4603      	mov	r3, r0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e075      	b.n	80073a6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7f9 ff9e 	bl	8001210 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ea:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4b2a      	ldr	r3, [pc, #168]	; (80073b0 <HAL_DCMI_Init+0x108>)
 8007306:	400b      	ands	r3, r1
 8007308:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800731e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800732a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007336:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007342:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800734e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b10      	cmp	r3, #16
 800735e:	d112      	bne.n	8007386 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7f1b      	ldrb	r3, [r3, #28]
 8007364:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	7f5b      	ldrb	r3, [r3, #29]
 800736a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800736c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7f9b      	ldrb	r3, [r3, #30]
 8007372:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8007374:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7fdb      	ldrb	r3, [r3, #31]
 800737c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8007382:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007384:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 021f 	orr.w	r2, r2, #31
 8007394:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	ffe0f007 	.word	0xffe0f007

080073b4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e0ac      	b.n	8007520 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 f8b2 	bl	8007534 <DFSDM_GetChannelFromInstance>
 80073d0:	4603      	mov	r3, r0
 80073d2:	4a55      	ldr	r2, [pc, #340]	; (8007528 <HAL_DFSDM_ChannelInit+0x174>)
 80073d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e09f      	b.n	8007520 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fa f801 	bl	80013e8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80073e6:	4b51      	ldr	r3, [pc, #324]	; (800752c <HAL_DFSDM_ChannelInit+0x178>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3301      	adds	r3, #1
 80073ec:	4a4f      	ldr	r2, [pc, #316]	; (800752c <HAL_DFSDM_ChannelInit+0x178>)
 80073ee:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80073f0:	4b4e      	ldr	r3, [pc, #312]	; (800752c <HAL_DFSDM_ChannelInit+0x178>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d125      	bne.n	8007444 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80073f8:	4b4d      	ldr	r3, [pc, #308]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a4c      	ldr	r2, [pc, #304]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 80073fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007402:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007404:	4b4a      	ldr	r3, [pc, #296]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	4948      	ldr	r1, [pc, #288]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007412:	4b47      	ldr	r3, [pc, #284]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a46      	ldr	r2, [pc, #280]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 8007418:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800741c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	791b      	ldrb	r3, [r3, #4]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d108      	bne.n	8007438 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8007426:	4b42      	ldr	r3, [pc, #264]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	3b01      	subs	r3, #1
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	493f      	ldr	r1, [pc, #252]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 8007434:	4313      	orrs	r3, r2
 8007436:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007438:	4b3d      	ldr	r3, [pc, #244]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a3c      	ldr	r2, [pc, #240]	; (8007530 <HAL_DFSDM_ChannelInit+0x17c>)
 800743e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007442:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007452:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6819      	ldr	r1, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007462:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007468:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 020f 	bic.w	r2, r2, #15
 8007480:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6819      	ldr	r1, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80074a8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6899      	ldr	r1, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	3b01      	subs	r3, #1
 80074ba:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f002 0207 	and.w	r2, r2, #7
 80074d4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6859      	ldr	r1, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007500:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f810 	bl	8007534 <DFSDM_GetChannelFromInstance>
 8007514:	4602      	mov	r2, r0
 8007516:	4904      	ldr	r1, [pc, #16]	; (8007528 <HAL_DFSDM_ChannelInit+0x174>)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	200003ac 	.word	0x200003ac
 800752c:	200003a8 	.word	0x200003a8
 8007530:	40016000 	.word	0x40016000

08007534 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <DFSDM_GetChannelFromInstance+0x7c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d102      	bne.n	800754a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e02b      	b.n	80075a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <DFSDM_GetChannelFromInstance+0x80>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d102      	bne.n	8007558 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007552:	2301      	movs	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e024      	b.n	80075a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <DFSDM_GetChannelFromInstance+0x84>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d102      	bne.n	8007566 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007560:	2302      	movs	r3, #2
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e01d      	b.n	80075a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a14      	ldr	r2, [pc, #80]	; (80075bc <DFSDM_GetChannelFromInstance+0x88>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d102      	bne.n	8007574 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800756e:	2304      	movs	r3, #4
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	e016      	b.n	80075a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <DFSDM_GetChannelFromInstance+0x8c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d102      	bne.n	8007582 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800757c:	2305      	movs	r3, #5
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	e00f      	b.n	80075a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a0f      	ldr	r2, [pc, #60]	; (80075c4 <DFSDM_GetChannelFromInstance+0x90>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d102      	bne.n	8007590 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800758a:	2306      	movs	r3, #6
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e008      	b.n	80075a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a0d      	ldr	r2, [pc, #52]	; (80075c8 <DFSDM_GetChannelFromInstance+0x94>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d102      	bne.n	800759e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8007598:	2307      	movs	r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e001      	b.n	80075a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800759e:	2303      	movs	r3, #3
 80075a0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80075a2:	68fb      	ldr	r3, [r7, #12]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	40016000 	.word	0x40016000
 80075b4:	40016020 	.word	0x40016020
 80075b8:	40016040 	.word	0x40016040
 80075bc:	40016080 	.word	0x40016080
 80075c0:	400160a0 	.word	0x400160a0
 80075c4:	400160c0 	.word	0x400160c0
 80075c8:	400160e0 	.word	0x400160e0

080075cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d008      	beq.n	80075f6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2204      	movs	r2, #4
 80075e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e022      	b.n	800763c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 020e 	bic.w	r2, r2, #14
 8007604:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f003 021c 	and.w	r2, r3, #28
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2101      	movs	r1, #1
 8007624:	fa01 f202 	lsl.w	r2, r1, r2
 8007628:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d005      	beq.n	800766c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2204      	movs	r2, #4
 8007664:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	73fb      	strb	r3, [r7, #15]
 800766a:	e029      	b.n	80076c0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 020e 	bic.w	r2, r2, #14
 800767a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007690:	f003 021c 	and.w	r2, r3, #28
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f202 	lsl.w	r2, r1, r2
 800769e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
    }
  }
  return status;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076da:	e166      	b.n	80079aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2101      	movs	r1, #1
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	fa01 f303 	lsl.w	r3, r1, r3
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8158 	beq.w	80079a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d00b      	beq.n	8007714 <HAL_GPIO_Init+0x48>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d007      	beq.n	8007714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007708:	2b11      	cmp	r3, #17
 800770a:	d003      	beq.n	8007714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b12      	cmp	r3, #18
 8007712:	d130      	bne.n	8007776 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	2203      	movs	r2, #3
 8007720:	fa02 f303 	lsl.w	r3, r2, r3
 8007724:	43db      	mvns	r3, r3
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4013      	ands	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800774a:	2201      	movs	r2, #1
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43db      	mvns	r3, r3
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4013      	ands	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	f003 0201 	and.w	r2, r3, #1
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	2203      	movs	r2, #3
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	43db      	mvns	r3, r3
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4013      	ands	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d003      	beq.n	80077b6 <HAL_GPIO_Init+0xea>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b12      	cmp	r3, #18
 80077b4:	d123      	bne.n	80077fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	08da      	lsrs	r2, r3, #3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3208      	adds	r2, #8
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	220f      	movs	r2, #15
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43db      	mvns	r3, r3
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4013      	ands	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	691a      	ldr	r2, [r3, #16]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	08da      	lsrs	r2, r3, #3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3208      	adds	r2, #8
 80077f8:	6939      	ldr	r1, [r7, #16]
 80077fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	2203      	movs	r2, #3
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	43db      	mvns	r3, r3
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4013      	ands	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f003 0203 	and.w	r2, r3, #3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 80b2 	beq.w	80079a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007840:	4b61      	ldr	r3, [pc, #388]	; (80079c8 <HAL_GPIO_Init+0x2fc>)
 8007842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007844:	4a60      	ldr	r2, [pc, #384]	; (80079c8 <HAL_GPIO_Init+0x2fc>)
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	6613      	str	r3, [r2, #96]	; 0x60
 800784c:	4b5e      	ldr	r3, [pc, #376]	; (80079c8 <HAL_GPIO_Init+0x2fc>)
 800784e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	60bb      	str	r3, [r7, #8]
 8007856:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007858:	4a5c      	ldr	r2, [pc, #368]	; (80079cc <HAL_GPIO_Init+0x300>)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	089b      	lsrs	r3, r3, #2
 800785e:	3302      	adds	r3, #2
 8007860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f003 0303 	and.w	r3, r3, #3
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	220f      	movs	r2, #15
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	43db      	mvns	r3, r3
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4013      	ands	r3, r2
 800787a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007882:	d02b      	beq.n	80078dc <HAL_GPIO_Init+0x210>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a52      	ldr	r2, [pc, #328]	; (80079d0 <HAL_GPIO_Init+0x304>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d025      	beq.n	80078d8 <HAL_GPIO_Init+0x20c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a51      	ldr	r2, [pc, #324]	; (80079d4 <HAL_GPIO_Init+0x308>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d01f      	beq.n	80078d4 <HAL_GPIO_Init+0x208>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a50      	ldr	r2, [pc, #320]	; (80079d8 <HAL_GPIO_Init+0x30c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d019      	beq.n	80078d0 <HAL_GPIO_Init+0x204>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a4f      	ldr	r2, [pc, #316]	; (80079dc <HAL_GPIO_Init+0x310>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d013      	beq.n	80078cc <HAL_GPIO_Init+0x200>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a4e      	ldr	r2, [pc, #312]	; (80079e0 <HAL_GPIO_Init+0x314>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00d      	beq.n	80078c8 <HAL_GPIO_Init+0x1fc>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a4d      	ldr	r2, [pc, #308]	; (80079e4 <HAL_GPIO_Init+0x318>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d007      	beq.n	80078c4 <HAL_GPIO_Init+0x1f8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a4c      	ldr	r2, [pc, #304]	; (80079e8 <HAL_GPIO_Init+0x31c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d101      	bne.n	80078c0 <HAL_GPIO_Init+0x1f4>
 80078bc:	2307      	movs	r3, #7
 80078be:	e00e      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078c0:	2308      	movs	r3, #8
 80078c2:	e00c      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078c4:	2306      	movs	r3, #6
 80078c6:	e00a      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078c8:	2305      	movs	r3, #5
 80078ca:	e008      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078cc:	2304      	movs	r3, #4
 80078ce:	e006      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078d0:	2303      	movs	r3, #3
 80078d2:	e004      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e002      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <HAL_GPIO_Init+0x212>
 80078dc:	2300      	movs	r3, #0
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	f002 0203 	and.w	r2, r2, #3
 80078e4:	0092      	lsls	r2, r2, #2
 80078e6:	4093      	lsls	r3, r2
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80078ee:	4937      	ldr	r1, [pc, #220]	; (80079cc <HAL_GPIO_Init+0x300>)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	089b      	lsrs	r3, r3, #2
 80078f4:	3302      	adds	r3, #2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80078fc:	4b3b      	ldr	r3, [pc, #236]	; (80079ec <HAL_GPIO_Init+0x320>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	43db      	mvns	r3, r3
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4013      	ands	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007920:	4a32      	ldr	r2, [pc, #200]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8007926:	4b31      	ldr	r3, [pc, #196]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	43db      	mvns	r3, r3
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4013      	ands	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800794a:	4a28      	ldr	r2, [pc, #160]	; (80079ec <HAL_GPIO_Init+0x320>)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007950:	4b26      	ldr	r3, [pc, #152]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	43db      	mvns	r3, r3
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4013      	ands	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007974:	4a1d      	ldr	r2, [pc, #116]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800797a:	4b1c      	ldr	r3, [pc, #112]	; (80079ec <HAL_GPIO_Init+0x320>)
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	43db      	mvns	r3, r3
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4013      	ands	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800799e:	4a13      	ldr	r2, [pc, #76]	; (80079ec <HAL_GPIO_Init+0x320>)
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3301      	adds	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f47f ae91 	bne.w	80076dc <HAL_GPIO_Init+0x10>
  }
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	40021000 	.word	0x40021000
 80079cc:	40010000 	.word	0x40010000
 80079d0:	48000400 	.word	0x48000400
 80079d4:	48000800 	.word	0x48000800
 80079d8:	48000c00 	.word	0x48000c00
 80079dc:	48001000 	.word	0x48001000
 80079e0:	48001400 	.word	0x48001400
 80079e4:	48001800 	.word	0x48001800
 80079e8:	48001c00 	.word	0x48001c00
 80079ec:	40010400 	.word	0x40010400

080079f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80079fe:	e0c9      	b.n	8007b94 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007a00:	2201      	movs	r2, #1
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80bc 	beq.w	8007b8e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007a16:	4a66      	ldr	r2, [pc, #408]	; (8007bb0 <HAL_GPIO_DeInit+0x1c0>)
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	089b      	lsrs	r3, r3, #2
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a22:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	220f      	movs	r2, #15
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4013      	ands	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007a3e:	d02b      	beq.n	8007a98 <HAL_GPIO_DeInit+0xa8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a5c      	ldr	r2, [pc, #368]	; (8007bb4 <HAL_GPIO_DeInit+0x1c4>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d025      	beq.n	8007a94 <HAL_GPIO_DeInit+0xa4>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a5b      	ldr	r2, [pc, #364]	; (8007bb8 <HAL_GPIO_DeInit+0x1c8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d01f      	beq.n	8007a90 <HAL_GPIO_DeInit+0xa0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a5a      	ldr	r2, [pc, #360]	; (8007bbc <HAL_GPIO_DeInit+0x1cc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d019      	beq.n	8007a8c <HAL_GPIO_DeInit+0x9c>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a59      	ldr	r2, [pc, #356]	; (8007bc0 <HAL_GPIO_DeInit+0x1d0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d013      	beq.n	8007a88 <HAL_GPIO_DeInit+0x98>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a58      	ldr	r2, [pc, #352]	; (8007bc4 <HAL_GPIO_DeInit+0x1d4>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00d      	beq.n	8007a84 <HAL_GPIO_DeInit+0x94>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a57      	ldr	r2, [pc, #348]	; (8007bc8 <HAL_GPIO_DeInit+0x1d8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <HAL_GPIO_DeInit+0x90>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a56      	ldr	r2, [pc, #344]	; (8007bcc <HAL_GPIO_DeInit+0x1dc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d101      	bne.n	8007a7c <HAL_GPIO_DeInit+0x8c>
 8007a78:	2307      	movs	r3, #7
 8007a7a:	e00e      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	e00c      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a80:	2306      	movs	r3, #6
 8007a82:	e00a      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a84:	2305      	movs	r3, #5
 8007a86:	e008      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	e006      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e004      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e002      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <HAL_GPIO_DeInit+0xaa>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	f002 0203 	and.w	r2, r2, #3
 8007aa0:	0092      	lsls	r2, r2, #2
 8007aa2:	4093      	lsls	r3, r2
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d132      	bne.n	8007b10 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007aaa:	4b49      	ldr	r3, [pc, #292]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	4947      	ldr	r1, [pc, #284]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007ab8:	4b45      	ldr	r3, [pc, #276]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	4943      	ldr	r1, [pc, #268]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007ac6:	4b42      	ldr	r3, [pc, #264]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	43db      	mvns	r3, r3
 8007ace:	4940      	ldr	r1, [pc, #256]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8007ad4:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	43db      	mvns	r3, r3
 8007adc:	493c      	ldr	r1, [pc, #240]	; (8007bd0 <HAL_GPIO_DeInit+0x1e0>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	220f      	movs	r2, #15
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007af2:	4a2f      	ldr	r2, [pc, #188]	; (8007bb0 <HAL_GPIO_DeInit+0x1c0>)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	089b      	lsrs	r3, r3, #2
 8007af8:	3302      	adds	r3, #2
 8007afa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	43da      	mvns	r2, r3
 8007b02:	482b      	ldr	r0, [pc, #172]	; (8007bb0 <HAL_GPIO_DeInit+0x1c0>)
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	089b      	lsrs	r3, r3, #2
 8007b08:	400a      	ands	r2, r1
 8007b0a:	3302      	adds	r3, #2
 8007b0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	2103      	movs	r1, #3
 8007b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	08da      	lsrs	r2, r3, #3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3208      	adds	r2, #8
 8007b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	220f      	movs	r2, #15
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	08d2      	lsrs	r2, r2, #3
 8007b44:	4019      	ands	r1, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3208      	adds	r2, #8
 8007b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	2103      	movs	r1, #3
 8007b58:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	401a      	ands	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	2101      	movs	r1, #1
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b70:	43db      	mvns	r3, r3
 8007b72:	401a      	ands	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	2103      	movs	r1, #3
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	43db      	mvns	r3, r3
 8007b88:	401a      	ands	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	3301      	adds	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f47f af2f 	bne.w	8007a00 <HAL_GPIO_DeInit+0x10>
  }
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	48000400 	.word	0x48000400
 8007bb8:	48000800 	.word	0x48000800
 8007bbc:	48000c00 	.word	0x48000c00
 8007bc0:	48001000 	.word	0x48001000
 8007bc4:	48001400 	.word	0x48001400
 8007bc8:	48001800 	.word	0x48001800
 8007bcc:	48001c00 	.word	0x48001c00
 8007bd0:	40010400 	.word	0x40010400

08007bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	807b      	strh	r3, [r7, #2]
 8007be0:	4613      	mov	r3, r2
 8007be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007be4:	787b      	ldrb	r3, [r7, #1]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007bea:	887a      	ldrh	r2, [r7, #2]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007bf0:	e002      	b.n	8007bf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007bf2:	887a      	ldrh	r2, [r7, #2]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c16:	887a      	ldrh	r2, [r7, #2]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	041a      	lsls	r2, r3, #16
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	43d9      	mvns	r1, r3
 8007c22:	887b      	ldrh	r3, [r7, #2]
 8007c24:	400b      	ands	r3, r1
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	619a      	str	r2, [r3, #24]
}
 8007c2c:	bf00      	nop
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c42:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c44:	695a      	ldr	r2, [r3, #20]
 8007c46:	88fb      	ldrh	r3, [r7, #6]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d006      	beq.n	8007c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c4e:	4a05      	ldr	r2, [pc, #20]	; (8007c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fa fa32 	bl	80020c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	40010400 	.word	0x40010400

08007c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e081      	b.n	8007d7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7f9 ff94 	bl	8001bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2224      	movs	r2, #36	; 0x24
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d107      	bne.n	8007ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cde:	609a      	str	r2, [r3, #8]
 8007ce0:	e006      	b.n	8007cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d104      	bne.n	8007d02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	ea42 0103 	orr.w	r1, r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	021a      	lsls	r2, r3, #8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	69d9      	ldr	r1, [r3, #28]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1a      	ldr	r2, [r3, #32]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e021      	b.n	8007ddc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2224      	movs	r2, #36	; 0x24
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0201 	bic.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7f9 ffc9 	bl	8001d48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	4608      	mov	r0, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	461a      	mov	r2, r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	817b      	strh	r3, [r7, #10]
 8007df6:	460b      	mov	r3, r1
 8007df8:	813b      	strh	r3, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	f040 80f9 	bne.w	8007ffe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_I2C_Mem_Write+0x34>
 8007e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0ed      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_I2C_Mem_Write+0x4e>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e0e6      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e3a:	f7fe f8e5 	bl	8006008 <HAL_GetTick>
 8007e3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	2319      	movs	r3, #25
 8007e46:	2201      	movs	r2, #1
 8007e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fbd9 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0d1      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2221      	movs	r2, #33	; 0x21
 8007e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2240      	movs	r2, #64	; 0x40
 8007e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a3a      	ldr	r2, [r7, #32]
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e84:	88f8      	ldrh	r0, [r7, #6]
 8007e86:	893a      	ldrh	r2, [r7, #8]
 8007e88:	8979      	ldrh	r1, [r7, #10]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4603      	mov	r3, r0
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fae9 	bl	800846c <I2C_RequestMemoryWrite>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0a9      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2bff      	cmp	r3, #255	; 0xff
 8007eb4:	d90e      	bls.n	8007ed4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	22ff      	movs	r2, #255	; 0xff
 8007eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	8979      	ldrh	r1, [r7, #10]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fcbb 	bl	8008848 <I2C_TransferConfig>
 8007ed2:	e00f      	b.n	8007ef4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	8979      	ldrh	r1, [r7, #10]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fcaa 	bl	8008848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fbc3 	bl	8008684 <I2C_WaitOnTXISFlagUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e07b      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	781a      	ldrb	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d034      	beq.n	8007fac <HAL_I2C_Mem_Write+0x1c8>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d130      	bne.n	8007fac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	2200      	movs	r2, #0
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fb55 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e04d      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2bff      	cmp	r3, #255	; 0xff
 8007f6c:	d90e      	bls.n	8007f8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	22ff      	movs	r2, #255	; 0xff
 8007f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	8979      	ldrh	r1, [r7, #10]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fc5f 	bl	8008848 <I2C_TransferConfig>
 8007f8a:	e00f      	b.n	8007fac <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	8979      	ldrh	r1, [r7, #10]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fc4e 	bl	8008848 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d19e      	bne.n	8007ef4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 fba2 	bl	8008704 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e01a      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6859      	ldr	r1, [r3, #4]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <HAL_I2C_Mem_Write+0x224>)
 8007fde:	400b      	ands	r3, r1
 8007fe0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e000      	b.n	8008000 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007ffe:	2302      	movs	r3, #2
  }
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	fe00e800 	.word	0xfe00e800

0800800c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	4608      	mov	r0, r1
 8008016:	4611      	mov	r1, r2
 8008018:	461a      	mov	r2, r3
 800801a:	4603      	mov	r3, r0
 800801c:	817b      	strh	r3, [r7, #10]
 800801e:	460b      	mov	r3, r1
 8008020:	813b      	strh	r3, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b20      	cmp	r3, #32
 8008030:	f040 80fd 	bne.w	800822e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_I2C_Mem_Read+0x34>
 800803a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d105      	bne.n	800804c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008046:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e0f1      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_I2C_Mem_Read+0x4e>
 8008056:	2302      	movs	r3, #2
 8008058:	e0ea      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008062:	f7fd ffd1 	bl	8006008 <HAL_GetTick>
 8008066:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2319      	movs	r3, #25
 800806e:	2201      	movs	r2, #1
 8008070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fac5 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0d5      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2222      	movs	r2, #34	; 0x22
 8008088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2240      	movs	r2, #64	; 0x40
 8008090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a3a      	ldr	r2, [r7, #32]
 800809e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80080a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080ac:	88f8      	ldrh	r0, [r7, #6]
 80080ae:	893a      	ldrh	r2, [r7, #8]
 80080b0:	8979      	ldrh	r1, [r7, #10]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	4603      	mov	r3, r0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fa29 	bl	8008514 <I2C_RequestMemoryRead>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0ad      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2bff      	cmp	r3, #255	; 0xff
 80080dc:	d90e      	bls.n	80080fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	22ff      	movs	r2, #255	; 0xff
 80080e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	8979      	ldrh	r1, [r7, #10]
 80080ec:	4b52      	ldr	r3, [pc, #328]	; (8008238 <HAL_I2C_Mem_Read+0x22c>)
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 fba7 	bl	8008848 <I2C_TransferConfig>
 80080fa:	e00f      	b.n	800811c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810a:	b2da      	uxtb	r2, r3
 800810c:	8979      	ldrh	r1, [r7, #10]
 800810e:	4b4a      	ldr	r3, [pc, #296]	; (8008238 <HAL_I2C_Mem_Read+0x22c>)
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fb96 	bl	8008848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	2200      	movs	r2, #0
 8008124:	2104      	movs	r1, #4
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fa6c 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e07c      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d034      	beq.n	80081dc <HAL_I2C_Mem_Read+0x1d0>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008176:	2b00      	cmp	r3, #0
 8008178:	d130      	bne.n	80081dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	2200      	movs	r2, #0
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fa3d 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e04d      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	2bff      	cmp	r3, #255	; 0xff
 800819c:	d90e      	bls.n	80081bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	22ff      	movs	r2, #255	; 0xff
 80081a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	8979      	ldrh	r1, [r7, #10]
 80081ac:	2300      	movs	r3, #0
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fb47 	bl	8008848 <I2C_TransferConfig>
 80081ba:	e00f      	b.n	80081dc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	8979      	ldrh	r1, [r7, #10]
 80081ce:	2300      	movs	r3, #0
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 fb36 	bl	8008848 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d19a      	bne.n	800811c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fa8a 	bl	8008704 <I2C_WaitOnSTOPFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e01a      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2220      	movs	r2, #32
 8008200:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6859      	ldr	r1, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_I2C_Mem_Read+0x230>)
 800820e:	400b      	ands	r3, r1
 8008210:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	e000      	b.n	8008230 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800822e:	2302      	movs	r3, #2
  }
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	80002400 	.word	0x80002400
 800823c:	fe00e800 	.word	0xfe00e800

08008240 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	; 0x28
 8008244:	af02      	add	r7, sp, #8
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	460b      	mov	r3, r1
 800824e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b20      	cmp	r3, #32
 800825e:	f040 80f1 	bne.w	8008444 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800826c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008270:	d101      	bne.n	8008276 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008272:	2302      	movs	r3, #2
 8008274:	e0e7      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_I2C_IsDeviceReady+0x44>
 8008280:	2302      	movs	r3, #2
 8008282:	e0e0      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2224      	movs	r2, #36	; 0x24
 8008290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d107      	bne.n	80082b2 <HAL_I2C_IsDeviceReady+0x72>
 80082a2:	897b      	ldrh	r3, [r7, #10]
 80082a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082b0:	e004      	b.n	80082bc <HAL_I2C_IsDeviceReady+0x7c>
 80082b2:	897b      	ldrh	r3, [r7, #10]
 80082b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	6812      	ldr	r2, [r2, #0]
 80082c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80082c2:	f7fd fea1 	bl	8006008 <HAL_GetTick>
 80082c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	bf0c      	ite	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	2300      	movne	r3, #0
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b10      	cmp	r3, #16
 80082ea:	bf0c      	ite	eq
 80082ec:	2301      	moveq	r3, #1
 80082ee:	2300      	movne	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80082f4:	e034      	b.n	8008360 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d01a      	beq.n	8008334 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80082fe:	f7fd fe83 	bl	8006008 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d302      	bcc.n	8008314 <HAL_I2C_IsDeviceReady+0xd4>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10f      	bne.n	8008334 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008320:	f043 0220 	orr.w	r2, r3, #32
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e088      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b20      	cmp	r3, #32
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	2b10      	cmp	r3, #16
 8008356:	bf0c      	ite	eq
 8008358:	2301      	moveq	r3, #1
 800835a:	2300      	movne	r3, #0
 800835c:	b2db      	uxtb	r3, r3
 800835e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008360:	7ffb      	ldrb	r3, [r7, #31]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d102      	bne.n	800836c <HAL_I2C_IsDeviceReady+0x12c>
 8008366:	7fbb      	ldrb	r3, [r7, #30]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0c4      	beq.n	80082f6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	2b10      	cmp	r3, #16
 8008378:	d01a      	beq.n	80083b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	2120      	movs	r1, #32
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f93d 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e058      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2220      	movs	r2, #32
 800839a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e04a      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2200      	movs	r2, #0
 80083b8:	2120      	movs	r1, #32
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 f922 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e03d      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2210      	movs	r2, #16
 80083d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2220      	movs	r2, #32
 80083d8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d118      	bne.n	8008414 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2200      	movs	r2, #0
 80083fa:	2120      	movs	r1, #32
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f901 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e01c      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2220      	movs	r2, #32
 8008412:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	3301      	adds	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	429a      	cmp	r2, r3
 8008420:	f63f af3b 	bhi.w	800829a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	f043 0220 	orr.w	r2, r3, #32
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008444:	2302      	movs	r3, #2
  }
}
 8008446:	4618      	mov	r0, r3
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800845c:	b2db      	uxtb	r3, r3
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
	...

0800846c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	461a      	mov	r2, r3
 800847a:	4603      	mov	r3, r0
 800847c:	817b      	strh	r3, [r7, #10]
 800847e:	460b      	mov	r3, r1
 8008480:	813b      	strh	r3, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	b2da      	uxtb	r2, r3
 800848a:	8979      	ldrh	r1, [r7, #10]
 800848c:	4b20      	ldr	r3, [pc, #128]	; (8008510 <I2C_RequestMemoryWrite+0xa4>)
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f9d7 	bl	8008848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	69b9      	ldr	r1, [r7, #24]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f8f0 	bl	8008684 <I2C_WaitOnTXISFlagUntilTimeout>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e02c      	b.n	8008508 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084ae:	88fb      	ldrh	r3, [r7, #6]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d105      	bne.n	80084c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084b4:	893b      	ldrh	r3, [r7, #8]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	629a      	str	r2, [r3, #40]	; 0x28
 80084be:	e015      	b.n	80084ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084c0:	893b      	ldrh	r3, [r7, #8]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	69b9      	ldr	r1, [r7, #24]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f8d6 	bl	8008684 <I2C_WaitOnTXISFlagUntilTimeout>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e012      	b.n	8008508 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084e2:	893b      	ldrh	r3, [r7, #8]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2200      	movs	r2, #0
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f884 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	80002000 	.word	0x80002000

08008514 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af02      	add	r7, sp, #8
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	4608      	mov	r0, r1
 800851e:	4611      	mov	r1, r2
 8008520:	461a      	mov	r2, r3
 8008522:	4603      	mov	r3, r0
 8008524:	817b      	strh	r3, [r7, #10]
 8008526:	460b      	mov	r3, r1
 8008528:	813b      	strh	r3, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	b2da      	uxtb	r2, r3
 8008532:	8979      	ldrh	r1, [r7, #10]
 8008534:	4b20      	ldr	r3, [pc, #128]	; (80085b8 <I2C_RequestMemoryRead+0xa4>)
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	2300      	movs	r3, #0
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 f984 	bl	8008848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	69b9      	ldr	r1, [r7, #24]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f89d 	bl	8008684 <I2C_WaitOnTXISFlagUntilTimeout>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e02c      	b.n	80085ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d105      	bne.n	8008566 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800855a:	893b      	ldrh	r3, [r7, #8]
 800855c:	b2da      	uxtb	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	629a      	str	r2, [r3, #40]	; 0x28
 8008564:	e015      	b.n	8008592 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008566:	893b      	ldrh	r3, [r7, #8]
 8008568:	0a1b      	lsrs	r3, r3, #8
 800856a:	b29b      	uxth	r3, r3
 800856c:	b2da      	uxtb	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	69b9      	ldr	r1, [r7, #24]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f883 	bl	8008684 <I2C_WaitOnTXISFlagUntilTimeout>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e012      	b.n	80085ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008588:	893b      	ldrh	r3, [r7, #8]
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2200      	movs	r2, #0
 800859a:	2140      	movs	r1, #64	; 0x40
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f831 	bl	8008604 <I2C_WaitOnFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	80002000 	.word	0x80002000

080085bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d103      	bne.n	80085da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2200      	movs	r2, #0
 80085d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d007      	beq.n	80085f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	619a      	str	r2, [r3, #24]
  }
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	4613      	mov	r3, r2
 8008612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008614:	e022      	b.n	800865c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861c:	d01e      	beq.n	800865c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861e:	f7fd fcf3 	bl	8006008 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d302      	bcc.n	8008634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d113      	bne.n	800865c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008638:	f043 0220 	orr.w	r2, r3, #32
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e00f      	b.n	800867c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	4013      	ands	r3, r2
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	429a      	cmp	r2, r3
 800866a:	bf0c      	ite	eq
 800866c:	2301      	moveq	r3, #1
 800866e:	2300      	movne	r3, #0
 8008670:	b2db      	uxtb	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	429a      	cmp	r2, r3
 8008678:	d0cd      	beq.n	8008616 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008690:	e02c      	b.n	80086ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	68b9      	ldr	r1, [r7, #8]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f870 	bl	800877c <I2C_IsAcknowledgeFailed>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e02a      	b.n	80086fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ac:	d01e      	beq.n	80086ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ae:	f7fd fcab 	bl	8006008 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d302      	bcc.n	80086c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d113      	bne.n	80086ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c8:	f043 0220 	orr.w	r2, r3, #32
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e007      	b.n	80086fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d1cb      	bne.n	8008692 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008710:	e028      	b.n	8008764 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f830 	bl	800877c <I2C_IsAcknowledgeFailed>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e026      	b.n	8008774 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008726:	f7fd fc6f 	bl	8006008 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	429a      	cmp	r2, r3
 8008734:	d302      	bcc.n	800873c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d113      	bne.n	8008764 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008740:	f043 0220 	orr.w	r2, r3, #32
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e007      	b.n	8008774 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b20      	cmp	r3, #32
 8008770:	d1cf      	bne.n	8008712 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	f003 0310 	and.w	r3, r3, #16
 8008792:	2b10      	cmp	r3, #16
 8008794:	d151      	bne.n	800883a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008796:	e022      	b.n	80087de <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d01e      	beq.n	80087de <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a0:	f7fd fc32 	bl	8006008 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d302      	bcc.n	80087b6 <I2C_IsAcknowledgeFailed+0x3a>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d113      	bne.n	80087de <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ba:	f043 0220 	orr.w	r2, r3, #32
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e02e      	b.n	800883c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	d1d5      	bne.n	8008798 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2210      	movs	r2, #16
 80087f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2220      	movs	r2, #32
 80087fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fedd 	bl	80085bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6859      	ldr	r1, [r3, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <I2C_IsAcknowledgeFailed+0xc8>)
 800880e:	400b      	ands	r3, r1
 8008810:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008816:	f043 0204 	orr.w	r2, r3, #4
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2220      	movs	r2, #32
 8008822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e000      	b.n	800883c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	fe00e800 	.word	0xfe00e800

08008848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	607b      	str	r3, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	817b      	strh	r3, [r7, #10]
 8008856:	4613      	mov	r3, r2
 8008858:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	0d5b      	lsrs	r3, r3, #21
 8008864:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008868:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <I2C_TransferConfig+0x58>)
 800886a:	430b      	orrs	r3, r1
 800886c:	43db      	mvns	r3, r3
 800886e:	ea02 0103 	and.w	r1, r2, r3
 8008872:	897b      	ldrh	r3, [r7, #10]
 8008874:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008878:	7a7b      	ldrb	r3, [r7, #9]
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	431a      	orrs	r2, r3
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	431a      	orrs	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	03ff63ff 	.word	0x03ff63ff

080088a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d138      	bne.n	800892c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e032      	b.n	800892e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80088f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6819      	ldr	r1, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0201 	orr.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	e000      	b.n	800892e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800892c:	2302      	movs	r3, #2
  }
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b20      	cmp	r3, #32
 800894e:	d139      	bne.n	80089c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800895a:	2302      	movs	r3, #2
 800895c:	e033      	b.n	80089c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2224      	movs	r2, #36	; 0x24
 800896a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0201 	bic.w	r2, r2, #1
 800897c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800898c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	e000      	b.n	80089c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089c4:	2302      	movs	r3, #2
  }
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80089d4:	b480      	push	{r7}
 80089d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80089d8:	4b04      	ldr	r3, [pc, #16]	; (80089ec <HAL_PWREx_GetVoltageRange+0x18>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40007000 	.word	0x40007000

080089f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089fe:	d130      	bne.n	8008a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a00:	4b23      	ldr	r3, [pc, #140]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0c:	d038      	beq.n	8008a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a0e:	4b20      	ldr	r3, [pc, #128]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a16:	4a1e      	ldr	r2, [pc, #120]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2232      	movs	r2, #50	; 0x32
 8008a24:	fb02 f303 	mul.w	r3, r2, r3
 8008a28:	4a1b      	ldr	r2, [pc, #108]	; (8008a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2e:	0c9b      	lsrs	r3, r3, #18
 8008a30:	3301      	adds	r3, #1
 8008a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a34:	e002      	b.n	8008a3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a3c:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a48:	d102      	bne.n	8008a50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1f2      	bne.n	8008a36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5c:	d110      	bne.n	8008a80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e00f      	b.n	8008a82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a6e:	d007      	beq.n	8008a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a78:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	40007000 	.word	0x40007000
 8008a94:	20000004 	.word	0x20000004
 8008a98:	431bde83 	.word	0x431bde83

08008a9c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008aa0:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	4a04      	ldr	r2, [pc, #16]	; (8008ab8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aaa:	6053      	str	r3, [r2, #4]
}
 8008aac:	bf00      	nop
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40007000 	.word	0x40007000

08008abc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008ac4:	f7fd faa0 	bl	8006008 <HAL_GetTick>
 8008ac8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e069      	b.n	8008ba8 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7f9 fd0b 	bl	8002504 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008aee:	f241 3188 	movw	r1, #5000	; 0x1388
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f85e 	bl	8008bb4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	021a      	lsls	r2, r3, #8
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2120      	movs	r1, #32
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f856 	bl	8008bd0 <QSPI_WaitFlagStateUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d137      	bne.n	8008b9e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b38:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6852      	ldr	r2, [r2, #4]
 8008b40:	0611      	lsls	r1, r2, #24
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	68d2      	ldr	r2, [r2, #12]
 8008b46:	4311      	orrs	r1, r2
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	69d2      	ldr	r2, [r2, #28]
 8008b4c:	4311      	orrs	r1, r2
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6a12      	ldr	r2, [r2, #32]
 8008b52:	4311      	orrs	r1, r2
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <HAL_QSPI_Init+0xf4>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6912      	ldr	r2, [r2, #16]
 8008b6a:	0411      	lsls	r1, r2, #16
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6952      	ldr	r2, [r2, #20]
 8008b70:	4311      	orrs	r1, r2
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6992      	ldr	r2, [r2, #24]
 8008b76:	4311      	orrs	r1, r2
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6812      	ldr	r2, [r2, #0]
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0201 	orr.w	r2, r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	ffe0f8fe 	.word	0xffe0f8fe

08008bb4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008be0:	e01a      	b.n	8008c18 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d016      	beq.n	8008c18 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bea:	f7fd fa0d 	bl	8006008 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d302      	bcc.n	8008c00 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10b      	bne.n	8008c18 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2204      	movs	r2, #4
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0c:	f043 0201 	orr.w	r2, r3, #1
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e00e      	b.n	8008c36 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	4013      	ands	r3, r2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bf14      	ite	ne
 8008c26:	2301      	movne	r3, #1
 8008c28:	2300      	moveq	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d1d6      	bne.n	8008be2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f000 bc16 	b.w	8009480 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c54:	4ba0      	ldr	r3, [pc, #640]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f003 030c 	and.w	r3, r3, #12
 8008c5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c5e:	4b9e      	ldr	r3, [pc, #632]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80e4 	beq.w	8008e3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <HAL_RCC_OscConfig+0x4c>
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	2b0c      	cmp	r3, #12
 8008c80:	f040 808b 	bne.w	8008d9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	f040 8087 	bne.w	8008d9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008c8c:	4b92      	ldr	r3, [pc, #584]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x64>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e3ed      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a1a      	ldr	r2, [r3, #32]
 8008ca8:	4b8b      	ldr	r3, [pc, #556]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0308 	and.w	r3, r3, #8
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <HAL_RCC_OscConfig+0x7e>
 8008cb4:	4b88      	ldr	r3, [pc, #544]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cbc:	e005      	b.n	8008cca <HAL_RCC_OscConfig+0x8a>
 8008cbe:	4b86      	ldr	r3, [pc, #536]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cc4:	091b      	lsrs	r3, r3, #4
 8008cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d223      	bcs.n	8008d16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fd80 	bl	80097d8 <RCC_SetFlashLatencyFromMSIRange>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e3ce      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ce2:	4b7d      	ldr	r3, [pc, #500]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a7c      	ldr	r2, [pc, #496]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008ce8:	f043 0308 	orr.w	r3, r3, #8
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	4b7a      	ldr	r3, [pc, #488]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	4977      	ldr	r1, [pc, #476]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d00:	4b75      	ldr	r3, [pc, #468]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	4972      	ldr	r1, [pc, #456]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	604b      	str	r3, [r1, #4]
 8008d14:	e025      	b.n	8008d62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d16:	4b70      	ldr	r3, [pc, #448]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a6f      	ldr	r2, [pc, #444]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d1c:	f043 0308 	orr.w	r3, r3, #8
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	4b6d      	ldr	r3, [pc, #436]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	496a      	ldr	r1, [pc, #424]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d34:	4b68      	ldr	r3, [pc, #416]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	4965      	ldr	r1, [pc, #404]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fd40 	bl	80097d8 <RCC_SetFlashLatencyFromMSIRange>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e38e      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d62:	f000 fc75 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b5b      	ldr	r3, [pc, #364]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	091b      	lsrs	r3, r3, #4
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	495a      	ldr	r1, [pc, #360]	; (8008edc <HAL_RCC_OscConfig+0x29c>)
 8008d74:	5ccb      	ldrb	r3, [r1, r3]
 8008d76:	f003 031f 	and.w	r3, r3, #31
 8008d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7e:	4a58      	ldr	r2, [pc, #352]	; (8008ee0 <HAL_RCC_OscConfig+0x2a0>)
 8008d80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008d82:	4b58      	ldr	r3, [pc, #352]	; (8008ee4 <HAL_RCC_OscConfig+0x2a4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fd f8ee 	bl	8005f68 <HAL_InitTick>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d052      	beq.n	8008e3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	e372      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d032      	beq.n	8008e08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008da2:	4b4d      	ldr	r3, [pc, #308]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a4c      	ldr	r2, [pc, #304]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008da8:	f043 0301 	orr.w	r3, r3, #1
 8008dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008dae:	f7fd f92b 	bl	8006008 <HAL_GetTick>
 8008db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008db4:	e008      	b.n	8008dc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008db6:	f7fd f927 	bl	8006008 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d901      	bls.n	8008dc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e35b      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008dc8:	4b43      	ldr	r3, [pc, #268]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0f0      	beq.n	8008db6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008dd4:	4b40      	ldr	r3, [pc, #256]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a3f      	ldr	r2, [pc, #252]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008dda:	f043 0308 	orr.w	r3, r3, #8
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	4b3d      	ldr	r3, [pc, #244]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	493a      	ldr	r1, [pc, #232]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008df2:	4b39      	ldr	r3, [pc, #228]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	4935      	ldr	r1, [pc, #212]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	604b      	str	r3, [r1, #4]
 8008e06:	e01a      	b.n	8008e3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008e08:	4b33      	ldr	r3, [pc, #204]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a32      	ldr	r2, [pc, #200]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e0e:	f023 0301 	bic.w	r3, r3, #1
 8008e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008e14:	f7fd f8f8 	bl	8006008 <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e1c:	f7fd f8f4 	bl	8006008 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e328      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e2e:	4b2a      	ldr	r3, [pc, #168]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1f0      	bne.n	8008e1c <HAL_RCC_OscConfig+0x1dc>
 8008e3a:	e000      	b.n	8008e3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d073      	beq.n	8008f32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d005      	beq.n	8008e5c <HAL_RCC_OscConfig+0x21c>
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	2b0c      	cmp	r3, #12
 8008e54:	d10e      	bne.n	8008e74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d10b      	bne.n	8008e74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e5c:	4b1e      	ldr	r3, [pc, #120]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d063      	beq.n	8008f30 <HAL_RCC_OscConfig+0x2f0>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d15f      	bne.n	8008f30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e305      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d106      	bne.n	8008e8c <HAL_RCC_OscConfig+0x24c>
 8008e7e:	4b16      	ldr	r3, [pc, #88]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	e01d      	b.n	8008ec8 <HAL_RCC_OscConfig+0x288>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e94:	d10c      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x270>
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	e00b      	b.n	8008ec8 <HAL_RCC_OscConfig+0x288>
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a08      	ldr	r2, [pc, #32]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a05      	ldr	r2, [pc, #20]	; (8008ed8 <HAL_RCC_OscConfig+0x298>)
 8008ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01b      	beq.n	8008f08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed0:	f7fd f89a 	bl	8006008 <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ed6:	e010      	b.n	8008efa <HAL_RCC_OscConfig+0x2ba>
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	08010a04 	.word	0x08010a04
 8008ee0:	20000004 	.word	0x20000004
 8008ee4:	200000d4 	.word	0x200000d4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ee8:	f7fd f88e 	bl	8006008 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b64      	cmp	r3, #100	; 0x64
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e2c2      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008efa:	4baf      	ldr	r3, [pc, #700]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0f0      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x2a8>
 8008f06:	e014      	b.n	8008f32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fd f87e 	bl	8006008 <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f10:	f7fd f87a 	bl	8006008 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b64      	cmp	r3, #100	; 0x64
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e2ae      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f22:	4ba5      	ldr	r3, [pc, #660]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f0      	bne.n	8008f10 <HAL_RCC_OscConfig+0x2d0>
 8008f2e:	e000      	b.n	8008f32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d060      	beq.n	8009000 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d005      	beq.n	8008f50 <HAL_RCC_OscConfig+0x310>
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	d119      	bne.n	8008f7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d116      	bne.n	8008f7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f50:	4b99      	ldr	r3, [pc, #612]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <HAL_RCC_OscConfig+0x328>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e28b      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f68:	4b93      	ldr	r3, [pc, #588]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	061b      	lsls	r3, r3, #24
 8008f76:	4990      	ldr	r1, [pc, #576]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f7c:	e040      	b.n	8009000 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d023      	beq.n	8008fce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f86:	4b8c      	ldr	r3, [pc, #560]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a8b      	ldr	r2, [pc, #556]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f92:	f7fd f839 	bl	8006008 <HAL_GetTick>
 8008f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f98:	e008      	b.n	8008fac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f9a:	f7fd f835 	bl	8006008 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d901      	bls.n	8008fac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e269      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fac:	4b82      	ldr	r3, [pc, #520]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0f0      	beq.n	8008f9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fb8:	4b7f      	ldr	r3, [pc, #508]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	061b      	lsls	r3, r3, #24
 8008fc6:	497c      	ldr	r1, [pc, #496]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	604b      	str	r3, [r1, #4]
 8008fcc:	e018      	b.n	8009000 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fce:	4b7a      	ldr	r3, [pc, #488]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a79      	ldr	r2, [pc, #484]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fda:	f7fd f815 	bl	8006008 <HAL_GetTick>
 8008fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fe0:	e008      	b.n	8008ff4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fe2:	f7fd f811 	bl	8006008 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e245      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ff4:	4b70      	ldr	r3, [pc, #448]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1f0      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b00      	cmp	r3, #0
 800900a:	d03c      	beq.n	8009086 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d01c      	beq.n	800904e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009014:	4b68      	ldr	r3, [pc, #416]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800901a:	4a67      	ldr	r2, [pc, #412]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 800901c:	f043 0301 	orr.w	r3, r3, #1
 8009020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009024:	f7fc fff0 	bl	8006008 <HAL_GetTick>
 8009028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800902c:	f7fc ffec 	bl	8006008 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e220      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800903e:	4b5e      	ldr	r3, [pc, #376]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0ef      	beq.n	800902c <HAL_RCC_OscConfig+0x3ec>
 800904c:	e01b      	b.n	8009086 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800904e:	4b5a      	ldr	r3, [pc, #360]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009054:	4a58      	ldr	r2, [pc, #352]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009056:	f023 0301 	bic.w	r3, r3, #1
 800905a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905e:	f7fc ffd3 	bl	8006008 <HAL_GetTick>
 8009062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009064:	e008      	b.n	8009078 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009066:	f7fc ffcf 	bl	8006008 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e203      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009078:	4b4f      	ldr	r3, [pc, #316]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 800907a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1ef      	bne.n	8009066 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0304 	and.w	r3, r3, #4
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80a6 	beq.w	80091e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009094:	2300      	movs	r3, #0
 8009096:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009098:	4b47      	ldr	r3, [pc, #284]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 800909a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10d      	bne.n	80090c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090a4:	4b44      	ldr	r3, [pc, #272]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 80090a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a8:	4a43      	ldr	r2, [pc, #268]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 80090aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ae:	6593      	str	r3, [r2, #88]	; 0x58
 80090b0:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 80090b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090bc:	2301      	movs	r3, #1
 80090be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090c0:	4b3e      	ldr	r3, [pc, #248]	; (80091bc <HAL_RCC_OscConfig+0x57c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d118      	bne.n	80090fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090cc:	4b3b      	ldr	r3, [pc, #236]	; (80091bc <HAL_RCC_OscConfig+0x57c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a3a      	ldr	r2, [pc, #232]	; (80091bc <HAL_RCC_OscConfig+0x57c>)
 80090d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090d8:	f7fc ff96 	bl	8006008 <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090e0:	f7fc ff92 	bl	8006008 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e1c6      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090f2:	4b32      	ldr	r3, [pc, #200]	; (80091bc <HAL_RCC_OscConfig+0x57c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d108      	bne.n	8009118 <HAL_RCC_OscConfig+0x4d8>
 8009106:	4b2c      	ldr	r3, [pc, #176]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910c:	4a2a      	ldr	r2, [pc, #168]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 800910e:	f043 0301 	orr.w	r3, r3, #1
 8009112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009116:	e024      	b.n	8009162 <HAL_RCC_OscConfig+0x522>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b05      	cmp	r3, #5
 800911e:	d110      	bne.n	8009142 <HAL_RCC_OscConfig+0x502>
 8009120:	4b25      	ldr	r3, [pc, #148]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009126:	4a24      	ldr	r2, [pc, #144]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009128:	f043 0304 	orr.w	r3, r3, #4
 800912c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009130:	4b21      	ldr	r3, [pc, #132]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009136:	4a20      	ldr	r2, [pc, #128]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009140:	e00f      	b.n	8009162 <HAL_RCC_OscConfig+0x522>
 8009142:	4b1d      	ldr	r3, [pc, #116]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009148:	4a1b      	ldr	r2, [pc, #108]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 800914a:	f023 0301 	bic.w	r3, r3, #1
 800914e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009152:	4b19      	ldr	r3, [pc, #100]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009158:	4a17      	ldr	r2, [pc, #92]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 800915a:	f023 0304 	bic.w	r3, r3, #4
 800915e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d016      	beq.n	8009198 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800916a:	f7fc ff4d 	bl	8006008 <HAL_GetTick>
 800916e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009170:	e00a      	b.n	8009188 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009172:	f7fc ff49 	bl	8006008 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009180:	4293      	cmp	r3, r2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e17b      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009188:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <HAL_RCC_OscConfig+0x578>)
 800918a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0ed      	beq.n	8009172 <HAL_RCC_OscConfig+0x532>
 8009196:	e01a      	b.n	80091ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009198:	f7fc ff36 	bl	8006008 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800919e:	e00f      	b.n	80091c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091a0:	f7fc ff32 	bl	8006008 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d906      	bls.n	80091c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e164      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
 80091b6:	bf00      	nop
 80091b8:	40021000 	.word	0x40021000
 80091bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091c0:	4ba8      	ldr	r3, [pc, #672]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e8      	bne.n	80091a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091ce:	7ffb      	ldrb	r3, [r7, #31]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d105      	bne.n	80091e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091d4:	4ba3      	ldr	r3, [pc, #652]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80091d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d8:	4aa2      	ldr	r2, [pc, #648]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80091da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d03c      	beq.n	8009266 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d01c      	beq.n	800922e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091f4:	4b9b      	ldr	r3, [pc, #620]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80091f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091fa:	4a9a      	ldr	r2, [pc, #616]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80091fc:	f043 0301 	orr.w	r3, r3, #1
 8009200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009204:	f7fc ff00 	bl	8006008 <HAL_GetTick>
 8009208:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800920c:	f7fc fefc 	bl	8006008 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e130      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800921e:	4b91      	ldr	r3, [pc, #580]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0ef      	beq.n	800920c <HAL_RCC_OscConfig+0x5cc>
 800922c:	e01b      	b.n	8009266 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800922e:	4b8d      	ldr	r3, [pc, #564]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009234:	4a8b      	ldr	r2, [pc, #556]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009236:	f023 0301 	bic.w	r3, r3, #1
 800923a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923e:	f7fc fee3 	bl	8006008 <HAL_GetTick>
 8009242:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009244:	e008      	b.n	8009258 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009246:	f7fc fedf 	bl	8006008 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d901      	bls.n	8009258 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e113      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009258:	4b82      	ldr	r3, [pc, #520]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800925a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1ef      	bne.n	8009246 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8107 	beq.w	800947e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	2b02      	cmp	r3, #2
 8009276:	f040 80cb 	bne.w	8009410 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800927a:	4b7a      	ldr	r3, [pc, #488]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f003 0203 	and.w	r2, r3, #3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	429a      	cmp	r2, r3
 800928c:	d12c      	bne.n	80092e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	3b01      	subs	r3, #1
 800929a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800929c:	429a      	cmp	r2, r3
 800929e:	d123      	bne.n	80092e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d11b      	bne.n	80092e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092bc:	429a      	cmp	r2, r3
 80092be:	d113      	bne.n	80092e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ca:	085b      	lsrs	r3, r3, #1
 80092cc:	3b01      	subs	r3, #1
 80092ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d109      	bne.n	80092e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	085b      	lsrs	r3, r3, #1
 80092e0:	3b01      	subs	r3, #1
 80092e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d06d      	beq.n	80093c4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b0c      	cmp	r3, #12
 80092ec:	d068      	beq.n	80093c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80092ee:	4b5d      	ldr	r3, [pc, #372]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d105      	bne.n	8009306 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80092fa:	4b5a      	ldr	r3, [pc, #360]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e0ba      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800930a:	4b56      	ldr	r3, [pc, #344]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a55      	ldr	r2, [pc, #340]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009314:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009316:	f7fc fe77 	bl	8006008 <HAL_GetTick>
 800931a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800931c:	e008      	b.n	8009330 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800931e:	f7fc fe73 	bl	8006008 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	d901      	bls.n	8009330 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e0a7      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009330:	4b4c      	ldr	r3, [pc, #304]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f0      	bne.n	800931e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800933c:	4b49      	ldr	r3, [pc, #292]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	4b49      	ldr	r3, [pc, #292]	; (8009468 <HAL_RCC_OscConfig+0x828>)
 8009342:	4013      	ands	r3, r2
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800934c:	3a01      	subs	r2, #1
 800934e:	0112      	lsls	r2, r2, #4
 8009350:	4311      	orrs	r1, r2
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009356:	0212      	lsls	r2, r2, #8
 8009358:	4311      	orrs	r1, r2
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800935e:	0852      	lsrs	r2, r2, #1
 8009360:	3a01      	subs	r2, #1
 8009362:	0552      	lsls	r2, r2, #21
 8009364:	4311      	orrs	r1, r2
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800936a:	0852      	lsrs	r2, r2, #1
 800936c:	3a01      	subs	r2, #1
 800936e:	0652      	lsls	r2, r2, #25
 8009370:	4311      	orrs	r1, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009376:	06d2      	lsls	r2, r2, #27
 8009378:	430a      	orrs	r2, r1
 800937a:	493a      	ldr	r1, [pc, #232]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800937c:	4313      	orrs	r3, r2
 800937e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009380:	4b38      	ldr	r3, [pc, #224]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a37      	ldr	r2, [pc, #220]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800938a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800938c:	4b35      	ldr	r3, [pc, #212]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	4a34      	ldr	r2, [pc, #208]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009398:	f7fc fe36 	bl	8006008 <HAL_GetTick>
 800939c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093a0:	f7fc fe32 	bl	8006008 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e066      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093b2:	4b2c      	ldr	r3, [pc, #176]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0f0      	beq.n	80093a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80093be:	e05e      	b.n	800947e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e05d      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093c4:	4b27      	ldr	r3, [pc, #156]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d156      	bne.n	800947e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80093d0:	4b24      	ldr	r3, [pc, #144]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a23      	ldr	r2, [pc, #140]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80093d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80093dc:	4b21      	ldr	r3, [pc, #132]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4a20      	ldr	r2, [pc, #128]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 80093e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093e8:	f7fc fe0e 	bl	8006008 <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f0:	f7fc fe0a 	bl	8006008 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e03e      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009402:	4b18      	ldr	r3, [pc, #96]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HAL_RCC_OscConfig+0x7b0>
 800940e:	e036      	b.n	800947e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	2b0c      	cmp	r3, #12
 8009414:	d031      	beq.n	800947a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a12      	ldr	r2, [pc, #72]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800941c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009420:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d105      	bne.n	800943a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	4a0c      	ldr	r2, [pc, #48]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009434:	f023 0303 	bic.w	r3, r3, #3
 8009438:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800943a:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	4a09      	ldr	r2, [pc, #36]	; (8009464 <HAL_RCC_OscConfig+0x824>)
 8009440:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009448:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944a:	f7fc fddd 	bl	8006008 <HAL_GetTick>
 800944e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009450:	e00c      	b.n	800946c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009452:	f7fc fdd9 	bl	8006008 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d905      	bls.n	800946c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e00d      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
 8009464:	40021000 	.word	0x40021000
 8009468:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800946c:	4b06      	ldr	r3, [pc, #24]	; (8009488 <HAL_RCC_OscConfig+0x848>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1ec      	bne.n	8009452 <HAL_RCC_OscConfig+0x812>
 8009478:	e001      	b.n	800947e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	40021000 	.word	0x40021000

0800948c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e0c8      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094a0:	4b66      	ldr	r3, [pc, #408]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d910      	bls.n	80094d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094ae:	4b63      	ldr	r3, [pc, #396]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f023 0207 	bic.w	r2, r3, #7
 80094b6:	4961      	ldr	r1, [pc, #388]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094be:	4b5f      	ldr	r3, [pc, #380]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d001      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e0b0      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d04c      	beq.n	8009576 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d107      	bne.n	80094f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094e4:	4b56      	ldr	r3, [pc, #344]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d121      	bne.n	8009534 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e09e      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d107      	bne.n	800950c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094fc:	4b50      	ldr	r3, [pc, #320]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d115      	bne.n	8009534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e092      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d107      	bne.n	8009524 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009514:	4b4a      	ldr	r3, [pc, #296]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d109      	bne.n	8009534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e086      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009524:	4b46      	ldr	r3, [pc, #280]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e07e      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009534:	4b42      	ldr	r3, [pc, #264]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f023 0203 	bic.w	r2, r3, #3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	493f      	ldr	r1, [pc, #252]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 8009542:	4313      	orrs	r3, r2
 8009544:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009546:	f7fc fd5f 	bl	8006008 <HAL_GetTick>
 800954a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800954c:	e00a      	b.n	8009564 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800954e:	f7fc fd5b 	bl	8006008 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	f241 3288 	movw	r2, #5000	; 0x1388
 800955c:	4293      	cmp	r3, r2
 800955e:	d901      	bls.n	8009564 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e066      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009564:	4b36      	ldr	r3, [pc, #216]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f003 020c 	and.w	r2, r3, #12
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	429a      	cmp	r2, r3
 8009574:	d1eb      	bne.n	800954e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d008      	beq.n	8009594 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009582:	4b2f      	ldr	r3, [pc, #188]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	492c      	ldr	r1, [pc, #176]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 8009590:	4313      	orrs	r3, r2
 8009592:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009594:	4b29      	ldr	r3, [pc, #164]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d210      	bcs.n	80095c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095a2:	4b26      	ldr	r3, [pc, #152]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f023 0207 	bic.w	r2, r3, #7
 80095aa:	4924      	ldr	r1, [pc, #144]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095b2:	4b22      	ldr	r3, [pc, #136]	; (800963c <HAL_RCC_ClockConfig+0x1b0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d001      	beq.n	80095c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e036      	b.n	8009632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d008      	beq.n	80095e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095d0:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	4918      	ldr	r1, [pc, #96]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095ee:	4b14      	ldr	r3, [pc, #80]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4910      	ldr	r1, [pc, #64]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009602:	f000 f825 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 8009606:	4602      	mov	r2, r0
 8009608:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <HAL_RCC_ClockConfig+0x1b4>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	091b      	lsrs	r3, r3, #4
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	490c      	ldr	r1, [pc, #48]	; (8009644 <HAL_RCC_ClockConfig+0x1b8>)
 8009614:	5ccb      	ldrb	r3, [r1, r3]
 8009616:	f003 031f 	and.w	r3, r3, #31
 800961a:	fa22 f303 	lsr.w	r3, r2, r3
 800961e:	4a0a      	ldr	r2, [pc, #40]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 8009620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009622:	4b0a      	ldr	r3, [pc, #40]	; (800964c <HAL_RCC_ClockConfig+0x1c0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f7fc fc9e 	bl	8005f68 <HAL_InitTick>
 800962c:	4603      	mov	r3, r0
 800962e:	72fb      	strb	r3, [r7, #11]

  return status;
 8009630:	7afb      	ldrb	r3, [r7, #11]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	40022000 	.word	0x40022000
 8009640:	40021000 	.word	0x40021000
 8009644:	08010a04 	.word	0x08010a04
 8009648:	20000004 	.word	0x20000004
 800964c:	200000d4 	.word	0x200000d4

08009650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009650:	b480      	push	{r7}
 8009652:	b089      	sub	sp, #36	; 0x24
 8009654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	2300      	movs	r3, #0
 800965c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800965e:	4b3e      	ldr	r3, [pc, #248]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f003 030c 	and.w	r3, r3, #12
 8009666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009668:	4b3b      	ldr	r3, [pc, #236]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d005      	beq.n	8009684 <HAL_RCC_GetSysClockFreq+0x34>
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	2b0c      	cmp	r3, #12
 800967c:	d121      	bne.n	80096c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d11e      	bne.n	80096c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009684:	4b34      	ldr	r3, [pc, #208]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b00      	cmp	r3, #0
 800968e:	d107      	bne.n	80096a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009690:	4b31      	ldr	r3, [pc, #196]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 8009692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	61fb      	str	r3, [r7, #28]
 800969e:	e005      	b.n	80096ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80096a0:	4b2d      	ldr	r3, [pc, #180]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	091b      	lsrs	r3, r3, #4
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80096ac:	4a2b      	ldr	r2, [pc, #172]	; (800975c <HAL_RCC_GetSysClockFreq+0x10c>)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10d      	bne.n	80096d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80096c0:	e00a      	b.n	80096d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d102      	bne.n	80096ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80096c8:	4b25      	ldr	r3, [pc, #148]	; (8009760 <HAL_RCC_GetSysClockFreq+0x110>)
 80096ca:	61bb      	str	r3, [r7, #24]
 80096cc:	e004      	b.n	80096d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	d101      	bne.n	80096d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80096d4:	4b23      	ldr	r3, [pc, #140]	; (8009764 <HAL_RCC_GetSysClockFreq+0x114>)
 80096d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b0c      	cmp	r3, #12
 80096dc:	d134      	bne.n	8009748 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80096de:	4b1e      	ldr	r3, [pc, #120]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d003      	beq.n	80096f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d003      	beq.n	80096fc <HAL_RCC_GetSysClockFreq+0xac>
 80096f4:	e005      	b.n	8009702 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80096f6:	4b1a      	ldr	r3, [pc, #104]	; (8009760 <HAL_RCC_GetSysClockFreq+0x110>)
 80096f8:	617b      	str	r3, [r7, #20]
      break;
 80096fa:	e005      	b.n	8009708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80096fc:	4b19      	ldr	r3, [pc, #100]	; (8009764 <HAL_RCC_GetSysClockFreq+0x114>)
 80096fe:	617b      	str	r3, [r7, #20]
      break;
 8009700:	e002      	b.n	8009708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	617b      	str	r3, [r7, #20]
      break;
 8009706:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009708:	4b13      	ldr	r3, [pc, #76]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	091b      	lsrs	r3, r3, #4
 800970e:	f003 0307 	and.w	r3, r3, #7
 8009712:	3301      	adds	r3, #1
 8009714:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009716:	4b10      	ldr	r3, [pc, #64]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	fb02 f203 	mul.w	r2, r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	fbb2 f3f3 	udiv	r3, r2, r3
 800972c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <HAL_RCC_GetSysClockFreq+0x108>)
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	0e5b      	lsrs	r3, r3, #25
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	3301      	adds	r3, #1
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	fbb2 f3f3 	udiv	r3, r2, r3
 8009746:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009748:	69bb      	ldr	r3, [r7, #24]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3724      	adds	r7, #36	; 0x24
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	40021000 	.word	0x40021000
 800975c:	08010a1c 	.word	0x08010a1c
 8009760:	00f42400 	.word	0x00f42400
 8009764:	007a1200 	.word	0x007a1200

08009768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800976c:	4b03      	ldr	r3, [pc, #12]	; (800977c <HAL_RCC_GetHCLKFreq+0x14>)
 800976e:	681b      	ldr	r3, [r3, #0]
}
 8009770:	4618      	mov	r0, r3
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20000004 	.word	0x20000004

08009780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009784:	f7ff fff0 	bl	8009768 <HAL_RCC_GetHCLKFreq>
 8009788:	4602      	mov	r2, r0
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	0a1b      	lsrs	r3, r3, #8
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	4904      	ldr	r1, [pc, #16]	; (80097a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009796:	5ccb      	ldrb	r3, [r1, r3]
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	40021000 	.word	0x40021000
 80097a8:	08010a14 	.word	0x08010a14

080097ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80097b0:	f7ff ffda 	bl	8009768 <HAL_RCC_GetHCLKFreq>
 80097b4:	4602      	mov	r2, r0
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	0adb      	lsrs	r3, r3, #11
 80097bc:	f003 0307 	and.w	r3, r3, #7
 80097c0:	4904      	ldr	r1, [pc, #16]	; (80097d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097c2:	5ccb      	ldrb	r3, [r1, r3]
 80097c4:	f003 031f 	and.w	r3, r3, #31
 80097c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	40021000 	.word	0x40021000
 80097d4:	08010a14 	.word	0x08010a14

080097d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80097e0:	2300      	movs	r3, #0
 80097e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80097e4:	4b2a      	ldr	r3, [pc, #168]	; (8009890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80097f0:	f7ff f8f0 	bl	80089d4 <HAL_PWREx_GetVoltageRange>
 80097f4:	6178      	str	r0, [r7, #20]
 80097f6:	e014      	b.n	8009822 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80097f8:	4b25      	ldr	r3, [pc, #148]	; (8009890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fc:	4a24      	ldr	r2, [pc, #144]	; (8009890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009802:	6593      	str	r3, [r2, #88]	; 0x58
 8009804:	4b22      	ldr	r3, [pc, #136]	; (8009890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009810:	f7ff f8e0 	bl	80089d4 <HAL_PWREx_GetVoltageRange>
 8009814:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009816:	4b1e      	ldr	r3, [pc, #120]	; (8009890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800981a:	4a1d      	ldr	r2, [pc, #116]	; (8009890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800981c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009820:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009828:	d10b      	bne.n	8009842 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b80      	cmp	r3, #128	; 0x80
 800982e:	d919      	bls.n	8009864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2ba0      	cmp	r3, #160	; 0xa0
 8009834:	d902      	bls.n	800983c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009836:	2302      	movs	r3, #2
 8009838:	613b      	str	r3, [r7, #16]
 800983a:	e013      	b.n	8009864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800983c:	2301      	movs	r3, #1
 800983e:	613b      	str	r3, [r7, #16]
 8009840:	e010      	b.n	8009864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b80      	cmp	r3, #128	; 0x80
 8009846:	d902      	bls.n	800984e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009848:	2303      	movs	r3, #3
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	e00a      	b.n	8009864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b80      	cmp	r3, #128	; 0x80
 8009852:	d102      	bne.n	800985a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009854:	2302      	movs	r3, #2
 8009856:	613b      	str	r3, [r7, #16]
 8009858:	e004      	b.n	8009864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b70      	cmp	r3, #112	; 0x70
 800985e:	d101      	bne.n	8009864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009860:	2301      	movs	r3, #1
 8009862:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009864:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f023 0207 	bic.w	r2, r3, #7
 800986c:	4909      	ldr	r1, [pc, #36]	; (8009894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	4313      	orrs	r3, r2
 8009872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	429a      	cmp	r2, r3
 8009880:	d001      	beq.n	8009886 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	40021000 	.word	0x40021000
 8009894:	40022000 	.word	0x40022000

08009898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098a0:	2300      	movs	r3, #0
 80098a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098a4:	2300      	movs	r3, #0
 80098a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d041      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098bc:	d02a      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80098be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098c2:	d824      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098c8:	d008      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80098ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098ce:	d81e      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80098d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098d8:	d010      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80098da:	e018      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80098dc:	4b86      	ldr	r3, [pc, #536]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	4a85      	ldr	r2, [pc, #532]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098e8:	e015      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3304      	adds	r3, #4
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 f887 	bl	800aa04 <RCCEx_PLLSAI1_Config>
 80098f6:	4603      	mov	r3, r0
 80098f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098fa:	e00c      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3320      	adds	r3, #32
 8009900:	2100      	movs	r1, #0
 8009902:	4618      	mov	r0, r3
 8009904:	f001 f970 	bl	800abe8 <RCCEx_PLLSAI2_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800990c:	e003      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	74fb      	strb	r3, [r7, #19]
      break;
 8009912:	e000      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009916:	7cfb      	ldrb	r3, [r7, #19]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10b      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800991c:	4b76      	ldr	r3, [pc, #472]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009922:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800992a:	4973      	ldr	r1, [pc, #460]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800992c:	4313      	orrs	r3, r2
 800992e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009932:	e001      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009934:	7cfb      	ldrb	r3, [r7, #19]
 8009936:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d041      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009948:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800994c:	d02a      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800994e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009952:	d824      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009958:	d008      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800995a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800995e:	d81e      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009968:	d010      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800996a:	e018      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800996c:	4b62      	ldr	r3, [pc, #392]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4a61      	ldr	r2, [pc, #388]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009976:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009978:	e015      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3304      	adds	r3, #4
 800997e:	2100      	movs	r1, #0
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f83f 	bl	800aa04 <RCCEx_PLLSAI1_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800998a:	e00c      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3320      	adds	r3, #32
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f001 f928 	bl	800abe8 <RCCEx_PLLSAI2_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800999c:	e003      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	74fb      	strb	r3, [r7, #19]
      break;
 80099a2:	e000      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80099a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099a6:	7cfb      	ldrb	r3, [r7, #19]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10b      	bne.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80099ac:	4b52      	ldr	r3, [pc, #328]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ba:	494f      	ldr	r1, [pc, #316]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80099c2:	e001      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c4:	7cfb      	ldrb	r3, [r7, #19]
 80099c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 80a0 	beq.w	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099d6:	2300      	movs	r3, #0
 80099d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80099da:	4b47      	ldr	r3, [pc, #284]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80099e6:	2301      	movs	r3, #1
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80099ea:	2300      	movs	r3, #0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00d      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099f0:	4b41      	ldr	r3, [pc, #260]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f4:	4a40      	ldr	r2, [pc, #256]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099fa:	6593      	str	r3, [r2, #88]	; 0x58
 80099fc:	4b3e      	ldr	r3, [pc, #248]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a04:	60bb      	str	r3, [r7, #8]
 8009a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a0c:	4b3b      	ldr	r3, [pc, #236]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a3a      	ldr	r2, [pc, #232]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a18:	f7fc faf6 	bl	8006008 <HAL_GetTick>
 8009a1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a1e:	e009      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a20:	f7fc faf2 	bl	8006008 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d902      	bls.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	74fb      	strb	r3, [r7, #19]
        break;
 8009a32:	e005      	b.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a34:	4b31      	ldr	r3, [pc, #196]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0ef      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009a40:	7cfb      	ldrb	r3, [r7, #19]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d15c      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a46:	4b2c      	ldr	r3, [pc, #176]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d01f      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d019      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a64:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a70:	4b21      	ldr	r3, [pc, #132]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a76:	4a20      	ldr	r2, [pc, #128]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a80:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a86:	4a1c      	ldr	r2, [pc, #112]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a90:	4a19      	ldr	r2, [pc, #100]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d016      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa2:	f7fc fab1 	bl	8006008 <HAL_GetTick>
 8009aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009aa8:	e00b      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aaa:	f7fc faad 	bl	8006008 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d902      	bls.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	74fb      	strb	r3, [r7, #19]
            break;
 8009ac0:	e006      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0ec      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009ad0:	7cfb      	ldrb	r3, [r7, #19]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10c      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ad6:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae6:	4904      	ldr	r1, [pc, #16]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009aee:	e009      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009af0:	7cfb      	ldrb	r3, [r7, #19]
 8009af2:	74bb      	strb	r3, [r7, #18]
 8009af4:	e006      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009af6:	bf00      	nop
 8009af8:	40021000 	.word	0x40021000
 8009afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b00:	7cfb      	ldrb	r3, [r7, #19]
 8009b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b04:	7c7b      	ldrb	r3, [r7, #17]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d105      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b0a:	4ba6      	ldr	r3, [pc, #664]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0e:	4aa5      	ldr	r2, [pc, #660]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b22:	4ba0      	ldr	r3, [pc, #640]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b28:	f023 0203 	bic.w	r2, r3, #3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b30:	499c      	ldr	r1, [pc, #624]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00a      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b44:	4b97      	ldr	r3, [pc, #604]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4a:	f023 020c 	bic.w	r2, r3, #12
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b52:	4994      	ldr	r1, [pc, #592]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0304 	and.w	r3, r3, #4
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b66:	4b8f      	ldr	r3, [pc, #572]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b74:	498b      	ldr	r1, [pc, #556]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0308 	and.w	r3, r3, #8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b88:	4b86      	ldr	r3, [pc, #536]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b96:	4983      	ldr	r1, [pc, #524]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0310 	and.w	r3, r3, #16
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009baa:	4b7e      	ldr	r3, [pc, #504]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bb8:	497a      	ldr	r1, [pc, #488]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0320 	and.w	r3, r3, #32
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00a      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bcc:	4b75      	ldr	r3, [pc, #468]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bda:	4972      	ldr	r1, [pc, #456]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bee:	4b6d      	ldr	r3, [pc, #436]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfc:	4969      	ldr	r1, [pc, #420]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c10:	4b64      	ldr	r3, [pc, #400]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c1e:	4961      	ldr	r1, [pc, #388]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c32:	4b5c      	ldr	r3, [pc, #368]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c40:	4958      	ldr	r1, [pc, #352]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00a      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c54:	4b53      	ldr	r3, [pc, #332]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c62:	4950      	ldr	r1, [pc, #320]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c76:	4b4b      	ldr	r3, [pc, #300]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c84:	4947      	ldr	r1, [pc, #284]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00a      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c98:	4b42      	ldr	r3, [pc, #264]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c9e:	f023 0203 	bic.w	r2, r3, #3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca6:	493f      	ldr	r1, [pc, #252]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d028      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cba:	4b3a      	ldr	r3, [pc, #232]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc8:	4936      	ldr	r1, [pc, #216]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cd8:	d106      	bne.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cda:	4b32      	ldr	r3, [pc, #200]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	4a31      	ldr	r2, [pc, #196]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ce4:	60d3      	str	r3, [r2, #12]
 8009ce6:	e011      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cf0:	d10c      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fe83 	bl	800aa04 <RCCEx_PLLSAI1_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009d02:	7cfb      	ldrb	r3, [r7, #19]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8009d08:	7cfb      	ldrb	r3, [r7, #19]
 8009d0a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d028      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009d18:	4b22      	ldr	r3, [pc, #136]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d26:	491f      	ldr	r1, [pc, #124]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d36:	d106      	bne.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d38:	4b1a      	ldr	r3, [pc, #104]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4a19      	ldr	r2, [pc, #100]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d42:	60d3      	str	r3, [r2, #12]
 8009d44:	e011      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d4e:	d10c      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3304      	adds	r3, #4
 8009d54:	2101      	movs	r1, #1
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fe54 	bl	800aa04 <RCCEx_PLLSAI1_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d60:	7cfb      	ldrb	r3, [r7, #19]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8009d66:	7cfb      	ldrb	r3, [r7, #19]
 8009d68:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d02a      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d84:	4907      	ldr	r1, [pc, #28]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d94:	d108      	bne.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d96:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	4a02      	ldr	r2, [pc, #8]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009da0:	60d3      	str	r3, [r2, #12]
 8009da2:	e013      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8009da4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009db0:	d10c      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3304      	adds	r3, #4
 8009db6:	2101      	movs	r1, #1
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 fe23 	bl	800aa04 <RCCEx_PLLSAI1_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009dc2:	7cfb      	ldrb	r3, [r7, #19]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8009dc8:	7cfb      	ldrb	r3, [r7, #19]
 8009dca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d02f      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dd8:	4b2c      	ldr	r3, [pc, #176]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009de6:	4929      	ldr	r1, [pc, #164]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009df6:	d10d      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	2102      	movs	r1, #2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fe00 	bl	800aa04 <RCCEx_PLLSAI1_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e08:	7cfb      	ldrb	r3, [r7, #19]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d014      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009e0e:	7cfb      	ldrb	r3, [r7, #19]
 8009e10:	74bb      	strb	r3, [r7, #18]
 8009e12:	e011      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e1c:	d10c      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3320      	adds	r3, #32
 8009e22:	2102      	movs	r1, #2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 fedf 	bl	800abe8 <RCCEx_PLLSAI2_Config>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e2e:	7cfb      	ldrb	r3, [r7, #19]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009e34:	7cfb      	ldrb	r3, [r7, #19]
 8009e36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e44:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e54:	490d      	ldr	r1, [pc, #52]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e68:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e78:	4904      	ldr	r1, [pc, #16]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009e80:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	40021000 	.word	0x40021000

08009e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ea2:	d13e      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009ea4:	4bb8      	ldr	r3, [pc, #736]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eae:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eb6:	d028      	beq.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ebe:	f200 858e 	bhi.w	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec8:	d005      	beq.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ed0:	d00e      	beq.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009ed2:	f000 bd84 	b.w	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009ed6:	4bac      	ldr	r3, [pc, #688]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	f040 857e 	bne.w	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
        frequency = LSE_VALUE;
 8009ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eea:	61fb      	str	r3, [r7, #28]
      break;
 8009eec:	f000 bd79 	b.w	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009ef0:	4ba5      	ldr	r3, [pc, #660]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	f040 8573 	bne.w	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = LSI_VALUE;
 8009f00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009f04:	61fb      	str	r3, [r7, #28]
      break;
 8009f06:	f000 bd6e 	b.w	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f0a:	4b9f      	ldr	r3, [pc, #636]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f16:	f040 8568 	bne.w	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
        frequency = HSE_VALUE / 32U;
 8009f1a:	4b9c      	ldr	r3, [pc, #624]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009f1c:	61fb      	str	r3, [r7, #28]
      break;
 8009f1e:	f000 bd64 	b.w	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f22:	4b99      	ldr	r3, [pc, #612]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d036      	beq.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d840      	bhi.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d003      	beq.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d020      	beq.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009f44:	e039      	b.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009f46:	4b90      	ldr	r3, [pc, #576]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d116      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009f52:	4b8d      	ldr	r3, [pc, #564]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8009f5e:	4b8a      	ldr	r3, [pc, #552]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	091b      	lsrs	r3, r3, #4
 8009f64:	f003 030f 	and.w	r3, r3, #15
 8009f68:	e005      	b.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8009f6a:	4b87      	ldr	r3, [pc, #540]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f70:	0a1b      	lsrs	r3, r3, #8
 8009f72:	f003 030f 	and.w	r3, r3, #15
 8009f76:	4a86      	ldr	r2, [pc, #536]	; (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009f7e:	e01f      	b.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61bb      	str	r3, [r7, #24]
      break;
 8009f84:	e01c      	b.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f86:	4b80      	ldr	r3, [pc, #512]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f92:	d102      	bne.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8009f94:	4b7f      	ldr	r3, [pc, #508]	; (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009f96:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009f98:	e012      	b.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	61bb      	str	r3, [r7, #24]
      break;
 8009f9e:	e00f      	b.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fa0:	4b79      	ldr	r3, [pc, #484]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fac:	d102      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8009fae:	4b7a      	ldr	r3, [pc, #488]	; (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8009fb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009fb2:	e005      	b.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61bb      	str	r3, [r7, #24]
      break;
 8009fb8:	e002      	b.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61bb      	str	r3, [r7, #24]
      break;
 8009fbe:	bf00      	nop
    }

    switch(PeriphClk)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fc6:	f000 842b 	beq.w	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fd0:	f200 850d 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009fda:	f000 80df 	beq.w	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009fe4:	f200 8503 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fee:	f000 80d5 	beq.w	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ff8:	f200 84f9 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a002:	f000 8374 	beq.w	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	f200 84ef 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a016:	f000 84c0 	beq.w	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a020:	f200 84e5 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a02a:	f000 82e7 	beq.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a034:	f200 84db 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a03e:	f000 80ad 	beq.w	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a048:	f200 84d1 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a052:	f000 8091 	beq.w	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a05c:	f200 84c7 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a066:	d07f      	beq.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a06e:	f200 84be 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a078:	f000 8445 	beq.w	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a082:	f200 84b4 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a08c:	f000 83f1 	beq.w	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a096:	f200 84aa 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a0:	f000 8392 	beq.w	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0aa:	f200 84a0 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b80      	cmp	r3, #128	; 0x80
 800a0b2:	f000 835d 	beq.w	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b80      	cmp	r3, #128	; 0x80
 800a0ba:	f200 8498 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	d84b      	bhi.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 8491 	beq.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	2b1f      	cmp	r3, #31
 800a0d2:	f200 848c 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a2f3 	.word	0x0800a2f3
 800a0e0:	0800a363 	.word	0x0800a363
 800a0e4:	0800a9ef 	.word	0x0800a9ef
 800a0e8:	0800a3f7 	.word	0x0800a3f7
 800a0ec:	0800a9ef 	.word	0x0800a9ef
 800a0f0:	0800a9ef 	.word	0x0800a9ef
 800a0f4:	0800a9ef 	.word	0x0800a9ef
 800a0f8:	0800a481 	.word	0x0800a481
 800a0fc:	0800a9ef 	.word	0x0800a9ef
 800a100:	0800a9ef 	.word	0x0800a9ef
 800a104:	0800a9ef 	.word	0x0800a9ef
 800a108:	0800a9ef 	.word	0x0800a9ef
 800a10c:	0800a9ef 	.word	0x0800a9ef
 800a110:	0800a9ef 	.word	0x0800a9ef
 800a114:	0800a9ef 	.word	0x0800a9ef
 800a118:	0800a4f9 	.word	0x0800a4f9
 800a11c:	0800a9ef 	.word	0x0800a9ef
 800a120:	0800a9ef 	.word	0x0800a9ef
 800a124:	0800a9ef 	.word	0x0800a9ef
 800a128:	0800a9ef 	.word	0x0800a9ef
 800a12c:	0800a9ef 	.word	0x0800a9ef
 800a130:	0800a9ef 	.word	0x0800a9ef
 800a134:	0800a9ef 	.word	0x0800a9ef
 800a138:	0800a9ef 	.word	0x0800a9ef
 800a13c:	0800a9ef 	.word	0x0800a9ef
 800a140:	0800a9ef 	.word	0x0800a9ef
 800a144:	0800a9ef 	.word	0x0800a9ef
 800a148:	0800a9ef 	.word	0x0800a9ef
 800a14c:	0800a9ef 	.word	0x0800a9ef
 800a150:	0800a9ef 	.word	0x0800a9ef
 800a154:	0800a9ef 	.word	0x0800a9ef
 800a158:	0800a57b 	.word	0x0800a57b
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	f000 82da 	beq.w	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a164:	f000 bc43 	b.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a168:	69b9      	ldr	r1, [r7, #24]
 800a16a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a16e:	f000 fe17 	bl	800ada0 <RCCEx_GetSAIxPeriphCLKFreq>
 800a172:	61f8      	str	r0, [r7, #28]
      break;
 800a174:	f000 bc3c 	b.w	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a178:	69b9      	ldr	r1, [r7, #24]
 800a17a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a17e:	f000 fe0f 	bl	800ada0 <RCCEx_GetSAIxPeriphCLKFreq>
 800a182:	61f8      	str	r0, [r7, #28]
      break;
 800a184:	f000 bc34 	b.w	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800a188:	40021000 	.word	0x40021000
 800a18c:	0003d090 	.word	0x0003d090
 800a190:	08010a1c 	.word	0x08010a1c
 800a194:	00f42400 	.word	0x00f42400
 800a198:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a19c:	4bb2      	ldr	r3, [pc, #712]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a1ae:	d015      	beq.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a1b6:	f200 8092 	bhi.w	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1c0:	d029      	beq.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1c8:	f200 8089 	bhi.w	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d07b      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1d8:	d04a      	beq.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800a1da:	e080      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a1dc:	4ba2      	ldr	r3, [pc, #648]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0302 	and.w	r3, r3, #2
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d17c      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a1e8:	4b9f      	ldr	r3, [pc, #636]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0308 	and.w	r3, r3, #8
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a1f4:	4b9c      	ldr	r3, [pc, #624]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	091b      	lsrs	r3, r3, #4
 800a1fa:	f003 030f 	and.w	r3, r3, #15
 800a1fe:	e005      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a200:	4b99      	ldr	r3, [pc, #612]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a206:	0a1b      	lsrs	r3, r3, #8
 800a208:	f003 030f 	and.w	r3, r3, #15
 800a20c:	4a97      	ldr	r2, [pc, #604]	; (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800a20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a212:	61fb      	str	r3, [r7, #28]
          break;
 800a214:	e065      	b.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a216:	4b94      	ldr	r3, [pc, #592]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a21e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a222:	d160      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a224:	4b90      	ldr	r3, [pc, #576]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a22c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a230:	d159      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a232:	4b8d      	ldr	r3, [pc, #564]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	0a1b      	lsrs	r3, r3, #8
 800a238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	fb02 f203 	mul.w	r2, r2, r3
 800a246:	4b88      	ldr	r3, [pc, #544]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	091b      	lsrs	r3, r3, #4
 800a24c:	f003 0307 	and.w	r3, r3, #7
 800a250:	3301      	adds	r3, #1
 800a252:	fbb2 f3f3 	udiv	r3, r2, r3
 800a256:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a258:	4b83      	ldr	r3, [pc, #524]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	0d5b      	lsrs	r3, r3, #21
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	3301      	adds	r3, #1
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26c:	61fb      	str	r3, [r7, #28]
          break;
 800a26e:	e03a      	b.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a270:	4b7d      	ldr	r3, [pc, #500]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a27c:	d135      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a27e:	4b7a      	ldr	r3, [pc, #488]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a28a:	d12e      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a28c:	4b76      	ldr	r3, [pc, #472]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	0a1b      	lsrs	r3, r3, #8
 800a292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a296:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	fb02 f203 	mul.w	r2, r2, r3
 800a2a0:	4b71      	ldr	r3, [pc, #452]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	091b      	lsrs	r3, r3, #4
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a2b2:	4b6d      	ldr	r3, [pc, #436]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	0d5b      	lsrs	r3, r3, #21
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	3301      	adds	r3, #1
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c6:	61fb      	str	r3, [r7, #28]
          break;
 800a2c8:	e00f      	b.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a2ca:	4b67      	ldr	r3, [pc, #412]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a2cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d10a      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800a2d8:	4b65      	ldr	r3, [pc, #404]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800a2da:	61fb      	str	r3, [r7, #28]
          break;
 800a2dc:	e007      	b.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800a2de:	bf00      	nop
 800a2e0:	e386      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a2e2:	bf00      	nop
 800a2e4:	e384      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a2e6:	bf00      	nop
 800a2e8:	e382      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a2ea:	bf00      	nop
 800a2ec:	e380      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a2ee:	bf00      	nop
        break;
 800a2f0:	e37e      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a2f2:	4b5d      	ldr	r3, [pc, #372]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f8:	f003 0303 	and.w	r3, r3, #3
 800a2fc:	613b      	str	r3, [r7, #16]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b03      	cmp	r3, #3
 800a302:	d828      	bhi.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800a304:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30a:	bf00      	nop
 800a30c:	0800a31d 	.word	0x0800a31d
 800a310:	0800a325 	.word	0x0800a325
 800a314:	0800a32d 	.word	0x0800a32d
 800a318:	0800a341 	.word	0x0800a341
          frequency = HAL_RCC_GetPCLK2Freq();
 800a31c:	f7ff fa46 	bl	80097ac <HAL_RCC_GetPCLK2Freq>
 800a320:	61f8      	str	r0, [r7, #28]
          break;
 800a322:	e01d      	b.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a324:	f7ff f994 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a328:	61f8      	str	r0, [r7, #28]
          break;
 800a32a:	e019      	b.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a32c:	4b4e      	ldr	r3, [pc, #312]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a338:	d10f      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800a33a:	4b4e      	ldr	r3, [pc, #312]	; (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800a33c:	61fb      	str	r3, [r7, #28]
          break;
 800a33e:	e00c      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a340:	4b49      	ldr	r3, [pc, #292]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d107      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800a34e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a352:	61fb      	str	r3, [r7, #28]
          break;
 800a354:	e003      	b.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800a356:	bf00      	nop
 800a358:	e34a      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a35a:	bf00      	nop
 800a35c:	e348      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a35e:	bf00      	nop
        break;
 800a360:	e346      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a362:	4b41      	ldr	r3, [pc, #260]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a368:	f003 030c 	and.w	r3, r3, #12
 800a36c:	613b      	str	r3, [r7, #16]
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b0c      	cmp	r3, #12
 800a372:	d83a      	bhi.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800a374:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a3b1 	.word	0x0800a3b1
 800a380:	0800a3eb 	.word	0x0800a3eb
 800a384:	0800a3eb 	.word	0x0800a3eb
 800a388:	0800a3eb 	.word	0x0800a3eb
 800a38c:	0800a3b9 	.word	0x0800a3b9
 800a390:	0800a3eb 	.word	0x0800a3eb
 800a394:	0800a3eb 	.word	0x0800a3eb
 800a398:	0800a3eb 	.word	0x0800a3eb
 800a39c:	0800a3c1 	.word	0x0800a3c1
 800a3a0:	0800a3eb 	.word	0x0800a3eb
 800a3a4:	0800a3eb 	.word	0x0800a3eb
 800a3a8:	0800a3eb 	.word	0x0800a3eb
 800a3ac:	0800a3d5 	.word	0x0800a3d5
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3b0:	f7ff f9e6 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a3b4:	61f8      	str	r0, [r7, #28]
          break;
 800a3b6:	e01d      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800a3b8:	f7ff f94a 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a3bc:	61f8      	str	r0, [r7, #28]
          break;
 800a3be:	e019      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3c0:	4b29      	ldr	r3, [pc, #164]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3cc:	d10f      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800a3ce:	4b29      	ldr	r3, [pc, #164]	; (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800a3d0:	61fb      	str	r3, [r7, #28]
          break;
 800a3d2:	e00c      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a3d4:	4b24      	ldr	r3, [pc, #144]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d107      	bne.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800a3e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3e6:	61fb      	str	r3, [r7, #28]
          break;
 800a3e8:	e003      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800a3ea:	bf00      	nop
 800a3ec:	e300      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a3ee:	bf00      	nop
 800a3f0:	e2fe      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a3f2:	bf00      	nop
        break;
 800a3f4:	e2fc      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a3f6:	4b1c      	ldr	r3, [pc, #112]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	2b30      	cmp	r3, #48	; 0x30
 800a406:	d021      	beq.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	2b30      	cmp	r3, #48	; 0x30
 800a40c:	d829      	bhi.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b20      	cmp	r3, #32
 800a412:	d011      	beq.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2b20      	cmp	r3, #32
 800a418:	d823      	bhi.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2b10      	cmp	r3, #16
 800a424:	d004      	beq.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800a426:	e01c      	b.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a428:	f7ff f9aa 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a42c:	61f8      	str	r0, [r7, #28]
          break;
 800a42e:	e026      	b.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = HAL_RCC_GetSysClockFreq();
 800a430:	f7ff f90e 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a434:	61f8      	str	r0, [r7, #28]
          break;
 800a436:	e022      	b.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a438:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a444:	d118      	bne.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
            frequency = HSI_VALUE;
 800a446:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800a448:	61fb      	str	r3, [r7, #28]
          break;
 800a44a:	e015      	b.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800a44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b02      	cmp	r3, #2
 800a458:	d110      	bne.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
            frequency = LSE_VALUE;
 800a45a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a45e:	61fb      	str	r3, [r7, #28]
          break;
 800a460:	e00c      	b.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 800a462:	bf00      	nop
 800a464:	e2c4      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800a466:	bf00      	nop
 800a468:	40021000 	.word	0x40021000
 800a46c:	08010a1c 	.word	0x08010a1c
 800a470:	02dc6c00 	.word	0x02dc6c00
 800a474:	00f42400 	.word	0x00f42400
          break;
 800a478:	bf00      	nop
 800a47a:	e2b9      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a47c:	bf00      	nop
        break;
 800a47e:	e2b7      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a480:	4ba3      	ldr	r3, [pc, #652]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a48a:	613b      	str	r3, [r7, #16]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	2bc0      	cmp	r3, #192	; 0xc0
 800a490:	d021      	beq.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2bc0      	cmp	r3, #192	; 0xc0
 800a496:	d829      	bhi.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b80      	cmp	r3, #128	; 0x80
 800a49c:	d011      	beq.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2b80      	cmp	r3, #128	; 0x80
 800a4a2:	d823      	bhi.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b40      	cmp	r3, #64	; 0x40
 800a4ae:	d004      	beq.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
          break;
 800a4b0:	e01c      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4b2:	f7ff f965 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a4b6:	61f8      	str	r0, [r7, #28]
          break;
 800a4b8:	e01d      	b.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = HAL_RCC_GetSysClockFreq();
 800a4ba:	f7ff f8c9 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a4be:	61f8      	str	r0, [r7, #28]
          break;
 800a4c0:	e019      	b.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4c2:	4b93      	ldr	r3, [pc, #588]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ce:	d10f      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            frequency = HSI_VALUE;
 800a4d0:	4b90      	ldr	r3, [pc, #576]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800a4d2:	61fb      	str	r3, [r7, #28]
          break;
 800a4d4:	e00c      	b.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a4d6:	4b8e      	ldr	r3, [pc, #568]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d107      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = LSE_VALUE;
 800a4e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e8:	61fb      	str	r3, [r7, #28]
          break;
 800a4ea:	e003      	b.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800a4ec:	bf00      	nop
 800a4ee:	e27f      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a4f0:	bf00      	nop
 800a4f2:	e27d      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a4f4:	bf00      	nop
        break;
 800a4f6:	e27b      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a4f8:	4b85      	ldr	r3, [pc, #532]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a502:	613b      	str	r3, [r7, #16]
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a50a:	d025      	beq.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a512:	d82c      	bhi.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a51a:	d013      	beq.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a522:	d824      	bhi.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d004      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a530:	d004      	beq.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          break;
 800a532:	e01c      	b.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a534:	f7ff f924 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a538:	61f8      	str	r0, [r7, #28]
          break;
 800a53a:	e01d      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a53c:	f7ff f888 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a540:	61f8      	str	r0, [r7, #28]
          break;
 800a542:	e019      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a544:	4b72      	ldr	r3, [pc, #456]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a54c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a550:	d10f      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = HSI_VALUE;
 800a552:	4b70      	ldr	r3, [pc, #448]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800a554:	61fb      	str	r3, [r7, #28]
          break;
 800a556:	e00c      	b.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a558:	4b6d      	ldr	r3, [pc, #436]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b02      	cmp	r3, #2
 800a564:	d107      	bne.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = LSE_VALUE;
 800a566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a56a:	61fb      	str	r3, [r7, #28]
          break;
 800a56c:	e003      	b.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800a56e:	bf00      	nop
 800a570:	e23e      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a572:	bf00      	nop
 800a574:	e23c      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a576:	bf00      	nop
        break;
 800a578:	e23a      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a57a:	4b65      	ldr	r3, [pc, #404]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a584:	613b      	str	r3, [r7, #16]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a58c:	d025      	beq.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a594:	d82c      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a59c:	d013      	beq.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5a4:	d824      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5b2:	d004      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          break;
 800a5b4:	e01c      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5b6:	f7ff f8e3 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a5ba:	61f8      	str	r0, [r7, #28]
          break;
 800a5bc:	e01d      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          frequency = HAL_RCC_GetSysClockFreq();
 800a5be:	f7ff f847 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a5c2:	61f8      	str	r0, [r7, #28]
          break;
 800a5c4:	e019      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5c6:	4b52      	ldr	r3, [pc, #328]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d2:	d10f      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
            frequency = HSI_VALUE;
 800a5d4:	4b4f      	ldr	r3, [pc, #316]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800a5d6:	61fb      	str	r3, [r7, #28]
          break;
 800a5d8:	e00c      	b.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a5da:	4b4d      	ldr	r3, [pc, #308]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d107      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
            frequency = LSE_VALUE;
 800a5e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5ec:	61fb      	str	r3, [r7, #28]
          break;
 800a5ee:	e003      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 800a5f0:	bf00      	nop
 800a5f2:	e1fd      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a5f4:	bf00      	nop
 800a5f6:	e1fb      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a5f8:	bf00      	nop
        break;
 800a5fa:	e1f9      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a5fc:	4b44      	ldr	r3, [pc, #272]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a606:	613b      	str	r3, [r7, #16]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a60e:	d00c      	beq.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a616:	d864      	bhi.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a61e:	d008      	beq.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a626:	d030      	beq.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
          break;
 800a628:	e05b      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = HAL_RCC_GetSysClockFreq();
 800a62a:	f7ff f811 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a62e:	61f8      	str	r0, [r7, #28]
          break;
 800a630:	e05c      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a632:	4b37      	ldr	r3, [pc, #220]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a63a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a63e:	d152      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800a640:	4b33      	ldr	r3, [pc, #204]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d04c      	beq.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a64c:	4b30      	ldr	r3, [pc, #192]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	0a1b      	lsrs	r3, r3, #8
 800a652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a656:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	fb02 f203 	mul.w	r2, r2, r3
 800a660:	4b2b      	ldr	r3, [pc, #172]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	091b      	lsrs	r3, r3, #4
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	3301      	adds	r3, #1
 800a66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a670:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a672:	4b27      	ldr	r3, [pc, #156]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	0e5b      	lsrs	r3, r3, #25
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	3301      	adds	r3, #1
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	fbb2 f3f3 	udiv	r3, r2, r3
 800a686:	61fb      	str	r3, [r7, #28]
          break;
 800a688:	e02d      	b.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a68a:	4b21      	ldr	r3, [pc, #132]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a696:	d128      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 800a698:	4b1d      	ldr	r3, [pc, #116]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d022      	beq.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a6a4:	4b1a      	ldr	r3, [pc, #104]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	0a1b      	lsrs	r3, r3, #8
 800a6aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ae:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	fb02 f203 	mul.w	r2, r2, r3
 800a6b8:	4b15      	ldr	r3, [pc, #84]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	091b      	lsrs	r3, r3, #4
 800a6be:	f003 0307 	and.w	r3, r3, #7
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a6ca:	4b11      	ldr	r3, [pc, #68]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	0e5b      	lsrs	r3, r3, #25
 800a6d0:	f003 0303 	and.w	r3, r3, #3
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6de:	61fb      	str	r3, [r7, #28]
          break;
 800a6e0:	e003      	b.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 800a6e2:	bf00      	nop
 800a6e4:	e184      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a6e6:	bf00      	nop
 800a6e8:	e182      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a6ea:	bf00      	nop
        break;
 800a6ec:	e180      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a6ee:	4b08      	ldr	r3, [pc, #32]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800a6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6f8:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d103      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a700:	f7ff f854 	bl	80097ac <HAL_RCC_GetPCLK2Freq>
 800a704:	61f8      	str	r0, [r7, #28]
        break;
 800a706:	e173      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetSysClockFreq();
 800a708:	f7fe ffa2 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a70c:	61f8      	str	r0, [r7, #28]
        break;
 800a70e:	e16f      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800a710:	40021000 	.word	0x40021000
 800a714:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a718:	4ba7      	ldr	r3, [pc, #668]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a722:	613b      	str	r3, [r7, #16]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a72a:	d013      	beq.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a732:	d819      	bhi.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d004      	beq.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a740:	d004      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
          break;
 800a742:	e011      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a744:	f7ff f81c 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a748:	61f8      	str	r0, [r7, #28]
          break;
 800a74a:	e010      	b.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800a74c:	f7fe ff80 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a750:	61f8      	str	r0, [r7, #28]
          break;
 800a752:	e00c      	b.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a754:	4b98      	ldr	r3, [pc, #608]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a75c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a760:	d104      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
            frequency = HSI_VALUE;
 800a762:	4b96      	ldr	r3, [pc, #600]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800a764:	61fb      	str	r3, [r7, #28]
          break;
 800a766:	e001      	b.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          break;
 800a768:	bf00      	nop
 800a76a:	e141      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a76c:	bf00      	nop
        break;
 800a76e:	e13f      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a770:	4b91      	ldr	r3, [pc, #580]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a77a:	613b      	str	r3, [r7, #16]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a782:	d013      	beq.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a78a:	d819      	bhi.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a798:	d004      	beq.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 800a79a:	e011      	b.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a79c:	f7fe fff0 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a7a0:	61f8      	str	r0, [r7, #28]
          break;
 800a7a2:	e010      	b.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800a7a4:	f7fe ff54 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a7a8:	61f8      	str	r0, [r7, #28]
          break;
 800a7aa:	e00c      	b.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7ac:	4b82      	ldr	r3, [pc, #520]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b8:	d104      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            frequency = HSI_VALUE;
 800a7ba:	4b80      	ldr	r3, [pc, #512]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800a7bc:	61fb      	str	r3, [r7, #28]
          break;
 800a7be:	e001      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          break;
 800a7c0:	bf00      	nop
 800a7c2:	e115      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a7c4:	bf00      	nop
        break;
 800a7c6:	e113      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a7c8:	4b7b      	ldr	r3, [pc, #492]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7d2:	613b      	str	r3, [r7, #16]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7da:	d013      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7e2:	d819      	bhi.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f0:	d004      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          break;
 800a7f2:	e011      	b.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a7f4:	f7fe ffc4 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a7f8:	61f8      	str	r0, [r7, #28]
          break;
 800a7fa:	e010      	b.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a7fc:	f7fe ff28 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a800:	61f8      	str	r0, [r7, #28]
          break;
 800a802:	e00c      	b.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a804:	4b6c      	ldr	r3, [pc, #432]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a80c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a810:	d104      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency = HSI_VALUE;
 800a812:	4b6a      	ldr	r3, [pc, #424]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800a814:	61fb      	str	r3, [r7, #28]
          break;
 800a816:	e001      	b.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          break;
 800a818:	bf00      	nop
 800a81a:	e0e9      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a81c:	bf00      	nop
        break;
 800a81e:	e0e7      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a820:	4b65      	ldr	r3, [pc, #404]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	613b      	str	r3, [r7, #16]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d011      	beq.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d818      	bhi.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d004      	beq.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          break;
 800a844:	e011      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a846:	f7fe ff9b 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a84a:	61f8      	str	r0, [r7, #28]
          break;
 800a84c:	e010      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a84e:	f7fe feff 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800a852:	61f8      	str	r0, [r7, #28]
          break;
 800a854:	e00c      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a856:	4b58      	ldr	r3, [pc, #352]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a85e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a862:	d104      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
            frequency = HSI_VALUE;
 800a864:	4b55      	ldr	r3, [pc, #340]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800a866:	61fb      	str	r3, [r7, #28]
          break;
 800a868:	e001      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          break;
 800a86a:	bf00      	nop
 800a86c:	e0c0      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a86e:	bf00      	nop
        break;
 800a870:	e0be      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a872:	4b51      	ldr	r3, [pc, #324]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a878:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a884:	d02c      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a88c:	d833      	bhi.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a894:	d01a      	beq.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a89c:	d82b      	bhi.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d004      	beq.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8aa:	d004      	beq.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
          break;
 800a8ac:	e023      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a8ae:	f7fe ff67 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a8b2:	61f8      	str	r0, [r7, #28]
          break;
 800a8b4:	e026      	b.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a8b6:	4b40      	ldr	r3, [pc, #256]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a8b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8bc:	f003 0302 	and.w	r3, r3, #2
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d11a      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
              frequency = LSI_VALUE;
 800a8c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a8c8:	61fb      	str	r3, [r7, #28]
          break;
 800a8ca:	e016      	b.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8cc:	4b3a      	ldr	r3, [pc, #232]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d8:	d111      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = HSI_VALUE;
 800a8da:	4b38      	ldr	r3, [pc, #224]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800a8dc:	61fb      	str	r3, [r7, #28]
          break;
 800a8de:	e00e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a8e0:	4b35      	ldr	r3, [pc, #212]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d109      	bne.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
            frequency = LSE_VALUE;
 800a8ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8f2:	61fb      	str	r3, [r7, #28]
          break;
 800a8f4:	e005      	b.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          break;
 800a8f6:	bf00      	nop
 800a8f8:	e07a      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a8fa:	bf00      	nop
 800a8fc:	e078      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a8fe:	bf00      	nop
 800a900:	e076      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a902:	bf00      	nop
        break;
 800a904:	e074      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a906:	4b2c      	ldr	r3, [pc, #176]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a910:	613b      	str	r3, [r7, #16]
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a918:	d02c      	beq.n	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a920:	d833      	bhi.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a928:	d01a      	beq.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a930:	d82b      	bhi.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d004      	beq.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a93e:	d004      	beq.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
          break;
 800a940:	e023      	b.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a942:	f7fe ff1d 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a946:	61f8      	str	r0, [r7, #28]
          break;
 800a948:	e026      	b.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a94a:	4b1b      	ldr	r3, [pc, #108]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a94c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b02      	cmp	r3, #2
 800a956:	d11a      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
              frequency = LSI_VALUE;
 800a958:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a95c:	61fb      	str	r3, [r7, #28]
          break;
 800a95e:	e016      	b.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a960:	4b15      	ldr	r3, [pc, #84]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a96c:	d111      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
            frequency = HSI_VALUE;
 800a96e:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800a970:	61fb      	str	r3, [r7, #28]
          break;
 800a972:	e00e      	b.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a974:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d109      	bne.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
            frequency = LSE_VALUE;
 800a982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a986:	61fb      	str	r3, [r7, #28]
          break;
 800a988:	e005      	b.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
          break;
 800a98a:	bf00      	nop
 800a98c:	e030      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a98e:	bf00      	nop
 800a990:	e02e      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a992:	bf00      	nop
 800a994:	e02c      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800a996:	bf00      	nop
        break;
 800a998:	e02a      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a99a:	4b07      	ldr	r3, [pc, #28]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800a99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9a4:	613b      	str	r3, [r7, #16]
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9b2:	d009      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 800a9b4:	e012      	b.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a9b6:	bf00      	nop
 800a9b8:	40021000 	.word	0x40021000
 800a9bc:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 800a9c0:	f7fe fede 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800a9c4:	61f8      	str	r0, [r7, #28]
          break;
 800a9c6:	e009      	b.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d4:	d101      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
            frequency = HSI_VALUE;
 800a9d6:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>)
 800a9d8:	61fb      	str	r3, [r7, #28]
          break;
 800a9da:	bf00      	nop
        break;
 800a9dc:	e008      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800a9de:	bf00      	nop
 800a9e0:	e006      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800a9e2:	bf00      	nop
 800a9e4:	e004      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800a9e6:	bf00      	nop
 800a9e8:	e002      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800a9ea:	bf00      	nop
 800a9ec:	e000      	b.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800a9ee:	bf00      	nop
    }
  }

  return(frequency);
 800a9f0:	69fb      	ldr	r3, [r7, #28]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3720      	adds	r7, #32
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	40021000 	.word	0x40021000
 800aa00:	00f42400 	.word	0x00f42400

0800aa04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aa12:	4b74      	ldr	r3, [pc, #464]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d018      	beq.n	800aa50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800aa1e:	4b71      	ldr	r3, [pc, #452]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f003 0203 	and.w	r2, r3, #3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d10d      	bne.n	800aa4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
       ||
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800aa36:	4b6b      	ldr	r3, [pc, #428]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	091b      	lsrs	r3, r3, #4
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
       ||
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d047      	beq.n	800aada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]
 800aa4e:	e044      	b.n	800aada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d018      	beq.n	800aa8a <RCCEx_PLLSAI1_Config+0x86>
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d825      	bhi.n	800aaa8 <RCCEx_PLLSAI1_Config+0xa4>
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d002      	beq.n	800aa66 <RCCEx_PLLSAI1_Config+0x62>
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d009      	beq.n	800aa78 <RCCEx_PLLSAI1_Config+0x74>
 800aa64:	e020      	b.n	800aaa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aa66:	4b5f      	ldr	r3, [pc, #380]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d11d      	bne.n	800aaae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa76:	e01a      	b.n	800aaae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aa78:	4b5a      	ldr	r3, [pc, #360]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d116      	bne.n	800aab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa88:	e013      	b.n	800aab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800aa8a:	4b56      	ldr	r3, [pc, #344]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10f      	bne.n	800aab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800aa96:	4b53      	ldr	r3, [pc, #332]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d109      	bne.n	800aab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aaa6:	e006      	b.n	800aab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aaac:	e004      	b.n	800aab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aaae:	bf00      	nop
 800aab0:	e002      	b.n	800aab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aab2:	bf00      	nop
 800aab4:	e000      	b.n	800aab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aab6:	bf00      	nop
    }

    if(status == HAL_OK)
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10d      	bne.n	800aada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aabe:	4b49      	ldr	r3, [pc, #292]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6819      	ldr	r1, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	3b01      	subs	r3, #1
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	430b      	orrs	r3, r1
 800aad4:	4943      	ldr	r1, [pc, #268]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d17c      	bne.n	800abda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800aae0:	4b40      	ldr	r3, [pc, #256]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a3f      	ldr	r2, [pc, #252]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aaea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaec:	f7fb fa8c 	bl	8006008 <HAL_GetTick>
 800aaf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aaf2:	e009      	b.n	800ab08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aaf4:	f7fb fa88 	bl	8006008 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d902      	bls.n	800ab08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	73fb      	strb	r3, [r7, #15]
        break;
 800ab06:	e005      	b.n	800ab14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ab08:	4b36      	ldr	r3, [pc, #216]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1ef      	bne.n	800aaf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d15f      	bne.n	800abda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d110      	bne.n	800ab42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ab20:	4b30      	ldr	r3, [pc, #192]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ab28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6892      	ldr	r2, [r2, #8]
 800ab30:	0211      	lsls	r1, r2, #8
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	68d2      	ldr	r2, [r2, #12]
 800ab36:	06d2      	lsls	r2, r2, #27
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	492a      	ldr	r1, [pc, #168]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	610b      	str	r3, [r1, #16]
 800ab40:	e027      	b.n	800ab92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d112      	bne.n	800ab6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ab48:	4b26      	ldr	r3, [pc, #152]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ab50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	6892      	ldr	r2, [r2, #8]
 800ab58:	0211      	lsls	r1, r2, #8
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6912      	ldr	r2, [r2, #16]
 800ab5e:	0852      	lsrs	r2, r2, #1
 800ab60:	3a01      	subs	r2, #1
 800ab62:	0552      	lsls	r2, r2, #21
 800ab64:	430a      	orrs	r2, r1
 800ab66:	491f      	ldr	r1, [pc, #124]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	610b      	str	r3, [r1, #16]
 800ab6c:	e011      	b.n	800ab92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ab6e:	4b1d      	ldr	r3, [pc, #116]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ab76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6892      	ldr	r2, [r2, #8]
 800ab7e:	0211      	lsls	r1, r2, #8
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6952      	ldr	r2, [r2, #20]
 800ab84:	0852      	lsrs	r2, r2, #1
 800ab86:	3a01      	subs	r2, #1
 800ab88:	0652      	lsls	r2, r2, #25
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	4915      	ldr	r1, [pc, #84]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ab92:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a13      	ldr	r2, [pc, #76]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab9e:	f7fb fa33 	bl	8006008 <HAL_GetTick>
 800aba2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aba4:	e009      	b.n	800abba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aba6:	f7fb fa2f 	bl	8006008 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d902      	bls.n	800abba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	73fb      	strb	r3, [r7, #15]
          break;
 800abb8:	e005      	b.n	800abc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800abba:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0ef      	beq.n	800aba6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d106      	bne.n	800abda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800abce:	691a      	ldr	r2, [r3, #16]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	4903      	ldr	r1, [pc, #12]	; (800abe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800abda:	7bfb      	ldrb	r3, [r7, #15]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	40021000 	.word	0x40021000

0800abe8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800abf6:	4b69      	ldr	r3, [pc, #420]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f003 0303 	and.w	r3, r3, #3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d018      	beq.n	800ac34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ac02:	4b66      	ldr	r3, [pc, #408]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f003 0203 	and.w	r2, r3, #3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d10d      	bne.n	800ac2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
       ||
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d009      	beq.n	800ac2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800ac1a:	4b60      	ldr	r3, [pc, #384]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	091b      	lsrs	r3, r3, #4
 800ac20:	f003 0307 	and.w	r3, r3, #7
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
       ||
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d047      	beq.n	800acbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	73fb      	strb	r3, [r7, #15]
 800ac32:	e044      	b.n	800acbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d018      	beq.n	800ac6e <RCCEx_PLLSAI2_Config+0x86>
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d825      	bhi.n	800ac8c <RCCEx_PLLSAI2_Config+0xa4>
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d002      	beq.n	800ac4a <RCCEx_PLLSAI2_Config+0x62>
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d009      	beq.n	800ac5c <RCCEx_PLLSAI2_Config+0x74>
 800ac48:	e020      	b.n	800ac8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ac4a:	4b54      	ldr	r3, [pc, #336]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d11d      	bne.n	800ac92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac5a:	e01a      	b.n	800ac92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ac5c:	4b4f      	ldr	r3, [pc, #316]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d116      	bne.n	800ac96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac6c:	e013      	b.n	800ac96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ac6e:	4b4b      	ldr	r3, [pc, #300]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10f      	bne.n	800ac9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ac7a:	4b48      	ldr	r3, [pc, #288]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d109      	bne.n	800ac9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac8a:	e006      	b.n	800ac9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac90:	e004      	b.n	800ac9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ac92:	bf00      	nop
 800ac94:	e002      	b.n	800ac9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ac96:	bf00      	nop
 800ac98:	e000      	b.n	800ac9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ac9a:	bf00      	nop
    }

    if(status == HAL_OK)
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10d      	bne.n	800acbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aca2:	4b3e      	ldr	r3, [pc, #248]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6819      	ldr	r1, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	430b      	orrs	r3, r1
 800acb8:	4938      	ldr	r1, [pc, #224]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800acba:	4313      	orrs	r3, r2
 800acbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d166      	bne.n	800ad92 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800acc4:	4b35      	ldr	r3, [pc, #212]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a34      	ldr	r2, [pc, #208]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800acca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acd0:	f7fb f99a 	bl	8006008 <HAL_GetTick>
 800acd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800acd6:	e009      	b.n	800acec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800acd8:	f7fb f996 	bl	8006008 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d902      	bls.n	800acec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	73fb      	strb	r3, [r7, #15]
        break;
 800acea:	e005      	b.n	800acf8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800acec:	4b2b      	ldr	r3, [pc, #172]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1ef      	bne.n	800acd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d149      	bne.n	800ad92 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d110      	bne.n	800ad26 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ad04:	4b25      	ldr	r3, [pc, #148]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ad0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	6892      	ldr	r2, [r2, #8]
 800ad14:	0211      	lsls	r1, r2, #8
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	68d2      	ldr	r2, [r2, #12]
 800ad1a:	06d2      	lsls	r2, r2, #27
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	491f      	ldr	r1, [pc, #124]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad20:	4313      	orrs	r3, r2
 800ad22:	614b      	str	r3, [r1, #20]
 800ad24:	e011      	b.n	800ad4a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ad26:	4b1d      	ldr	r3, [pc, #116]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ad2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	6892      	ldr	r2, [r2, #8]
 800ad36:	0211      	lsls	r1, r2, #8
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	6912      	ldr	r2, [r2, #16]
 800ad3c:	0852      	lsrs	r2, r2, #1
 800ad3e:	3a01      	subs	r2, #1
 800ad40:	0652      	lsls	r2, r2, #25
 800ad42:	430a      	orrs	r2, r1
 800ad44:	4915      	ldr	r1, [pc, #84]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ad4a:	4b14      	ldr	r3, [pc, #80]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a13      	ldr	r2, [pc, #76]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad56:	f7fb f957 	bl	8006008 <HAL_GetTick>
 800ad5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ad5c:	e009      	b.n	800ad72 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ad5e:	f7fb f953 	bl	8006008 <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d902      	bls.n	800ad72 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad70:	e005      	b.n	800ad7e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ad72:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0ef      	beq.n	800ad5e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ad84:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad86:	695a      	ldr	r2, [r3, #20]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	4903      	ldr	r1, [pc, #12]	; (800ad9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	40021000 	.word	0x40021000

0800ada0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b089      	sub	sp, #36	; 0x24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800adae:	2300      	movs	r3, #0
 800adb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adbc:	d10c      	bne.n	800add8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800adbe:	4b77      	ldr	r3, [pc, #476]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800adc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800adc8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800add0:	d112      	bne.n	800adf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800add2:	4b73      	ldr	r3, [pc, #460]	; (800afa0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800add4:	61fb      	str	r3, [r7, #28]
 800add6:	e00f      	b.n	800adf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adde:	d10b      	bne.n	800adf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ade0:	4b6e      	ldr	r3, [pc, #440]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800adea:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adf2:	d101      	bne.n	800adf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800adf4:	4b6a      	ldr	r3, [pc, #424]	; (800afa0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800adf6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f040 80c6 	bne.w	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae0a:	d003      	beq.n	800ae14 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae12:	d13b      	bne.n	800ae8c <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ae14:	4b61      	ldr	r3, [pc, #388]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae20:	f040 80b3 	bne.w	800af8a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800ae24:	4b5d      	ldr	r3, [pc, #372]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 80ac 	beq.w	800af8a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ae32:	4b5a      	ldr	r3, [pc, #360]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	091b      	lsrs	r3, r3, #4
 800ae38:	f003 0307 	and.w	r3, r3, #7
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae44:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ae46:	4b55      	ldr	r3, [pc, #340]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae50:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ae52:	4b52      	ldr	r3, [pc, #328]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	0edb      	lsrs	r3, r3, #27
 800ae58:	f003 031f 	and.w	r3, r3, #31
 800ae5c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ae64:	4b4d      	ldr	r3, [pc, #308]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800ae70:	2311      	movs	r3, #17
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	e001      	b.n	800ae7a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800ae76:	2307      	movs	r3, #7
 800ae78:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	fb02 f203 	mul.w	r2, r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae88:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ae8a:	e07e      	b.n	800af8a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d139      	bne.n	800af06 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ae92:	4b42      	ldr	r3, [pc, #264]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae9e:	d175      	bne.n	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800aea0:	4b3e      	ldr	r3, [pc, #248]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d06f      	beq.n	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aeac:	4b3b      	ldr	r3, [pc, #236]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	091b      	lsrs	r3, r3, #4
 800aeb2:	f003 0307 	and.w	r3, r3, #7
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800aec0:	4b36      	ldr	r3, [pc, #216]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	0a1b      	lsrs	r3, r3, #8
 800aec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeca:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800aecc:	4b33      	ldr	r3, [pc, #204]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	0edb      	lsrs	r3, r3, #27
 800aed2:	f003 031f 	and.w	r3, r3, #31
 800aed6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800aede:	4b2f      	ldr	r3, [pc, #188]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800aeea:	2311      	movs	r3, #17
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	e001      	b.n	800aef4 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800aef0:	2307      	movs	r3, #7
 800aef2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	fb02 f203 	mul.w	r2, r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	fbb2 f3f3 	udiv	r3, r2, r3
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	e042      	b.n	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af0c:	d003      	beq.n	800af16 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af14:	d13a      	bne.n	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800af16:	4b21      	ldr	r3, [pc, #132]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af22:	d133      	bne.n	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800af24:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d02d      	beq.n	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800af30:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	091b      	lsrs	r3, r3, #4
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	3301      	adds	r3, #1
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af42:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800af44:	4b15      	ldr	r3, [pc, #84]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	0a1b      	lsrs	r3, r3, #8
 800af4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800af50:	4b12      	ldr	r3, [pc, #72]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	0edb      	lsrs	r3, r3, #27
 800af56:	f003 031f 	and.w	r3, r3, #31
 800af5a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800af62:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d002      	beq.n	800af74 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800af6e:	2311      	movs	r3, #17
 800af70:	617b      	str	r3, [r7, #20]
 800af72:	e001      	b.n	800af78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800af74:	2307      	movs	r3, #7
 800af76:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	fb02 f203 	mul.w	r2, r2, r3
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	fbb2 f3f3 	udiv	r3, r2, r3
 800af86:	61fb      	str	r3, [r7, #28]
 800af88:	e000      	b.n	800af8c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800af8a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800af8c:	69fb      	ldr	r3, [r7, #28]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3724      	adds	r7, #36	; 0x24
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	40021000 	.word	0x40021000
 800afa0:	001fff68 	.word	0x001fff68

0800afa4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e155      	b.n	800b262 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7f7 fba4 	bl	8002718 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f959 	bl	800b288 <SAI_Disable>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e140      	b.n	800b262 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d00c      	beq.n	800b00a <HAL_SAI_Init+0x66>
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d80d      	bhi.n	800b010 <HAL_SAI_Init+0x6c>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <HAL_SAI_Init+0x5a>
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d003      	beq.n	800b004 <HAL_SAI_Init+0x60>
 800affc:	e008      	b.n	800b010 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	61fb      	str	r3, [r7, #28]
      break;
 800b002:	e008      	b.n	800b016 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b004:	2310      	movs	r3, #16
 800b006:	61fb      	str	r3, [r7, #28]
      break;
 800b008:	e005      	b.n	800b016 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b00a:	2320      	movs	r3, #32
 800b00c:	61fb      	str	r3, [r7, #28]
      break;
 800b00e:	e002      	b.n	800b016 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	61fb      	str	r3, [r7, #28]
      break;
 800b014:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d81d      	bhi.n	800b05a <HAL_SAI_Init+0xb6>
 800b01e:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <HAL_SAI_Init+0x80>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b035 	.word	0x0800b035
 800b028:	0800b03b 	.word	0x0800b03b
 800b02c:	0800b043 	.word	0x0800b043
 800b030:	0800b04b 	.word	0x0800b04b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	617b      	str	r3, [r7, #20]
      break;
 800b038:	e012      	b.n	800b060 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03e:	617b      	str	r3, [r7, #20]
      break;
 800b040:	e00e      	b.n	800b060 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b046:	617b      	str	r3, [r7, #20]
      break;
 800b048:	e00a      	b.n	800b060 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b04a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b04e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	61fb      	str	r3, [r7, #28]
      break;
 800b058:	e002      	b.n	800b060 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	617b      	str	r3, [r7, #20]
      break;
 800b05e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a81      	ldr	r2, [pc, #516]	; (800b26c <HAL_SAI_Init+0x2c8>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d004      	beq.n	800b074 <HAL_SAI_Init+0xd0>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a80      	ldr	r2, [pc, #512]	; (800b270 <HAL_SAI_Init+0x2cc>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d103      	bne.n	800b07c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800b074:	4a7f      	ldr	r2, [pc, #508]	; (800b274 <HAL_SAI_Init+0x2d0>)
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	e002      	b.n	800b082 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b07c:	4a7e      	ldr	r2, [pc, #504]	; (800b278 <HAL_SAI_Init+0x2d4>)
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d041      	beq.n	800b10e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a77      	ldr	r2, [pc, #476]	; (800b26c <HAL_SAI_Init+0x2c8>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d004      	beq.n	800b09e <HAL_SAI_Init+0xfa>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a75      	ldr	r2, [pc, #468]	; (800b270 <HAL_SAI_Init+0x2cc>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d105      	bne.n	800b0aa <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b09e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b0a2:	f7fe fef5 	bl	8009e90 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0a6:	6138      	str	r0, [r7, #16]
 800b0a8:	e004      	b.n	800b0b4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b0aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b0ae:	f7fe feef 	bl	8009e90 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0b2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800b0b4:	693a      	ldr	r2, [r7, #16]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	461a      	mov	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	025b      	lsls	r3, r3, #9
 800b0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ca:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4a6b      	ldr	r2, [pc, #428]	; (800b27c <HAL_SAI_Init+0x2d8>)
 800b0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d4:	08da      	lsrs	r2, r3, #3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b0da:	68f9      	ldr	r1, [r7, #12]
 800b0dc:	4b67      	ldr	r3, [pc, #412]	; (800b27c <HAL_SAI_Init+0x2d8>)
 800b0de:	fba3 2301 	umull	r2, r3, r3, r1
 800b0e2:	08da      	lsrs	r2, r3, #3
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	1aca      	subs	r2, r1, r3
 800b0ee:	2a08      	cmp	r2, #8
 800b0f0:	d904      	bls.n	800b0fc <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	1c5a      	adds	r2, r3, #1
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	2b04      	cmp	r3, #4
 800b102:	d104      	bne.n	800b10e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	085a      	lsrs	r2, r3, #1
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_SAI_Init+0x17a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d109      	bne.n	800b132 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b122:	2b01      	cmp	r3, #1
 800b124:	d101      	bne.n	800b12a <HAL_SAI_Init+0x186>
 800b126:	2300      	movs	r3, #0
 800b128:	e001      	b.n	800b12e <HAL_SAI_Init+0x18a>
 800b12a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b12e:	61bb      	str	r3, [r7, #24]
 800b130:	e008      	b.n	800b144 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b136:	2b01      	cmp	r3, #1
 800b138:	d102      	bne.n	800b140 <HAL_SAI_Init+0x19c>
 800b13a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b13e:	e000      	b.n	800b142 <HAL_SAI_Init+0x19e>
 800b140:	2300      	movs	r3, #0
 800b142:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6819      	ldr	r1, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	4b4c      	ldr	r3, [pc, #304]	; (800b280 <HAL_SAI_Init+0x2dc>)
 800b150:	400b      	ands	r3, r1
 800b152:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6819      	ldr	r1, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b162:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b168:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	431a      	orrs	r2, r3
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800b17c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b188:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	051b      	lsls	r3, r3, #20
 800b190:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	6812      	ldr	r2, [r2, #0]
 800b1a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b1a8:	f023 030f 	bic.w	r3, r3, #15
 800b1ac:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6859      	ldr	r1, [r3, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699a      	ldr	r2, [r3, #24]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c2:	431a      	orrs	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6899      	ldr	r1, [r3, #8]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	4b2b      	ldr	r3, [pc, #172]	; (800b284 <HAL_SAI_Init+0x2e0>)
 800b1d8:	400b      	ands	r3, r1
 800b1da:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6899      	ldr	r1, [r3, #8]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b1ec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800b1f2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800b1f8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fe:	3b01      	subs	r3, #1
 800b200:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b202:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68d9      	ldr	r1, [r3, #12]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b21a:	400b      	ands	r3, r1
 800b21c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68d9      	ldr	r1, [r3, #12]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b22c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b232:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b234:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23a:	3b01      	subs	r3, #1
 800b23c:	021b      	lsls	r3, r3, #8
 800b23e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	430a      	orrs	r2, r1
 800b246:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	40015404 	.word	0x40015404
 800b270:	40015424 	.word	0x40015424
 800b274:	40015400 	.word	0x40015400
 800b278:	40015800 	.word	0x40015800
 800b27c:	cccccccd 	.word	0xcccccccd
 800b280:	ff05c010 	.word	0xff05c010
 800b284:	fff88000 	.word	0xfff88000

0800b288 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b290:	4b18      	ldr	r3, [pc, #96]	; (800b2f4 <SAI_Disable+0x6c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a18      	ldr	r2, [pc, #96]	; (800b2f8 <SAI_Disable+0x70>)
 800b296:	fba2 2303 	umull	r2, r3, r2, r3
 800b29a:	0b1b      	lsrs	r3, r3, #12
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b2b2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10a      	bne.n	800b2d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	72fb      	strb	r3, [r7, #11]
      break;
 800b2ce:	e009      	b.n	800b2e4 <SAI_Disable+0x5c>
    }
    count--;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e7      	bne.n	800b2b4 <SAI_Disable+0x2c>

  return status;
 800b2e4:	7afb      	ldrb	r3, [r7, #11]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20000004 	.word	0x20000004
 800b2f8:	95cbec1b 	.word	0x95cbec1b

0800b2fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e095      	b.n	800b43a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	2b00      	cmp	r3, #0
 800b314:	d108      	bne.n	800b328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b31e:	d009      	beq.n	800b334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	61da      	str	r2, [r3, #28]
 800b326:	e005      	b.n	800b334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7f7 fad8 	bl	8002904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b36a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b374:	d902      	bls.n	800b37c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e002      	b.n	800b382 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b37c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b380:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b38a:	d007      	beq.n	800b39c <HAL_SPI_Init+0xa0>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b394:	d002      	beq.n	800b39c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	f003 0302 	and.w	r3, r3, #2
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3de:	ea42 0103 	orr.w	r1, r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	430a      	orrs	r2, r1
 800b3f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	0c1b      	lsrs	r3, r3, #16
 800b3f8:	f003 0204 	and.w	r2, r3, #4
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b400:	f003 0310 	and.w	r3, r3, #16
 800b404:	431a      	orrs	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40a:	f003 0308 	and.w	r3, r3, #8
 800b40e:	431a      	orrs	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b418:	ea42 0103 	orr.w	r1, r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b084      	sub	sp, #16
 800b446:	af00      	add	r7, sp, #0
 800b448:	60f8      	str	r0, [r7, #12]
 800b44a:	60b9      	str	r1, [r7, #8]
 800b44c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	e038      	b.n	800b4ca <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d106      	bne.n	800b472 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7f6 f95f 	bl	8001730 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3308      	adds	r3, #8
 800b47a:	4619      	mov	r1, r3
 800b47c:	4610      	mov	r0, r2
 800b47e:	f002 fa85 	bl	800d98c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6818      	ldr	r0, [r3, #0]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	461a      	mov	r2, r3
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	f002 fb0d 	bl	800daac <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6858      	ldr	r0, [r3, #4]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	f002 fb54 	bl	800db4c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	6892      	ldr	r2, [r2, #8]
 800b4ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	6892      	ldr	r2, [r2, #8]
 800b4b8:	f041 0101 	orr.w	r1, r1, #1
 800b4bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b082      	sub	sp, #8
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e049      	b.n	800b578 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7f7 fd7d 	bl	8002ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2202      	movs	r2, #2
 800b502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3304      	adds	r3, #4
 800b50e:	4619      	mov	r1, r3
 800b510:	4610      	mov	r0, r2
 800b512:	f000 fd49 	bl	800bfa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6a1a      	ldr	r2, [r3, #32]
 800b58e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b592:	4013      	ands	r3, r2
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10f      	bne.n	800b5b8 <HAL_TIM_Base_Stop+0x38>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6a1a      	ldr	r2, [r3, #32]
 800b59e:	f240 4344 	movw	r3, #1092	; 0x444
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d107      	bne.n	800b5b8 <HAL_TIM_Base_Stop+0x38>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f022 0201 	bic.w	r2, r2, #1
 800b5b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d001      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e04f      	b.n	800b688 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f042 0201 	orr.w	r2, r2, #1
 800b5fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a23      	ldr	r2, [pc, #140]	; (800b694 <HAL_TIM_Base_Start_IT+0xc4>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d01d      	beq.n	800b646 <HAL_TIM_Base_Start_IT+0x76>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b612:	d018      	beq.n	800b646 <HAL_TIM_Base_Start_IT+0x76>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a1f      	ldr	r2, [pc, #124]	; (800b698 <HAL_TIM_Base_Start_IT+0xc8>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d013      	beq.n	800b646 <HAL_TIM_Base_Start_IT+0x76>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a1e      	ldr	r2, [pc, #120]	; (800b69c <HAL_TIM_Base_Start_IT+0xcc>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d00e      	beq.n	800b646 <HAL_TIM_Base_Start_IT+0x76>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a1c      	ldr	r2, [pc, #112]	; (800b6a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d009      	beq.n	800b646 <HAL_TIM_Base_Start_IT+0x76>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a1b      	ldr	r2, [pc, #108]	; (800b6a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d004      	beq.n	800b646 <HAL_TIM_Base_Start_IT+0x76>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a19      	ldr	r2, [pc, #100]	; (800b6a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d115      	bne.n	800b672 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689a      	ldr	r2, [r3, #8]
 800b64c:	4b17      	ldr	r3, [pc, #92]	; (800b6ac <HAL_TIM_Base_Start_IT+0xdc>)
 800b64e:	4013      	ands	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b06      	cmp	r3, #6
 800b656:	d015      	beq.n	800b684 <HAL_TIM_Base_Start_IT+0xb4>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b65e:	d011      	beq.n	800b684 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f042 0201 	orr.w	r2, r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b670:	e008      	b.n	800b684 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f042 0201 	orr.w	r2, r2, #1
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	e000      	b.n	800b686 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b684:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	40012c00 	.word	0x40012c00
 800b698:	40000400 	.word	0x40000400
 800b69c:	40000800 	.word	0x40000800
 800b6a0:	40000c00 	.word	0x40000c00
 800b6a4:	40013400 	.word	0x40013400
 800b6a8:	40014000 	.word	0x40014000
 800b6ac:	00010007 	.word	0x00010007

0800b6b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e049      	b.n	800b756 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7fa fb10 	bl	8005cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f000 fc5a 	bl	800bfa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d109      	bne.n	800b784 <HAL_TIM_PWM_Start+0x24>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b01      	cmp	r3, #1
 800b77a:	bf14      	ite	ne
 800b77c:	2301      	movne	r3, #1
 800b77e:	2300      	moveq	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	e03c      	b.n	800b7fe <HAL_TIM_PWM_Start+0x9e>
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	2b04      	cmp	r3, #4
 800b788:	d109      	bne.n	800b79e <HAL_TIM_PWM_Start+0x3e>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b01      	cmp	r3, #1
 800b794:	bf14      	ite	ne
 800b796:	2301      	movne	r3, #1
 800b798:	2300      	moveq	r3, #0
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	e02f      	b.n	800b7fe <HAL_TIM_PWM_Start+0x9e>
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b08      	cmp	r3, #8
 800b7a2:	d109      	bne.n	800b7b8 <HAL_TIM_PWM_Start+0x58>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	bf14      	ite	ne
 800b7b0:	2301      	movne	r3, #1
 800b7b2:	2300      	moveq	r3, #0
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	e022      	b.n	800b7fe <HAL_TIM_PWM_Start+0x9e>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b0c      	cmp	r3, #12
 800b7bc:	d109      	bne.n	800b7d2 <HAL_TIM_PWM_Start+0x72>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	bf14      	ite	ne
 800b7ca:	2301      	movne	r3, #1
 800b7cc:	2300      	moveq	r3, #0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	e015      	b.n	800b7fe <HAL_TIM_PWM_Start+0x9e>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b10      	cmp	r3, #16
 800b7d6:	d109      	bne.n	800b7ec <HAL_TIM_PWM_Start+0x8c>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	bf14      	ite	ne
 800b7e4:	2301      	movne	r3, #1
 800b7e6:	2300      	moveq	r3, #0
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	e008      	b.n	800b7fe <HAL_TIM_PWM_Start+0x9e>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	bf14      	ite	ne
 800b7f8:	2301      	movne	r3, #1
 800b7fa:	2300      	moveq	r3, #0
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e09c      	b.n	800b940 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d104      	bne.n	800b816 <HAL_TIM_PWM_Start+0xb6>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b814:	e023      	b.n	800b85e <HAL_TIM_PWM_Start+0xfe>
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b04      	cmp	r3, #4
 800b81a:	d104      	bne.n	800b826 <HAL_TIM_PWM_Start+0xc6>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2202      	movs	r2, #2
 800b820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b824:	e01b      	b.n	800b85e <HAL_TIM_PWM_Start+0xfe>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b08      	cmp	r3, #8
 800b82a:	d104      	bne.n	800b836 <HAL_TIM_PWM_Start+0xd6>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2202      	movs	r2, #2
 800b830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b834:	e013      	b.n	800b85e <HAL_TIM_PWM_Start+0xfe>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b0c      	cmp	r3, #12
 800b83a:	d104      	bne.n	800b846 <HAL_TIM_PWM_Start+0xe6>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2202      	movs	r2, #2
 800b840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b844:	e00b      	b.n	800b85e <HAL_TIM_PWM_Start+0xfe>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b10      	cmp	r3, #16
 800b84a:	d104      	bne.n	800b856 <HAL_TIM_PWM_Start+0xf6>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b854:	e003      	b.n	800b85e <HAL_TIM_PWM_Start+0xfe>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2202      	movs	r2, #2
 800b85a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2201      	movs	r2, #1
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 ffa8 	bl	800c7bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a35      	ldr	r2, [pc, #212]	; (800b948 <HAL_TIM_PWM_Start+0x1e8>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d013      	beq.n	800b89e <HAL_TIM_PWM_Start+0x13e>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a34      	ldr	r2, [pc, #208]	; (800b94c <HAL_TIM_PWM_Start+0x1ec>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d00e      	beq.n	800b89e <HAL_TIM_PWM_Start+0x13e>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a32      	ldr	r2, [pc, #200]	; (800b950 <HAL_TIM_PWM_Start+0x1f0>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d009      	beq.n	800b89e <HAL_TIM_PWM_Start+0x13e>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a31      	ldr	r2, [pc, #196]	; (800b954 <HAL_TIM_PWM_Start+0x1f4>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d004      	beq.n	800b89e <HAL_TIM_PWM_Start+0x13e>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a2f      	ldr	r2, [pc, #188]	; (800b958 <HAL_TIM_PWM_Start+0x1f8>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d101      	bne.n	800b8a2 <HAL_TIM_PWM_Start+0x142>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e000      	b.n	800b8a4 <HAL_TIM_PWM_Start+0x144>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d007      	beq.n	800b8b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a22      	ldr	r2, [pc, #136]	; (800b948 <HAL_TIM_PWM_Start+0x1e8>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d01d      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x19e>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ca:	d018      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x19e>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a22      	ldr	r2, [pc, #136]	; (800b95c <HAL_TIM_PWM_Start+0x1fc>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d013      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x19e>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a21      	ldr	r2, [pc, #132]	; (800b960 <HAL_TIM_PWM_Start+0x200>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d00e      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x19e>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a1f      	ldr	r2, [pc, #124]	; (800b964 <HAL_TIM_PWM_Start+0x204>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d009      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x19e>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a17      	ldr	r2, [pc, #92]	; (800b94c <HAL_TIM_PWM_Start+0x1ec>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d004      	beq.n	800b8fe <HAL_TIM_PWM_Start+0x19e>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a15      	ldr	r2, [pc, #84]	; (800b950 <HAL_TIM_PWM_Start+0x1f0>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d115      	bne.n	800b92a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689a      	ldr	r2, [r3, #8]
 800b904:	4b18      	ldr	r3, [pc, #96]	; (800b968 <HAL_TIM_PWM_Start+0x208>)
 800b906:	4013      	ands	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b06      	cmp	r3, #6
 800b90e:	d015      	beq.n	800b93c <HAL_TIM_PWM_Start+0x1dc>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b916:	d011      	beq.n	800b93c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f042 0201 	orr.w	r2, r2, #1
 800b926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b928:	e008      	b.n	800b93c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f042 0201 	orr.w	r2, r2, #1
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	e000      	b.n	800b93e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b93c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	40012c00 	.word	0x40012c00
 800b94c:	40013400 	.word	0x40013400
 800b950:	40014000 	.word	0x40014000
 800b954:	40014400 	.word	0x40014400
 800b958:	40014800 	.word	0x40014800
 800b95c:	40000400 	.word	0x40000400
 800b960:	40000800 	.word	0x40000800
 800b964:	40000c00 	.word	0x40000c00
 800b968:	00010007 	.word	0x00010007

0800b96c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	f003 0302 	and.w	r3, r3, #2
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d122      	bne.n	800b9c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f003 0302 	and.w	r3, r3, #2
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d11b      	bne.n	800b9c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f06f 0202 	mvn.w	r2, #2
 800b998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	f003 0303 	and.w	r3, r3, #3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fadc 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800b9b4:	e005      	b.n	800b9c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 face 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fadf 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	f003 0304 	and.w	r3, r3, #4
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d122      	bne.n	800ba1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	f003 0304 	and.w	r3, r3, #4
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d11b      	bne.n	800ba1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f06f 0204 	mvn.w	r2, #4
 800b9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fab2 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800ba08:	e005      	b.n	800ba16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 faa4 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fab5 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b08      	cmp	r3, #8
 800ba28:	d122      	bne.n	800ba70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	f003 0308 	and.w	r3, r3, #8
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d11b      	bne.n	800ba70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f06f 0208 	mvn.w	r2, #8
 800ba40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2204      	movs	r2, #4
 800ba46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fa88 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800ba5c:	e005      	b.n	800ba6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa7a 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fa8b 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	f003 0310 	and.w	r3, r3, #16
 800ba7a:	2b10      	cmp	r3, #16
 800ba7c:	d122      	bne.n	800bac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	f003 0310 	and.w	r3, r3, #16
 800ba88:	2b10      	cmp	r3, #16
 800ba8a:	d11b      	bne.n	800bac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f06f 0210 	mvn.w	r2, #16
 800ba94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2208      	movs	r2, #8
 800ba9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fa5e 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800bab0:	e005      	b.n	800babe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fa50 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fa61 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d10e      	bne.n	800baf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	2b01      	cmp	r3, #1
 800bade:	d107      	bne.n	800baf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f06f 0201 	mvn.w	r2, #1
 800bae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7f6 fa7a 	bl	8001fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafa:	2b80      	cmp	r3, #128	; 0x80
 800bafc:	d10e      	bne.n	800bb1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb08:	2b80      	cmp	r3, #128	; 0x80
 800bb0a:	d107      	bne.n	800bb1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 ff86 	bl	800ca28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb2a:	d10e      	bne.n	800bb4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb36:	2b80      	cmp	r3, #128	; 0x80
 800bb38:	d107      	bne.n	800bb4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 ff79 	bl	800ca3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb54:	2b40      	cmp	r3, #64	; 0x40
 800bb56:	d10e      	bne.n	800bb76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb62:	2b40      	cmp	r3, #64	; 0x40
 800bb64:	d107      	bne.n	800bb76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fa0f 	bl	800bf94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	f003 0320 	and.w	r3, r3, #32
 800bb80:	2b20      	cmp	r3, #32
 800bb82:	d10e      	bne.n	800bba2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	f003 0320 	and.w	r3, r3, #32
 800bb8e:	2b20      	cmp	r3, #32
 800bb90:	d107      	bne.n	800bba2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f06f 0220 	mvn.w	r2, #32
 800bb9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 ff39 	bl	800ca14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bba2:	bf00      	nop
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d101      	bne.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bbc2:	2302      	movs	r3, #2
 800bbc4:	e0fd      	b.n	800bdc2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2b14      	cmp	r3, #20
 800bbd2:	f200 80f0 	bhi.w	800bdb6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bbd6:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbdc:	0800bc31 	.word	0x0800bc31
 800bbe0:	0800bdb7 	.word	0x0800bdb7
 800bbe4:	0800bdb7 	.word	0x0800bdb7
 800bbe8:	0800bdb7 	.word	0x0800bdb7
 800bbec:	0800bc71 	.word	0x0800bc71
 800bbf0:	0800bdb7 	.word	0x0800bdb7
 800bbf4:	0800bdb7 	.word	0x0800bdb7
 800bbf8:	0800bdb7 	.word	0x0800bdb7
 800bbfc:	0800bcb3 	.word	0x0800bcb3
 800bc00:	0800bdb7 	.word	0x0800bdb7
 800bc04:	0800bdb7 	.word	0x0800bdb7
 800bc08:	0800bdb7 	.word	0x0800bdb7
 800bc0c:	0800bcf3 	.word	0x0800bcf3
 800bc10:	0800bdb7 	.word	0x0800bdb7
 800bc14:	0800bdb7 	.word	0x0800bdb7
 800bc18:	0800bdb7 	.word	0x0800bdb7
 800bc1c:	0800bd35 	.word	0x0800bd35
 800bc20:	0800bdb7 	.word	0x0800bdb7
 800bc24:	0800bdb7 	.word	0x0800bdb7
 800bc28:	0800bdb7 	.word	0x0800bdb7
 800bc2c:	0800bd75 	.word	0x0800bd75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fa50 	bl	800c0dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	699a      	ldr	r2, [r3, #24]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f042 0208 	orr.w	r2, r2, #8
 800bc4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f022 0204 	bic.w	r2, r2, #4
 800bc5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6999      	ldr	r1, [r3, #24]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	691a      	ldr	r2, [r3, #16]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	619a      	str	r2, [r3, #24]
      break;
 800bc6e:	e0a3      	b.n	800bdb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68b9      	ldr	r1, [r7, #8]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fac0 	bl	800c1fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	699a      	ldr	r2, [r3, #24]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	699a      	ldr	r2, [r3, #24]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6999      	ldr	r1, [r3, #24]
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	021a      	lsls	r2, r3, #8
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	430a      	orrs	r2, r1
 800bcae:	619a      	str	r2, [r3, #24]
      break;
 800bcb0:	e082      	b.n	800bdb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 fb29 	bl	800c310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	69da      	ldr	r2, [r3, #28]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f042 0208 	orr.w	r2, r2, #8
 800bccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	69da      	ldr	r2, [r3, #28]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f022 0204 	bic.w	r2, r2, #4
 800bcdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69d9      	ldr	r1, [r3, #28]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	691a      	ldr	r2, [r3, #16]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	430a      	orrs	r2, r1
 800bcee:	61da      	str	r2, [r3, #28]
      break;
 800bcf0:	e062      	b.n	800bdb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68b9      	ldr	r1, [r7, #8]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fb91 	bl	800c420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69da      	ldr	r2, [r3, #28]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	69da      	ldr	r2, [r3, #28]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69d9      	ldr	r1, [r3, #28]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	691b      	ldr	r3, [r3, #16]
 800bd28:	021a      	lsls	r2, r3, #8
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	61da      	str	r2, [r3, #28]
      break;
 800bd32:	e041      	b.n	800bdb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68b9      	ldr	r1, [r7, #8]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 fbda 	bl	800c4f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f042 0208 	orr.w	r2, r2, #8
 800bd4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0204 	bic.w	r2, r2, #4
 800bd5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	691a      	ldr	r2, [r3, #16]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bd72:	e021      	b.n	800bdb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fc1e 	bl	800c5bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	021a      	lsls	r2, r3, #8
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	430a      	orrs	r2, r1
 800bdb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bdb4:	e000      	b.n	800bdb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bdb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop

0800bdcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d101      	bne.n	800bde4 <HAL_TIM_ConfigClockSource+0x18>
 800bde0:	2302      	movs	r3, #2
 800bde2:	e0b5      	b.n	800bf50 <HAL_TIM_ConfigClockSource+0x184>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800be06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be20:	d03e      	beq.n	800bea0 <HAL_TIM_ConfigClockSource+0xd4>
 800be22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be26:	f200 8087 	bhi.w	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be2e:	f000 8085 	beq.w	800bf3c <HAL_TIM_ConfigClockSource+0x170>
 800be32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be36:	d87f      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be38:	2b70      	cmp	r3, #112	; 0x70
 800be3a:	d01a      	beq.n	800be72 <HAL_TIM_ConfigClockSource+0xa6>
 800be3c:	2b70      	cmp	r3, #112	; 0x70
 800be3e:	d87b      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be40:	2b60      	cmp	r3, #96	; 0x60
 800be42:	d050      	beq.n	800bee6 <HAL_TIM_ConfigClockSource+0x11a>
 800be44:	2b60      	cmp	r3, #96	; 0x60
 800be46:	d877      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be48:	2b50      	cmp	r3, #80	; 0x50
 800be4a:	d03c      	beq.n	800bec6 <HAL_TIM_ConfigClockSource+0xfa>
 800be4c:	2b50      	cmp	r3, #80	; 0x50
 800be4e:	d873      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be50:	2b40      	cmp	r3, #64	; 0x40
 800be52:	d058      	beq.n	800bf06 <HAL_TIM_ConfigClockSource+0x13a>
 800be54:	2b40      	cmp	r3, #64	; 0x40
 800be56:	d86f      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be58:	2b30      	cmp	r3, #48	; 0x30
 800be5a:	d064      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
 800be5c:	2b30      	cmp	r3, #48	; 0x30
 800be5e:	d86b      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be60:	2b20      	cmp	r3, #32
 800be62:	d060      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
 800be64:	2b20      	cmp	r3, #32
 800be66:	d867      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d05c      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
 800be6c:	2b10      	cmp	r3, #16
 800be6e:	d05a      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800be70:	e062      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	6899      	ldr	r1, [r3, #8]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f000 fc7b 	bl	800c77c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	609a      	str	r2, [r3, #8]
      break;
 800be9e:	e04e      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6818      	ldr	r0, [r3, #0]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	6899      	ldr	r1, [r3, #8]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f000 fc64 	bl	800c77c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bec2:	609a      	str	r2, [r3, #8]
      break;
 800bec4:	e03b      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	6859      	ldr	r1, [r3, #4]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	461a      	mov	r2, r3
 800bed4:	f000 fbd8 	bl	800c688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2150      	movs	r1, #80	; 0x50
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 fc31 	bl	800c746 <TIM_ITRx_SetConfig>
      break;
 800bee4:	e02b      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6818      	ldr	r0, [r3, #0]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	6859      	ldr	r1, [r3, #4]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	461a      	mov	r2, r3
 800bef4:	f000 fbf7 	bl	800c6e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2160      	movs	r1, #96	; 0x60
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fc21 	bl	800c746 <TIM_ITRx_SetConfig>
      break;
 800bf04:	e01b      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6818      	ldr	r0, [r3, #0]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6859      	ldr	r1, [r3, #4]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	461a      	mov	r2, r3
 800bf14:	f000 fbb8 	bl	800c688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2140      	movs	r1, #64	; 0x40
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fc11 	bl	800c746 <TIM_ITRx_SetConfig>
      break;
 800bf24:	e00b      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f000 fc08 	bl	800c746 <TIM_ITRx_SetConfig>
        break;
 800bf36:	e002      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800bf38:	bf00      	nop
 800bf3a:	e000      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800bf3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a40      	ldr	r2, [pc, #256]	; (800c0bc <TIM_Base_SetConfig+0x114>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d013      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfc6:	d00f      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a3d      	ldr	r2, [pc, #244]	; (800c0c0 <TIM_Base_SetConfig+0x118>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d00b      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a3c      	ldr	r2, [pc, #240]	; (800c0c4 <TIM_Base_SetConfig+0x11c>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d007      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a3b      	ldr	r2, [pc, #236]	; (800c0c8 <TIM_Base_SetConfig+0x120>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d003      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a3a      	ldr	r2, [pc, #232]	; (800c0cc <TIM_Base_SetConfig+0x124>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d108      	bne.n	800bffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a2f      	ldr	r2, [pc, #188]	; (800c0bc <TIM_Base_SetConfig+0x114>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d01f      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c008:	d01b      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a2c      	ldr	r2, [pc, #176]	; (800c0c0 <TIM_Base_SetConfig+0x118>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d017      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a2b      	ldr	r2, [pc, #172]	; (800c0c4 <TIM_Base_SetConfig+0x11c>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d013      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a2a      	ldr	r2, [pc, #168]	; (800c0c8 <TIM_Base_SetConfig+0x120>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d00f      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a29      	ldr	r2, [pc, #164]	; (800c0cc <TIM_Base_SetConfig+0x124>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d00b      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a28      	ldr	r2, [pc, #160]	; (800c0d0 <TIM_Base_SetConfig+0x128>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d007      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a27      	ldr	r2, [pc, #156]	; (800c0d4 <TIM_Base_SetConfig+0x12c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d003      	beq.n	800c042 <TIM_Base_SetConfig+0x9a>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a26      	ldr	r2, [pc, #152]	; (800c0d8 <TIM_Base_SetConfig+0x130>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d108      	bne.n	800c054 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	4313      	orrs	r3, r2
 800c052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	4313      	orrs	r3, r2
 800c060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	689a      	ldr	r2, [r3, #8]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a10      	ldr	r2, [pc, #64]	; (800c0bc <TIM_Base_SetConfig+0x114>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d00f      	beq.n	800c0a0 <TIM_Base_SetConfig+0xf8>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a12      	ldr	r2, [pc, #72]	; (800c0cc <TIM_Base_SetConfig+0x124>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d00b      	beq.n	800c0a0 <TIM_Base_SetConfig+0xf8>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a11      	ldr	r2, [pc, #68]	; (800c0d0 <TIM_Base_SetConfig+0x128>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d007      	beq.n	800c0a0 <TIM_Base_SetConfig+0xf8>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a10      	ldr	r2, [pc, #64]	; (800c0d4 <TIM_Base_SetConfig+0x12c>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d003      	beq.n	800c0a0 <TIM_Base_SetConfig+0xf8>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a0f      	ldr	r2, [pc, #60]	; (800c0d8 <TIM_Base_SetConfig+0x130>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d103      	bne.n	800c0a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	691a      	ldr	r2, [r3, #16]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	615a      	str	r2, [r3, #20]
}
 800c0ae:	bf00      	nop
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	40012c00 	.word	0x40012c00
 800c0c0:	40000400 	.word	0x40000400
 800c0c4:	40000800 	.word	0x40000800
 800c0c8:	40000c00 	.word	0x40000c00
 800c0cc:	40013400 	.word	0x40013400
 800c0d0:	40014000 	.word	0x40014000
 800c0d4:	40014400 	.word	0x40014400
 800c0d8:	40014800 	.word	0x40014800

0800c0dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	f023 0201 	bic.w	r2, r3, #1
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	699b      	ldr	r3, [r3, #24]
 800c102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f023 0303 	bic.w	r3, r3, #3
 800c116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4313      	orrs	r3, r2
 800c120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f023 0302 	bic.w	r3, r3, #2
 800c128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	4313      	orrs	r3, r2
 800c132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a2c      	ldr	r2, [pc, #176]	; (800c1e8 <TIM_OC1_SetConfig+0x10c>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00f      	beq.n	800c15c <TIM_OC1_SetConfig+0x80>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a2b      	ldr	r2, [pc, #172]	; (800c1ec <TIM_OC1_SetConfig+0x110>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d00b      	beq.n	800c15c <TIM_OC1_SetConfig+0x80>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a2a      	ldr	r2, [pc, #168]	; (800c1f0 <TIM_OC1_SetConfig+0x114>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d007      	beq.n	800c15c <TIM_OC1_SetConfig+0x80>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a29      	ldr	r2, [pc, #164]	; (800c1f4 <TIM_OC1_SetConfig+0x118>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d003      	beq.n	800c15c <TIM_OC1_SetConfig+0x80>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a28      	ldr	r2, [pc, #160]	; (800c1f8 <TIM_OC1_SetConfig+0x11c>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d10c      	bne.n	800c176 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	f023 0308 	bic.w	r3, r3, #8
 800c162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f023 0304 	bic.w	r3, r3, #4
 800c174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a1b      	ldr	r2, [pc, #108]	; (800c1e8 <TIM_OC1_SetConfig+0x10c>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d00f      	beq.n	800c19e <TIM_OC1_SetConfig+0xc2>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a1a      	ldr	r2, [pc, #104]	; (800c1ec <TIM_OC1_SetConfig+0x110>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d00b      	beq.n	800c19e <TIM_OC1_SetConfig+0xc2>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a19      	ldr	r2, [pc, #100]	; (800c1f0 <TIM_OC1_SetConfig+0x114>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d007      	beq.n	800c19e <TIM_OC1_SetConfig+0xc2>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a18      	ldr	r2, [pc, #96]	; (800c1f4 <TIM_OC1_SetConfig+0x118>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d003      	beq.n	800c19e <TIM_OC1_SetConfig+0xc2>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a17      	ldr	r2, [pc, #92]	; (800c1f8 <TIM_OC1_SetConfig+0x11c>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d111      	bne.n	800c1c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	621a      	str	r2, [r3, #32]
}
 800c1dc:	bf00      	nop
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	40012c00 	.word	0x40012c00
 800c1ec:	40013400 	.word	0x40013400
 800c1f0:	40014000 	.word	0x40014000
 800c1f4:	40014400 	.word	0x40014400
 800c1f8:	40014800 	.word	0x40014800

0800c1fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b087      	sub	sp, #28
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	f023 0210 	bic.w	r2, r3, #16
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	021b      	lsls	r3, r3, #8
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	4313      	orrs	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f023 0320 	bic.w	r3, r3, #32
 800c24a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	4313      	orrs	r3, r2
 800c256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a28      	ldr	r2, [pc, #160]	; (800c2fc <TIM_OC2_SetConfig+0x100>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d003      	beq.n	800c268 <TIM_OC2_SetConfig+0x6c>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a27      	ldr	r2, [pc, #156]	; (800c300 <TIM_OC2_SetConfig+0x104>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d10d      	bne.n	800c284 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a1d      	ldr	r2, [pc, #116]	; (800c2fc <TIM_OC2_SetConfig+0x100>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d00f      	beq.n	800c2ac <TIM_OC2_SetConfig+0xb0>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a1c      	ldr	r2, [pc, #112]	; (800c300 <TIM_OC2_SetConfig+0x104>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d00b      	beq.n	800c2ac <TIM_OC2_SetConfig+0xb0>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a1b      	ldr	r2, [pc, #108]	; (800c304 <TIM_OC2_SetConfig+0x108>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d007      	beq.n	800c2ac <TIM_OC2_SetConfig+0xb0>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a1a      	ldr	r2, [pc, #104]	; (800c308 <TIM_OC2_SetConfig+0x10c>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d003      	beq.n	800c2ac <TIM_OC2_SetConfig+0xb0>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a19      	ldr	r2, [pc, #100]	; (800c30c <TIM_OC2_SetConfig+0x110>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d113      	bne.n	800c2d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	621a      	str	r2, [r3, #32]
}
 800c2ee:	bf00      	nop
 800c2f0:	371c      	adds	r7, #28
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	40012c00 	.word	0x40012c00
 800c300:	40013400 	.word	0x40013400
 800c304:	40014000 	.word	0x40014000
 800c308:	40014400 	.word	0x40014400
 800c30c:	40014800 	.word	0x40014800

0800c310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c310:	b480      	push	{r7}
 800c312:	b087      	sub	sp, #28
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	69db      	ldr	r3, [r3, #28]
 800c336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f023 0303 	bic.w	r3, r3, #3
 800c34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	4313      	orrs	r3, r2
 800c354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c35c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	4313      	orrs	r3, r2
 800c368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a27      	ldr	r2, [pc, #156]	; (800c40c <TIM_OC3_SetConfig+0xfc>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d003      	beq.n	800c37a <TIM_OC3_SetConfig+0x6a>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4a26      	ldr	r2, [pc, #152]	; (800c410 <TIM_OC3_SetConfig+0x100>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d10d      	bne.n	800c396 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a1c      	ldr	r2, [pc, #112]	; (800c40c <TIM_OC3_SetConfig+0xfc>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d00f      	beq.n	800c3be <TIM_OC3_SetConfig+0xae>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a1b      	ldr	r2, [pc, #108]	; (800c410 <TIM_OC3_SetConfig+0x100>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d00b      	beq.n	800c3be <TIM_OC3_SetConfig+0xae>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a1a      	ldr	r2, [pc, #104]	; (800c414 <TIM_OC3_SetConfig+0x104>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d007      	beq.n	800c3be <TIM_OC3_SetConfig+0xae>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a19      	ldr	r2, [pc, #100]	; (800c418 <TIM_OC3_SetConfig+0x108>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d003      	beq.n	800c3be <TIM_OC3_SetConfig+0xae>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a18      	ldr	r2, [pc, #96]	; (800c41c <TIM_OC3_SetConfig+0x10c>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d113      	bne.n	800c3e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	011b      	lsls	r3, r3, #4
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	011b      	lsls	r3, r3, #4
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	693a      	ldr	r2, [r7, #16]
 800c3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	621a      	str	r2, [r3, #32]
}
 800c400:	bf00      	nop
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	40012c00 	.word	0x40012c00
 800c410:	40013400 	.word	0x40013400
 800c414:	40014000 	.word	0x40014000
 800c418:	40014400 	.word	0x40014400
 800c41c:	40014800 	.word	0x40014800

0800c420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	69db      	ldr	r3, [r3, #28]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	021b      	lsls	r3, r3, #8
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	4313      	orrs	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c46e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	031b      	lsls	r3, r3, #12
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	4313      	orrs	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a18      	ldr	r2, [pc, #96]	; (800c4e0 <TIM_OC4_SetConfig+0xc0>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d00f      	beq.n	800c4a4 <TIM_OC4_SetConfig+0x84>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a17      	ldr	r2, [pc, #92]	; (800c4e4 <TIM_OC4_SetConfig+0xc4>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d00b      	beq.n	800c4a4 <TIM_OC4_SetConfig+0x84>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a16      	ldr	r2, [pc, #88]	; (800c4e8 <TIM_OC4_SetConfig+0xc8>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d007      	beq.n	800c4a4 <TIM_OC4_SetConfig+0x84>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a15      	ldr	r2, [pc, #84]	; (800c4ec <TIM_OC4_SetConfig+0xcc>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d003      	beq.n	800c4a4 <TIM_OC4_SetConfig+0x84>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a14      	ldr	r2, [pc, #80]	; (800c4f0 <TIM_OC4_SetConfig+0xd0>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d109      	bne.n	800c4b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	695b      	ldr	r3, [r3, #20]
 800c4b0:	019b      	lsls	r3, r3, #6
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	685a      	ldr	r2, [r3, #4]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	621a      	str	r2, [r3, #32]
}
 800c4d2:	bf00      	nop
 800c4d4:	371c      	adds	r7, #28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	40012c00 	.word	0x40012c00
 800c4e4:	40013400 	.word	0x40013400
 800c4e8:	40014000 	.word	0x40014000
 800c4ec:	40014400 	.word	0x40014400
 800c4f0:	40014800 	.word	0x40014800

0800c4f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	4313      	orrs	r3, r2
 800c530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c538:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	041b      	lsls	r3, r3, #16
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	4313      	orrs	r3, r2
 800c544:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a17      	ldr	r2, [pc, #92]	; (800c5a8 <TIM_OC5_SetConfig+0xb4>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00f      	beq.n	800c56e <TIM_OC5_SetConfig+0x7a>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a16      	ldr	r2, [pc, #88]	; (800c5ac <TIM_OC5_SetConfig+0xb8>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00b      	beq.n	800c56e <TIM_OC5_SetConfig+0x7a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a15      	ldr	r2, [pc, #84]	; (800c5b0 <TIM_OC5_SetConfig+0xbc>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d007      	beq.n	800c56e <TIM_OC5_SetConfig+0x7a>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <TIM_OC5_SetConfig+0xc0>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d003      	beq.n	800c56e <TIM_OC5_SetConfig+0x7a>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a13      	ldr	r2, [pc, #76]	; (800c5b8 <TIM_OC5_SetConfig+0xc4>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d109      	bne.n	800c582 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c574:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	4313      	orrs	r3, r2
 800c580:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	685a      	ldr	r2, [r3, #4]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	621a      	str	r2, [r3, #32]
}
 800c59c:	bf00      	nop
 800c59e:	371c      	adds	r7, #28
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	40012c00 	.word	0x40012c00
 800c5ac:	40013400 	.word	0x40013400
 800c5b0:	40014000 	.word	0x40014000
 800c5b4:	40014400 	.word	0x40014400
 800c5b8:	40014800 	.word	0x40014800

0800c5bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	021b      	lsls	r3, r3, #8
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	051b      	lsls	r3, r3, #20
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a18      	ldr	r2, [pc, #96]	; (800c674 <TIM_OC6_SetConfig+0xb8>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d00f      	beq.n	800c638 <TIM_OC6_SetConfig+0x7c>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a17      	ldr	r2, [pc, #92]	; (800c678 <TIM_OC6_SetConfig+0xbc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d00b      	beq.n	800c638 <TIM_OC6_SetConfig+0x7c>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a16      	ldr	r2, [pc, #88]	; (800c67c <TIM_OC6_SetConfig+0xc0>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d007      	beq.n	800c638 <TIM_OC6_SetConfig+0x7c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a15      	ldr	r2, [pc, #84]	; (800c680 <TIM_OC6_SetConfig+0xc4>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d003      	beq.n	800c638 <TIM_OC6_SetConfig+0x7c>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a14      	ldr	r2, [pc, #80]	; (800c684 <TIM_OC6_SetConfig+0xc8>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d109      	bne.n	800c64c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c63e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	029b      	lsls	r3, r3, #10
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	4313      	orrs	r3, r2
 800c64a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	621a      	str	r2, [r3, #32]
}
 800c666:	bf00      	nop
 800c668:	371c      	adds	r7, #28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	40012c00 	.word	0x40012c00
 800c678:	40013400 	.word	0x40013400
 800c67c:	40014000 	.word	0x40014000
 800c680:	40014400 	.word	0x40014400
 800c684:	40014800 	.word	0x40014800

0800c688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6a1b      	ldr	r3, [r3, #32]
 800c698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	f023 0201 	bic.w	r2, r3, #1
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f023 030a 	bic.w	r3, r3, #10
 800c6c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	621a      	str	r2, [r3, #32]
}
 800c6da:	bf00      	nop
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b087      	sub	sp, #28
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	f023 0210 	bic.w	r2, r3, #16
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	031b      	lsls	r3, r3, #12
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	4313      	orrs	r3, r2
 800c71a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	011b      	lsls	r3, r3, #4
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	693a      	ldr	r2, [r7, #16]
 800c738:	621a      	str	r2, [r3, #32]
}
 800c73a:	bf00      	nop
 800c73c:	371c      	adds	r7, #28
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c746:	b480      	push	{r7}
 800c748:	b085      	sub	sp, #20
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c75c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	4313      	orrs	r3, r2
 800c764:	f043 0307 	orr.w	r3, r3, #7
 800c768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	609a      	str	r2, [r3, #8]
}
 800c770:	bf00      	nop
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	021a      	lsls	r2, r3, #8
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	609a      	str	r2, [r3, #8]
}
 800c7b0:	bf00      	nop
 800c7b2:	371c      	adds	r7, #28
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	f003 031f 	and.w	r3, r3, #31
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6a1a      	ldr	r2, [r3, #32]
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	43db      	mvns	r3, r3
 800c7de:	401a      	ands	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6a1a      	ldr	r2, [r3, #32]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f003 031f 	and.w	r3, r3, #31
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	621a      	str	r2, [r3, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
	...

0800c808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d101      	bne.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c81c:	2302      	movs	r3, #2
 800c81e:	e068      	b.n	800c8f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2202      	movs	r2, #2
 800c82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a2e      	ldr	r2, [pc, #184]	; (800c900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d004      	beq.n	800c854 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a2d      	ldr	r2, [pc, #180]	; (800c904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d108      	bne.n	800c866 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c85a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4313      	orrs	r3, r2
 800c864:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c86c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	4313      	orrs	r3, r2
 800c876:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a1e      	ldr	r2, [pc, #120]	; (800c900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d01d      	beq.n	800c8c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c892:	d018      	beq.n	800c8c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a1b      	ldr	r2, [pc, #108]	; (800c908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d013      	beq.n	800c8c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a1a      	ldr	r2, [pc, #104]	; (800c90c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d00e      	beq.n	800c8c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a18      	ldr	r2, [pc, #96]	; (800c910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d009      	beq.n	800c8c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a13      	ldr	r2, [pc, #76]	; (800c904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d004      	beq.n	800c8c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a14      	ldr	r2, [pc, #80]	; (800c914 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d10c      	bne.n	800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	40012c00 	.word	0x40012c00
 800c904:	40013400 	.word	0x40013400
 800c908:	40000400 	.word	0x40000400
 800c90c:	40000800 	.word	0x40000800
 800c910:	40000c00 	.word	0x40000c00
 800c914:	40014000 	.word	0x40014000

0800c918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d101      	bne.n	800c934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c930:	2302      	movs	r3, #2
 800c932:	e065      	b.n	800ca00 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	4313      	orrs	r3, r2
 800c948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	4313      	orrs	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	4313      	orrs	r3, r2
 800c964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4313      	orrs	r3, r2
 800c972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99a:	4313      	orrs	r3, r2
 800c99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	041b      	lsls	r3, r3, #16
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a16      	ldr	r2, [pc, #88]	; (800ca0c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d004      	beq.n	800c9c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a14      	ldr	r2, [pc, #80]	; (800ca10 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d115      	bne.n	800c9ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	051b      	lsls	r3, r3, #20
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	69db      	ldr	r3, [r3, #28]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	40012c00 	.word	0x40012c00
 800ca10:	40013400 	.word	0x40013400

0800ca14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca44:	bf00      	nop
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e040      	b.n	800cae4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d106      	bne.n	800ca78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7f6 fc20 	bl	80032b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2224      	movs	r2, #36	; 0x24
 800ca7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f022 0201 	bic.w	r2, r2, #1
 800ca8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 faaa 	bl	800cfe8 <UART_SetConfig>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d101      	bne.n	800ca9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e022      	b.n	800cae4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d002      	beq.n	800caac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fd28 	bl	800d4fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800caba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689a      	ldr	r2, [r3, #8]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800caca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f042 0201 	orr.w	r2, r2, #1
 800cada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fdaf 	bl	800d640 <UART_CheckIdleState>
 800cae2:	4603      	mov	r3, r0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	4613      	mov	r3, r2
 800caf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cafe:	2b20      	cmp	r3, #32
 800cb00:	d145      	bne.n	800cb8e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <HAL_UART_Transmit_IT+0x22>
 800cb08:	88fb      	ldrh	r3, [r7, #6]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d101      	bne.n	800cb12 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e03e      	b.n	800cb90 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d101      	bne.n	800cb20 <HAL_UART_Transmit_IT+0x34>
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	e037      	b.n	800cb90 <HAL_UART_Transmit_IT+0xa4>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	88fa      	ldrh	r2, [r7, #6]
 800cb32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	88fa      	ldrh	r2, [r7, #6]
 800cb3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2200      	movs	r2, #0
 800cb42:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2221      	movs	r2, #33	; 0x21
 800cb50:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb5a:	d107      	bne.n	800cb6c <HAL_UART_Transmit_IT+0x80>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d103      	bne.n	800cb6c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4a0d      	ldr	r2, [pc, #52]	; (800cb9c <HAL_UART_Transmit_IT+0xb0>)
 800cb68:	669a      	str	r2, [r3, #104]	; 0x68
 800cb6a:	e002      	b.n	800cb72 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4a0c      	ldr	r2, [pc, #48]	; (800cba0 <HAL_UART_Transmit_IT+0xb4>)
 800cb70:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e000      	b.n	800cb90 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800cb8e:	2302      	movs	r3, #2
  }
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	0800d8c9 	.word	0x0800d8c9
 800cba0:	0800d855 	.word	0x0800d855

0800cba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbc4:	69fa      	ldr	r2, [r7, #28]
 800cbc6:	f640 030f 	movw	r3, #2063	; 0x80f
 800cbca:	4013      	ands	r3, r2
 800cbcc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d113      	bne.n	800cbfc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	f003 0320 	and.w	r3, r3, #32
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00e      	beq.n	800cbfc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	f003 0320 	and.w	r3, r3, #32
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d009      	beq.n	800cbfc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 81ce 	beq.w	800cf8e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	4798      	blx	r3
      }
      return;
 800cbfa:	e1c8      	b.n	800cf8e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 80e3 	beq.w	800cdca <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f003 0301 	and.w	r3, r3, #1
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d105      	bne.n	800cc1a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cc0e:	69ba      	ldr	r2, [r7, #24]
 800cc10:	4ba6      	ldr	r3, [pc, #664]	; (800ceac <HAL_UART_IRQHandler+0x308>)
 800cc12:	4013      	ands	r3, r2
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f000 80d8 	beq.w	800cdca <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d010      	beq.n	800cc46 <HAL_UART_IRQHandler+0xa2>
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00b      	beq.n	800cc46 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2201      	movs	r2, #1
 800cc34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc3c:	f043 0201 	orr.w	r2, r3, #1
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	f003 0302 	and.w	r3, r3, #2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d010      	beq.n	800cc72 <HAL_UART_IRQHandler+0xce>
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00b      	beq.n	800cc72 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2202      	movs	r2, #2
 800cc60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc68:	f043 0204 	orr.w	r2, r3, #4
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d010      	beq.n	800cc9e <HAL_UART_IRQHandler+0xfa>
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00b      	beq.n	800cc9e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2204      	movs	r2, #4
 800cc8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc94:	f043 0202 	orr.w	r2, r3, #2
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	f003 0308 	and.w	r3, r3, #8
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d015      	beq.n	800ccd4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	f003 0320 	and.w	r3, r3, #32
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d104      	bne.n	800ccbc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00b      	beq.n	800ccd4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2208      	movs	r2, #8
 800ccc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccca:	f043 0208 	orr.w	r2, r3, #8
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d011      	beq.n	800cd02 <HAL_UART_IRQHandler+0x15e>
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00c      	beq.n	800cd02 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccf8:	f043 0220 	orr.w	r2, r3, #32
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 8142 	beq.w	800cf92 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	f003 0320 	and.w	r3, r3, #32
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00c      	beq.n	800cd32 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	f003 0320 	and.w	r3, r3, #32
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd44:	2b40      	cmp	r3, #64	; 0x40
 800cd46:	d004      	beq.n	800cd52 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d031      	beq.n	800cdb6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fd39 	bl	800d7ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd62:	2b40      	cmp	r3, #64	; 0x40
 800cd64:	d123      	bne.n	800cdae <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	689a      	ldr	r2, [r3, #8]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d013      	beq.n	800cda6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd82:	4a4b      	ldr	r2, [pc, #300]	; (800ceb0 <HAL_UART_IRQHandler+0x30c>)
 800cd84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fa fc5c 	bl	8007648 <HAL_DMA_Abort_IT>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d017      	beq.n	800cdc6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800cda0:	4610      	mov	r0, r2
 800cda2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cda4:	e00f      	b.n	800cdc6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f908 	bl	800cfbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdac:	e00b      	b.n	800cdc6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f904 	bl	800cfbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdb4:	e007      	b.n	800cdc6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f900 	bl	800cfbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800cdc4:	e0e5      	b.n	800cf92 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc6:	bf00      	nop
    return;
 800cdc8:	e0e3      	b.n	800cf92 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	f040 80a9 	bne.w	800cf26 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	f003 0310 	and.w	r3, r3, #16
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 80a3 	beq.w	800cf26 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	f003 0310 	and.w	r3, r3, #16
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f000 809d 	beq.w	800cf26 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2210      	movs	r2, #16
 800cdf2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdfe:	2b40      	cmp	r3, #64	; 0x40
 800ce00:	d158      	bne.n	800ceb4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800ce0c:	893b      	ldrh	r3, [r7, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f000 80c1 	beq.w	800cf96 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ce1a:	893a      	ldrh	r2, [r7, #8]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	f080 80ba 	bcs.w	800cf96 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	893a      	ldrh	r2, [r7, #8]
 800ce26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0320 	and.w	r3, r3, #32
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d12a      	bne.n	800ce90 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce48:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689a      	ldr	r2, [r3, #8]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f022 0201 	bic.w	r2, r2, #1
 800ce58:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	689a      	ldr	r2, [r3, #8]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce68:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2220      	movs	r2, #32
 800ce6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f022 0210 	bic.w	r2, r2, #16
 800ce84:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fa fb9e 	bl	80075cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	4619      	mov	r1, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f893 	bl	800cfd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ceaa:	e074      	b.n	800cf96 <HAL_UART_IRQHandler+0x3f2>
 800ceac:	04000120 	.word	0x04000120
 800ceb0:	0800d829 	.word	0x0800d829
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cecc:	b29b      	uxth	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d063      	beq.n	800cf9a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800ced2:	897b      	ldrh	r3, [r7, #10]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d060      	beq.n	800cf9a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cee6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	689a      	ldr	r2, [r3, #8]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f022 0201 	bic.w	r2, r2, #1
 800cef6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2220      	movs	r2, #32
 800cefc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f022 0210 	bic.w	r2, r2, #16
 800cf18:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf1a:	897b      	ldrh	r3, [r7, #10]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f856 	bl	800cfd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800cf24:	e039      	b.n	800cf9a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00d      	beq.n	800cf4c <HAL_UART_IRQHandler+0x3a8>
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d008      	beq.n	800cf4c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cf42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fd16 	bl	800d976 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf4a:	e029      	b.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00d      	beq.n	800cf72 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d008      	beq.n	800cf72 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d01a      	beq.n	800cf9e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	4798      	blx	r3
    }
    return;
 800cf70:	e015      	b.n	800cf9e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d011      	beq.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00c      	beq.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fcdc 	bl	800d944 <UART_EndTransmit_IT>
    return;
 800cf8c:	e008      	b.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
      return;
 800cf8e:	bf00      	nop
 800cf90:	e006      	b.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
    return;
 800cf92:	bf00      	nop
 800cf94:	e004      	b.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
      return;
 800cf96:	bf00      	nop
 800cf98:	e002      	b.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
      return;
 800cf9a:	bf00      	nop
 800cf9c:	e000      	b.n	800cfa0 <HAL_UART_IRQHandler+0x3fc>
    return;
 800cf9e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop

0800cfa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cfe8:	b5b0      	push	{r4, r5, r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	689a      	ldr	r2, [r3, #8]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	431a      	orrs	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	431a      	orrs	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	69db      	ldr	r3, [r3, #28]
 800d008:	4313      	orrs	r3, r2
 800d00a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	4bad      	ldr	r3, [pc, #692]	; (800d2c8 <UART_SetConfig+0x2e0>)
 800d014:	4013      	ands	r3, r2
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	6812      	ldr	r2, [r2, #0]
 800d01a:	69f9      	ldr	r1, [r7, #28]
 800d01c:	430b      	orrs	r3, r1
 800d01e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68da      	ldr	r2, [r3, #12]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4aa2      	ldr	r2, [pc, #648]	; (800d2cc <UART_SetConfig+0x2e4>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d004      	beq.n	800d050 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	69fa      	ldr	r2, [r7, #28]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	69fa      	ldr	r2, [r7, #28]
 800d060:	430a      	orrs	r2, r1
 800d062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a99      	ldr	r2, [pc, #612]	; (800d2d0 <UART_SetConfig+0x2e8>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d121      	bne.n	800d0b2 <UART_SetConfig+0xca>
 800d06e:	4b99      	ldr	r3, [pc, #612]	; (800d2d4 <UART_SetConfig+0x2ec>)
 800d070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d074:	f003 0303 	and.w	r3, r3, #3
 800d078:	2b03      	cmp	r3, #3
 800d07a:	d817      	bhi.n	800d0ac <UART_SetConfig+0xc4>
 800d07c:	a201      	add	r2, pc, #4	; (adr r2, 800d084 <UART_SetConfig+0x9c>)
 800d07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d082:	bf00      	nop
 800d084:	0800d095 	.word	0x0800d095
 800d088:	0800d0a1 	.word	0x0800d0a1
 800d08c:	0800d09b 	.word	0x0800d09b
 800d090:	0800d0a7 	.word	0x0800d0a7
 800d094:	2301      	movs	r3, #1
 800d096:	76fb      	strb	r3, [r7, #27]
 800d098:	e0e7      	b.n	800d26a <UART_SetConfig+0x282>
 800d09a:	2302      	movs	r3, #2
 800d09c:	76fb      	strb	r3, [r7, #27]
 800d09e:	e0e4      	b.n	800d26a <UART_SetConfig+0x282>
 800d0a0:	2304      	movs	r3, #4
 800d0a2:	76fb      	strb	r3, [r7, #27]
 800d0a4:	e0e1      	b.n	800d26a <UART_SetConfig+0x282>
 800d0a6:	2308      	movs	r3, #8
 800d0a8:	76fb      	strb	r3, [r7, #27]
 800d0aa:	e0de      	b.n	800d26a <UART_SetConfig+0x282>
 800d0ac:	2310      	movs	r3, #16
 800d0ae:	76fb      	strb	r3, [r7, #27]
 800d0b0:	e0db      	b.n	800d26a <UART_SetConfig+0x282>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a88      	ldr	r2, [pc, #544]	; (800d2d8 <UART_SetConfig+0x2f0>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d132      	bne.n	800d122 <UART_SetConfig+0x13a>
 800d0bc:	4b85      	ldr	r3, [pc, #532]	; (800d2d4 <UART_SetConfig+0x2ec>)
 800d0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0c2:	f003 030c 	and.w	r3, r3, #12
 800d0c6:	2b0c      	cmp	r3, #12
 800d0c8:	d828      	bhi.n	800d11c <UART_SetConfig+0x134>
 800d0ca:	a201      	add	r2, pc, #4	; (adr r2, 800d0d0 <UART_SetConfig+0xe8>)
 800d0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d0:	0800d105 	.word	0x0800d105
 800d0d4:	0800d11d 	.word	0x0800d11d
 800d0d8:	0800d11d 	.word	0x0800d11d
 800d0dc:	0800d11d 	.word	0x0800d11d
 800d0e0:	0800d111 	.word	0x0800d111
 800d0e4:	0800d11d 	.word	0x0800d11d
 800d0e8:	0800d11d 	.word	0x0800d11d
 800d0ec:	0800d11d 	.word	0x0800d11d
 800d0f0:	0800d10b 	.word	0x0800d10b
 800d0f4:	0800d11d 	.word	0x0800d11d
 800d0f8:	0800d11d 	.word	0x0800d11d
 800d0fc:	0800d11d 	.word	0x0800d11d
 800d100:	0800d117 	.word	0x0800d117
 800d104:	2300      	movs	r3, #0
 800d106:	76fb      	strb	r3, [r7, #27]
 800d108:	e0af      	b.n	800d26a <UART_SetConfig+0x282>
 800d10a:	2302      	movs	r3, #2
 800d10c:	76fb      	strb	r3, [r7, #27]
 800d10e:	e0ac      	b.n	800d26a <UART_SetConfig+0x282>
 800d110:	2304      	movs	r3, #4
 800d112:	76fb      	strb	r3, [r7, #27]
 800d114:	e0a9      	b.n	800d26a <UART_SetConfig+0x282>
 800d116:	2308      	movs	r3, #8
 800d118:	76fb      	strb	r3, [r7, #27]
 800d11a:	e0a6      	b.n	800d26a <UART_SetConfig+0x282>
 800d11c:	2310      	movs	r3, #16
 800d11e:	76fb      	strb	r3, [r7, #27]
 800d120:	e0a3      	b.n	800d26a <UART_SetConfig+0x282>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a6d      	ldr	r2, [pc, #436]	; (800d2dc <UART_SetConfig+0x2f4>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d120      	bne.n	800d16e <UART_SetConfig+0x186>
 800d12c:	4b69      	ldr	r3, [pc, #420]	; (800d2d4 <UART_SetConfig+0x2ec>)
 800d12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d132:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d136:	2b30      	cmp	r3, #48	; 0x30
 800d138:	d013      	beq.n	800d162 <UART_SetConfig+0x17a>
 800d13a:	2b30      	cmp	r3, #48	; 0x30
 800d13c:	d814      	bhi.n	800d168 <UART_SetConfig+0x180>
 800d13e:	2b20      	cmp	r3, #32
 800d140:	d009      	beq.n	800d156 <UART_SetConfig+0x16e>
 800d142:	2b20      	cmp	r3, #32
 800d144:	d810      	bhi.n	800d168 <UART_SetConfig+0x180>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <UART_SetConfig+0x168>
 800d14a:	2b10      	cmp	r3, #16
 800d14c:	d006      	beq.n	800d15c <UART_SetConfig+0x174>
 800d14e:	e00b      	b.n	800d168 <UART_SetConfig+0x180>
 800d150:	2300      	movs	r3, #0
 800d152:	76fb      	strb	r3, [r7, #27]
 800d154:	e089      	b.n	800d26a <UART_SetConfig+0x282>
 800d156:	2302      	movs	r3, #2
 800d158:	76fb      	strb	r3, [r7, #27]
 800d15a:	e086      	b.n	800d26a <UART_SetConfig+0x282>
 800d15c:	2304      	movs	r3, #4
 800d15e:	76fb      	strb	r3, [r7, #27]
 800d160:	e083      	b.n	800d26a <UART_SetConfig+0x282>
 800d162:	2308      	movs	r3, #8
 800d164:	76fb      	strb	r3, [r7, #27]
 800d166:	e080      	b.n	800d26a <UART_SetConfig+0x282>
 800d168:	2310      	movs	r3, #16
 800d16a:	76fb      	strb	r3, [r7, #27]
 800d16c:	e07d      	b.n	800d26a <UART_SetConfig+0x282>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a5b      	ldr	r2, [pc, #364]	; (800d2e0 <UART_SetConfig+0x2f8>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d120      	bne.n	800d1ba <UART_SetConfig+0x1d2>
 800d178:	4b56      	ldr	r3, [pc, #344]	; (800d2d4 <UART_SetConfig+0x2ec>)
 800d17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d17e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d182:	2bc0      	cmp	r3, #192	; 0xc0
 800d184:	d013      	beq.n	800d1ae <UART_SetConfig+0x1c6>
 800d186:	2bc0      	cmp	r3, #192	; 0xc0
 800d188:	d814      	bhi.n	800d1b4 <UART_SetConfig+0x1cc>
 800d18a:	2b80      	cmp	r3, #128	; 0x80
 800d18c:	d009      	beq.n	800d1a2 <UART_SetConfig+0x1ba>
 800d18e:	2b80      	cmp	r3, #128	; 0x80
 800d190:	d810      	bhi.n	800d1b4 <UART_SetConfig+0x1cc>
 800d192:	2b00      	cmp	r3, #0
 800d194:	d002      	beq.n	800d19c <UART_SetConfig+0x1b4>
 800d196:	2b40      	cmp	r3, #64	; 0x40
 800d198:	d006      	beq.n	800d1a8 <UART_SetConfig+0x1c0>
 800d19a:	e00b      	b.n	800d1b4 <UART_SetConfig+0x1cc>
 800d19c:	2300      	movs	r3, #0
 800d19e:	76fb      	strb	r3, [r7, #27]
 800d1a0:	e063      	b.n	800d26a <UART_SetConfig+0x282>
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	76fb      	strb	r3, [r7, #27]
 800d1a6:	e060      	b.n	800d26a <UART_SetConfig+0x282>
 800d1a8:	2304      	movs	r3, #4
 800d1aa:	76fb      	strb	r3, [r7, #27]
 800d1ac:	e05d      	b.n	800d26a <UART_SetConfig+0x282>
 800d1ae:	2308      	movs	r3, #8
 800d1b0:	76fb      	strb	r3, [r7, #27]
 800d1b2:	e05a      	b.n	800d26a <UART_SetConfig+0x282>
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	76fb      	strb	r3, [r7, #27]
 800d1b8:	e057      	b.n	800d26a <UART_SetConfig+0x282>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a49      	ldr	r2, [pc, #292]	; (800d2e4 <UART_SetConfig+0x2fc>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d125      	bne.n	800d210 <UART_SetConfig+0x228>
 800d1c4:	4b43      	ldr	r3, [pc, #268]	; (800d2d4 <UART_SetConfig+0x2ec>)
 800d1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1d2:	d017      	beq.n	800d204 <UART_SetConfig+0x21c>
 800d1d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1d8:	d817      	bhi.n	800d20a <UART_SetConfig+0x222>
 800d1da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1de:	d00b      	beq.n	800d1f8 <UART_SetConfig+0x210>
 800d1e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1e4:	d811      	bhi.n	800d20a <UART_SetConfig+0x222>
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <UART_SetConfig+0x20a>
 800d1ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1ee:	d006      	beq.n	800d1fe <UART_SetConfig+0x216>
 800d1f0:	e00b      	b.n	800d20a <UART_SetConfig+0x222>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	76fb      	strb	r3, [r7, #27]
 800d1f6:	e038      	b.n	800d26a <UART_SetConfig+0x282>
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	76fb      	strb	r3, [r7, #27]
 800d1fc:	e035      	b.n	800d26a <UART_SetConfig+0x282>
 800d1fe:	2304      	movs	r3, #4
 800d200:	76fb      	strb	r3, [r7, #27]
 800d202:	e032      	b.n	800d26a <UART_SetConfig+0x282>
 800d204:	2308      	movs	r3, #8
 800d206:	76fb      	strb	r3, [r7, #27]
 800d208:	e02f      	b.n	800d26a <UART_SetConfig+0x282>
 800d20a:	2310      	movs	r3, #16
 800d20c:	76fb      	strb	r3, [r7, #27]
 800d20e:	e02c      	b.n	800d26a <UART_SetConfig+0x282>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a2d      	ldr	r2, [pc, #180]	; (800d2cc <UART_SetConfig+0x2e4>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d125      	bne.n	800d266 <UART_SetConfig+0x27e>
 800d21a:	4b2e      	ldr	r3, [pc, #184]	; (800d2d4 <UART_SetConfig+0x2ec>)
 800d21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d220:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d224:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d228:	d017      	beq.n	800d25a <UART_SetConfig+0x272>
 800d22a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d22e:	d817      	bhi.n	800d260 <UART_SetConfig+0x278>
 800d230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d234:	d00b      	beq.n	800d24e <UART_SetConfig+0x266>
 800d236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d23a:	d811      	bhi.n	800d260 <UART_SetConfig+0x278>
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <UART_SetConfig+0x260>
 800d240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d244:	d006      	beq.n	800d254 <UART_SetConfig+0x26c>
 800d246:	e00b      	b.n	800d260 <UART_SetConfig+0x278>
 800d248:	2300      	movs	r3, #0
 800d24a:	76fb      	strb	r3, [r7, #27]
 800d24c:	e00d      	b.n	800d26a <UART_SetConfig+0x282>
 800d24e:	2302      	movs	r3, #2
 800d250:	76fb      	strb	r3, [r7, #27]
 800d252:	e00a      	b.n	800d26a <UART_SetConfig+0x282>
 800d254:	2304      	movs	r3, #4
 800d256:	76fb      	strb	r3, [r7, #27]
 800d258:	e007      	b.n	800d26a <UART_SetConfig+0x282>
 800d25a:	2308      	movs	r3, #8
 800d25c:	76fb      	strb	r3, [r7, #27]
 800d25e:	e004      	b.n	800d26a <UART_SetConfig+0x282>
 800d260:	2310      	movs	r3, #16
 800d262:	76fb      	strb	r3, [r7, #27]
 800d264:	e001      	b.n	800d26a <UART_SetConfig+0x282>
 800d266:	2310      	movs	r3, #16
 800d268:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4a17      	ldr	r2, [pc, #92]	; (800d2cc <UART_SetConfig+0x2e4>)
 800d270:	4293      	cmp	r3, r2
 800d272:	f040 8087 	bne.w	800d384 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d276:	7efb      	ldrb	r3, [r7, #27]
 800d278:	2b08      	cmp	r3, #8
 800d27a:	d837      	bhi.n	800d2ec <UART_SetConfig+0x304>
 800d27c:	a201      	add	r2, pc, #4	; (adr r2, 800d284 <UART_SetConfig+0x29c>)
 800d27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d282:	bf00      	nop
 800d284:	0800d2a9 	.word	0x0800d2a9
 800d288:	0800d2ed 	.word	0x0800d2ed
 800d28c:	0800d2b1 	.word	0x0800d2b1
 800d290:	0800d2ed 	.word	0x0800d2ed
 800d294:	0800d2b7 	.word	0x0800d2b7
 800d298:	0800d2ed 	.word	0x0800d2ed
 800d29c:	0800d2ed 	.word	0x0800d2ed
 800d2a0:	0800d2ed 	.word	0x0800d2ed
 800d2a4:	0800d2bf 	.word	0x0800d2bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2a8:	f7fc fa6a 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800d2ac:	6178      	str	r0, [r7, #20]
        break;
 800d2ae:	e022      	b.n	800d2f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2b0:	4b0d      	ldr	r3, [pc, #52]	; (800d2e8 <UART_SetConfig+0x300>)
 800d2b2:	617b      	str	r3, [r7, #20]
        break;
 800d2b4:	e01f      	b.n	800d2f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2b6:	f7fc f9cb 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800d2ba:	6178      	str	r0, [r7, #20]
        break;
 800d2bc:	e01b      	b.n	800d2f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2c2:	617b      	str	r3, [r7, #20]
        break;
 800d2c4:	e017      	b.n	800d2f6 <UART_SetConfig+0x30e>
 800d2c6:	bf00      	nop
 800d2c8:	efff69f3 	.word	0xefff69f3
 800d2cc:	40008000 	.word	0x40008000
 800d2d0:	40013800 	.word	0x40013800
 800d2d4:	40021000 	.word	0x40021000
 800d2d8:	40004400 	.word	0x40004400
 800d2dc:	40004800 	.word	0x40004800
 800d2e0:	40004c00 	.word	0x40004c00
 800d2e4:	40005000 	.word	0x40005000
 800d2e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	76bb      	strb	r3, [r7, #26]
        break;
 800d2f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 80f1 	beq.w	800d4e0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	4613      	mov	r3, r2
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	4413      	add	r3, r2
 800d308:	697a      	ldr	r2, [r7, #20]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d305      	bcc.n	800d31a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d314:	697a      	ldr	r2, [r7, #20]
 800d316:	429a      	cmp	r2, r3
 800d318:	d902      	bls.n	800d320 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	76bb      	strb	r3, [r7, #26]
 800d31e:	e0df      	b.n	800d4e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	4618      	mov	r0, r3
 800d324:	f04f 0100 	mov.w	r1, #0
 800d328:	f04f 0200 	mov.w	r2, #0
 800d32c:	f04f 0300 	mov.w	r3, #0
 800d330:	020b      	lsls	r3, r1, #8
 800d332:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d336:	0202      	lsls	r2, r0, #8
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	6849      	ldr	r1, [r1, #4]
 800d33c:	0849      	lsrs	r1, r1, #1
 800d33e:	4608      	mov	r0, r1
 800d340:	f04f 0100 	mov.w	r1, #0
 800d344:	1814      	adds	r4, r2, r0
 800d346:	eb43 0501 	adc.w	r5, r3, r1
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	461a      	mov	r2, r3
 800d350:	f04f 0300 	mov.w	r3, #0
 800d354:	4620      	mov	r0, r4
 800d356:	4629      	mov	r1, r5
 800d358:	f7f3 fc36 	bl	8000bc8 <__aeabi_uldivmod>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4613      	mov	r3, r2
 800d362:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d36a:	d308      	bcc.n	800d37e <UART_SetConfig+0x396>
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d372:	d204      	bcs.n	800d37e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	60da      	str	r2, [r3, #12]
 800d37c:	e0b0      	b.n	800d4e0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	76bb      	strb	r3, [r7, #26]
 800d382:	e0ad      	b.n	800d4e0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d38c:	d15c      	bne.n	800d448 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800d38e:	7efb      	ldrb	r3, [r7, #27]
 800d390:	2b08      	cmp	r3, #8
 800d392:	d828      	bhi.n	800d3e6 <UART_SetConfig+0x3fe>
 800d394:	a201      	add	r2, pc, #4	; (adr r2, 800d39c <UART_SetConfig+0x3b4>)
 800d396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39a:	bf00      	nop
 800d39c:	0800d3c1 	.word	0x0800d3c1
 800d3a0:	0800d3c9 	.word	0x0800d3c9
 800d3a4:	0800d3d1 	.word	0x0800d3d1
 800d3a8:	0800d3e7 	.word	0x0800d3e7
 800d3ac:	0800d3d7 	.word	0x0800d3d7
 800d3b0:	0800d3e7 	.word	0x0800d3e7
 800d3b4:	0800d3e7 	.word	0x0800d3e7
 800d3b8:	0800d3e7 	.word	0x0800d3e7
 800d3bc:	0800d3df 	.word	0x0800d3df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3c0:	f7fc f9de 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800d3c4:	6178      	str	r0, [r7, #20]
        break;
 800d3c6:	e013      	b.n	800d3f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3c8:	f7fc f9f0 	bl	80097ac <HAL_RCC_GetPCLK2Freq>
 800d3cc:	6178      	str	r0, [r7, #20]
        break;
 800d3ce:	e00f      	b.n	800d3f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3d0:	4b49      	ldr	r3, [pc, #292]	; (800d4f8 <UART_SetConfig+0x510>)
 800d3d2:	617b      	str	r3, [r7, #20]
        break;
 800d3d4:	e00c      	b.n	800d3f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3d6:	f7fc f93b 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800d3da:	6178      	str	r0, [r7, #20]
        break;
 800d3dc:	e008      	b.n	800d3f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3e2:	617b      	str	r3, [r7, #20]
        break;
 800d3e4:	e004      	b.n	800d3f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	76bb      	strb	r3, [r7, #26]
        break;
 800d3ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d074      	beq.n	800d4e0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	005a      	lsls	r2, r3, #1
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	085b      	lsrs	r3, r3, #1
 800d400:	441a      	add	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	fbb2 f3f3 	udiv	r3, r2, r3
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	2b0f      	cmp	r3, #15
 800d412:	d916      	bls.n	800d442 <UART_SetConfig+0x45a>
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d41a:	d212      	bcs.n	800d442 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	b29b      	uxth	r3, r3
 800d420:	f023 030f 	bic.w	r3, r3, #15
 800d424:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	085b      	lsrs	r3, r3, #1
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	f003 0307 	and.w	r3, r3, #7
 800d430:	b29a      	uxth	r2, r3
 800d432:	89fb      	ldrh	r3, [r7, #14]
 800d434:	4313      	orrs	r3, r2
 800d436:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	89fa      	ldrh	r2, [r7, #14]
 800d43e:	60da      	str	r2, [r3, #12]
 800d440:	e04e      	b.n	800d4e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	76bb      	strb	r3, [r7, #26]
 800d446:	e04b      	b.n	800d4e0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d448:	7efb      	ldrb	r3, [r7, #27]
 800d44a:	2b08      	cmp	r3, #8
 800d44c:	d827      	bhi.n	800d49e <UART_SetConfig+0x4b6>
 800d44e:	a201      	add	r2, pc, #4	; (adr r2, 800d454 <UART_SetConfig+0x46c>)
 800d450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d454:	0800d479 	.word	0x0800d479
 800d458:	0800d481 	.word	0x0800d481
 800d45c:	0800d489 	.word	0x0800d489
 800d460:	0800d49f 	.word	0x0800d49f
 800d464:	0800d48f 	.word	0x0800d48f
 800d468:	0800d49f 	.word	0x0800d49f
 800d46c:	0800d49f 	.word	0x0800d49f
 800d470:	0800d49f 	.word	0x0800d49f
 800d474:	0800d497 	.word	0x0800d497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d478:	f7fc f982 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800d47c:	6178      	str	r0, [r7, #20]
        break;
 800d47e:	e013      	b.n	800d4a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d480:	f7fc f994 	bl	80097ac <HAL_RCC_GetPCLK2Freq>
 800d484:	6178      	str	r0, [r7, #20]
        break;
 800d486:	e00f      	b.n	800d4a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d488:	4b1b      	ldr	r3, [pc, #108]	; (800d4f8 <UART_SetConfig+0x510>)
 800d48a:	617b      	str	r3, [r7, #20]
        break;
 800d48c:	e00c      	b.n	800d4a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d48e:	f7fc f8df 	bl	8009650 <HAL_RCC_GetSysClockFreq>
 800d492:	6178      	str	r0, [r7, #20]
        break;
 800d494:	e008      	b.n	800d4a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d49a:	617b      	str	r3, [r7, #20]
        break;
 800d49c:	e004      	b.n	800d4a8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	76bb      	strb	r3, [r7, #26]
        break;
 800d4a6:	bf00      	nop
    }

    if (pclk != 0U)
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d018      	beq.n	800d4e0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	085a      	lsrs	r2, r3, #1
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	441a      	add	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2b0f      	cmp	r3, #15
 800d4c8:	d908      	bls.n	800d4dc <UART_SetConfig+0x4f4>
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d0:	d204      	bcs.n	800d4dc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	693a      	ldr	r2, [r7, #16]
 800d4d8:	60da      	str	r2, [r3, #12]
 800d4da:	e001      	b.n	800d4e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d4ec:	7ebb      	ldrb	r3, [r7, #26]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3720      	adds	r7, #32
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	00f42400 	.word	0x00f42400

0800d4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00a      	beq.n	800d526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52a:	f003 0302 	and.w	r3, r3, #2
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00a      	beq.n	800d548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00a      	beq.n	800d56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	430a      	orrs	r2, r1
 800d568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56e:	f003 0308 	and.w	r3, r3, #8
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	430a      	orrs	r2, r1
 800d58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00a      	beq.n	800d5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	430a      	orrs	r2, r1
 800d5ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	f003 0320 	and.w	r3, r3, #32
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	430a      	orrs	r2, r1
 800d5ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d01a      	beq.n	800d612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5fa:	d10a      	bne.n	800d612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	430a      	orrs	r2, r1
 800d610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00a      	beq.n	800d634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	430a      	orrs	r2, r1
 800d632:	605a      	str	r2, [r3, #4]
  }
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af02      	add	r7, sp, #8
 800d646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d650:	f7f8 fcda 	bl	8006008 <HAL_GetTick>
 800d654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 0308 	and.w	r3, r3, #8
 800d660:	2b08      	cmp	r3, #8
 800d662:	d10e      	bne.n	800d682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f82d 	bl	800d6d2 <UART_WaitOnFlagUntilTimeout>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d67e:	2303      	movs	r3, #3
 800d680:	e023      	b.n	800d6ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b04      	cmp	r3, #4
 800d68e:	d10e      	bne.n	800d6ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d694:	9300      	str	r3, [sp, #0]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2200      	movs	r2, #0
 800d69a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 f817 	bl	800d6d2 <UART_WaitOnFlagUntilTimeout>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e00d      	b.n	800d6ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2220      	movs	r2, #32
 800d6b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	60f8      	str	r0, [r7, #12]
 800d6da:	60b9      	str	r1, [r7, #8]
 800d6dc:	603b      	str	r3, [r7, #0]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6e2:	e05e      	b.n	800d7a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d05a      	beq.n	800d7a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6ec:	f7f8 fc8c 	bl	8006008 <HAL_GetTick>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	69ba      	ldr	r2, [r7, #24]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d302      	bcc.n	800d702 <UART_WaitOnFlagUntilTimeout+0x30>
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d11b      	bne.n	800d73a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d710:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	689a      	ldr	r2, [r3, #8]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f022 0201 	bic.w	r2, r2, #1
 800d720:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2220      	movs	r2, #32
 800d726:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2220      	movs	r2, #32
 800d72c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e043      	b.n	800d7c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f003 0304 	and.w	r3, r3, #4
 800d744:	2b00      	cmp	r3, #0
 800d746:	d02c      	beq.n	800d7a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d756:	d124      	bne.n	800d7a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d760:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d770:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	689a      	ldr	r2, [r3, #8]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f022 0201 	bic.w	r2, r2, #1
 800d780:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2220      	movs	r2, #32
 800d786:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2220      	movs	r2, #32
 800d78c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2220      	movs	r2, #32
 800d792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d79e:	2303      	movs	r3, #3
 800d7a0:	e00f      	b.n	800d7c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	69da      	ldr	r2, [r3, #28]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	bf0c      	ite	eq
 800d7b2:	2301      	moveq	r3, #1
 800d7b4:	2300      	movne	r3, #0
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d091      	beq.n	800d6e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7c0:	2300      	movs	r3, #0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d7e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	689a      	ldr	r2, [r3, #8]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f022 0201 	bic.w	r2, r2, #1
 800d7f0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d107      	bne.n	800d80a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f022 0210 	bic.w	r2, r2, #16
 800d808:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2220      	movs	r2, #32
 800d80e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d81c:	bf00      	nop
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d834:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2200      	movs	r2, #0
 800d83a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2200      	movs	r2, #0
 800d842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	f7ff fbb8 	bl	800cfbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d84c:	bf00      	nop
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d860:	2b21      	cmp	r3, #33	; 0x21
 800d862:	d12b      	bne.n	800d8bc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d110      	bne.n	800d892 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d87e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d88e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d890:	e014      	b.n	800d8bc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d896:	781a      	ldrb	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	b292      	uxth	r2, r2
 800d89e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8d4:	2b21      	cmp	r3, #33	; 0x21
 800d8d6:	d12f      	bne.n	800d938 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d110      	bne.n	800d906 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d8f2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d902:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d904:	e018      	b.n	800d938 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d90a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	881a      	ldrh	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d918:	b292      	uxth	r2, r2
 800d91a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d920:	1c9a      	adds	r2, r3, #2
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	3b01      	subs	r3, #1
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d938:	bf00      	nop
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d95a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2220      	movs	r2, #32
 800d960:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff fb1d 	bl	800cfa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d96e:	bf00      	nop
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d97e:	bf00      	nop
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
	...

0800d98c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	6812      	ldr	r2, [r2, #0]
 800d9a4:	f023 0101 	bic.w	r1, r3, #1
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	2b08      	cmp	r3, #8
 800d9b4:	d102      	bne.n	800d9bc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d9b6:	2340      	movs	r3, #64	; 0x40
 800d9b8:	617b      	str	r3, [r7, #20]
 800d9ba:	e001      	b.n	800d9c0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d9cc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d9d2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d9d8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d9de:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d9e4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d9ea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d9f0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d9f6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d9fc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800da02:	4313      	orrs	r3, r2
 800da04:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da0a:	693a      	ldr	r2, [r7, #16]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	4313      	orrs	r3, r2
 800da18:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1e:	693a      	ldr	r2, [r7, #16]
 800da20:	4313      	orrs	r3, r2
 800da22:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800da24:	4b20      	ldr	r3, [pc, #128]	; (800daa8 <FMC_NORSRAM_Init+0x11c>)
 800da26:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da2e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da36:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800da3e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	43db      	mvns	r3, r3
 800da4e:	ea02 0103 	and.w	r1, r2, r3
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	4319      	orrs	r1, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da68:	d10c      	bne.n	800da84 <FMC_NORSRAM_Init+0xf8>
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d008      	beq.n	800da84 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da7e:	431a      	orrs	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d006      	beq.n	800da9a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da94:	431a      	orrs	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	371c      	adds	r7, #28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	0008fb7f 	.word	0x0008fb7f

0800daac <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800daac:	b480      	push	{r7}
 800daae:	b087      	sub	sp, #28
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	1c5a      	adds	r2, r3, #1
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dac2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	011b      	lsls	r3, r3, #4
 800dad0:	431a      	orrs	r2, r3
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	431a      	orrs	r2, r3
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	041b      	lsls	r3, r3, #16
 800dae0:	431a      	orrs	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	695b      	ldr	r3, [r3, #20]
 800dae6:	3b01      	subs	r3, #1
 800dae8:	051b      	lsls	r3, r3, #20
 800daea:	431a      	orrs	r2, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	699b      	ldr	r3, [r3, #24]
 800daf0:	3b02      	subs	r3, #2
 800daf2:	061b      	lsls	r3, r3, #24
 800daf4:	431a      	orrs	r2, r3
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	69db      	ldr	r3, [r3, #28]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	3201      	adds	r2, #1
 800db00:	4319      	orrs	r1, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db14:	d113      	bne.n	800db3e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db1e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	3b01      	subs	r3, #1
 800db26:	051b      	lsls	r3, r3, #20
 800db28:	697a      	ldr	r2, [r7, #20]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	431a      	orrs	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	371c      	adds	r7, #28
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
 800db58:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db60:	d11d      	bne.n	800db9e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db6a:	4b13      	ldr	r3, [pc, #76]	; (800dbb8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800db6c:	4013      	ands	r3, r2
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	6811      	ldr	r1, [r2, #0]
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	6852      	ldr	r2, [r2, #4]
 800db76:	0112      	lsls	r2, r2, #4
 800db78:	4311      	orrs	r1, r2
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	6892      	ldr	r2, [r2, #8]
 800db7e:	0212      	lsls	r2, r2, #8
 800db80:	4311      	orrs	r1, r2
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	69d2      	ldr	r2, [r2, #28]
 800db86:	4311      	orrs	r1, r2
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	6912      	ldr	r2, [r2, #16]
 800db8c:	0412      	lsls	r2, r2, #16
 800db8e:	430a      	orrs	r2, r1
 800db90:	ea43 0102 	orr.w	r1, r3, r2
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800db9c:	e005      	b.n	800dbaa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800dba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	cff00000 	.word	0xcff00000

0800dbbc <__errno>:
 800dbbc:	4b01      	ldr	r3, [pc, #4]	; (800dbc4 <__errno+0x8>)
 800dbbe:	6818      	ldr	r0, [r3, #0]
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	200000dc 	.word	0x200000dc

0800dbc8 <__libc_init_array>:
 800dbc8:	b570      	push	{r4, r5, r6, lr}
 800dbca:	4d0d      	ldr	r5, [pc, #52]	; (800dc00 <__libc_init_array+0x38>)
 800dbcc:	4c0d      	ldr	r4, [pc, #52]	; (800dc04 <__libc_init_array+0x3c>)
 800dbce:	1b64      	subs	r4, r4, r5
 800dbd0:	10a4      	asrs	r4, r4, #2
 800dbd2:	2600      	movs	r6, #0
 800dbd4:	42a6      	cmp	r6, r4
 800dbd6:	d109      	bne.n	800dbec <__libc_init_array+0x24>
 800dbd8:	4d0b      	ldr	r5, [pc, #44]	; (800dc08 <__libc_init_array+0x40>)
 800dbda:	4c0c      	ldr	r4, [pc, #48]	; (800dc0c <__libc_init_array+0x44>)
 800dbdc:	f002 feb4 	bl	8010948 <_init>
 800dbe0:	1b64      	subs	r4, r4, r5
 800dbe2:	10a4      	asrs	r4, r4, #2
 800dbe4:	2600      	movs	r6, #0
 800dbe6:	42a6      	cmp	r6, r4
 800dbe8:	d105      	bne.n	800dbf6 <__libc_init_array+0x2e>
 800dbea:	bd70      	pop	{r4, r5, r6, pc}
 800dbec:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbf0:	4798      	blx	r3
 800dbf2:	3601      	adds	r6, #1
 800dbf4:	e7ee      	b.n	800dbd4 <__libc_init_array+0xc>
 800dbf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbfa:	4798      	blx	r3
 800dbfc:	3601      	adds	r6, #1
 800dbfe:	e7f2      	b.n	800dbe6 <__libc_init_array+0x1e>
 800dc00:	08012d64 	.word	0x08012d64
 800dc04:	08012d64 	.word	0x08012d64
 800dc08:	08012d64 	.word	0x08012d64
 800dc0c:	08012d68 	.word	0x08012d68

0800dc10 <memcpy>:
 800dc10:	440a      	add	r2, r1
 800dc12:	4291      	cmp	r1, r2
 800dc14:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc18:	d100      	bne.n	800dc1c <memcpy+0xc>
 800dc1a:	4770      	bx	lr
 800dc1c:	b510      	push	{r4, lr}
 800dc1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc26:	4291      	cmp	r1, r2
 800dc28:	d1f9      	bne.n	800dc1e <memcpy+0xe>
 800dc2a:	bd10      	pop	{r4, pc}

0800dc2c <memset>:
 800dc2c:	4402      	add	r2, r0
 800dc2e:	4603      	mov	r3, r0
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d100      	bne.n	800dc36 <memset+0xa>
 800dc34:	4770      	bx	lr
 800dc36:	f803 1b01 	strb.w	r1, [r3], #1
 800dc3a:	e7f9      	b.n	800dc30 <memset+0x4>

0800dc3c <__cvt>:
 800dc3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc40:	ec55 4b10 	vmov	r4, r5, d0
 800dc44:	2d00      	cmp	r5, #0
 800dc46:	460e      	mov	r6, r1
 800dc48:	4619      	mov	r1, r3
 800dc4a:	462b      	mov	r3, r5
 800dc4c:	bfbb      	ittet	lt
 800dc4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dc52:	461d      	movlt	r5, r3
 800dc54:	2300      	movge	r3, #0
 800dc56:	232d      	movlt	r3, #45	; 0x2d
 800dc58:	700b      	strb	r3, [r1, #0]
 800dc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dc60:	4691      	mov	r9, r2
 800dc62:	f023 0820 	bic.w	r8, r3, #32
 800dc66:	bfbc      	itt	lt
 800dc68:	4622      	movlt	r2, r4
 800dc6a:	4614      	movlt	r4, r2
 800dc6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc70:	d005      	beq.n	800dc7e <__cvt+0x42>
 800dc72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc76:	d100      	bne.n	800dc7a <__cvt+0x3e>
 800dc78:	3601      	adds	r6, #1
 800dc7a:	2102      	movs	r1, #2
 800dc7c:	e000      	b.n	800dc80 <__cvt+0x44>
 800dc7e:	2103      	movs	r1, #3
 800dc80:	ab03      	add	r3, sp, #12
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	ab02      	add	r3, sp, #8
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	ec45 4b10 	vmov	d0, r4, r5
 800dc8c:	4653      	mov	r3, sl
 800dc8e:	4632      	mov	r2, r6
 800dc90:	f000 fcea 	bl	800e668 <_dtoa_r>
 800dc94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc98:	4607      	mov	r7, r0
 800dc9a:	d102      	bne.n	800dca2 <__cvt+0x66>
 800dc9c:	f019 0f01 	tst.w	r9, #1
 800dca0:	d022      	beq.n	800dce8 <__cvt+0xac>
 800dca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dca6:	eb07 0906 	add.w	r9, r7, r6
 800dcaa:	d110      	bne.n	800dcce <__cvt+0x92>
 800dcac:	783b      	ldrb	r3, [r7, #0]
 800dcae:	2b30      	cmp	r3, #48	; 0x30
 800dcb0:	d10a      	bne.n	800dcc8 <__cvt+0x8c>
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7f2 ff15 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcbe:	b918      	cbnz	r0, 800dcc8 <__cvt+0x8c>
 800dcc0:	f1c6 0601 	rsb	r6, r6, #1
 800dcc4:	f8ca 6000 	str.w	r6, [sl]
 800dcc8:	f8da 3000 	ldr.w	r3, [sl]
 800dccc:	4499      	add	r9, r3
 800dcce:	2200      	movs	r2, #0
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	f7f2 ff07 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcda:	b108      	cbz	r0, 800dce0 <__cvt+0xa4>
 800dcdc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dce0:	2230      	movs	r2, #48	; 0x30
 800dce2:	9b03      	ldr	r3, [sp, #12]
 800dce4:	454b      	cmp	r3, r9
 800dce6:	d307      	bcc.n	800dcf8 <__cvt+0xbc>
 800dce8:	9b03      	ldr	r3, [sp, #12]
 800dcea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcec:	1bdb      	subs	r3, r3, r7
 800dcee:	4638      	mov	r0, r7
 800dcf0:	6013      	str	r3, [r2, #0]
 800dcf2:	b004      	add	sp, #16
 800dcf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf8:	1c59      	adds	r1, r3, #1
 800dcfa:	9103      	str	r1, [sp, #12]
 800dcfc:	701a      	strb	r2, [r3, #0]
 800dcfe:	e7f0      	b.n	800dce2 <__cvt+0xa6>

0800dd00 <__exponent>:
 800dd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd02:	4603      	mov	r3, r0
 800dd04:	2900      	cmp	r1, #0
 800dd06:	bfb8      	it	lt
 800dd08:	4249      	neglt	r1, r1
 800dd0a:	f803 2b02 	strb.w	r2, [r3], #2
 800dd0e:	bfb4      	ite	lt
 800dd10:	222d      	movlt	r2, #45	; 0x2d
 800dd12:	222b      	movge	r2, #43	; 0x2b
 800dd14:	2909      	cmp	r1, #9
 800dd16:	7042      	strb	r2, [r0, #1]
 800dd18:	dd2a      	ble.n	800dd70 <__exponent+0x70>
 800dd1a:	f10d 0407 	add.w	r4, sp, #7
 800dd1e:	46a4      	mov	ip, r4
 800dd20:	270a      	movs	r7, #10
 800dd22:	46a6      	mov	lr, r4
 800dd24:	460a      	mov	r2, r1
 800dd26:	fb91 f6f7 	sdiv	r6, r1, r7
 800dd2a:	fb07 1516 	mls	r5, r7, r6, r1
 800dd2e:	3530      	adds	r5, #48	; 0x30
 800dd30:	2a63      	cmp	r2, #99	; 0x63
 800dd32:	f104 34ff 	add.w	r4, r4, #4294967295
 800dd36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	dcf1      	bgt.n	800dd22 <__exponent+0x22>
 800dd3e:	3130      	adds	r1, #48	; 0x30
 800dd40:	f1ae 0502 	sub.w	r5, lr, #2
 800dd44:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dd48:	1c44      	adds	r4, r0, #1
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	4561      	cmp	r1, ip
 800dd4e:	d30a      	bcc.n	800dd66 <__exponent+0x66>
 800dd50:	f10d 0209 	add.w	r2, sp, #9
 800dd54:	eba2 020e 	sub.w	r2, r2, lr
 800dd58:	4565      	cmp	r5, ip
 800dd5a:	bf88      	it	hi
 800dd5c:	2200      	movhi	r2, #0
 800dd5e:	4413      	add	r3, r2
 800dd60:	1a18      	subs	r0, r3, r0
 800dd62:	b003      	add	sp, #12
 800dd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dd6e:	e7ed      	b.n	800dd4c <__exponent+0x4c>
 800dd70:	2330      	movs	r3, #48	; 0x30
 800dd72:	3130      	adds	r1, #48	; 0x30
 800dd74:	7083      	strb	r3, [r0, #2]
 800dd76:	70c1      	strb	r1, [r0, #3]
 800dd78:	1d03      	adds	r3, r0, #4
 800dd7a:	e7f1      	b.n	800dd60 <__exponent+0x60>

0800dd7c <_printf_float>:
 800dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd80:	ed2d 8b02 	vpush	{d8}
 800dd84:	b08d      	sub	sp, #52	; 0x34
 800dd86:	460c      	mov	r4, r1
 800dd88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd8c:	4616      	mov	r6, r2
 800dd8e:	461f      	mov	r7, r3
 800dd90:	4605      	mov	r5, r0
 800dd92:	f001 fa55 	bl	800f240 <_localeconv_r>
 800dd96:	f8d0 a000 	ldr.w	sl, [r0]
 800dd9a:	4650      	mov	r0, sl
 800dd9c:	f7f2 fa28 	bl	80001f0 <strlen>
 800dda0:	2300      	movs	r3, #0
 800dda2:	930a      	str	r3, [sp, #40]	; 0x28
 800dda4:	6823      	ldr	r3, [r4, #0]
 800dda6:	9305      	str	r3, [sp, #20]
 800dda8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ddb0:	3307      	adds	r3, #7
 800ddb2:	f023 0307 	bic.w	r3, r3, #7
 800ddb6:	f103 0208 	add.w	r2, r3, #8
 800ddba:	f8c8 2000 	str.w	r2, [r8]
 800ddbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ddc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ddca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ddce:	9307      	str	r3, [sp, #28]
 800ddd0:	f8cd 8018 	str.w	r8, [sp, #24]
 800ddd4:	ee08 0a10 	vmov	s16, r0
 800ddd8:	4b9f      	ldr	r3, [pc, #636]	; (800e058 <_printf_float+0x2dc>)
 800ddda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddde:	f04f 32ff 	mov.w	r2, #4294967295
 800dde2:	f7f2 feb3 	bl	8000b4c <__aeabi_dcmpun>
 800dde6:	bb88      	cbnz	r0, 800de4c <_printf_float+0xd0>
 800dde8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddec:	4b9a      	ldr	r3, [pc, #616]	; (800e058 <_printf_float+0x2dc>)
 800ddee:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf2:	f7f2 fe8d 	bl	8000b10 <__aeabi_dcmple>
 800ddf6:	bb48      	cbnz	r0, 800de4c <_printf_float+0xd0>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	4649      	mov	r1, r9
 800de00:	f7f2 fe7c 	bl	8000afc <__aeabi_dcmplt>
 800de04:	b110      	cbz	r0, 800de0c <_printf_float+0x90>
 800de06:	232d      	movs	r3, #45	; 0x2d
 800de08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de0c:	4b93      	ldr	r3, [pc, #588]	; (800e05c <_printf_float+0x2e0>)
 800de0e:	4894      	ldr	r0, [pc, #592]	; (800e060 <_printf_float+0x2e4>)
 800de10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800de14:	bf94      	ite	ls
 800de16:	4698      	movls	r8, r3
 800de18:	4680      	movhi	r8, r0
 800de1a:	2303      	movs	r3, #3
 800de1c:	6123      	str	r3, [r4, #16]
 800de1e:	9b05      	ldr	r3, [sp, #20]
 800de20:	f023 0204 	bic.w	r2, r3, #4
 800de24:	6022      	str	r2, [r4, #0]
 800de26:	f04f 0900 	mov.w	r9, #0
 800de2a:	9700      	str	r7, [sp, #0]
 800de2c:	4633      	mov	r3, r6
 800de2e:	aa0b      	add	r2, sp, #44	; 0x2c
 800de30:	4621      	mov	r1, r4
 800de32:	4628      	mov	r0, r5
 800de34:	f000 f9d8 	bl	800e1e8 <_printf_common>
 800de38:	3001      	adds	r0, #1
 800de3a:	f040 8090 	bne.w	800df5e <_printf_float+0x1e2>
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	b00d      	add	sp, #52	; 0x34
 800de44:	ecbd 8b02 	vpop	{d8}
 800de48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4c:	4642      	mov	r2, r8
 800de4e:	464b      	mov	r3, r9
 800de50:	4640      	mov	r0, r8
 800de52:	4649      	mov	r1, r9
 800de54:	f7f2 fe7a 	bl	8000b4c <__aeabi_dcmpun>
 800de58:	b140      	cbz	r0, 800de6c <_printf_float+0xf0>
 800de5a:	464b      	mov	r3, r9
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	bfbc      	itt	lt
 800de60:	232d      	movlt	r3, #45	; 0x2d
 800de62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800de66:	487f      	ldr	r0, [pc, #508]	; (800e064 <_printf_float+0x2e8>)
 800de68:	4b7f      	ldr	r3, [pc, #508]	; (800e068 <_printf_float+0x2ec>)
 800de6a:	e7d1      	b.n	800de10 <_printf_float+0x94>
 800de6c:	6863      	ldr	r3, [r4, #4]
 800de6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800de72:	9206      	str	r2, [sp, #24]
 800de74:	1c5a      	adds	r2, r3, #1
 800de76:	d13f      	bne.n	800def8 <_printf_float+0x17c>
 800de78:	2306      	movs	r3, #6
 800de7a:	6063      	str	r3, [r4, #4]
 800de7c:	9b05      	ldr	r3, [sp, #20]
 800de7e:	6861      	ldr	r1, [r4, #4]
 800de80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800de84:	2300      	movs	r3, #0
 800de86:	9303      	str	r3, [sp, #12]
 800de88:	ab0a      	add	r3, sp, #40	; 0x28
 800de8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800de8e:	ab09      	add	r3, sp, #36	; 0x24
 800de90:	ec49 8b10 	vmov	d0, r8, r9
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	6022      	str	r2, [r4, #0]
 800de98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de9c:	4628      	mov	r0, r5
 800de9e:	f7ff fecd 	bl	800dc3c <__cvt>
 800dea2:	9b06      	ldr	r3, [sp, #24]
 800dea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dea6:	2b47      	cmp	r3, #71	; 0x47
 800dea8:	4680      	mov	r8, r0
 800deaa:	d108      	bne.n	800debe <_printf_float+0x142>
 800deac:	1cc8      	adds	r0, r1, #3
 800deae:	db02      	blt.n	800deb6 <_printf_float+0x13a>
 800deb0:	6863      	ldr	r3, [r4, #4]
 800deb2:	4299      	cmp	r1, r3
 800deb4:	dd41      	ble.n	800df3a <_printf_float+0x1be>
 800deb6:	f1ab 0b02 	sub.w	fp, fp, #2
 800deba:	fa5f fb8b 	uxtb.w	fp, fp
 800debe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dec2:	d820      	bhi.n	800df06 <_printf_float+0x18a>
 800dec4:	3901      	subs	r1, #1
 800dec6:	465a      	mov	r2, fp
 800dec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800decc:	9109      	str	r1, [sp, #36]	; 0x24
 800dece:	f7ff ff17 	bl	800dd00 <__exponent>
 800ded2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ded4:	1813      	adds	r3, r2, r0
 800ded6:	2a01      	cmp	r2, #1
 800ded8:	4681      	mov	r9, r0
 800deda:	6123      	str	r3, [r4, #16]
 800dedc:	dc02      	bgt.n	800dee4 <_printf_float+0x168>
 800dede:	6822      	ldr	r2, [r4, #0]
 800dee0:	07d2      	lsls	r2, r2, #31
 800dee2:	d501      	bpl.n	800dee8 <_printf_float+0x16c>
 800dee4:	3301      	adds	r3, #1
 800dee6:	6123      	str	r3, [r4, #16]
 800dee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800deec:	2b00      	cmp	r3, #0
 800deee:	d09c      	beq.n	800de2a <_printf_float+0xae>
 800def0:	232d      	movs	r3, #45	; 0x2d
 800def2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800def6:	e798      	b.n	800de2a <_printf_float+0xae>
 800def8:	9a06      	ldr	r2, [sp, #24]
 800defa:	2a47      	cmp	r2, #71	; 0x47
 800defc:	d1be      	bne.n	800de7c <_printf_float+0x100>
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1bc      	bne.n	800de7c <_printf_float+0x100>
 800df02:	2301      	movs	r3, #1
 800df04:	e7b9      	b.n	800de7a <_printf_float+0xfe>
 800df06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800df0a:	d118      	bne.n	800df3e <_printf_float+0x1c2>
 800df0c:	2900      	cmp	r1, #0
 800df0e:	6863      	ldr	r3, [r4, #4]
 800df10:	dd0b      	ble.n	800df2a <_printf_float+0x1ae>
 800df12:	6121      	str	r1, [r4, #16]
 800df14:	b913      	cbnz	r3, 800df1c <_printf_float+0x1a0>
 800df16:	6822      	ldr	r2, [r4, #0]
 800df18:	07d0      	lsls	r0, r2, #31
 800df1a:	d502      	bpl.n	800df22 <_printf_float+0x1a6>
 800df1c:	3301      	adds	r3, #1
 800df1e:	440b      	add	r3, r1
 800df20:	6123      	str	r3, [r4, #16]
 800df22:	65a1      	str	r1, [r4, #88]	; 0x58
 800df24:	f04f 0900 	mov.w	r9, #0
 800df28:	e7de      	b.n	800dee8 <_printf_float+0x16c>
 800df2a:	b913      	cbnz	r3, 800df32 <_printf_float+0x1b6>
 800df2c:	6822      	ldr	r2, [r4, #0]
 800df2e:	07d2      	lsls	r2, r2, #31
 800df30:	d501      	bpl.n	800df36 <_printf_float+0x1ba>
 800df32:	3302      	adds	r3, #2
 800df34:	e7f4      	b.n	800df20 <_printf_float+0x1a4>
 800df36:	2301      	movs	r3, #1
 800df38:	e7f2      	b.n	800df20 <_printf_float+0x1a4>
 800df3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800df3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df40:	4299      	cmp	r1, r3
 800df42:	db05      	blt.n	800df50 <_printf_float+0x1d4>
 800df44:	6823      	ldr	r3, [r4, #0]
 800df46:	6121      	str	r1, [r4, #16]
 800df48:	07d8      	lsls	r0, r3, #31
 800df4a:	d5ea      	bpl.n	800df22 <_printf_float+0x1a6>
 800df4c:	1c4b      	adds	r3, r1, #1
 800df4e:	e7e7      	b.n	800df20 <_printf_float+0x1a4>
 800df50:	2900      	cmp	r1, #0
 800df52:	bfd4      	ite	le
 800df54:	f1c1 0202 	rsble	r2, r1, #2
 800df58:	2201      	movgt	r2, #1
 800df5a:	4413      	add	r3, r2
 800df5c:	e7e0      	b.n	800df20 <_printf_float+0x1a4>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	055a      	lsls	r2, r3, #21
 800df62:	d407      	bmi.n	800df74 <_printf_float+0x1f8>
 800df64:	6923      	ldr	r3, [r4, #16]
 800df66:	4642      	mov	r2, r8
 800df68:	4631      	mov	r1, r6
 800df6a:	4628      	mov	r0, r5
 800df6c:	47b8      	blx	r7
 800df6e:	3001      	adds	r0, #1
 800df70:	d12c      	bne.n	800dfcc <_printf_float+0x250>
 800df72:	e764      	b.n	800de3e <_printf_float+0xc2>
 800df74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df78:	f240 80e0 	bls.w	800e13c <_printf_float+0x3c0>
 800df7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df80:	2200      	movs	r2, #0
 800df82:	2300      	movs	r3, #0
 800df84:	f7f2 fdb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800df88:	2800      	cmp	r0, #0
 800df8a:	d034      	beq.n	800dff6 <_printf_float+0x27a>
 800df8c:	4a37      	ldr	r2, [pc, #220]	; (800e06c <_printf_float+0x2f0>)
 800df8e:	2301      	movs	r3, #1
 800df90:	4631      	mov	r1, r6
 800df92:	4628      	mov	r0, r5
 800df94:	47b8      	blx	r7
 800df96:	3001      	adds	r0, #1
 800df98:	f43f af51 	beq.w	800de3e <_printf_float+0xc2>
 800df9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	db02      	blt.n	800dfaa <_printf_float+0x22e>
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	07d8      	lsls	r0, r3, #31
 800dfa8:	d510      	bpl.n	800dfcc <_printf_float+0x250>
 800dfaa:	ee18 3a10 	vmov	r3, s16
 800dfae:	4652      	mov	r2, sl
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	47b8      	blx	r7
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	f43f af41 	beq.w	800de3e <_printf_float+0xc2>
 800dfbc:	f04f 0800 	mov.w	r8, #0
 800dfc0:	f104 091a 	add.w	r9, r4, #26
 800dfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	4543      	cmp	r3, r8
 800dfca:	dc09      	bgt.n	800dfe0 <_printf_float+0x264>
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	079b      	lsls	r3, r3, #30
 800dfd0:	f100 8105 	bmi.w	800e1de <_printf_float+0x462>
 800dfd4:	68e0      	ldr	r0, [r4, #12]
 800dfd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfd8:	4298      	cmp	r0, r3
 800dfda:	bfb8      	it	lt
 800dfdc:	4618      	movlt	r0, r3
 800dfde:	e730      	b.n	800de42 <_printf_float+0xc6>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	464a      	mov	r2, r9
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	47b8      	blx	r7
 800dfea:	3001      	adds	r0, #1
 800dfec:	f43f af27 	beq.w	800de3e <_printf_float+0xc2>
 800dff0:	f108 0801 	add.w	r8, r8, #1
 800dff4:	e7e6      	b.n	800dfc4 <_printf_float+0x248>
 800dff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	dc39      	bgt.n	800e070 <_printf_float+0x2f4>
 800dffc:	4a1b      	ldr	r2, [pc, #108]	; (800e06c <_printf_float+0x2f0>)
 800dffe:	2301      	movs	r3, #1
 800e000:	4631      	mov	r1, r6
 800e002:	4628      	mov	r0, r5
 800e004:	47b8      	blx	r7
 800e006:	3001      	adds	r0, #1
 800e008:	f43f af19 	beq.w	800de3e <_printf_float+0xc2>
 800e00c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e010:	4313      	orrs	r3, r2
 800e012:	d102      	bne.n	800e01a <_printf_float+0x29e>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	07d9      	lsls	r1, r3, #31
 800e018:	d5d8      	bpl.n	800dfcc <_printf_float+0x250>
 800e01a:	ee18 3a10 	vmov	r3, s16
 800e01e:	4652      	mov	r2, sl
 800e020:	4631      	mov	r1, r6
 800e022:	4628      	mov	r0, r5
 800e024:	47b8      	blx	r7
 800e026:	3001      	adds	r0, #1
 800e028:	f43f af09 	beq.w	800de3e <_printf_float+0xc2>
 800e02c:	f04f 0900 	mov.w	r9, #0
 800e030:	f104 0a1a 	add.w	sl, r4, #26
 800e034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e036:	425b      	negs	r3, r3
 800e038:	454b      	cmp	r3, r9
 800e03a:	dc01      	bgt.n	800e040 <_printf_float+0x2c4>
 800e03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e03e:	e792      	b.n	800df66 <_printf_float+0x1ea>
 800e040:	2301      	movs	r3, #1
 800e042:	4652      	mov	r2, sl
 800e044:	4631      	mov	r1, r6
 800e046:	4628      	mov	r0, r5
 800e048:	47b8      	blx	r7
 800e04a:	3001      	adds	r0, #1
 800e04c:	f43f aef7 	beq.w	800de3e <_printf_float+0xc2>
 800e050:	f109 0901 	add.w	r9, r9, #1
 800e054:	e7ee      	b.n	800e034 <_printf_float+0x2b8>
 800e056:	bf00      	nop
 800e058:	7fefffff 	.word	0x7fefffff
 800e05c:	0801297c 	.word	0x0801297c
 800e060:	08012980 	.word	0x08012980
 800e064:	08012988 	.word	0x08012988
 800e068:	08012984 	.word	0x08012984
 800e06c:	0801298c 	.word	0x0801298c
 800e070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e074:	429a      	cmp	r2, r3
 800e076:	bfa8      	it	ge
 800e078:	461a      	movge	r2, r3
 800e07a:	2a00      	cmp	r2, #0
 800e07c:	4691      	mov	r9, r2
 800e07e:	dc37      	bgt.n	800e0f0 <_printf_float+0x374>
 800e080:	f04f 0b00 	mov.w	fp, #0
 800e084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e088:	f104 021a 	add.w	r2, r4, #26
 800e08c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e08e:	9305      	str	r3, [sp, #20]
 800e090:	eba3 0309 	sub.w	r3, r3, r9
 800e094:	455b      	cmp	r3, fp
 800e096:	dc33      	bgt.n	800e100 <_printf_float+0x384>
 800e098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e09c:	429a      	cmp	r2, r3
 800e09e:	db3b      	blt.n	800e118 <_printf_float+0x39c>
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	07da      	lsls	r2, r3, #31
 800e0a4:	d438      	bmi.n	800e118 <_printf_float+0x39c>
 800e0a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0a8:	9b05      	ldr	r3, [sp, #20]
 800e0aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	eba2 0901 	sub.w	r9, r2, r1
 800e0b2:	4599      	cmp	r9, r3
 800e0b4:	bfa8      	it	ge
 800e0b6:	4699      	movge	r9, r3
 800e0b8:	f1b9 0f00 	cmp.w	r9, #0
 800e0bc:	dc35      	bgt.n	800e12a <_printf_float+0x3ae>
 800e0be:	f04f 0800 	mov.w	r8, #0
 800e0c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0c6:	f104 0a1a 	add.w	sl, r4, #26
 800e0ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0ce:	1a9b      	subs	r3, r3, r2
 800e0d0:	eba3 0309 	sub.w	r3, r3, r9
 800e0d4:	4543      	cmp	r3, r8
 800e0d6:	f77f af79 	ble.w	800dfcc <_printf_float+0x250>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	4652      	mov	r2, sl
 800e0de:	4631      	mov	r1, r6
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	47b8      	blx	r7
 800e0e4:	3001      	adds	r0, #1
 800e0e6:	f43f aeaa 	beq.w	800de3e <_printf_float+0xc2>
 800e0ea:	f108 0801 	add.w	r8, r8, #1
 800e0ee:	e7ec      	b.n	800e0ca <_printf_float+0x34e>
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	4642      	mov	r2, r8
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	47b8      	blx	r7
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	d1c0      	bne.n	800e080 <_printf_float+0x304>
 800e0fe:	e69e      	b.n	800de3e <_printf_float+0xc2>
 800e100:	2301      	movs	r3, #1
 800e102:	4631      	mov	r1, r6
 800e104:	4628      	mov	r0, r5
 800e106:	9205      	str	r2, [sp, #20]
 800e108:	47b8      	blx	r7
 800e10a:	3001      	adds	r0, #1
 800e10c:	f43f ae97 	beq.w	800de3e <_printf_float+0xc2>
 800e110:	9a05      	ldr	r2, [sp, #20]
 800e112:	f10b 0b01 	add.w	fp, fp, #1
 800e116:	e7b9      	b.n	800e08c <_printf_float+0x310>
 800e118:	ee18 3a10 	vmov	r3, s16
 800e11c:	4652      	mov	r2, sl
 800e11e:	4631      	mov	r1, r6
 800e120:	4628      	mov	r0, r5
 800e122:	47b8      	blx	r7
 800e124:	3001      	adds	r0, #1
 800e126:	d1be      	bne.n	800e0a6 <_printf_float+0x32a>
 800e128:	e689      	b.n	800de3e <_printf_float+0xc2>
 800e12a:	9a05      	ldr	r2, [sp, #20]
 800e12c:	464b      	mov	r3, r9
 800e12e:	4442      	add	r2, r8
 800e130:	4631      	mov	r1, r6
 800e132:	4628      	mov	r0, r5
 800e134:	47b8      	blx	r7
 800e136:	3001      	adds	r0, #1
 800e138:	d1c1      	bne.n	800e0be <_printf_float+0x342>
 800e13a:	e680      	b.n	800de3e <_printf_float+0xc2>
 800e13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e13e:	2a01      	cmp	r2, #1
 800e140:	dc01      	bgt.n	800e146 <_printf_float+0x3ca>
 800e142:	07db      	lsls	r3, r3, #31
 800e144:	d538      	bpl.n	800e1b8 <_printf_float+0x43c>
 800e146:	2301      	movs	r3, #1
 800e148:	4642      	mov	r2, r8
 800e14a:	4631      	mov	r1, r6
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b8      	blx	r7
 800e150:	3001      	adds	r0, #1
 800e152:	f43f ae74 	beq.w	800de3e <_printf_float+0xc2>
 800e156:	ee18 3a10 	vmov	r3, s16
 800e15a:	4652      	mov	r2, sl
 800e15c:	4631      	mov	r1, r6
 800e15e:	4628      	mov	r0, r5
 800e160:	47b8      	blx	r7
 800e162:	3001      	adds	r0, #1
 800e164:	f43f ae6b 	beq.w	800de3e <_printf_float+0xc2>
 800e168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e16c:	2200      	movs	r2, #0
 800e16e:	2300      	movs	r3, #0
 800e170:	f7f2 fcba 	bl	8000ae8 <__aeabi_dcmpeq>
 800e174:	b9d8      	cbnz	r0, 800e1ae <_printf_float+0x432>
 800e176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e178:	f108 0201 	add.w	r2, r8, #1
 800e17c:	3b01      	subs	r3, #1
 800e17e:	4631      	mov	r1, r6
 800e180:	4628      	mov	r0, r5
 800e182:	47b8      	blx	r7
 800e184:	3001      	adds	r0, #1
 800e186:	d10e      	bne.n	800e1a6 <_printf_float+0x42a>
 800e188:	e659      	b.n	800de3e <_printf_float+0xc2>
 800e18a:	2301      	movs	r3, #1
 800e18c:	4652      	mov	r2, sl
 800e18e:	4631      	mov	r1, r6
 800e190:	4628      	mov	r0, r5
 800e192:	47b8      	blx	r7
 800e194:	3001      	adds	r0, #1
 800e196:	f43f ae52 	beq.w	800de3e <_printf_float+0xc2>
 800e19a:	f108 0801 	add.w	r8, r8, #1
 800e19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	4543      	cmp	r3, r8
 800e1a4:	dcf1      	bgt.n	800e18a <_printf_float+0x40e>
 800e1a6:	464b      	mov	r3, r9
 800e1a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e1ac:	e6dc      	b.n	800df68 <_printf_float+0x1ec>
 800e1ae:	f04f 0800 	mov.w	r8, #0
 800e1b2:	f104 0a1a 	add.w	sl, r4, #26
 800e1b6:	e7f2      	b.n	800e19e <_printf_float+0x422>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	4642      	mov	r2, r8
 800e1bc:	e7df      	b.n	800e17e <_printf_float+0x402>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	464a      	mov	r2, r9
 800e1c2:	4631      	mov	r1, r6
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	47b8      	blx	r7
 800e1c8:	3001      	adds	r0, #1
 800e1ca:	f43f ae38 	beq.w	800de3e <_printf_float+0xc2>
 800e1ce:	f108 0801 	add.w	r8, r8, #1
 800e1d2:	68e3      	ldr	r3, [r4, #12]
 800e1d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1d6:	1a5b      	subs	r3, r3, r1
 800e1d8:	4543      	cmp	r3, r8
 800e1da:	dcf0      	bgt.n	800e1be <_printf_float+0x442>
 800e1dc:	e6fa      	b.n	800dfd4 <_printf_float+0x258>
 800e1de:	f04f 0800 	mov.w	r8, #0
 800e1e2:	f104 0919 	add.w	r9, r4, #25
 800e1e6:	e7f4      	b.n	800e1d2 <_printf_float+0x456>

0800e1e8 <_printf_common>:
 800e1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ec:	4616      	mov	r6, r2
 800e1ee:	4699      	mov	r9, r3
 800e1f0:	688a      	ldr	r2, [r1, #8]
 800e1f2:	690b      	ldr	r3, [r1, #16]
 800e1f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	bfb8      	it	lt
 800e1fc:	4613      	movlt	r3, r2
 800e1fe:	6033      	str	r3, [r6, #0]
 800e200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e204:	4607      	mov	r7, r0
 800e206:	460c      	mov	r4, r1
 800e208:	b10a      	cbz	r2, 800e20e <_printf_common+0x26>
 800e20a:	3301      	adds	r3, #1
 800e20c:	6033      	str	r3, [r6, #0]
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	0699      	lsls	r1, r3, #26
 800e212:	bf42      	ittt	mi
 800e214:	6833      	ldrmi	r3, [r6, #0]
 800e216:	3302      	addmi	r3, #2
 800e218:	6033      	strmi	r3, [r6, #0]
 800e21a:	6825      	ldr	r5, [r4, #0]
 800e21c:	f015 0506 	ands.w	r5, r5, #6
 800e220:	d106      	bne.n	800e230 <_printf_common+0x48>
 800e222:	f104 0a19 	add.w	sl, r4, #25
 800e226:	68e3      	ldr	r3, [r4, #12]
 800e228:	6832      	ldr	r2, [r6, #0]
 800e22a:	1a9b      	subs	r3, r3, r2
 800e22c:	42ab      	cmp	r3, r5
 800e22e:	dc26      	bgt.n	800e27e <_printf_common+0x96>
 800e230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e234:	1e13      	subs	r3, r2, #0
 800e236:	6822      	ldr	r2, [r4, #0]
 800e238:	bf18      	it	ne
 800e23a:	2301      	movne	r3, #1
 800e23c:	0692      	lsls	r2, r2, #26
 800e23e:	d42b      	bmi.n	800e298 <_printf_common+0xb0>
 800e240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e244:	4649      	mov	r1, r9
 800e246:	4638      	mov	r0, r7
 800e248:	47c0      	blx	r8
 800e24a:	3001      	adds	r0, #1
 800e24c:	d01e      	beq.n	800e28c <_printf_common+0xa4>
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	68e5      	ldr	r5, [r4, #12]
 800e252:	6832      	ldr	r2, [r6, #0]
 800e254:	f003 0306 	and.w	r3, r3, #6
 800e258:	2b04      	cmp	r3, #4
 800e25a:	bf08      	it	eq
 800e25c:	1aad      	subeq	r5, r5, r2
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	6922      	ldr	r2, [r4, #16]
 800e262:	bf0c      	ite	eq
 800e264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e268:	2500      	movne	r5, #0
 800e26a:	4293      	cmp	r3, r2
 800e26c:	bfc4      	itt	gt
 800e26e:	1a9b      	subgt	r3, r3, r2
 800e270:	18ed      	addgt	r5, r5, r3
 800e272:	2600      	movs	r6, #0
 800e274:	341a      	adds	r4, #26
 800e276:	42b5      	cmp	r5, r6
 800e278:	d11a      	bne.n	800e2b0 <_printf_common+0xc8>
 800e27a:	2000      	movs	r0, #0
 800e27c:	e008      	b.n	800e290 <_printf_common+0xa8>
 800e27e:	2301      	movs	r3, #1
 800e280:	4652      	mov	r2, sl
 800e282:	4649      	mov	r1, r9
 800e284:	4638      	mov	r0, r7
 800e286:	47c0      	blx	r8
 800e288:	3001      	adds	r0, #1
 800e28a:	d103      	bne.n	800e294 <_printf_common+0xac>
 800e28c:	f04f 30ff 	mov.w	r0, #4294967295
 800e290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e294:	3501      	adds	r5, #1
 800e296:	e7c6      	b.n	800e226 <_printf_common+0x3e>
 800e298:	18e1      	adds	r1, r4, r3
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	2030      	movs	r0, #48	; 0x30
 800e29e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2a2:	4422      	add	r2, r4
 800e2a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2ac:	3302      	adds	r3, #2
 800e2ae:	e7c7      	b.n	800e240 <_printf_common+0x58>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	4622      	mov	r2, r4
 800e2b4:	4649      	mov	r1, r9
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	47c0      	blx	r8
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	d0e6      	beq.n	800e28c <_printf_common+0xa4>
 800e2be:	3601      	adds	r6, #1
 800e2c0:	e7d9      	b.n	800e276 <_printf_common+0x8e>
	...

0800e2c4 <_printf_i>:
 800e2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	4691      	mov	r9, r2
 800e2cc:	7e27      	ldrb	r7, [r4, #24]
 800e2ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2d0:	2f78      	cmp	r7, #120	; 0x78
 800e2d2:	4680      	mov	r8, r0
 800e2d4:	469a      	mov	sl, r3
 800e2d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2da:	d807      	bhi.n	800e2ec <_printf_i+0x28>
 800e2dc:	2f62      	cmp	r7, #98	; 0x62
 800e2de:	d80a      	bhi.n	800e2f6 <_printf_i+0x32>
 800e2e0:	2f00      	cmp	r7, #0
 800e2e2:	f000 80d8 	beq.w	800e496 <_printf_i+0x1d2>
 800e2e6:	2f58      	cmp	r7, #88	; 0x58
 800e2e8:	f000 80a3 	beq.w	800e432 <_printf_i+0x16e>
 800e2ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2f4:	e03a      	b.n	800e36c <_printf_i+0xa8>
 800e2f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2fa:	2b15      	cmp	r3, #21
 800e2fc:	d8f6      	bhi.n	800e2ec <_printf_i+0x28>
 800e2fe:	a001      	add	r0, pc, #4	; (adr r0, 800e304 <_printf_i+0x40>)
 800e300:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e304:	0800e35d 	.word	0x0800e35d
 800e308:	0800e371 	.word	0x0800e371
 800e30c:	0800e2ed 	.word	0x0800e2ed
 800e310:	0800e2ed 	.word	0x0800e2ed
 800e314:	0800e2ed 	.word	0x0800e2ed
 800e318:	0800e2ed 	.word	0x0800e2ed
 800e31c:	0800e371 	.word	0x0800e371
 800e320:	0800e2ed 	.word	0x0800e2ed
 800e324:	0800e2ed 	.word	0x0800e2ed
 800e328:	0800e2ed 	.word	0x0800e2ed
 800e32c:	0800e2ed 	.word	0x0800e2ed
 800e330:	0800e47d 	.word	0x0800e47d
 800e334:	0800e3a1 	.word	0x0800e3a1
 800e338:	0800e45f 	.word	0x0800e45f
 800e33c:	0800e2ed 	.word	0x0800e2ed
 800e340:	0800e2ed 	.word	0x0800e2ed
 800e344:	0800e49f 	.word	0x0800e49f
 800e348:	0800e2ed 	.word	0x0800e2ed
 800e34c:	0800e3a1 	.word	0x0800e3a1
 800e350:	0800e2ed 	.word	0x0800e2ed
 800e354:	0800e2ed 	.word	0x0800e2ed
 800e358:	0800e467 	.word	0x0800e467
 800e35c:	680b      	ldr	r3, [r1, #0]
 800e35e:	1d1a      	adds	r2, r3, #4
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	600a      	str	r2, [r1, #0]
 800e364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e36c:	2301      	movs	r3, #1
 800e36e:	e0a3      	b.n	800e4b8 <_printf_i+0x1f4>
 800e370:	6825      	ldr	r5, [r4, #0]
 800e372:	6808      	ldr	r0, [r1, #0]
 800e374:	062e      	lsls	r6, r5, #24
 800e376:	f100 0304 	add.w	r3, r0, #4
 800e37a:	d50a      	bpl.n	800e392 <_printf_i+0xce>
 800e37c:	6805      	ldr	r5, [r0, #0]
 800e37e:	600b      	str	r3, [r1, #0]
 800e380:	2d00      	cmp	r5, #0
 800e382:	da03      	bge.n	800e38c <_printf_i+0xc8>
 800e384:	232d      	movs	r3, #45	; 0x2d
 800e386:	426d      	negs	r5, r5
 800e388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e38c:	485e      	ldr	r0, [pc, #376]	; (800e508 <_printf_i+0x244>)
 800e38e:	230a      	movs	r3, #10
 800e390:	e019      	b.n	800e3c6 <_printf_i+0x102>
 800e392:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e396:	6805      	ldr	r5, [r0, #0]
 800e398:	600b      	str	r3, [r1, #0]
 800e39a:	bf18      	it	ne
 800e39c:	b22d      	sxthne	r5, r5
 800e39e:	e7ef      	b.n	800e380 <_printf_i+0xbc>
 800e3a0:	680b      	ldr	r3, [r1, #0]
 800e3a2:	6825      	ldr	r5, [r4, #0]
 800e3a4:	1d18      	adds	r0, r3, #4
 800e3a6:	6008      	str	r0, [r1, #0]
 800e3a8:	0628      	lsls	r0, r5, #24
 800e3aa:	d501      	bpl.n	800e3b0 <_printf_i+0xec>
 800e3ac:	681d      	ldr	r5, [r3, #0]
 800e3ae:	e002      	b.n	800e3b6 <_printf_i+0xf2>
 800e3b0:	0669      	lsls	r1, r5, #25
 800e3b2:	d5fb      	bpl.n	800e3ac <_printf_i+0xe8>
 800e3b4:	881d      	ldrh	r5, [r3, #0]
 800e3b6:	4854      	ldr	r0, [pc, #336]	; (800e508 <_printf_i+0x244>)
 800e3b8:	2f6f      	cmp	r7, #111	; 0x6f
 800e3ba:	bf0c      	ite	eq
 800e3bc:	2308      	moveq	r3, #8
 800e3be:	230a      	movne	r3, #10
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3c6:	6866      	ldr	r6, [r4, #4]
 800e3c8:	60a6      	str	r6, [r4, #8]
 800e3ca:	2e00      	cmp	r6, #0
 800e3cc:	bfa2      	ittt	ge
 800e3ce:	6821      	ldrge	r1, [r4, #0]
 800e3d0:	f021 0104 	bicge.w	r1, r1, #4
 800e3d4:	6021      	strge	r1, [r4, #0]
 800e3d6:	b90d      	cbnz	r5, 800e3dc <_printf_i+0x118>
 800e3d8:	2e00      	cmp	r6, #0
 800e3da:	d04d      	beq.n	800e478 <_printf_i+0x1b4>
 800e3dc:	4616      	mov	r6, r2
 800e3de:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3e2:	fb03 5711 	mls	r7, r3, r1, r5
 800e3e6:	5dc7      	ldrb	r7, [r0, r7]
 800e3e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3ec:	462f      	mov	r7, r5
 800e3ee:	42bb      	cmp	r3, r7
 800e3f0:	460d      	mov	r5, r1
 800e3f2:	d9f4      	bls.n	800e3de <_printf_i+0x11a>
 800e3f4:	2b08      	cmp	r3, #8
 800e3f6:	d10b      	bne.n	800e410 <_printf_i+0x14c>
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	07df      	lsls	r7, r3, #31
 800e3fc:	d508      	bpl.n	800e410 <_printf_i+0x14c>
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	6861      	ldr	r1, [r4, #4]
 800e402:	4299      	cmp	r1, r3
 800e404:	bfde      	ittt	le
 800e406:	2330      	movle	r3, #48	; 0x30
 800e408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e40c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e410:	1b92      	subs	r2, r2, r6
 800e412:	6122      	str	r2, [r4, #16]
 800e414:	f8cd a000 	str.w	sl, [sp]
 800e418:	464b      	mov	r3, r9
 800e41a:	aa03      	add	r2, sp, #12
 800e41c:	4621      	mov	r1, r4
 800e41e:	4640      	mov	r0, r8
 800e420:	f7ff fee2 	bl	800e1e8 <_printf_common>
 800e424:	3001      	adds	r0, #1
 800e426:	d14c      	bne.n	800e4c2 <_printf_i+0x1fe>
 800e428:	f04f 30ff 	mov.w	r0, #4294967295
 800e42c:	b004      	add	sp, #16
 800e42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e432:	4835      	ldr	r0, [pc, #212]	; (800e508 <_printf_i+0x244>)
 800e434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	680e      	ldr	r6, [r1, #0]
 800e43c:	061f      	lsls	r7, r3, #24
 800e43e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e442:	600e      	str	r6, [r1, #0]
 800e444:	d514      	bpl.n	800e470 <_printf_i+0x1ac>
 800e446:	07d9      	lsls	r1, r3, #31
 800e448:	bf44      	itt	mi
 800e44a:	f043 0320 	orrmi.w	r3, r3, #32
 800e44e:	6023      	strmi	r3, [r4, #0]
 800e450:	b91d      	cbnz	r5, 800e45a <_printf_i+0x196>
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	f023 0320 	bic.w	r3, r3, #32
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	2310      	movs	r3, #16
 800e45c:	e7b0      	b.n	800e3c0 <_printf_i+0xfc>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	f043 0320 	orr.w	r3, r3, #32
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	2378      	movs	r3, #120	; 0x78
 800e468:	4828      	ldr	r0, [pc, #160]	; (800e50c <_printf_i+0x248>)
 800e46a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e46e:	e7e3      	b.n	800e438 <_printf_i+0x174>
 800e470:	065e      	lsls	r6, r3, #25
 800e472:	bf48      	it	mi
 800e474:	b2ad      	uxthmi	r5, r5
 800e476:	e7e6      	b.n	800e446 <_printf_i+0x182>
 800e478:	4616      	mov	r6, r2
 800e47a:	e7bb      	b.n	800e3f4 <_printf_i+0x130>
 800e47c:	680b      	ldr	r3, [r1, #0]
 800e47e:	6826      	ldr	r6, [r4, #0]
 800e480:	6960      	ldr	r0, [r4, #20]
 800e482:	1d1d      	adds	r5, r3, #4
 800e484:	600d      	str	r5, [r1, #0]
 800e486:	0635      	lsls	r5, r6, #24
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	d501      	bpl.n	800e490 <_printf_i+0x1cc>
 800e48c:	6018      	str	r0, [r3, #0]
 800e48e:	e002      	b.n	800e496 <_printf_i+0x1d2>
 800e490:	0671      	lsls	r1, r6, #25
 800e492:	d5fb      	bpl.n	800e48c <_printf_i+0x1c8>
 800e494:	8018      	strh	r0, [r3, #0]
 800e496:	2300      	movs	r3, #0
 800e498:	6123      	str	r3, [r4, #16]
 800e49a:	4616      	mov	r6, r2
 800e49c:	e7ba      	b.n	800e414 <_printf_i+0x150>
 800e49e:	680b      	ldr	r3, [r1, #0]
 800e4a0:	1d1a      	adds	r2, r3, #4
 800e4a2:	600a      	str	r2, [r1, #0]
 800e4a4:	681e      	ldr	r6, [r3, #0]
 800e4a6:	6862      	ldr	r2, [r4, #4]
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f7f1 fea8 	bl	8000200 <memchr>
 800e4b0:	b108      	cbz	r0, 800e4b6 <_printf_i+0x1f2>
 800e4b2:	1b80      	subs	r0, r0, r6
 800e4b4:	6060      	str	r0, [r4, #4]
 800e4b6:	6863      	ldr	r3, [r4, #4]
 800e4b8:	6123      	str	r3, [r4, #16]
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4c0:	e7a8      	b.n	800e414 <_printf_i+0x150>
 800e4c2:	6923      	ldr	r3, [r4, #16]
 800e4c4:	4632      	mov	r2, r6
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	4640      	mov	r0, r8
 800e4ca:	47d0      	blx	sl
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	d0ab      	beq.n	800e428 <_printf_i+0x164>
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	079b      	lsls	r3, r3, #30
 800e4d4:	d413      	bmi.n	800e4fe <_printf_i+0x23a>
 800e4d6:	68e0      	ldr	r0, [r4, #12]
 800e4d8:	9b03      	ldr	r3, [sp, #12]
 800e4da:	4298      	cmp	r0, r3
 800e4dc:	bfb8      	it	lt
 800e4de:	4618      	movlt	r0, r3
 800e4e0:	e7a4      	b.n	800e42c <_printf_i+0x168>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	4632      	mov	r2, r6
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	4640      	mov	r0, r8
 800e4ea:	47d0      	blx	sl
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d09b      	beq.n	800e428 <_printf_i+0x164>
 800e4f0:	3501      	adds	r5, #1
 800e4f2:	68e3      	ldr	r3, [r4, #12]
 800e4f4:	9903      	ldr	r1, [sp, #12]
 800e4f6:	1a5b      	subs	r3, r3, r1
 800e4f8:	42ab      	cmp	r3, r5
 800e4fa:	dcf2      	bgt.n	800e4e2 <_printf_i+0x21e>
 800e4fc:	e7eb      	b.n	800e4d6 <_printf_i+0x212>
 800e4fe:	2500      	movs	r5, #0
 800e500:	f104 0619 	add.w	r6, r4, #25
 800e504:	e7f5      	b.n	800e4f2 <_printf_i+0x22e>
 800e506:	bf00      	nop
 800e508:	0801298e 	.word	0x0801298e
 800e50c:	0801299f 	.word	0x0801299f

0800e510 <siprintf>:
 800e510:	b40e      	push	{r1, r2, r3}
 800e512:	b500      	push	{lr}
 800e514:	b09c      	sub	sp, #112	; 0x70
 800e516:	ab1d      	add	r3, sp, #116	; 0x74
 800e518:	9002      	str	r0, [sp, #8]
 800e51a:	9006      	str	r0, [sp, #24]
 800e51c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e520:	4809      	ldr	r0, [pc, #36]	; (800e548 <siprintf+0x38>)
 800e522:	9107      	str	r1, [sp, #28]
 800e524:	9104      	str	r1, [sp, #16]
 800e526:	4909      	ldr	r1, [pc, #36]	; (800e54c <siprintf+0x3c>)
 800e528:	f853 2b04 	ldr.w	r2, [r3], #4
 800e52c:	9105      	str	r1, [sp, #20]
 800e52e:	6800      	ldr	r0, [r0, #0]
 800e530:	9301      	str	r3, [sp, #4]
 800e532:	a902      	add	r1, sp, #8
 800e534:	f001 fb24 	bl	800fb80 <_svfiprintf_r>
 800e538:	9b02      	ldr	r3, [sp, #8]
 800e53a:	2200      	movs	r2, #0
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	b01c      	add	sp, #112	; 0x70
 800e540:	f85d eb04 	ldr.w	lr, [sp], #4
 800e544:	b003      	add	sp, #12
 800e546:	4770      	bx	lr
 800e548:	200000dc 	.word	0x200000dc
 800e54c:	ffff0208 	.word	0xffff0208

0800e550 <quorem>:
 800e550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e554:	6903      	ldr	r3, [r0, #16]
 800e556:	690c      	ldr	r4, [r1, #16]
 800e558:	42a3      	cmp	r3, r4
 800e55a:	4607      	mov	r7, r0
 800e55c:	f2c0 8081 	blt.w	800e662 <quorem+0x112>
 800e560:	3c01      	subs	r4, #1
 800e562:	f101 0814 	add.w	r8, r1, #20
 800e566:	f100 0514 	add.w	r5, r0, #20
 800e56a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e578:	3301      	adds	r3, #1
 800e57a:	429a      	cmp	r2, r3
 800e57c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e584:	fbb2 f6f3 	udiv	r6, r2, r3
 800e588:	d331      	bcc.n	800e5ee <quorem+0x9e>
 800e58a:	f04f 0e00 	mov.w	lr, #0
 800e58e:	4640      	mov	r0, r8
 800e590:	46ac      	mov	ip, r5
 800e592:	46f2      	mov	sl, lr
 800e594:	f850 2b04 	ldr.w	r2, [r0], #4
 800e598:	b293      	uxth	r3, r2
 800e59a:	fb06 e303 	mla	r3, r6, r3, lr
 800e59e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	ebaa 0303 	sub.w	r3, sl, r3
 800e5a8:	0c12      	lsrs	r2, r2, #16
 800e5aa:	f8dc a000 	ldr.w	sl, [ip]
 800e5ae:	fb06 e202 	mla	r2, r6, r2, lr
 800e5b2:	fa13 f38a 	uxtah	r3, r3, sl
 800e5b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e5ba:	fa1f fa82 	uxth.w	sl, r2
 800e5be:	f8dc 2000 	ldr.w	r2, [ip]
 800e5c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e5c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5d0:	4581      	cmp	r9, r0
 800e5d2:	f84c 3b04 	str.w	r3, [ip], #4
 800e5d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e5da:	d2db      	bcs.n	800e594 <quorem+0x44>
 800e5dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e5e0:	b92b      	cbnz	r3, 800e5ee <quorem+0x9e>
 800e5e2:	9b01      	ldr	r3, [sp, #4]
 800e5e4:	3b04      	subs	r3, #4
 800e5e6:	429d      	cmp	r5, r3
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	d32e      	bcc.n	800e64a <quorem+0xfa>
 800e5ec:	613c      	str	r4, [r7, #16]
 800e5ee:	4638      	mov	r0, r7
 800e5f0:	f001 f8b0 	bl	800f754 <__mcmp>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	db24      	blt.n	800e642 <quorem+0xf2>
 800e5f8:	3601      	adds	r6, #1
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f04f 0c00 	mov.w	ip, #0
 800e600:	f858 2b04 	ldr.w	r2, [r8], #4
 800e604:	f8d0 e000 	ldr.w	lr, [r0]
 800e608:	b293      	uxth	r3, r2
 800e60a:	ebac 0303 	sub.w	r3, ip, r3
 800e60e:	0c12      	lsrs	r2, r2, #16
 800e610:	fa13 f38e 	uxtah	r3, r3, lr
 800e614:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e622:	45c1      	cmp	r9, r8
 800e624:	f840 3b04 	str.w	r3, [r0], #4
 800e628:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e62c:	d2e8      	bcs.n	800e600 <quorem+0xb0>
 800e62e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e636:	b922      	cbnz	r2, 800e642 <quorem+0xf2>
 800e638:	3b04      	subs	r3, #4
 800e63a:	429d      	cmp	r5, r3
 800e63c:	461a      	mov	r2, r3
 800e63e:	d30a      	bcc.n	800e656 <quorem+0x106>
 800e640:	613c      	str	r4, [r7, #16]
 800e642:	4630      	mov	r0, r6
 800e644:	b003      	add	sp, #12
 800e646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64a:	6812      	ldr	r2, [r2, #0]
 800e64c:	3b04      	subs	r3, #4
 800e64e:	2a00      	cmp	r2, #0
 800e650:	d1cc      	bne.n	800e5ec <quorem+0x9c>
 800e652:	3c01      	subs	r4, #1
 800e654:	e7c7      	b.n	800e5e6 <quorem+0x96>
 800e656:	6812      	ldr	r2, [r2, #0]
 800e658:	3b04      	subs	r3, #4
 800e65a:	2a00      	cmp	r2, #0
 800e65c:	d1f0      	bne.n	800e640 <quorem+0xf0>
 800e65e:	3c01      	subs	r4, #1
 800e660:	e7eb      	b.n	800e63a <quorem+0xea>
 800e662:	2000      	movs	r0, #0
 800e664:	e7ee      	b.n	800e644 <quorem+0xf4>
	...

0800e668 <_dtoa_r>:
 800e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66c:	ed2d 8b02 	vpush	{d8}
 800e670:	ec57 6b10 	vmov	r6, r7, d0
 800e674:	b095      	sub	sp, #84	; 0x54
 800e676:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e678:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e67c:	9105      	str	r1, [sp, #20]
 800e67e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e682:	4604      	mov	r4, r0
 800e684:	9209      	str	r2, [sp, #36]	; 0x24
 800e686:	930f      	str	r3, [sp, #60]	; 0x3c
 800e688:	b975      	cbnz	r5, 800e6a8 <_dtoa_r+0x40>
 800e68a:	2010      	movs	r0, #16
 800e68c:	f000 fddc 	bl	800f248 <malloc>
 800e690:	4602      	mov	r2, r0
 800e692:	6260      	str	r0, [r4, #36]	; 0x24
 800e694:	b920      	cbnz	r0, 800e6a0 <_dtoa_r+0x38>
 800e696:	4bb2      	ldr	r3, [pc, #712]	; (800e960 <_dtoa_r+0x2f8>)
 800e698:	21ea      	movs	r1, #234	; 0xea
 800e69a:	48b2      	ldr	r0, [pc, #712]	; (800e964 <_dtoa_r+0x2fc>)
 800e69c:	f001 fb80 	bl	800fda0 <__assert_func>
 800e6a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e6a4:	6005      	str	r5, [r0, #0]
 800e6a6:	60c5      	str	r5, [r0, #12]
 800e6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6aa:	6819      	ldr	r1, [r3, #0]
 800e6ac:	b151      	cbz	r1, 800e6c4 <_dtoa_r+0x5c>
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	604a      	str	r2, [r1, #4]
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	4093      	lsls	r3, r2
 800e6b6:	608b      	str	r3, [r1, #8]
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f000 fe0d 	bl	800f2d8 <_Bfree>
 800e6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	1e3b      	subs	r3, r7, #0
 800e6c6:	bfb9      	ittee	lt
 800e6c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e6cc:	9303      	strlt	r3, [sp, #12]
 800e6ce:	2300      	movge	r3, #0
 800e6d0:	f8c8 3000 	strge.w	r3, [r8]
 800e6d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e6d8:	4ba3      	ldr	r3, [pc, #652]	; (800e968 <_dtoa_r+0x300>)
 800e6da:	bfbc      	itt	lt
 800e6dc:	2201      	movlt	r2, #1
 800e6de:	f8c8 2000 	strlt.w	r2, [r8]
 800e6e2:	ea33 0309 	bics.w	r3, r3, r9
 800e6e6:	d11b      	bne.n	800e720 <_dtoa_r+0xb8>
 800e6e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800e6ee:	6013      	str	r3, [r2, #0]
 800e6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6f4:	4333      	orrs	r3, r6
 800e6f6:	f000 857a 	beq.w	800f1ee <_dtoa_r+0xb86>
 800e6fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6fc:	b963      	cbnz	r3, 800e718 <_dtoa_r+0xb0>
 800e6fe:	4b9b      	ldr	r3, [pc, #620]	; (800e96c <_dtoa_r+0x304>)
 800e700:	e024      	b.n	800e74c <_dtoa_r+0xe4>
 800e702:	4b9b      	ldr	r3, [pc, #620]	; (800e970 <_dtoa_r+0x308>)
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	3308      	adds	r3, #8
 800e708:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e70a:	6013      	str	r3, [r2, #0]
 800e70c:	9800      	ldr	r0, [sp, #0]
 800e70e:	b015      	add	sp, #84	; 0x54
 800e710:	ecbd 8b02 	vpop	{d8}
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	4b94      	ldr	r3, [pc, #592]	; (800e96c <_dtoa_r+0x304>)
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	3303      	adds	r3, #3
 800e71e:	e7f3      	b.n	800e708 <_dtoa_r+0xa0>
 800e720:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e724:	2200      	movs	r2, #0
 800e726:	ec51 0b17 	vmov	r0, r1, d7
 800e72a:	2300      	movs	r3, #0
 800e72c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e730:	f7f2 f9da 	bl	8000ae8 <__aeabi_dcmpeq>
 800e734:	4680      	mov	r8, r0
 800e736:	b158      	cbz	r0, 800e750 <_dtoa_r+0xe8>
 800e738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e73a:	2301      	movs	r3, #1
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e740:	2b00      	cmp	r3, #0
 800e742:	f000 8551 	beq.w	800f1e8 <_dtoa_r+0xb80>
 800e746:	488b      	ldr	r0, [pc, #556]	; (800e974 <_dtoa_r+0x30c>)
 800e748:	6018      	str	r0, [r3, #0]
 800e74a:	1e43      	subs	r3, r0, #1
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	e7dd      	b.n	800e70c <_dtoa_r+0xa4>
 800e750:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e754:	aa12      	add	r2, sp, #72	; 0x48
 800e756:	a913      	add	r1, sp, #76	; 0x4c
 800e758:	4620      	mov	r0, r4
 800e75a:	f001 f89f 	bl	800f89c <__d2b>
 800e75e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e762:	4683      	mov	fp, r0
 800e764:	2d00      	cmp	r5, #0
 800e766:	d07c      	beq.n	800e862 <_dtoa_r+0x1fa>
 800e768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e76a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e76e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e772:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e776:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e77a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e77e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e782:	4b7d      	ldr	r3, [pc, #500]	; (800e978 <_dtoa_r+0x310>)
 800e784:	2200      	movs	r2, #0
 800e786:	4630      	mov	r0, r6
 800e788:	4639      	mov	r1, r7
 800e78a:	f7f1 fd8d 	bl	80002a8 <__aeabi_dsub>
 800e78e:	a36e      	add	r3, pc, #440	; (adr r3, 800e948 <_dtoa_r+0x2e0>)
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	f7f1 ff40 	bl	8000618 <__aeabi_dmul>
 800e798:	a36d      	add	r3, pc, #436	; (adr r3, 800e950 <_dtoa_r+0x2e8>)
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	f7f1 fd85 	bl	80002ac <__adddf3>
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	460f      	mov	r7, r1
 800e7a8:	f7f1 fecc 	bl	8000544 <__aeabi_i2d>
 800e7ac:	a36a      	add	r3, pc, #424	; (adr r3, 800e958 <_dtoa_r+0x2f0>)
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	f7f1 ff31 	bl	8000618 <__aeabi_dmul>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	4639      	mov	r1, r7
 800e7be:	f7f1 fd75 	bl	80002ac <__adddf3>
 800e7c2:	4606      	mov	r6, r0
 800e7c4:	460f      	mov	r7, r1
 800e7c6:	f7f2 f9d7 	bl	8000b78 <__aeabi_d2iz>
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	4682      	mov	sl, r0
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f2 f992 	bl	8000afc <__aeabi_dcmplt>
 800e7d8:	b148      	cbz	r0, 800e7ee <_dtoa_r+0x186>
 800e7da:	4650      	mov	r0, sl
 800e7dc:	f7f1 feb2 	bl	8000544 <__aeabi_i2d>
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	463b      	mov	r3, r7
 800e7e4:	f7f2 f980 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7e8:	b908      	cbnz	r0, 800e7ee <_dtoa_r+0x186>
 800e7ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7ee:	f1ba 0f16 	cmp.w	sl, #22
 800e7f2:	d854      	bhi.n	800e89e <_dtoa_r+0x236>
 800e7f4:	4b61      	ldr	r3, [pc, #388]	; (800e97c <_dtoa_r+0x314>)
 800e7f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e802:	f7f2 f97b 	bl	8000afc <__aeabi_dcmplt>
 800e806:	2800      	cmp	r0, #0
 800e808:	d04b      	beq.n	800e8a2 <_dtoa_r+0x23a>
 800e80a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e80e:	2300      	movs	r3, #0
 800e810:	930e      	str	r3, [sp, #56]	; 0x38
 800e812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e814:	1b5d      	subs	r5, r3, r5
 800e816:	1e6b      	subs	r3, r5, #1
 800e818:	9304      	str	r3, [sp, #16]
 800e81a:	bf43      	ittte	mi
 800e81c:	2300      	movmi	r3, #0
 800e81e:	f1c5 0801 	rsbmi	r8, r5, #1
 800e822:	9304      	strmi	r3, [sp, #16]
 800e824:	f04f 0800 	movpl.w	r8, #0
 800e828:	f1ba 0f00 	cmp.w	sl, #0
 800e82c:	db3b      	blt.n	800e8a6 <_dtoa_r+0x23e>
 800e82e:	9b04      	ldr	r3, [sp, #16]
 800e830:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e834:	4453      	add	r3, sl
 800e836:	9304      	str	r3, [sp, #16]
 800e838:	2300      	movs	r3, #0
 800e83a:	9306      	str	r3, [sp, #24]
 800e83c:	9b05      	ldr	r3, [sp, #20]
 800e83e:	2b09      	cmp	r3, #9
 800e840:	d869      	bhi.n	800e916 <_dtoa_r+0x2ae>
 800e842:	2b05      	cmp	r3, #5
 800e844:	bfc4      	itt	gt
 800e846:	3b04      	subgt	r3, #4
 800e848:	9305      	strgt	r3, [sp, #20]
 800e84a:	9b05      	ldr	r3, [sp, #20]
 800e84c:	f1a3 0302 	sub.w	r3, r3, #2
 800e850:	bfcc      	ite	gt
 800e852:	2500      	movgt	r5, #0
 800e854:	2501      	movle	r5, #1
 800e856:	2b03      	cmp	r3, #3
 800e858:	d869      	bhi.n	800e92e <_dtoa_r+0x2c6>
 800e85a:	e8df f003 	tbb	[pc, r3]
 800e85e:	4e2c      	.short	0x4e2c
 800e860:	5a4c      	.short	0x5a4c
 800e862:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e866:	441d      	add	r5, r3
 800e868:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e86c:	2b20      	cmp	r3, #32
 800e86e:	bfc1      	itttt	gt
 800e870:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e874:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e878:	fa09 f303 	lslgt.w	r3, r9, r3
 800e87c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e880:	bfda      	itte	le
 800e882:	f1c3 0320 	rsble	r3, r3, #32
 800e886:	fa06 f003 	lslle.w	r0, r6, r3
 800e88a:	4318      	orrgt	r0, r3
 800e88c:	f7f1 fe4a 	bl	8000524 <__aeabi_ui2d>
 800e890:	2301      	movs	r3, #1
 800e892:	4606      	mov	r6, r0
 800e894:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e898:	3d01      	subs	r5, #1
 800e89a:	9310      	str	r3, [sp, #64]	; 0x40
 800e89c:	e771      	b.n	800e782 <_dtoa_r+0x11a>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e7b6      	b.n	800e810 <_dtoa_r+0x1a8>
 800e8a2:	900e      	str	r0, [sp, #56]	; 0x38
 800e8a4:	e7b5      	b.n	800e812 <_dtoa_r+0x1aa>
 800e8a6:	f1ca 0300 	rsb	r3, sl, #0
 800e8aa:	9306      	str	r3, [sp, #24]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	eba8 080a 	sub.w	r8, r8, sl
 800e8b2:	930d      	str	r3, [sp, #52]	; 0x34
 800e8b4:	e7c2      	b.n	800e83c <_dtoa_r+0x1d4>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	9308      	str	r3, [sp, #32]
 800e8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	dc39      	bgt.n	800e934 <_dtoa_r+0x2cc>
 800e8c0:	f04f 0901 	mov.w	r9, #1
 800e8c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e8c8:	464b      	mov	r3, r9
 800e8ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e8ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	6042      	str	r2, [r0, #4]
 800e8d4:	2204      	movs	r2, #4
 800e8d6:	f102 0614 	add.w	r6, r2, #20
 800e8da:	429e      	cmp	r6, r3
 800e8dc:	6841      	ldr	r1, [r0, #4]
 800e8de:	d92f      	bls.n	800e940 <_dtoa_r+0x2d8>
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f000 fcb9 	bl	800f258 <_Balloc>
 800e8e6:	9000      	str	r0, [sp, #0]
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d14b      	bne.n	800e984 <_dtoa_r+0x31c>
 800e8ec:	4b24      	ldr	r3, [pc, #144]	; (800e980 <_dtoa_r+0x318>)
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e8f4:	e6d1      	b.n	800e69a <_dtoa_r+0x32>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e7de      	b.n	800e8b8 <_dtoa_r+0x250>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9308      	str	r3, [sp, #32]
 800e8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e900:	eb0a 0903 	add.w	r9, sl, r3
 800e904:	f109 0301 	add.w	r3, r9, #1
 800e908:	2b01      	cmp	r3, #1
 800e90a:	9301      	str	r3, [sp, #4]
 800e90c:	bfb8      	it	lt
 800e90e:	2301      	movlt	r3, #1
 800e910:	e7dd      	b.n	800e8ce <_dtoa_r+0x266>
 800e912:	2301      	movs	r3, #1
 800e914:	e7f2      	b.n	800e8fc <_dtoa_r+0x294>
 800e916:	2501      	movs	r5, #1
 800e918:	2300      	movs	r3, #0
 800e91a:	9305      	str	r3, [sp, #20]
 800e91c:	9508      	str	r5, [sp, #32]
 800e91e:	f04f 39ff 	mov.w	r9, #4294967295
 800e922:	2200      	movs	r2, #0
 800e924:	f8cd 9004 	str.w	r9, [sp, #4]
 800e928:	2312      	movs	r3, #18
 800e92a:	9209      	str	r2, [sp, #36]	; 0x24
 800e92c:	e7cf      	b.n	800e8ce <_dtoa_r+0x266>
 800e92e:	2301      	movs	r3, #1
 800e930:	9308      	str	r3, [sp, #32]
 800e932:	e7f4      	b.n	800e91e <_dtoa_r+0x2b6>
 800e934:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e938:	f8cd 9004 	str.w	r9, [sp, #4]
 800e93c:	464b      	mov	r3, r9
 800e93e:	e7c6      	b.n	800e8ce <_dtoa_r+0x266>
 800e940:	3101      	adds	r1, #1
 800e942:	6041      	str	r1, [r0, #4]
 800e944:	0052      	lsls	r2, r2, #1
 800e946:	e7c6      	b.n	800e8d6 <_dtoa_r+0x26e>
 800e948:	636f4361 	.word	0x636f4361
 800e94c:	3fd287a7 	.word	0x3fd287a7
 800e950:	8b60c8b3 	.word	0x8b60c8b3
 800e954:	3fc68a28 	.word	0x3fc68a28
 800e958:	509f79fb 	.word	0x509f79fb
 800e95c:	3fd34413 	.word	0x3fd34413
 800e960:	080129bd 	.word	0x080129bd
 800e964:	080129d4 	.word	0x080129d4
 800e968:	7ff00000 	.word	0x7ff00000
 800e96c:	080129b9 	.word	0x080129b9
 800e970:	080129b0 	.word	0x080129b0
 800e974:	0801298d 	.word	0x0801298d
 800e978:	3ff80000 	.word	0x3ff80000
 800e97c:	08012ad0 	.word	0x08012ad0
 800e980:	08012a33 	.word	0x08012a33
 800e984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e986:	9a00      	ldr	r2, [sp, #0]
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	9b01      	ldr	r3, [sp, #4]
 800e98c:	2b0e      	cmp	r3, #14
 800e98e:	f200 80ad 	bhi.w	800eaec <_dtoa_r+0x484>
 800e992:	2d00      	cmp	r5, #0
 800e994:	f000 80aa 	beq.w	800eaec <_dtoa_r+0x484>
 800e998:	f1ba 0f00 	cmp.w	sl, #0
 800e99c:	dd36      	ble.n	800ea0c <_dtoa_r+0x3a4>
 800e99e:	4ac3      	ldr	r2, [pc, #780]	; (800ecac <_dtoa_r+0x644>)
 800e9a0:	f00a 030f 	and.w	r3, sl, #15
 800e9a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e9a8:	ed93 7b00 	vldr	d7, [r3]
 800e9ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e9b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e9b4:	eeb0 8a47 	vmov.f32	s16, s14
 800e9b8:	eef0 8a67 	vmov.f32	s17, s15
 800e9bc:	d016      	beq.n	800e9ec <_dtoa_r+0x384>
 800e9be:	4bbc      	ldr	r3, [pc, #752]	; (800ecb0 <_dtoa_r+0x648>)
 800e9c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e9c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9c8:	f7f1 ff50 	bl	800086c <__aeabi_ddiv>
 800e9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9d0:	f007 070f 	and.w	r7, r7, #15
 800e9d4:	2503      	movs	r5, #3
 800e9d6:	4eb6      	ldr	r6, [pc, #728]	; (800ecb0 <_dtoa_r+0x648>)
 800e9d8:	b957      	cbnz	r7, 800e9f0 <_dtoa_r+0x388>
 800e9da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9de:	ec53 2b18 	vmov	r2, r3, d8
 800e9e2:	f7f1 ff43 	bl	800086c <__aeabi_ddiv>
 800e9e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ea:	e029      	b.n	800ea40 <_dtoa_r+0x3d8>
 800e9ec:	2502      	movs	r5, #2
 800e9ee:	e7f2      	b.n	800e9d6 <_dtoa_r+0x36e>
 800e9f0:	07f9      	lsls	r1, r7, #31
 800e9f2:	d508      	bpl.n	800ea06 <_dtoa_r+0x39e>
 800e9f4:	ec51 0b18 	vmov	r0, r1, d8
 800e9f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e9fc:	f7f1 fe0c 	bl	8000618 <__aeabi_dmul>
 800ea00:	ec41 0b18 	vmov	d8, r0, r1
 800ea04:	3501      	adds	r5, #1
 800ea06:	107f      	asrs	r7, r7, #1
 800ea08:	3608      	adds	r6, #8
 800ea0a:	e7e5      	b.n	800e9d8 <_dtoa_r+0x370>
 800ea0c:	f000 80a6 	beq.w	800eb5c <_dtoa_r+0x4f4>
 800ea10:	f1ca 0600 	rsb	r6, sl, #0
 800ea14:	4ba5      	ldr	r3, [pc, #660]	; (800ecac <_dtoa_r+0x644>)
 800ea16:	4fa6      	ldr	r7, [pc, #664]	; (800ecb0 <_dtoa_r+0x648>)
 800ea18:	f006 020f 	and.w	r2, r6, #15
 800ea1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea28:	f7f1 fdf6 	bl	8000618 <__aeabi_dmul>
 800ea2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea30:	1136      	asrs	r6, r6, #4
 800ea32:	2300      	movs	r3, #0
 800ea34:	2502      	movs	r5, #2
 800ea36:	2e00      	cmp	r6, #0
 800ea38:	f040 8085 	bne.w	800eb46 <_dtoa_r+0x4de>
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1d2      	bne.n	800e9e6 <_dtoa_r+0x37e>
 800ea40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f000 808c 	beq.w	800eb60 <_dtoa_r+0x4f8>
 800ea48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea4c:	4b99      	ldr	r3, [pc, #612]	; (800ecb4 <_dtoa_r+0x64c>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4630      	mov	r0, r6
 800ea52:	4639      	mov	r1, r7
 800ea54:	f7f2 f852 	bl	8000afc <__aeabi_dcmplt>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	f000 8081 	beq.w	800eb60 <_dtoa_r+0x4f8>
 800ea5e:	9b01      	ldr	r3, [sp, #4]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d07d      	beq.n	800eb60 <_dtoa_r+0x4f8>
 800ea64:	f1b9 0f00 	cmp.w	r9, #0
 800ea68:	dd3c      	ble.n	800eae4 <_dtoa_r+0x47c>
 800ea6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ea6e:	9307      	str	r3, [sp, #28]
 800ea70:	2200      	movs	r2, #0
 800ea72:	4b91      	ldr	r3, [pc, #580]	; (800ecb8 <_dtoa_r+0x650>)
 800ea74:	4630      	mov	r0, r6
 800ea76:	4639      	mov	r1, r7
 800ea78:	f7f1 fdce 	bl	8000618 <__aeabi_dmul>
 800ea7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea80:	3501      	adds	r5, #1
 800ea82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ea86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f7f1 fd5a 	bl	8000544 <__aeabi_i2d>
 800ea90:	4632      	mov	r2, r6
 800ea92:	463b      	mov	r3, r7
 800ea94:	f7f1 fdc0 	bl	8000618 <__aeabi_dmul>
 800ea98:	4b88      	ldr	r3, [pc, #544]	; (800ecbc <_dtoa_r+0x654>)
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f7f1 fc06 	bl	80002ac <__adddf3>
 800eaa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eaa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eaa8:	9303      	str	r3, [sp, #12]
 800eaaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d15c      	bne.n	800eb6a <_dtoa_r+0x502>
 800eab0:	4b83      	ldr	r3, [pc, #524]	; (800ecc0 <_dtoa_r+0x658>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	4630      	mov	r0, r6
 800eab6:	4639      	mov	r1, r7
 800eab8:	f7f1 fbf6 	bl	80002a8 <__aeabi_dsub>
 800eabc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eac0:	4606      	mov	r6, r0
 800eac2:	460f      	mov	r7, r1
 800eac4:	f7f2 f838 	bl	8000b38 <__aeabi_dcmpgt>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	f040 8296 	bne.w	800effa <_dtoa_r+0x992>
 800eace:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ead2:	4630      	mov	r0, r6
 800ead4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ead8:	4639      	mov	r1, r7
 800eada:	f7f2 f80f 	bl	8000afc <__aeabi_dcmplt>
 800eade:	2800      	cmp	r0, #0
 800eae0:	f040 8288 	bne.w	800eff4 <_dtoa_r+0x98c>
 800eae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f2c0 8158 	blt.w	800eda4 <_dtoa_r+0x73c>
 800eaf4:	f1ba 0f0e 	cmp.w	sl, #14
 800eaf8:	f300 8154 	bgt.w	800eda4 <_dtoa_r+0x73c>
 800eafc:	4b6b      	ldr	r3, [pc, #428]	; (800ecac <_dtoa_r+0x644>)
 800eafe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f280 80e3 	bge.w	800ecd4 <_dtoa_r+0x66c>
 800eb0e:	9b01      	ldr	r3, [sp, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f300 80df 	bgt.w	800ecd4 <_dtoa_r+0x66c>
 800eb16:	f040 826d 	bne.w	800eff4 <_dtoa_r+0x98c>
 800eb1a:	4b69      	ldr	r3, [pc, #420]	; (800ecc0 <_dtoa_r+0x658>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	4640      	mov	r0, r8
 800eb20:	4649      	mov	r1, r9
 800eb22:	f7f1 fd79 	bl	8000618 <__aeabi_dmul>
 800eb26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb2a:	f7f1 fffb 	bl	8000b24 <__aeabi_dcmpge>
 800eb2e:	9e01      	ldr	r6, [sp, #4]
 800eb30:	4637      	mov	r7, r6
 800eb32:	2800      	cmp	r0, #0
 800eb34:	f040 8243 	bne.w	800efbe <_dtoa_r+0x956>
 800eb38:	9d00      	ldr	r5, [sp, #0]
 800eb3a:	2331      	movs	r3, #49	; 0x31
 800eb3c:	f805 3b01 	strb.w	r3, [r5], #1
 800eb40:	f10a 0a01 	add.w	sl, sl, #1
 800eb44:	e23f      	b.n	800efc6 <_dtoa_r+0x95e>
 800eb46:	07f2      	lsls	r2, r6, #31
 800eb48:	d505      	bpl.n	800eb56 <_dtoa_r+0x4ee>
 800eb4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb4e:	f7f1 fd63 	bl	8000618 <__aeabi_dmul>
 800eb52:	3501      	adds	r5, #1
 800eb54:	2301      	movs	r3, #1
 800eb56:	1076      	asrs	r6, r6, #1
 800eb58:	3708      	adds	r7, #8
 800eb5a:	e76c      	b.n	800ea36 <_dtoa_r+0x3ce>
 800eb5c:	2502      	movs	r5, #2
 800eb5e:	e76f      	b.n	800ea40 <_dtoa_r+0x3d8>
 800eb60:	9b01      	ldr	r3, [sp, #4]
 800eb62:	f8cd a01c 	str.w	sl, [sp, #28]
 800eb66:	930c      	str	r3, [sp, #48]	; 0x30
 800eb68:	e78d      	b.n	800ea86 <_dtoa_r+0x41e>
 800eb6a:	9900      	ldr	r1, [sp, #0]
 800eb6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eb6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb70:	4b4e      	ldr	r3, [pc, #312]	; (800ecac <_dtoa_r+0x644>)
 800eb72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb76:	4401      	add	r1, r0
 800eb78:	9102      	str	r1, [sp, #8]
 800eb7a:	9908      	ldr	r1, [sp, #32]
 800eb7c:	eeb0 8a47 	vmov.f32	s16, s14
 800eb80:	eef0 8a67 	vmov.f32	s17, s15
 800eb84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	d045      	beq.n	800ec1c <_dtoa_r+0x5b4>
 800eb90:	494c      	ldr	r1, [pc, #304]	; (800ecc4 <_dtoa_r+0x65c>)
 800eb92:	2000      	movs	r0, #0
 800eb94:	f7f1 fe6a 	bl	800086c <__aeabi_ddiv>
 800eb98:	ec53 2b18 	vmov	r2, r3, d8
 800eb9c:	f7f1 fb84 	bl	80002a8 <__aeabi_dsub>
 800eba0:	9d00      	ldr	r5, [sp, #0]
 800eba2:	ec41 0b18 	vmov	d8, r0, r1
 800eba6:	4639      	mov	r1, r7
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f7f1 ffe5 	bl	8000b78 <__aeabi_d2iz>
 800ebae:	900c      	str	r0, [sp, #48]	; 0x30
 800ebb0:	f7f1 fcc8 	bl	8000544 <__aeabi_i2d>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4630      	mov	r0, r6
 800ebba:	4639      	mov	r1, r7
 800ebbc:	f7f1 fb74 	bl	80002a8 <__aeabi_dsub>
 800ebc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebc2:	3330      	adds	r3, #48	; 0x30
 800ebc4:	f805 3b01 	strb.w	r3, [r5], #1
 800ebc8:	ec53 2b18 	vmov	r2, r3, d8
 800ebcc:	4606      	mov	r6, r0
 800ebce:	460f      	mov	r7, r1
 800ebd0:	f7f1 ff94 	bl	8000afc <__aeabi_dcmplt>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d165      	bne.n	800eca4 <_dtoa_r+0x63c>
 800ebd8:	4632      	mov	r2, r6
 800ebda:	463b      	mov	r3, r7
 800ebdc:	4935      	ldr	r1, [pc, #212]	; (800ecb4 <_dtoa_r+0x64c>)
 800ebde:	2000      	movs	r0, #0
 800ebe0:	f7f1 fb62 	bl	80002a8 <__aeabi_dsub>
 800ebe4:	ec53 2b18 	vmov	r2, r3, d8
 800ebe8:	f7f1 ff88 	bl	8000afc <__aeabi_dcmplt>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	f040 80b9 	bne.w	800ed64 <_dtoa_r+0x6fc>
 800ebf2:	9b02      	ldr	r3, [sp, #8]
 800ebf4:	429d      	cmp	r5, r3
 800ebf6:	f43f af75 	beq.w	800eae4 <_dtoa_r+0x47c>
 800ebfa:	4b2f      	ldr	r3, [pc, #188]	; (800ecb8 <_dtoa_r+0x650>)
 800ebfc:	ec51 0b18 	vmov	r0, r1, d8
 800ec00:	2200      	movs	r2, #0
 800ec02:	f7f1 fd09 	bl	8000618 <__aeabi_dmul>
 800ec06:	4b2c      	ldr	r3, [pc, #176]	; (800ecb8 <_dtoa_r+0x650>)
 800ec08:	ec41 0b18 	vmov	d8, r0, r1
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	4630      	mov	r0, r6
 800ec10:	4639      	mov	r1, r7
 800ec12:	f7f1 fd01 	bl	8000618 <__aeabi_dmul>
 800ec16:	4606      	mov	r6, r0
 800ec18:	460f      	mov	r7, r1
 800ec1a:	e7c4      	b.n	800eba6 <_dtoa_r+0x53e>
 800ec1c:	ec51 0b17 	vmov	r0, r1, d7
 800ec20:	f7f1 fcfa 	bl	8000618 <__aeabi_dmul>
 800ec24:	9b02      	ldr	r3, [sp, #8]
 800ec26:	9d00      	ldr	r5, [sp, #0]
 800ec28:	930c      	str	r3, [sp, #48]	; 0x30
 800ec2a:	ec41 0b18 	vmov	d8, r0, r1
 800ec2e:	4639      	mov	r1, r7
 800ec30:	4630      	mov	r0, r6
 800ec32:	f7f1 ffa1 	bl	8000b78 <__aeabi_d2iz>
 800ec36:	9011      	str	r0, [sp, #68]	; 0x44
 800ec38:	f7f1 fc84 	bl	8000544 <__aeabi_i2d>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	4630      	mov	r0, r6
 800ec42:	4639      	mov	r1, r7
 800ec44:	f7f1 fb30 	bl	80002a8 <__aeabi_dsub>
 800ec48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec4a:	3330      	adds	r3, #48	; 0x30
 800ec4c:	f805 3b01 	strb.w	r3, [r5], #1
 800ec50:	9b02      	ldr	r3, [sp, #8]
 800ec52:	429d      	cmp	r5, r3
 800ec54:	4606      	mov	r6, r0
 800ec56:	460f      	mov	r7, r1
 800ec58:	f04f 0200 	mov.w	r2, #0
 800ec5c:	d134      	bne.n	800ecc8 <_dtoa_r+0x660>
 800ec5e:	4b19      	ldr	r3, [pc, #100]	; (800ecc4 <_dtoa_r+0x65c>)
 800ec60:	ec51 0b18 	vmov	r0, r1, d8
 800ec64:	f7f1 fb22 	bl	80002ac <__adddf3>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	4639      	mov	r1, r7
 800ec70:	f7f1 ff62 	bl	8000b38 <__aeabi_dcmpgt>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d175      	bne.n	800ed64 <_dtoa_r+0x6fc>
 800ec78:	ec53 2b18 	vmov	r2, r3, d8
 800ec7c:	4911      	ldr	r1, [pc, #68]	; (800ecc4 <_dtoa_r+0x65c>)
 800ec7e:	2000      	movs	r0, #0
 800ec80:	f7f1 fb12 	bl	80002a8 <__aeabi_dsub>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	4630      	mov	r0, r6
 800ec8a:	4639      	mov	r1, r7
 800ec8c:	f7f1 ff36 	bl	8000afc <__aeabi_dcmplt>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	f43f af27 	beq.w	800eae4 <_dtoa_r+0x47c>
 800ec96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec98:	1e6b      	subs	r3, r5, #1
 800ec9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ec9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eca0:	2b30      	cmp	r3, #48	; 0x30
 800eca2:	d0f8      	beq.n	800ec96 <_dtoa_r+0x62e>
 800eca4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eca8:	e04a      	b.n	800ed40 <_dtoa_r+0x6d8>
 800ecaa:	bf00      	nop
 800ecac:	08012ad0 	.word	0x08012ad0
 800ecb0:	08012aa8 	.word	0x08012aa8
 800ecb4:	3ff00000 	.word	0x3ff00000
 800ecb8:	40240000 	.word	0x40240000
 800ecbc:	401c0000 	.word	0x401c0000
 800ecc0:	40140000 	.word	0x40140000
 800ecc4:	3fe00000 	.word	0x3fe00000
 800ecc8:	4baf      	ldr	r3, [pc, #700]	; (800ef88 <_dtoa_r+0x920>)
 800ecca:	f7f1 fca5 	bl	8000618 <__aeabi_dmul>
 800ecce:	4606      	mov	r6, r0
 800ecd0:	460f      	mov	r7, r1
 800ecd2:	e7ac      	b.n	800ec2e <_dtoa_r+0x5c6>
 800ecd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ecd8:	9d00      	ldr	r5, [sp, #0]
 800ecda:	4642      	mov	r2, r8
 800ecdc:	464b      	mov	r3, r9
 800ecde:	4630      	mov	r0, r6
 800ece0:	4639      	mov	r1, r7
 800ece2:	f7f1 fdc3 	bl	800086c <__aeabi_ddiv>
 800ece6:	f7f1 ff47 	bl	8000b78 <__aeabi_d2iz>
 800ecea:	9002      	str	r0, [sp, #8]
 800ecec:	f7f1 fc2a 	bl	8000544 <__aeabi_i2d>
 800ecf0:	4642      	mov	r2, r8
 800ecf2:	464b      	mov	r3, r9
 800ecf4:	f7f1 fc90 	bl	8000618 <__aeabi_dmul>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	4639      	mov	r1, r7
 800ed00:	f7f1 fad2 	bl	80002a8 <__aeabi_dsub>
 800ed04:	9e02      	ldr	r6, [sp, #8]
 800ed06:	9f01      	ldr	r7, [sp, #4]
 800ed08:	3630      	adds	r6, #48	; 0x30
 800ed0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ed0e:	9e00      	ldr	r6, [sp, #0]
 800ed10:	1bae      	subs	r6, r5, r6
 800ed12:	42b7      	cmp	r7, r6
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	d137      	bne.n	800ed8a <_dtoa_r+0x722>
 800ed1a:	f7f1 fac7 	bl	80002ac <__adddf3>
 800ed1e:	4642      	mov	r2, r8
 800ed20:	464b      	mov	r3, r9
 800ed22:	4606      	mov	r6, r0
 800ed24:	460f      	mov	r7, r1
 800ed26:	f7f1 ff07 	bl	8000b38 <__aeabi_dcmpgt>
 800ed2a:	b9c8      	cbnz	r0, 800ed60 <_dtoa_r+0x6f8>
 800ed2c:	4642      	mov	r2, r8
 800ed2e:	464b      	mov	r3, r9
 800ed30:	4630      	mov	r0, r6
 800ed32:	4639      	mov	r1, r7
 800ed34:	f7f1 fed8 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed38:	b110      	cbz	r0, 800ed40 <_dtoa_r+0x6d8>
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	07d9      	lsls	r1, r3, #31
 800ed3e:	d40f      	bmi.n	800ed60 <_dtoa_r+0x6f8>
 800ed40:	4620      	mov	r0, r4
 800ed42:	4659      	mov	r1, fp
 800ed44:	f000 fac8 	bl	800f2d8 <_Bfree>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	702b      	strb	r3, [r5, #0]
 800ed4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed4e:	f10a 0001 	add.w	r0, sl, #1
 800ed52:	6018      	str	r0, [r3, #0]
 800ed54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f43f acd8 	beq.w	800e70c <_dtoa_r+0xa4>
 800ed5c:	601d      	str	r5, [r3, #0]
 800ed5e:	e4d5      	b.n	800e70c <_dtoa_r+0xa4>
 800ed60:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed64:	462b      	mov	r3, r5
 800ed66:	461d      	mov	r5, r3
 800ed68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed6c:	2a39      	cmp	r2, #57	; 0x39
 800ed6e:	d108      	bne.n	800ed82 <_dtoa_r+0x71a>
 800ed70:	9a00      	ldr	r2, [sp, #0]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d1f7      	bne.n	800ed66 <_dtoa_r+0x6fe>
 800ed76:	9a07      	ldr	r2, [sp, #28]
 800ed78:	9900      	ldr	r1, [sp, #0]
 800ed7a:	3201      	adds	r2, #1
 800ed7c:	9207      	str	r2, [sp, #28]
 800ed7e:	2230      	movs	r2, #48	; 0x30
 800ed80:	700a      	strb	r2, [r1, #0]
 800ed82:	781a      	ldrb	r2, [r3, #0]
 800ed84:	3201      	adds	r2, #1
 800ed86:	701a      	strb	r2, [r3, #0]
 800ed88:	e78c      	b.n	800eca4 <_dtoa_r+0x63c>
 800ed8a:	4b7f      	ldr	r3, [pc, #508]	; (800ef88 <_dtoa_r+0x920>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f7f1 fc43 	bl	8000618 <__aeabi_dmul>
 800ed92:	2200      	movs	r2, #0
 800ed94:	2300      	movs	r3, #0
 800ed96:	4606      	mov	r6, r0
 800ed98:	460f      	mov	r7, r1
 800ed9a:	f7f1 fea5 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	d09b      	beq.n	800ecda <_dtoa_r+0x672>
 800eda2:	e7cd      	b.n	800ed40 <_dtoa_r+0x6d8>
 800eda4:	9a08      	ldr	r2, [sp, #32]
 800eda6:	2a00      	cmp	r2, #0
 800eda8:	f000 80c4 	beq.w	800ef34 <_dtoa_r+0x8cc>
 800edac:	9a05      	ldr	r2, [sp, #20]
 800edae:	2a01      	cmp	r2, #1
 800edb0:	f300 80a8 	bgt.w	800ef04 <_dtoa_r+0x89c>
 800edb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800edb6:	2a00      	cmp	r2, #0
 800edb8:	f000 80a0 	beq.w	800eefc <_dtoa_r+0x894>
 800edbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800edc0:	9e06      	ldr	r6, [sp, #24]
 800edc2:	4645      	mov	r5, r8
 800edc4:	9a04      	ldr	r2, [sp, #16]
 800edc6:	2101      	movs	r1, #1
 800edc8:	441a      	add	r2, r3
 800edca:	4620      	mov	r0, r4
 800edcc:	4498      	add	r8, r3
 800edce:	9204      	str	r2, [sp, #16]
 800edd0:	f000 fb3e 	bl	800f450 <__i2b>
 800edd4:	4607      	mov	r7, r0
 800edd6:	2d00      	cmp	r5, #0
 800edd8:	dd0b      	ble.n	800edf2 <_dtoa_r+0x78a>
 800edda:	9b04      	ldr	r3, [sp, #16]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	dd08      	ble.n	800edf2 <_dtoa_r+0x78a>
 800ede0:	42ab      	cmp	r3, r5
 800ede2:	9a04      	ldr	r2, [sp, #16]
 800ede4:	bfa8      	it	ge
 800ede6:	462b      	movge	r3, r5
 800ede8:	eba8 0803 	sub.w	r8, r8, r3
 800edec:	1aed      	subs	r5, r5, r3
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	9304      	str	r3, [sp, #16]
 800edf2:	9b06      	ldr	r3, [sp, #24]
 800edf4:	b1fb      	cbz	r3, 800ee36 <_dtoa_r+0x7ce>
 800edf6:	9b08      	ldr	r3, [sp, #32]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 809f 	beq.w	800ef3c <_dtoa_r+0x8d4>
 800edfe:	2e00      	cmp	r6, #0
 800ee00:	dd11      	ble.n	800ee26 <_dtoa_r+0x7be>
 800ee02:	4639      	mov	r1, r7
 800ee04:	4632      	mov	r2, r6
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 fbde 	bl	800f5c8 <__pow5mult>
 800ee0c:	465a      	mov	r2, fp
 800ee0e:	4601      	mov	r1, r0
 800ee10:	4607      	mov	r7, r0
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 fb32 	bl	800f47c <__multiply>
 800ee18:	4659      	mov	r1, fp
 800ee1a:	9007      	str	r0, [sp, #28]
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f000 fa5b 	bl	800f2d8 <_Bfree>
 800ee22:	9b07      	ldr	r3, [sp, #28]
 800ee24:	469b      	mov	fp, r3
 800ee26:	9b06      	ldr	r3, [sp, #24]
 800ee28:	1b9a      	subs	r2, r3, r6
 800ee2a:	d004      	beq.n	800ee36 <_dtoa_r+0x7ce>
 800ee2c:	4659      	mov	r1, fp
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f000 fbca 	bl	800f5c8 <__pow5mult>
 800ee34:	4683      	mov	fp, r0
 800ee36:	2101      	movs	r1, #1
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 fb09 	bl	800f450 <__i2b>
 800ee3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	4606      	mov	r6, r0
 800ee44:	dd7c      	ble.n	800ef40 <_dtoa_r+0x8d8>
 800ee46:	461a      	mov	r2, r3
 800ee48:	4601      	mov	r1, r0
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f000 fbbc 	bl	800f5c8 <__pow5mult>
 800ee50:	9b05      	ldr	r3, [sp, #20]
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	4606      	mov	r6, r0
 800ee56:	dd76      	ble.n	800ef46 <_dtoa_r+0x8de>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9306      	str	r3, [sp, #24]
 800ee5c:	6933      	ldr	r3, [r6, #16]
 800ee5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ee62:	6918      	ldr	r0, [r3, #16]
 800ee64:	f000 faa4 	bl	800f3b0 <__hi0bits>
 800ee68:	f1c0 0020 	rsb	r0, r0, #32
 800ee6c:	9b04      	ldr	r3, [sp, #16]
 800ee6e:	4418      	add	r0, r3
 800ee70:	f010 001f 	ands.w	r0, r0, #31
 800ee74:	f000 8086 	beq.w	800ef84 <_dtoa_r+0x91c>
 800ee78:	f1c0 0320 	rsb	r3, r0, #32
 800ee7c:	2b04      	cmp	r3, #4
 800ee7e:	dd7f      	ble.n	800ef80 <_dtoa_r+0x918>
 800ee80:	f1c0 001c 	rsb	r0, r0, #28
 800ee84:	9b04      	ldr	r3, [sp, #16]
 800ee86:	4403      	add	r3, r0
 800ee88:	4480      	add	r8, r0
 800ee8a:	4405      	add	r5, r0
 800ee8c:	9304      	str	r3, [sp, #16]
 800ee8e:	f1b8 0f00 	cmp.w	r8, #0
 800ee92:	dd05      	ble.n	800eea0 <_dtoa_r+0x838>
 800ee94:	4659      	mov	r1, fp
 800ee96:	4642      	mov	r2, r8
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f000 fbef 	bl	800f67c <__lshift>
 800ee9e:	4683      	mov	fp, r0
 800eea0:	9b04      	ldr	r3, [sp, #16]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	dd05      	ble.n	800eeb2 <_dtoa_r+0x84a>
 800eea6:	4631      	mov	r1, r6
 800eea8:	461a      	mov	r2, r3
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 fbe6 	bl	800f67c <__lshift>
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d069      	beq.n	800ef8c <_dtoa_r+0x924>
 800eeb8:	4631      	mov	r1, r6
 800eeba:	4658      	mov	r0, fp
 800eebc:	f000 fc4a 	bl	800f754 <__mcmp>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	da63      	bge.n	800ef8c <_dtoa_r+0x924>
 800eec4:	2300      	movs	r3, #0
 800eec6:	4659      	mov	r1, fp
 800eec8:	220a      	movs	r2, #10
 800eeca:	4620      	mov	r0, r4
 800eecc:	f000 fa26 	bl	800f31c <__multadd>
 800eed0:	9b08      	ldr	r3, [sp, #32]
 800eed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eed6:	4683      	mov	fp, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f000 818f 	beq.w	800f1fc <_dtoa_r+0xb94>
 800eede:	4639      	mov	r1, r7
 800eee0:	2300      	movs	r3, #0
 800eee2:	220a      	movs	r2, #10
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fa19 	bl	800f31c <__multadd>
 800eeea:	f1b9 0f00 	cmp.w	r9, #0
 800eeee:	4607      	mov	r7, r0
 800eef0:	f300 808e 	bgt.w	800f010 <_dtoa_r+0x9a8>
 800eef4:	9b05      	ldr	r3, [sp, #20]
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	dc50      	bgt.n	800ef9c <_dtoa_r+0x934>
 800eefa:	e089      	b.n	800f010 <_dtoa_r+0x9a8>
 800eefc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eefe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ef02:	e75d      	b.n	800edc0 <_dtoa_r+0x758>
 800ef04:	9b01      	ldr	r3, [sp, #4]
 800ef06:	1e5e      	subs	r6, r3, #1
 800ef08:	9b06      	ldr	r3, [sp, #24]
 800ef0a:	42b3      	cmp	r3, r6
 800ef0c:	bfbf      	itttt	lt
 800ef0e:	9b06      	ldrlt	r3, [sp, #24]
 800ef10:	9606      	strlt	r6, [sp, #24]
 800ef12:	1af2      	sublt	r2, r6, r3
 800ef14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ef16:	bfb6      	itet	lt
 800ef18:	189b      	addlt	r3, r3, r2
 800ef1a:	1b9e      	subge	r6, r3, r6
 800ef1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ef1e:	9b01      	ldr	r3, [sp, #4]
 800ef20:	bfb8      	it	lt
 800ef22:	2600      	movlt	r6, #0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	bfb5      	itete	lt
 800ef28:	eba8 0503 	sublt.w	r5, r8, r3
 800ef2c:	9b01      	ldrge	r3, [sp, #4]
 800ef2e:	2300      	movlt	r3, #0
 800ef30:	4645      	movge	r5, r8
 800ef32:	e747      	b.n	800edc4 <_dtoa_r+0x75c>
 800ef34:	9e06      	ldr	r6, [sp, #24]
 800ef36:	9f08      	ldr	r7, [sp, #32]
 800ef38:	4645      	mov	r5, r8
 800ef3a:	e74c      	b.n	800edd6 <_dtoa_r+0x76e>
 800ef3c:	9a06      	ldr	r2, [sp, #24]
 800ef3e:	e775      	b.n	800ee2c <_dtoa_r+0x7c4>
 800ef40:	9b05      	ldr	r3, [sp, #20]
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	dc18      	bgt.n	800ef78 <_dtoa_r+0x910>
 800ef46:	9b02      	ldr	r3, [sp, #8]
 800ef48:	b9b3      	cbnz	r3, 800ef78 <_dtoa_r+0x910>
 800ef4a:	9b03      	ldr	r3, [sp, #12]
 800ef4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef50:	b9a3      	cbnz	r3, 800ef7c <_dtoa_r+0x914>
 800ef52:	9b03      	ldr	r3, [sp, #12]
 800ef54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef58:	0d1b      	lsrs	r3, r3, #20
 800ef5a:	051b      	lsls	r3, r3, #20
 800ef5c:	b12b      	cbz	r3, 800ef6a <_dtoa_r+0x902>
 800ef5e:	9b04      	ldr	r3, [sp, #16]
 800ef60:	3301      	adds	r3, #1
 800ef62:	9304      	str	r3, [sp, #16]
 800ef64:	f108 0801 	add.w	r8, r8, #1
 800ef68:	2301      	movs	r3, #1
 800ef6a:	9306      	str	r3, [sp, #24]
 800ef6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f47f af74 	bne.w	800ee5c <_dtoa_r+0x7f4>
 800ef74:	2001      	movs	r0, #1
 800ef76:	e779      	b.n	800ee6c <_dtoa_r+0x804>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	e7f6      	b.n	800ef6a <_dtoa_r+0x902>
 800ef7c:	9b02      	ldr	r3, [sp, #8]
 800ef7e:	e7f4      	b.n	800ef6a <_dtoa_r+0x902>
 800ef80:	d085      	beq.n	800ee8e <_dtoa_r+0x826>
 800ef82:	4618      	mov	r0, r3
 800ef84:	301c      	adds	r0, #28
 800ef86:	e77d      	b.n	800ee84 <_dtoa_r+0x81c>
 800ef88:	40240000 	.word	0x40240000
 800ef8c:	9b01      	ldr	r3, [sp, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	dc38      	bgt.n	800f004 <_dtoa_r+0x99c>
 800ef92:	9b05      	ldr	r3, [sp, #20]
 800ef94:	2b02      	cmp	r3, #2
 800ef96:	dd35      	ble.n	800f004 <_dtoa_r+0x99c>
 800ef98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ef9c:	f1b9 0f00 	cmp.w	r9, #0
 800efa0:	d10d      	bne.n	800efbe <_dtoa_r+0x956>
 800efa2:	4631      	mov	r1, r6
 800efa4:	464b      	mov	r3, r9
 800efa6:	2205      	movs	r2, #5
 800efa8:	4620      	mov	r0, r4
 800efaa:	f000 f9b7 	bl	800f31c <__multadd>
 800efae:	4601      	mov	r1, r0
 800efb0:	4606      	mov	r6, r0
 800efb2:	4658      	mov	r0, fp
 800efb4:	f000 fbce 	bl	800f754 <__mcmp>
 800efb8:	2800      	cmp	r0, #0
 800efba:	f73f adbd 	bgt.w	800eb38 <_dtoa_r+0x4d0>
 800efbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc0:	9d00      	ldr	r5, [sp, #0]
 800efc2:	ea6f 0a03 	mvn.w	sl, r3
 800efc6:	f04f 0800 	mov.w	r8, #0
 800efca:	4631      	mov	r1, r6
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 f983 	bl	800f2d8 <_Bfree>
 800efd2:	2f00      	cmp	r7, #0
 800efd4:	f43f aeb4 	beq.w	800ed40 <_dtoa_r+0x6d8>
 800efd8:	f1b8 0f00 	cmp.w	r8, #0
 800efdc:	d005      	beq.n	800efea <_dtoa_r+0x982>
 800efde:	45b8      	cmp	r8, r7
 800efe0:	d003      	beq.n	800efea <_dtoa_r+0x982>
 800efe2:	4641      	mov	r1, r8
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 f977 	bl	800f2d8 <_Bfree>
 800efea:	4639      	mov	r1, r7
 800efec:	4620      	mov	r0, r4
 800efee:	f000 f973 	bl	800f2d8 <_Bfree>
 800eff2:	e6a5      	b.n	800ed40 <_dtoa_r+0x6d8>
 800eff4:	2600      	movs	r6, #0
 800eff6:	4637      	mov	r7, r6
 800eff8:	e7e1      	b.n	800efbe <_dtoa_r+0x956>
 800effa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800effc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f000:	4637      	mov	r7, r6
 800f002:	e599      	b.n	800eb38 <_dtoa_r+0x4d0>
 800f004:	9b08      	ldr	r3, [sp, #32]
 800f006:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 80fd 	beq.w	800f20a <_dtoa_r+0xba2>
 800f010:	2d00      	cmp	r5, #0
 800f012:	dd05      	ble.n	800f020 <_dtoa_r+0x9b8>
 800f014:	4639      	mov	r1, r7
 800f016:	462a      	mov	r2, r5
 800f018:	4620      	mov	r0, r4
 800f01a:	f000 fb2f 	bl	800f67c <__lshift>
 800f01e:	4607      	mov	r7, r0
 800f020:	9b06      	ldr	r3, [sp, #24]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d05c      	beq.n	800f0e0 <_dtoa_r+0xa78>
 800f026:	6879      	ldr	r1, [r7, #4]
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 f915 	bl	800f258 <_Balloc>
 800f02e:	4605      	mov	r5, r0
 800f030:	b928      	cbnz	r0, 800f03e <_dtoa_r+0x9d6>
 800f032:	4b80      	ldr	r3, [pc, #512]	; (800f234 <_dtoa_r+0xbcc>)
 800f034:	4602      	mov	r2, r0
 800f036:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f03a:	f7ff bb2e 	b.w	800e69a <_dtoa_r+0x32>
 800f03e:	693a      	ldr	r2, [r7, #16]
 800f040:	3202      	adds	r2, #2
 800f042:	0092      	lsls	r2, r2, #2
 800f044:	f107 010c 	add.w	r1, r7, #12
 800f048:	300c      	adds	r0, #12
 800f04a:	f7fe fde1 	bl	800dc10 <memcpy>
 800f04e:	2201      	movs	r2, #1
 800f050:	4629      	mov	r1, r5
 800f052:	4620      	mov	r0, r4
 800f054:	f000 fb12 	bl	800f67c <__lshift>
 800f058:	9b00      	ldr	r3, [sp, #0]
 800f05a:	3301      	adds	r3, #1
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	9b00      	ldr	r3, [sp, #0]
 800f060:	444b      	add	r3, r9
 800f062:	9307      	str	r3, [sp, #28]
 800f064:	9b02      	ldr	r3, [sp, #8]
 800f066:	f003 0301 	and.w	r3, r3, #1
 800f06a:	46b8      	mov	r8, r7
 800f06c:	9306      	str	r3, [sp, #24]
 800f06e:	4607      	mov	r7, r0
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	4631      	mov	r1, r6
 800f074:	3b01      	subs	r3, #1
 800f076:	4658      	mov	r0, fp
 800f078:	9302      	str	r3, [sp, #8]
 800f07a:	f7ff fa69 	bl	800e550 <quorem>
 800f07e:	4603      	mov	r3, r0
 800f080:	3330      	adds	r3, #48	; 0x30
 800f082:	9004      	str	r0, [sp, #16]
 800f084:	4641      	mov	r1, r8
 800f086:	4658      	mov	r0, fp
 800f088:	9308      	str	r3, [sp, #32]
 800f08a:	f000 fb63 	bl	800f754 <__mcmp>
 800f08e:	463a      	mov	r2, r7
 800f090:	4681      	mov	r9, r0
 800f092:	4631      	mov	r1, r6
 800f094:	4620      	mov	r0, r4
 800f096:	f000 fb79 	bl	800f78c <__mdiff>
 800f09a:	68c2      	ldr	r2, [r0, #12]
 800f09c:	9b08      	ldr	r3, [sp, #32]
 800f09e:	4605      	mov	r5, r0
 800f0a0:	bb02      	cbnz	r2, 800f0e4 <_dtoa_r+0xa7c>
 800f0a2:	4601      	mov	r1, r0
 800f0a4:	4658      	mov	r0, fp
 800f0a6:	f000 fb55 	bl	800f754 <__mcmp>
 800f0aa:	9b08      	ldr	r3, [sp, #32]
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f0b6:	f000 f90f 	bl	800f2d8 <_Bfree>
 800f0ba:	9b05      	ldr	r3, [sp, #20]
 800f0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0be:	9d01      	ldr	r5, [sp, #4]
 800f0c0:	ea43 0102 	orr.w	r1, r3, r2
 800f0c4:	9b06      	ldr	r3, [sp, #24]
 800f0c6:	430b      	orrs	r3, r1
 800f0c8:	9b08      	ldr	r3, [sp, #32]
 800f0ca:	d10d      	bne.n	800f0e8 <_dtoa_r+0xa80>
 800f0cc:	2b39      	cmp	r3, #57	; 0x39
 800f0ce:	d029      	beq.n	800f124 <_dtoa_r+0xabc>
 800f0d0:	f1b9 0f00 	cmp.w	r9, #0
 800f0d4:	dd01      	ble.n	800f0da <_dtoa_r+0xa72>
 800f0d6:	9b04      	ldr	r3, [sp, #16]
 800f0d8:	3331      	adds	r3, #49	; 0x31
 800f0da:	9a02      	ldr	r2, [sp, #8]
 800f0dc:	7013      	strb	r3, [r2, #0]
 800f0de:	e774      	b.n	800efca <_dtoa_r+0x962>
 800f0e0:	4638      	mov	r0, r7
 800f0e2:	e7b9      	b.n	800f058 <_dtoa_r+0x9f0>
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	e7e2      	b.n	800f0ae <_dtoa_r+0xa46>
 800f0e8:	f1b9 0f00 	cmp.w	r9, #0
 800f0ec:	db06      	blt.n	800f0fc <_dtoa_r+0xa94>
 800f0ee:	9905      	ldr	r1, [sp, #20]
 800f0f0:	ea41 0909 	orr.w	r9, r1, r9
 800f0f4:	9906      	ldr	r1, [sp, #24]
 800f0f6:	ea59 0101 	orrs.w	r1, r9, r1
 800f0fa:	d120      	bne.n	800f13e <_dtoa_r+0xad6>
 800f0fc:	2a00      	cmp	r2, #0
 800f0fe:	ddec      	ble.n	800f0da <_dtoa_r+0xa72>
 800f100:	4659      	mov	r1, fp
 800f102:	2201      	movs	r2, #1
 800f104:	4620      	mov	r0, r4
 800f106:	9301      	str	r3, [sp, #4]
 800f108:	f000 fab8 	bl	800f67c <__lshift>
 800f10c:	4631      	mov	r1, r6
 800f10e:	4683      	mov	fp, r0
 800f110:	f000 fb20 	bl	800f754 <__mcmp>
 800f114:	2800      	cmp	r0, #0
 800f116:	9b01      	ldr	r3, [sp, #4]
 800f118:	dc02      	bgt.n	800f120 <_dtoa_r+0xab8>
 800f11a:	d1de      	bne.n	800f0da <_dtoa_r+0xa72>
 800f11c:	07da      	lsls	r2, r3, #31
 800f11e:	d5dc      	bpl.n	800f0da <_dtoa_r+0xa72>
 800f120:	2b39      	cmp	r3, #57	; 0x39
 800f122:	d1d8      	bne.n	800f0d6 <_dtoa_r+0xa6e>
 800f124:	9a02      	ldr	r2, [sp, #8]
 800f126:	2339      	movs	r3, #57	; 0x39
 800f128:	7013      	strb	r3, [r2, #0]
 800f12a:	462b      	mov	r3, r5
 800f12c:	461d      	mov	r5, r3
 800f12e:	3b01      	subs	r3, #1
 800f130:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f134:	2a39      	cmp	r2, #57	; 0x39
 800f136:	d050      	beq.n	800f1da <_dtoa_r+0xb72>
 800f138:	3201      	adds	r2, #1
 800f13a:	701a      	strb	r2, [r3, #0]
 800f13c:	e745      	b.n	800efca <_dtoa_r+0x962>
 800f13e:	2a00      	cmp	r2, #0
 800f140:	dd03      	ble.n	800f14a <_dtoa_r+0xae2>
 800f142:	2b39      	cmp	r3, #57	; 0x39
 800f144:	d0ee      	beq.n	800f124 <_dtoa_r+0xabc>
 800f146:	3301      	adds	r3, #1
 800f148:	e7c7      	b.n	800f0da <_dtoa_r+0xa72>
 800f14a:	9a01      	ldr	r2, [sp, #4]
 800f14c:	9907      	ldr	r1, [sp, #28]
 800f14e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f152:	428a      	cmp	r2, r1
 800f154:	d02a      	beq.n	800f1ac <_dtoa_r+0xb44>
 800f156:	4659      	mov	r1, fp
 800f158:	2300      	movs	r3, #0
 800f15a:	220a      	movs	r2, #10
 800f15c:	4620      	mov	r0, r4
 800f15e:	f000 f8dd 	bl	800f31c <__multadd>
 800f162:	45b8      	cmp	r8, r7
 800f164:	4683      	mov	fp, r0
 800f166:	f04f 0300 	mov.w	r3, #0
 800f16a:	f04f 020a 	mov.w	r2, #10
 800f16e:	4641      	mov	r1, r8
 800f170:	4620      	mov	r0, r4
 800f172:	d107      	bne.n	800f184 <_dtoa_r+0xb1c>
 800f174:	f000 f8d2 	bl	800f31c <__multadd>
 800f178:	4680      	mov	r8, r0
 800f17a:	4607      	mov	r7, r0
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	3301      	adds	r3, #1
 800f180:	9301      	str	r3, [sp, #4]
 800f182:	e775      	b.n	800f070 <_dtoa_r+0xa08>
 800f184:	f000 f8ca 	bl	800f31c <__multadd>
 800f188:	4639      	mov	r1, r7
 800f18a:	4680      	mov	r8, r0
 800f18c:	2300      	movs	r3, #0
 800f18e:	220a      	movs	r2, #10
 800f190:	4620      	mov	r0, r4
 800f192:	f000 f8c3 	bl	800f31c <__multadd>
 800f196:	4607      	mov	r7, r0
 800f198:	e7f0      	b.n	800f17c <_dtoa_r+0xb14>
 800f19a:	f1b9 0f00 	cmp.w	r9, #0
 800f19e:	9a00      	ldr	r2, [sp, #0]
 800f1a0:	bfcc      	ite	gt
 800f1a2:	464d      	movgt	r5, r9
 800f1a4:	2501      	movle	r5, #1
 800f1a6:	4415      	add	r5, r2
 800f1a8:	f04f 0800 	mov.w	r8, #0
 800f1ac:	4659      	mov	r1, fp
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	9301      	str	r3, [sp, #4]
 800f1b4:	f000 fa62 	bl	800f67c <__lshift>
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	4683      	mov	fp, r0
 800f1bc:	f000 faca 	bl	800f754 <__mcmp>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	dcb2      	bgt.n	800f12a <_dtoa_r+0xac2>
 800f1c4:	d102      	bne.n	800f1cc <_dtoa_r+0xb64>
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	07db      	lsls	r3, r3, #31
 800f1ca:	d4ae      	bmi.n	800f12a <_dtoa_r+0xac2>
 800f1cc:	462b      	mov	r3, r5
 800f1ce:	461d      	mov	r5, r3
 800f1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1d4:	2a30      	cmp	r2, #48	; 0x30
 800f1d6:	d0fa      	beq.n	800f1ce <_dtoa_r+0xb66>
 800f1d8:	e6f7      	b.n	800efca <_dtoa_r+0x962>
 800f1da:	9a00      	ldr	r2, [sp, #0]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d1a5      	bne.n	800f12c <_dtoa_r+0xac4>
 800f1e0:	f10a 0a01 	add.w	sl, sl, #1
 800f1e4:	2331      	movs	r3, #49	; 0x31
 800f1e6:	e779      	b.n	800f0dc <_dtoa_r+0xa74>
 800f1e8:	4b13      	ldr	r3, [pc, #76]	; (800f238 <_dtoa_r+0xbd0>)
 800f1ea:	f7ff baaf 	b.w	800e74c <_dtoa_r+0xe4>
 800f1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f47f aa86 	bne.w	800e702 <_dtoa_r+0x9a>
 800f1f6:	4b11      	ldr	r3, [pc, #68]	; (800f23c <_dtoa_r+0xbd4>)
 800f1f8:	f7ff baa8 	b.w	800e74c <_dtoa_r+0xe4>
 800f1fc:	f1b9 0f00 	cmp.w	r9, #0
 800f200:	dc03      	bgt.n	800f20a <_dtoa_r+0xba2>
 800f202:	9b05      	ldr	r3, [sp, #20]
 800f204:	2b02      	cmp	r3, #2
 800f206:	f73f aec9 	bgt.w	800ef9c <_dtoa_r+0x934>
 800f20a:	9d00      	ldr	r5, [sp, #0]
 800f20c:	4631      	mov	r1, r6
 800f20e:	4658      	mov	r0, fp
 800f210:	f7ff f99e 	bl	800e550 <quorem>
 800f214:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f218:	f805 3b01 	strb.w	r3, [r5], #1
 800f21c:	9a00      	ldr	r2, [sp, #0]
 800f21e:	1aaa      	subs	r2, r5, r2
 800f220:	4591      	cmp	r9, r2
 800f222:	ddba      	ble.n	800f19a <_dtoa_r+0xb32>
 800f224:	4659      	mov	r1, fp
 800f226:	2300      	movs	r3, #0
 800f228:	220a      	movs	r2, #10
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 f876 	bl	800f31c <__multadd>
 800f230:	4683      	mov	fp, r0
 800f232:	e7eb      	b.n	800f20c <_dtoa_r+0xba4>
 800f234:	08012a33 	.word	0x08012a33
 800f238:	0801298c 	.word	0x0801298c
 800f23c:	080129b0 	.word	0x080129b0

0800f240 <_localeconv_r>:
 800f240:	4800      	ldr	r0, [pc, #0]	; (800f244 <_localeconv_r+0x4>)
 800f242:	4770      	bx	lr
 800f244:	20000230 	.word	0x20000230

0800f248 <malloc>:
 800f248:	4b02      	ldr	r3, [pc, #8]	; (800f254 <malloc+0xc>)
 800f24a:	4601      	mov	r1, r0
 800f24c:	6818      	ldr	r0, [r3, #0]
 800f24e:	f000 bbe1 	b.w	800fa14 <_malloc_r>
 800f252:	bf00      	nop
 800f254:	200000dc 	.word	0x200000dc

0800f258 <_Balloc>:
 800f258:	b570      	push	{r4, r5, r6, lr}
 800f25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f25c:	4604      	mov	r4, r0
 800f25e:	460d      	mov	r5, r1
 800f260:	b976      	cbnz	r6, 800f280 <_Balloc+0x28>
 800f262:	2010      	movs	r0, #16
 800f264:	f7ff fff0 	bl	800f248 <malloc>
 800f268:	4602      	mov	r2, r0
 800f26a:	6260      	str	r0, [r4, #36]	; 0x24
 800f26c:	b920      	cbnz	r0, 800f278 <_Balloc+0x20>
 800f26e:	4b18      	ldr	r3, [pc, #96]	; (800f2d0 <_Balloc+0x78>)
 800f270:	4818      	ldr	r0, [pc, #96]	; (800f2d4 <_Balloc+0x7c>)
 800f272:	2166      	movs	r1, #102	; 0x66
 800f274:	f000 fd94 	bl	800fda0 <__assert_func>
 800f278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f27c:	6006      	str	r6, [r0, #0]
 800f27e:	60c6      	str	r6, [r0, #12]
 800f280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f282:	68f3      	ldr	r3, [r6, #12]
 800f284:	b183      	cbz	r3, 800f2a8 <_Balloc+0x50>
 800f286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f28e:	b9b8      	cbnz	r0, 800f2c0 <_Balloc+0x68>
 800f290:	2101      	movs	r1, #1
 800f292:	fa01 f605 	lsl.w	r6, r1, r5
 800f296:	1d72      	adds	r2, r6, #5
 800f298:	0092      	lsls	r2, r2, #2
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 fb5a 	bl	800f954 <_calloc_r>
 800f2a0:	b160      	cbz	r0, 800f2bc <_Balloc+0x64>
 800f2a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f2a6:	e00e      	b.n	800f2c6 <_Balloc+0x6e>
 800f2a8:	2221      	movs	r2, #33	; 0x21
 800f2aa:	2104      	movs	r1, #4
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f000 fb51 	bl	800f954 <_calloc_r>
 800f2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2b4:	60f0      	str	r0, [r6, #12]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1e4      	bne.n	800f286 <_Balloc+0x2e>
 800f2bc:	2000      	movs	r0, #0
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	6802      	ldr	r2, [r0, #0]
 800f2c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2cc:	e7f7      	b.n	800f2be <_Balloc+0x66>
 800f2ce:	bf00      	nop
 800f2d0:	080129bd 	.word	0x080129bd
 800f2d4:	08012a44 	.word	0x08012a44

0800f2d8 <_Bfree>:
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f2dc:	4605      	mov	r5, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	b976      	cbnz	r6, 800f300 <_Bfree+0x28>
 800f2e2:	2010      	movs	r0, #16
 800f2e4:	f7ff ffb0 	bl	800f248 <malloc>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	6268      	str	r0, [r5, #36]	; 0x24
 800f2ec:	b920      	cbnz	r0, 800f2f8 <_Bfree+0x20>
 800f2ee:	4b09      	ldr	r3, [pc, #36]	; (800f314 <_Bfree+0x3c>)
 800f2f0:	4809      	ldr	r0, [pc, #36]	; (800f318 <_Bfree+0x40>)
 800f2f2:	218a      	movs	r1, #138	; 0x8a
 800f2f4:	f000 fd54 	bl	800fda0 <__assert_func>
 800f2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2fc:	6006      	str	r6, [r0, #0]
 800f2fe:	60c6      	str	r6, [r0, #12]
 800f300:	b13c      	cbz	r4, 800f312 <_Bfree+0x3a>
 800f302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f304:	6862      	ldr	r2, [r4, #4]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f30c:	6021      	str	r1, [r4, #0]
 800f30e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f312:	bd70      	pop	{r4, r5, r6, pc}
 800f314:	080129bd 	.word	0x080129bd
 800f318:	08012a44 	.word	0x08012a44

0800f31c <__multadd>:
 800f31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f320:	690e      	ldr	r6, [r1, #16]
 800f322:	4607      	mov	r7, r0
 800f324:	4698      	mov	r8, r3
 800f326:	460c      	mov	r4, r1
 800f328:	f101 0014 	add.w	r0, r1, #20
 800f32c:	2300      	movs	r3, #0
 800f32e:	6805      	ldr	r5, [r0, #0]
 800f330:	b2a9      	uxth	r1, r5
 800f332:	fb02 8101 	mla	r1, r2, r1, r8
 800f336:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f33a:	0c2d      	lsrs	r5, r5, #16
 800f33c:	fb02 c505 	mla	r5, r2, r5, ip
 800f340:	b289      	uxth	r1, r1
 800f342:	3301      	adds	r3, #1
 800f344:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f348:	429e      	cmp	r6, r3
 800f34a:	f840 1b04 	str.w	r1, [r0], #4
 800f34e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f352:	dcec      	bgt.n	800f32e <__multadd+0x12>
 800f354:	f1b8 0f00 	cmp.w	r8, #0
 800f358:	d022      	beq.n	800f3a0 <__multadd+0x84>
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	42b3      	cmp	r3, r6
 800f35e:	dc19      	bgt.n	800f394 <__multadd+0x78>
 800f360:	6861      	ldr	r1, [r4, #4]
 800f362:	4638      	mov	r0, r7
 800f364:	3101      	adds	r1, #1
 800f366:	f7ff ff77 	bl	800f258 <_Balloc>
 800f36a:	4605      	mov	r5, r0
 800f36c:	b928      	cbnz	r0, 800f37a <__multadd+0x5e>
 800f36e:	4602      	mov	r2, r0
 800f370:	4b0d      	ldr	r3, [pc, #52]	; (800f3a8 <__multadd+0x8c>)
 800f372:	480e      	ldr	r0, [pc, #56]	; (800f3ac <__multadd+0x90>)
 800f374:	21b5      	movs	r1, #181	; 0xb5
 800f376:	f000 fd13 	bl	800fda0 <__assert_func>
 800f37a:	6922      	ldr	r2, [r4, #16]
 800f37c:	3202      	adds	r2, #2
 800f37e:	f104 010c 	add.w	r1, r4, #12
 800f382:	0092      	lsls	r2, r2, #2
 800f384:	300c      	adds	r0, #12
 800f386:	f7fe fc43 	bl	800dc10 <memcpy>
 800f38a:	4621      	mov	r1, r4
 800f38c:	4638      	mov	r0, r7
 800f38e:	f7ff ffa3 	bl	800f2d8 <_Bfree>
 800f392:	462c      	mov	r4, r5
 800f394:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f398:	3601      	adds	r6, #1
 800f39a:	f8c3 8014 	str.w	r8, [r3, #20]
 800f39e:	6126      	str	r6, [r4, #16]
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a6:	bf00      	nop
 800f3a8:	08012a33 	.word	0x08012a33
 800f3ac:	08012a44 	.word	0x08012a44

0800f3b0 <__hi0bits>:
 800f3b0:	0c03      	lsrs	r3, r0, #16
 800f3b2:	041b      	lsls	r3, r3, #16
 800f3b4:	b9d3      	cbnz	r3, 800f3ec <__hi0bits+0x3c>
 800f3b6:	0400      	lsls	r0, r0, #16
 800f3b8:	2310      	movs	r3, #16
 800f3ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f3be:	bf04      	itt	eq
 800f3c0:	0200      	lsleq	r0, r0, #8
 800f3c2:	3308      	addeq	r3, #8
 800f3c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f3c8:	bf04      	itt	eq
 800f3ca:	0100      	lsleq	r0, r0, #4
 800f3cc:	3304      	addeq	r3, #4
 800f3ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f3d2:	bf04      	itt	eq
 800f3d4:	0080      	lsleq	r0, r0, #2
 800f3d6:	3302      	addeq	r3, #2
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	db05      	blt.n	800f3e8 <__hi0bits+0x38>
 800f3dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f3e0:	f103 0301 	add.w	r3, r3, #1
 800f3e4:	bf08      	it	eq
 800f3e6:	2320      	moveq	r3, #32
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	4770      	bx	lr
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e7e4      	b.n	800f3ba <__hi0bits+0xa>

0800f3f0 <__lo0bits>:
 800f3f0:	6803      	ldr	r3, [r0, #0]
 800f3f2:	f013 0207 	ands.w	r2, r3, #7
 800f3f6:	4601      	mov	r1, r0
 800f3f8:	d00b      	beq.n	800f412 <__lo0bits+0x22>
 800f3fa:	07da      	lsls	r2, r3, #31
 800f3fc:	d424      	bmi.n	800f448 <__lo0bits+0x58>
 800f3fe:	0798      	lsls	r0, r3, #30
 800f400:	bf49      	itett	mi
 800f402:	085b      	lsrmi	r3, r3, #1
 800f404:	089b      	lsrpl	r3, r3, #2
 800f406:	2001      	movmi	r0, #1
 800f408:	600b      	strmi	r3, [r1, #0]
 800f40a:	bf5c      	itt	pl
 800f40c:	600b      	strpl	r3, [r1, #0]
 800f40e:	2002      	movpl	r0, #2
 800f410:	4770      	bx	lr
 800f412:	b298      	uxth	r0, r3
 800f414:	b9b0      	cbnz	r0, 800f444 <__lo0bits+0x54>
 800f416:	0c1b      	lsrs	r3, r3, #16
 800f418:	2010      	movs	r0, #16
 800f41a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f41e:	bf04      	itt	eq
 800f420:	0a1b      	lsreq	r3, r3, #8
 800f422:	3008      	addeq	r0, #8
 800f424:	071a      	lsls	r2, r3, #28
 800f426:	bf04      	itt	eq
 800f428:	091b      	lsreq	r3, r3, #4
 800f42a:	3004      	addeq	r0, #4
 800f42c:	079a      	lsls	r2, r3, #30
 800f42e:	bf04      	itt	eq
 800f430:	089b      	lsreq	r3, r3, #2
 800f432:	3002      	addeq	r0, #2
 800f434:	07da      	lsls	r2, r3, #31
 800f436:	d403      	bmi.n	800f440 <__lo0bits+0x50>
 800f438:	085b      	lsrs	r3, r3, #1
 800f43a:	f100 0001 	add.w	r0, r0, #1
 800f43e:	d005      	beq.n	800f44c <__lo0bits+0x5c>
 800f440:	600b      	str	r3, [r1, #0]
 800f442:	4770      	bx	lr
 800f444:	4610      	mov	r0, r2
 800f446:	e7e8      	b.n	800f41a <__lo0bits+0x2a>
 800f448:	2000      	movs	r0, #0
 800f44a:	4770      	bx	lr
 800f44c:	2020      	movs	r0, #32
 800f44e:	4770      	bx	lr

0800f450 <__i2b>:
 800f450:	b510      	push	{r4, lr}
 800f452:	460c      	mov	r4, r1
 800f454:	2101      	movs	r1, #1
 800f456:	f7ff feff 	bl	800f258 <_Balloc>
 800f45a:	4602      	mov	r2, r0
 800f45c:	b928      	cbnz	r0, 800f46a <__i2b+0x1a>
 800f45e:	4b05      	ldr	r3, [pc, #20]	; (800f474 <__i2b+0x24>)
 800f460:	4805      	ldr	r0, [pc, #20]	; (800f478 <__i2b+0x28>)
 800f462:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f466:	f000 fc9b 	bl	800fda0 <__assert_func>
 800f46a:	2301      	movs	r3, #1
 800f46c:	6144      	str	r4, [r0, #20]
 800f46e:	6103      	str	r3, [r0, #16]
 800f470:	bd10      	pop	{r4, pc}
 800f472:	bf00      	nop
 800f474:	08012a33 	.word	0x08012a33
 800f478:	08012a44 	.word	0x08012a44

0800f47c <__multiply>:
 800f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f480:	4614      	mov	r4, r2
 800f482:	690a      	ldr	r2, [r1, #16]
 800f484:	6923      	ldr	r3, [r4, #16]
 800f486:	429a      	cmp	r2, r3
 800f488:	bfb8      	it	lt
 800f48a:	460b      	movlt	r3, r1
 800f48c:	460d      	mov	r5, r1
 800f48e:	bfbc      	itt	lt
 800f490:	4625      	movlt	r5, r4
 800f492:	461c      	movlt	r4, r3
 800f494:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f498:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f49c:	68ab      	ldr	r3, [r5, #8]
 800f49e:	6869      	ldr	r1, [r5, #4]
 800f4a0:	eb0a 0709 	add.w	r7, sl, r9
 800f4a4:	42bb      	cmp	r3, r7
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	bfb8      	it	lt
 800f4aa:	3101      	addlt	r1, #1
 800f4ac:	f7ff fed4 	bl	800f258 <_Balloc>
 800f4b0:	b930      	cbnz	r0, 800f4c0 <__multiply+0x44>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	4b42      	ldr	r3, [pc, #264]	; (800f5c0 <__multiply+0x144>)
 800f4b6:	4843      	ldr	r0, [pc, #268]	; (800f5c4 <__multiply+0x148>)
 800f4b8:	f240 115d 	movw	r1, #349	; 0x15d
 800f4bc:	f000 fc70 	bl	800fda0 <__assert_func>
 800f4c0:	f100 0614 	add.w	r6, r0, #20
 800f4c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f4c8:	4633      	mov	r3, r6
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	4543      	cmp	r3, r8
 800f4ce:	d31e      	bcc.n	800f50e <__multiply+0x92>
 800f4d0:	f105 0c14 	add.w	ip, r5, #20
 800f4d4:	f104 0314 	add.w	r3, r4, #20
 800f4d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f4dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f4e0:	9202      	str	r2, [sp, #8]
 800f4e2:	ebac 0205 	sub.w	r2, ip, r5
 800f4e6:	3a15      	subs	r2, #21
 800f4e8:	f022 0203 	bic.w	r2, r2, #3
 800f4ec:	3204      	adds	r2, #4
 800f4ee:	f105 0115 	add.w	r1, r5, #21
 800f4f2:	458c      	cmp	ip, r1
 800f4f4:	bf38      	it	cc
 800f4f6:	2204      	movcc	r2, #4
 800f4f8:	9201      	str	r2, [sp, #4]
 800f4fa:	9a02      	ldr	r2, [sp, #8]
 800f4fc:	9303      	str	r3, [sp, #12]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d808      	bhi.n	800f514 <__multiply+0x98>
 800f502:	2f00      	cmp	r7, #0
 800f504:	dc55      	bgt.n	800f5b2 <__multiply+0x136>
 800f506:	6107      	str	r7, [r0, #16]
 800f508:	b005      	add	sp, #20
 800f50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50e:	f843 2b04 	str.w	r2, [r3], #4
 800f512:	e7db      	b.n	800f4cc <__multiply+0x50>
 800f514:	f8b3 a000 	ldrh.w	sl, [r3]
 800f518:	f1ba 0f00 	cmp.w	sl, #0
 800f51c:	d020      	beq.n	800f560 <__multiply+0xe4>
 800f51e:	f105 0e14 	add.w	lr, r5, #20
 800f522:	46b1      	mov	r9, r6
 800f524:	2200      	movs	r2, #0
 800f526:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f52a:	f8d9 b000 	ldr.w	fp, [r9]
 800f52e:	b2a1      	uxth	r1, r4
 800f530:	fa1f fb8b 	uxth.w	fp, fp
 800f534:	fb0a b101 	mla	r1, sl, r1, fp
 800f538:	4411      	add	r1, r2
 800f53a:	f8d9 2000 	ldr.w	r2, [r9]
 800f53e:	0c24      	lsrs	r4, r4, #16
 800f540:	0c12      	lsrs	r2, r2, #16
 800f542:	fb0a 2404 	mla	r4, sl, r4, r2
 800f546:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f54a:	b289      	uxth	r1, r1
 800f54c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f550:	45f4      	cmp	ip, lr
 800f552:	f849 1b04 	str.w	r1, [r9], #4
 800f556:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f55a:	d8e4      	bhi.n	800f526 <__multiply+0xaa>
 800f55c:	9901      	ldr	r1, [sp, #4]
 800f55e:	5072      	str	r2, [r6, r1]
 800f560:	9a03      	ldr	r2, [sp, #12]
 800f562:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f566:	3304      	adds	r3, #4
 800f568:	f1b9 0f00 	cmp.w	r9, #0
 800f56c:	d01f      	beq.n	800f5ae <__multiply+0x132>
 800f56e:	6834      	ldr	r4, [r6, #0]
 800f570:	f105 0114 	add.w	r1, r5, #20
 800f574:	46b6      	mov	lr, r6
 800f576:	f04f 0a00 	mov.w	sl, #0
 800f57a:	880a      	ldrh	r2, [r1, #0]
 800f57c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f580:	fb09 b202 	mla	r2, r9, r2, fp
 800f584:	4492      	add	sl, r2
 800f586:	b2a4      	uxth	r4, r4
 800f588:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f58c:	f84e 4b04 	str.w	r4, [lr], #4
 800f590:	f851 4b04 	ldr.w	r4, [r1], #4
 800f594:	f8be 2000 	ldrh.w	r2, [lr]
 800f598:	0c24      	lsrs	r4, r4, #16
 800f59a:	fb09 2404 	mla	r4, r9, r4, r2
 800f59e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f5a2:	458c      	cmp	ip, r1
 800f5a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f5a8:	d8e7      	bhi.n	800f57a <__multiply+0xfe>
 800f5aa:	9a01      	ldr	r2, [sp, #4]
 800f5ac:	50b4      	str	r4, [r6, r2]
 800f5ae:	3604      	adds	r6, #4
 800f5b0:	e7a3      	b.n	800f4fa <__multiply+0x7e>
 800f5b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1a5      	bne.n	800f506 <__multiply+0x8a>
 800f5ba:	3f01      	subs	r7, #1
 800f5bc:	e7a1      	b.n	800f502 <__multiply+0x86>
 800f5be:	bf00      	nop
 800f5c0:	08012a33 	.word	0x08012a33
 800f5c4:	08012a44 	.word	0x08012a44

0800f5c8 <__pow5mult>:
 800f5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5cc:	4615      	mov	r5, r2
 800f5ce:	f012 0203 	ands.w	r2, r2, #3
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	460f      	mov	r7, r1
 800f5d6:	d007      	beq.n	800f5e8 <__pow5mult+0x20>
 800f5d8:	4c25      	ldr	r4, [pc, #148]	; (800f670 <__pow5mult+0xa8>)
 800f5da:	3a01      	subs	r2, #1
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5e2:	f7ff fe9b 	bl	800f31c <__multadd>
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	10ad      	asrs	r5, r5, #2
 800f5ea:	d03d      	beq.n	800f668 <__pow5mult+0xa0>
 800f5ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f5ee:	b97c      	cbnz	r4, 800f610 <__pow5mult+0x48>
 800f5f0:	2010      	movs	r0, #16
 800f5f2:	f7ff fe29 	bl	800f248 <malloc>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	6270      	str	r0, [r6, #36]	; 0x24
 800f5fa:	b928      	cbnz	r0, 800f608 <__pow5mult+0x40>
 800f5fc:	4b1d      	ldr	r3, [pc, #116]	; (800f674 <__pow5mult+0xac>)
 800f5fe:	481e      	ldr	r0, [pc, #120]	; (800f678 <__pow5mult+0xb0>)
 800f600:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f604:	f000 fbcc 	bl	800fda0 <__assert_func>
 800f608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f60c:	6004      	str	r4, [r0, #0]
 800f60e:	60c4      	str	r4, [r0, #12]
 800f610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f618:	b94c      	cbnz	r4, 800f62e <__pow5mult+0x66>
 800f61a:	f240 2171 	movw	r1, #625	; 0x271
 800f61e:	4630      	mov	r0, r6
 800f620:	f7ff ff16 	bl	800f450 <__i2b>
 800f624:	2300      	movs	r3, #0
 800f626:	f8c8 0008 	str.w	r0, [r8, #8]
 800f62a:	4604      	mov	r4, r0
 800f62c:	6003      	str	r3, [r0, #0]
 800f62e:	f04f 0900 	mov.w	r9, #0
 800f632:	07eb      	lsls	r3, r5, #31
 800f634:	d50a      	bpl.n	800f64c <__pow5mult+0x84>
 800f636:	4639      	mov	r1, r7
 800f638:	4622      	mov	r2, r4
 800f63a:	4630      	mov	r0, r6
 800f63c:	f7ff ff1e 	bl	800f47c <__multiply>
 800f640:	4639      	mov	r1, r7
 800f642:	4680      	mov	r8, r0
 800f644:	4630      	mov	r0, r6
 800f646:	f7ff fe47 	bl	800f2d8 <_Bfree>
 800f64a:	4647      	mov	r7, r8
 800f64c:	106d      	asrs	r5, r5, #1
 800f64e:	d00b      	beq.n	800f668 <__pow5mult+0xa0>
 800f650:	6820      	ldr	r0, [r4, #0]
 800f652:	b938      	cbnz	r0, 800f664 <__pow5mult+0x9c>
 800f654:	4622      	mov	r2, r4
 800f656:	4621      	mov	r1, r4
 800f658:	4630      	mov	r0, r6
 800f65a:	f7ff ff0f 	bl	800f47c <__multiply>
 800f65e:	6020      	str	r0, [r4, #0]
 800f660:	f8c0 9000 	str.w	r9, [r0]
 800f664:	4604      	mov	r4, r0
 800f666:	e7e4      	b.n	800f632 <__pow5mult+0x6a>
 800f668:	4638      	mov	r0, r7
 800f66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f66e:	bf00      	nop
 800f670:	08012b98 	.word	0x08012b98
 800f674:	080129bd 	.word	0x080129bd
 800f678:	08012a44 	.word	0x08012a44

0800f67c <__lshift>:
 800f67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f680:	460c      	mov	r4, r1
 800f682:	6849      	ldr	r1, [r1, #4]
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f68a:	68a3      	ldr	r3, [r4, #8]
 800f68c:	4607      	mov	r7, r0
 800f68e:	4691      	mov	r9, r2
 800f690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f694:	f108 0601 	add.w	r6, r8, #1
 800f698:	42b3      	cmp	r3, r6
 800f69a:	db0b      	blt.n	800f6b4 <__lshift+0x38>
 800f69c:	4638      	mov	r0, r7
 800f69e:	f7ff fddb 	bl	800f258 <_Balloc>
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	b948      	cbnz	r0, 800f6ba <__lshift+0x3e>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	4b28      	ldr	r3, [pc, #160]	; (800f74c <__lshift+0xd0>)
 800f6aa:	4829      	ldr	r0, [pc, #164]	; (800f750 <__lshift+0xd4>)
 800f6ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f6b0:	f000 fb76 	bl	800fda0 <__assert_func>
 800f6b4:	3101      	adds	r1, #1
 800f6b6:	005b      	lsls	r3, r3, #1
 800f6b8:	e7ee      	b.n	800f698 <__lshift+0x1c>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f100 0114 	add.w	r1, r0, #20
 800f6c0:	f100 0210 	add.w	r2, r0, #16
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	4553      	cmp	r3, sl
 800f6c8:	db33      	blt.n	800f732 <__lshift+0xb6>
 800f6ca:	6920      	ldr	r0, [r4, #16]
 800f6cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6d0:	f104 0314 	add.w	r3, r4, #20
 800f6d4:	f019 091f 	ands.w	r9, r9, #31
 800f6d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6e0:	d02b      	beq.n	800f73a <__lshift+0xbe>
 800f6e2:	f1c9 0e20 	rsb	lr, r9, #32
 800f6e6:	468a      	mov	sl, r1
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	fa00 f009 	lsl.w	r0, r0, r9
 800f6f0:	4302      	orrs	r2, r0
 800f6f2:	f84a 2b04 	str.w	r2, [sl], #4
 800f6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6fa:	459c      	cmp	ip, r3
 800f6fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800f700:	d8f3      	bhi.n	800f6ea <__lshift+0x6e>
 800f702:	ebac 0304 	sub.w	r3, ip, r4
 800f706:	3b15      	subs	r3, #21
 800f708:	f023 0303 	bic.w	r3, r3, #3
 800f70c:	3304      	adds	r3, #4
 800f70e:	f104 0015 	add.w	r0, r4, #21
 800f712:	4584      	cmp	ip, r0
 800f714:	bf38      	it	cc
 800f716:	2304      	movcc	r3, #4
 800f718:	50ca      	str	r2, [r1, r3]
 800f71a:	b10a      	cbz	r2, 800f720 <__lshift+0xa4>
 800f71c:	f108 0602 	add.w	r6, r8, #2
 800f720:	3e01      	subs	r6, #1
 800f722:	4638      	mov	r0, r7
 800f724:	612e      	str	r6, [r5, #16]
 800f726:	4621      	mov	r1, r4
 800f728:	f7ff fdd6 	bl	800f2d8 <_Bfree>
 800f72c:	4628      	mov	r0, r5
 800f72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f732:	f842 0f04 	str.w	r0, [r2, #4]!
 800f736:	3301      	adds	r3, #1
 800f738:	e7c5      	b.n	800f6c6 <__lshift+0x4a>
 800f73a:	3904      	subs	r1, #4
 800f73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f740:	f841 2f04 	str.w	r2, [r1, #4]!
 800f744:	459c      	cmp	ip, r3
 800f746:	d8f9      	bhi.n	800f73c <__lshift+0xc0>
 800f748:	e7ea      	b.n	800f720 <__lshift+0xa4>
 800f74a:	bf00      	nop
 800f74c:	08012a33 	.word	0x08012a33
 800f750:	08012a44 	.word	0x08012a44

0800f754 <__mcmp>:
 800f754:	b530      	push	{r4, r5, lr}
 800f756:	6902      	ldr	r2, [r0, #16]
 800f758:	690c      	ldr	r4, [r1, #16]
 800f75a:	1b12      	subs	r2, r2, r4
 800f75c:	d10e      	bne.n	800f77c <__mcmp+0x28>
 800f75e:	f100 0314 	add.w	r3, r0, #20
 800f762:	3114      	adds	r1, #20
 800f764:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f768:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f76c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f770:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f774:	42a5      	cmp	r5, r4
 800f776:	d003      	beq.n	800f780 <__mcmp+0x2c>
 800f778:	d305      	bcc.n	800f786 <__mcmp+0x32>
 800f77a:	2201      	movs	r2, #1
 800f77c:	4610      	mov	r0, r2
 800f77e:	bd30      	pop	{r4, r5, pc}
 800f780:	4283      	cmp	r3, r0
 800f782:	d3f3      	bcc.n	800f76c <__mcmp+0x18>
 800f784:	e7fa      	b.n	800f77c <__mcmp+0x28>
 800f786:	f04f 32ff 	mov.w	r2, #4294967295
 800f78a:	e7f7      	b.n	800f77c <__mcmp+0x28>

0800f78c <__mdiff>:
 800f78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	460c      	mov	r4, r1
 800f792:	4606      	mov	r6, r0
 800f794:	4611      	mov	r1, r2
 800f796:	4620      	mov	r0, r4
 800f798:	4617      	mov	r7, r2
 800f79a:	f7ff ffdb 	bl	800f754 <__mcmp>
 800f79e:	1e05      	subs	r5, r0, #0
 800f7a0:	d110      	bne.n	800f7c4 <__mdiff+0x38>
 800f7a2:	4629      	mov	r1, r5
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f7ff fd57 	bl	800f258 <_Balloc>
 800f7aa:	b930      	cbnz	r0, 800f7ba <__mdiff+0x2e>
 800f7ac:	4b39      	ldr	r3, [pc, #228]	; (800f894 <__mdiff+0x108>)
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	f240 2132 	movw	r1, #562	; 0x232
 800f7b4:	4838      	ldr	r0, [pc, #224]	; (800f898 <__mdiff+0x10c>)
 800f7b6:	f000 faf3 	bl	800fda0 <__assert_func>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c4:	bfa4      	itt	ge
 800f7c6:	463b      	movge	r3, r7
 800f7c8:	4627      	movge	r7, r4
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	6879      	ldr	r1, [r7, #4]
 800f7ce:	bfa6      	itte	ge
 800f7d0:	461c      	movge	r4, r3
 800f7d2:	2500      	movge	r5, #0
 800f7d4:	2501      	movlt	r5, #1
 800f7d6:	f7ff fd3f 	bl	800f258 <_Balloc>
 800f7da:	b920      	cbnz	r0, 800f7e6 <__mdiff+0x5a>
 800f7dc:	4b2d      	ldr	r3, [pc, #180]	; (800f894 <__mdiff+0x108>)
 800f7de:	4602      	mov	r2, r0
 800f7e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f7e4:	e7e6      	b.n	800f7b4 <__mdiff+0x28>
 800f7e6:	693e      	ldr	r6, [r7, #16]
 800f7e8:	60c5      	str	r5, [r0, #12]
 800f7ea:	6925      	ldr	r5, [r4, #16]
 800f7ec:	f107 0114 	add.w	r1, r7, #20
 800f7f0:	f104 0914 	add.w	r9, r4, #20
 800f7f4:	f100 0e14 	add.w	lr, r0, #20
 800f7f8:	f107 0210 	add.w	r2, r7, #16
 800f7fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f800:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f804:	46f2      	mov	sl, lr
 800f806:	2700      	movs	r7, #0
 800f808:	f859 3b04 	ldr.w	r3, [r9], #4
 800f80c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f810:	fa1f f883 	uxth.w	r8, r3
 800f814:	fa17 f78b 	uxtah	r7, r7, fp
 800f818:	0c1b      	lsrs	r3, r3, #16
 800f81a:	eba7 0808 	sub.w	r8, r7, r8
 800f81e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f822:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f826:	fa1f f888 	uxth.w	r8, r8
 800f82a:	141f      	asrs	r7, r3, #16
 800f82c:	454d      	cmp	r5, r9
 800f82e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f832:	f84a 3b04 	str.w	r3, [sl], #4
 800f836:	d8e7      	bhi.n	800f808 <__mdiff+0x7c>
 800f838:	1b2b      	subs	r3, r5, r4
 800f83a:	3b15      	subs	r3, #21
 800f83c:	f023 0303 	bic.w	r3, r3, #3
 800f840:	3304      	adds	r3, #4
 800f842:	3415      	adds	r4, #21
 800f844:	42a5      	cmp	r5, r4
 800f846:	bf38      	it	cc
 800f848:	2304      	movcc	r3, #4
 800f84a:	4419      	add	r1, r3
 800f84c:	4473      	add	r3, lr
 800f84e:	469e      	mov	lr, r3
 800f850:	460d      	mov	r5, r1
 800f852:	4565      	cmp	r5, ip
 800f854:	d30e      	bcc.n	800f874 <__mdiff+0xe8>
 800f856:	f10c 0203 	add.w	r2, ip, #3
 800f85a:	1a52      	subs	r2, r2, r1
 800f85c:	f022 0203 	bic.w	r2, r2, #3
 800f860:	3903      	subs	r1, #3
 800f862:	458c      	cmp	ip, r1
 800f864:	bf38      	it	cc
 800f866:	2200      	movcc	r2, #0
 800f868:	441a      	add	r2, r3
 800f86a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f86e:	b17b      	cbz	r3, 800f890 <__mdiff+0x104>
 800f870:	6106      	str	r6, [r0, #16]
 800f872:	e7a5      	b.n	800f7c0 <__mdiff+0x34>
 800f874:	f855 8b04 	ldr.w	r8, [r5], #4
 800f878:	fa17 f488 	uxtah	r4, r7, r8
 800f87c:	1422      	asrs	r2, r4, #16
 800f87e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f882:	b2a4      	uxth	r4, r4
 800f884:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f888:	f84e 4b04 	str.w	r4, [lr], #4
 800f88c:	1417      	asrs	r7, r2, #16
 800f88e:	e7e0      	b.n	800f852 <__mdiff+0xc6>
 800f890:	3e01      	subs	r6, #1
 800f892:	e7ea      	b.n	800f86a <__mdiff+0xde>
 800f894:	08012a33 	.word	0x08012a33
 800f898:	08012a44 	.word	0x08012a44

0800f89c <__d2b>:
 800f89c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f8a0:	4689      	mov	r9, r1
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	ec57 6b10 	vmov	r6, r7, d0
 800f8a8:	4690      	mov	r8, r2
 800f8aa:	f7ff fcd5 	bl	800f258 <_Balloc>
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	b930      	cbnz	r0, 800f8c0 <__d2b+0x24>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	4b25      	ldr	r3, [pc, #148]	; (800f94c <__d2b+0xb0>)
 800f8b6:	4826      	ldr	r0, [pc, #152]	; (800f950 <__d2b+0xb4>)
 800f8b8:	f240 310a 	movw	r1, #778	; 0x30a
 800f8bc:	f000 fa70 	bl	800fda0 <__assert_func>
 800f8c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f8c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f8c8:	bb35      	cbnz	r5, 800f918 <__d2b+0x7c>
 800f8ca:	2e00      	cmp	r6, #0
 800f8cc:	9301      	str	r3, [sp, #4]
 800f8ce:	d028      	beq.n	800f922 <__d2b+0x86>
 800f8d0:	4668      	mov	r0, sp
 800f8d2:	9600      	str	r6, [sp, #0]
 800f8d4:	f7ff fd8c 	bl	800f3f0 <__lo0bits>
 800f8d8:	9900      	ldr	r1, [sp, #0]
 800f8da:	b300      	cbz	r0, 800f91e <__d2b+0x82>
 800f8dc:	9a01      	ldr	r2, [sp, #4]
 800f8de:	f1c0 0320 	rsb	r3, r0, #32
 800f8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8e6:	430b      	orrs	r3, r1
 800f8e8:	40c2      	lsrs	r2, r0
 800f8ea:	6163      	str	r3, [r4, #20]
 800f8ec:	9201      	str	r2, [sp, #4]
 800f8ee:	9b01      	ldr	r3, [sp, #4]
 800f8f0:	61a3      	str	r3, [r4, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	bf14      	ite	ne
 800f8f6:	2202      	movne	r2, #2
 800f8f8:	2201      	moveq	r2, #1
 800f8fa:	6122      	str	r2, [r4, #16]
 800f8fc:	b1d5      	cbz	r5, 800f934 <__d2b+0x98>
 800f8fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f902:	4405      	add	r5, r0
 800f904:	f8c9 5000 	str.w	r5, [r9]
 800f908:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f90c:	f8c8 0000 	str.w	r0, [r8]
 800f910:	4620      	mov	r0, r4
 800f912:	b003      	add	sp, #12
 800f914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f91c:	e7d5      	b.n	800f8ca <__d2b+0x2e>
 800f91e:	6161      	str	r1, [r4, #20]
 800f920:	e7e5      	b.n	800f8ee <__d2b+0x52>
 800f922:	a801      	add	r0, sp, #4
 800f924:	f7ff fd64 	bl	800f3f0 <__lo0bits>
 800f928:	9b01      	ldr	r3, [sp, #4]
 800f92a:	6163      	str	r3, [r4, #20]
 800f92c:	2201      	movs	r2, #1
 800f92e:	6122      	str	r2, [r4, #16]
 800f930:	3020      	adds	r0, #32
 800f932:	e7e3      	b.n	800f8fc <__d2b+0x60>
 800f934:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f938:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f93c:	f8c9 0000 	str.w	r0, [r9]
 800f940:	6918      	ldr	r0, [r3, #16]
 800f942:	f7ff fd35 	bl	800f3b0 <__hi0bits>
 800f946:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f94a:	e7df      	b.n	800f90c <__d2b+0x70>
 800f94c:	08012a33 	.word	0x08012a33
 800f950:	08012a44 	.word	0x08012a44

0800f954 <_calloc_r>:
 800f954:	b513      	push	{r0, r1, r4, lr}
 800f956:	434a      	muls	r2, r1
 800f958:	4611      	mov	r1, r2
 800f95a:	9201      	str	r2, [sp, #4]
 800f95c:	f000 f85a 	bl	800fa14 <_malloc_r>
 800f960:	4604      	mov	r4, r0
 800f962:	b118      	cbz	r0, 800f96c <_calloc_r+0x18>
 800f964:	9a01      	ldr	r2, [sp, #4]
 800f966:	2100      	movs	r1, #0
 800f968:	f7fe f960 	bl	800dc2c <memset>
 800f96c:	4620      	mov	r0, r4
 800f96e:	b002      	add	sp, #8
 800f970:	bd10      	pop	{r4, pc}
	...

0800f974 <_free_r>:
 800f974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f976:	2900      	cmp	r1, #0
 800f978:	d048      	beq.n	800fa0c <_free_r+0x98>
 800f97a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f97e:	9001      	str	r0, [sp, #4]
 800f980:	2b00      	cmp	r3, #0
 800f982:	f1a1 0404 	sub.w	r4, r1, #4
 800f986:	bfb8      	it	lt
 800f988:	18e4      	addlt	r4, r4, r3
 800f98a:	f000 fa65 	bl	800fe58 <__malloc_lock>
 800f98e:	4a20      	ldr	r2, [pc, #128]	; (800fa10 <_free_r+0x9c>)
 800f990:	9801      	ldr	r0, [sp, #4]
 800f992:	6813      	ldr	r3, [r2, #0]
 800f994:	4615      	mov	r5, r2
 800f996:	b933      	cbnz	r3, 800f9a6 <_free_r+0x32>
 800f998:	6063      	str	r3, [r4, #4]
 800f99a:	6014      	str	r4, [r2, #0]
 800f99c:	b003      	add	sp, #12
 800f99e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9a2:	f000 ba5f 	b.w	800fe64 <__malloc_unlock>
 800f9a6:	42a3      	cmp	r3, r4
 800f9a8:	d90b      	bls.n	800f9c2 <_free_r+0x4e>
 800f9aa:	6821      	ldr	r1, [r4, #0]
 800f9ac:	1862      	adds	r2, r4, r1
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	bf04      	itt	eq
 800f9b2:	681a      	ldreq	r2, [r3, #0]
 800f9b4:	685b      	ldreq	r3, [r3, #4]
 800f9b6:	6063      	str	r3, [r4, #4]
 800f9b8:	bf04      	itt	eq
 800f9ba:	1852      	addeq	r2, r2, r1
 800f9bc:	6022      	streq	r2, [r4, #0]
 800f9be:	602c      	str	r4, [r5, #0]
 800f9c0:	e7ec      	b.n	800f99c <_free_r+0x28>
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	b10b      	cbz	r3, 800f9cc <_free_r+0x58>
 800f9c8:	42a3      	cmp	r3, r4
 800f9ca:	d9fa      	bls.n	800f9c2 <_free_r+0x4e>
 800f9cc:	6811      	ldr	r1, [r2, #0]
 800f9ce:	1855      	adds	r5, r2, r1
 800f9d0:	42a5      	cmp	r5, r4
 800f9d2:	d10b      	bne.n	800f9ec <_free_r+0x78>
 800f9d4:	6824      	ldr	r4, [r4, #0]
 800f9d6:	4421      	add	r1, r4
 800f9d8:	1854      	adds	r4, r2, r1
 800f9da:	42a3      	cmp	r3, r4
 800f9dc:	6011      	str	r1, [r2, #0]
 800f9de:	d1dd      	bne.n	800f99c <_free_r+0x28>
 800f9e0:	681c      	ldr	r4, [r3, #0]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	6053      	str	r3, [r2, #4]
 800f9e6:	4421      	add	r1, r4
 800f9e8:	6011      	str	r1, [r2, #0]
 800f9ea:	e7d7      	b.n	800f99c <_free_r+0x28>
 800f9ec:	d902      	bls.n	800f9f4 <_free_r+0x80>
 800f9ee:	230c      	movs	r3, #12
 800f9f0:	6003      	str	r3, [r0, #0]
 800f9f2:	e7d3      	b.n	800f99c <_free_r+0x28>
 800f9f4:	6825      	ldr	r5, [r4, #0]
 800f9f6:	1961      	adds	r1, r4, r5
 800f9f8:	428b      	cmp	r3, r1
 800f9fa:	bf04      	itt	eq
 800f9fc:	6819      	ldreq	r1, [r3, #0]
 800f9fe:	685b      	ldreq	r3, [r3, #4]
 800fa00:	6063      	str	r3, [r4, #4]
 800fa02:	bf04      	itt	eq
 800fa04:	1949      	addeq	r1, r1, r5
 800fa06:	6021      	streq	r1, [r4, #0]
 800fa08:	6054      	str	r4, [r2, #4]
 800fa0a:	e7c7      	b.n	800f99c <_free_r+0x28>
 800fa0c:	b003      	add	sp, #12
 800fa0e:	bd30      	pop	{r4, r5, pc}
 800fa10:	200003cc 	.word	0x200003cc

0800fa14 <_malloc_r>:
 800fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa16:	1ccd      	adds	r5, r1, #3
 800fa18:	f025 0503 	bic.w	r5, r5, #3
 800fa1c:	3508      	adds	r5, #8
 800fa1e:	2d0c      	cmp	r5, #12
 800fa20:	bf38      	it	cc
 800fa22:	250c      	movcc	r5, #12
 800fa24:	2d00      	cmp	r5, #0
 800fa26:	4606      	mov	r6, r0
 800fa28:	db01      	blt.n	800fa2e <_malloc_r+0x1a>
 800fa2a:	42a9      	cmp	r1, r5
 800fa2c:	d903      	bls.n	800fa36 <_malloc_r+0x22>
 800fa2e:	230c      	movs	r3, #12
 800fa30:	6033      	str	r3, [r6, #0]
 800fa32:	2000      	movs	r0, #0
 800fa34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa36:	f000 fa0f 	bl	800fe58 <__malloc_lock>
 800fa3a:	4921      	ldr	r1, [pc, #132]	; (800fac0 <_malloc_r+0xac>)
 800fa3c:	680a      	ldr	r2, [r1, #0]
 800fa3e:	4614      	mov	r4, r2
 800fa40:	b99c      	cbnz	r4, 800fa6a <_malloc_r+0x56>
 800fa42:	4f20      	ldr	r7, [pc, #128]	; (800fac4 <_malloc_r+0xb0>)
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	b923      	cbnz	r3, 800fa52 <_malloc_r+0x3e>
 800fa48:	4621      	mov	r1, r4
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f000 f998 	bl	800fd80 <_sbrk_r>
 800fa50:	6038      	str	r0, [r7, #0]
 800fa52:	4629      	mov	r1, r5
 800fa54:	4630      	mov	r0, r6
 800fa56:	f000 f993 	bl	800fd80 <_sbrk_r>
 800fa5a:	1c43      	adds	r3, r0, #1
 800fa5c:	d123      	bne.n	800faa6 <_malloc_r+0x92>
 800fa5e:	230c      	movs	r3, #12
 800fa60:	6033      	str	r3, [r6, #0]
 800fa62:	4630      	mov	r0, r6
 800fa64:	f000 f9fe 	bl	800fe64 <__malloc_unlock>
 800fa68:	e7e3      	b.n	800fa32 <_malloc_r+0x1e>
 800fa6a:	6823      	ldr	r3, [r4, #0]
 800fa6c:	1b5b      	subs	r3, r3, r5
 800fa6e:	d417      	bmi.n	800faa0 <_malloc_r+0x8c>
 800fa70:	2b0b      	cmp	r3, #11
 800fa72:	d903      	bls.n	800fa7c <_malloc_r+0x68>
 800fa74:	6023      	str	r3, [r4, #0]
 800fa76:	441c      	add	r4, r3
 800fa78:	6025      	str	r5, [r4, #0]
 800fa7a:	e004      	b.n	800fa86 <_malloc_r+0x72>
 800fa7c:	6863      	ldr	r3, [r4, #4]
 800fa7e:	42a2      	cmp	r2, r4
 800fa80:	bf0c      	ite	eq
 800fa82:	600b      	streq	r3, [r1, #0]
 800fa84:	6053      	strne	r3, [r2, #4]
 800fa86:	4630      	mov	r0, r6
 800fa88:	f000 f9ec 	bl	800fe64 <__malloc_unlock>
 800fa8c:	f104 000b 	add.w	r0, r4, #11
 800fa90:	1d23      	adds	r3, r4, #4
 800fa92:	f020 0007 	bic.w	r0, r0, #7
 800fa96:	1ac2      	subs	r2, r0, r3
 800fa98:	d0cc      	beq.n	800fa34 <_malloc_r+0x20>
 800fa9a:	1a1b      	subs	r3, r3, r0
 800fa9c:	50a3      	str	r3, [r4, r2]
 800fa9e:	e7c9      	b.n	800fa34 <_malloc_r+0x20>
 800faa0:	4622      	mov	r2, r4
 800faa2:	6864      	ldr	r4, [r4, #4]
 800faa4:	e7cc      	b.n	800fa40 <_malloc_r+0x2c>
 800faa6:	1cc4      	adds	r4, r0, #3
 800faa8:	f024 0403 	bic.w	r4, r4, #3
 800faac:	42a0      	cmp	r0, r4
 800faae:	d0e3      	beq.n	800fa78 <_malloc_r+0x64>
 800fab0:	1a21      	subs	r1, r4, r0
 800fab2:	4630      	mov	r0, r6
 800fab4:	f000 f964 	bl	800fd80 <_sbrk_r>
 800fab8:	3001      	adds	r0, #1
 800faba:	d1dd      	bne.n	800fa78 <_malloc_r+0x64>
 800fabc:	e7cf      	b.n	800fa5e <_malloc_r+0x4a>
 800fabe:	bf00      	nop
 800fac0:	200003cc 	.word	0x200003cc
 800fac4:	200003d0 	.word	0x200003d0

0800fac8 <__ssputs_r>:
 800fac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	688e      	ldr	r6, [r1, #8]
 800face:	429e      	cmp	r6, r3
 800fad0:	4682      	mov	sl, r0
 800fad2:	460c      	mov	r4, r1
 800fad4:	4690      	mov	r8, r2
 800fad6:	461f      	mov	r7, r3
 800fad8:	d838      	bhi.n	800fb4c <__ssputs_r+0x84>
 800fada:	898a      	ldrh	r2, [r1, #12]
 800fadc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fae0:	d032      	beq.n	800fb48 <__ssputs_r+0x80>
 800fae2:	6825      	ldr	r5, [r4, #0]
 800fae4:	6909      	ldr	r1, [r1, #16]
 800fae6:	eba5 0901 	sub.w	r9, r5, r1
 800faea:	6965      	ldr	r5, [r4, #20]
 800faec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800faf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800faf4:	3301      	adds	r3, #1
 800faf6:	444b      	add	r3, r9
 800faf8:	106d      	asrs	r5, r5, #1
 800fafa:	429d      	cmp	r5, r3
 800fafc:	bf38      	it	cc
 800fafe:	461d      	movcc	r5, r3
 800fb00:	0553      	lsls	r3, r2, #21
 800fb02:	d531      	bpl.n	800fb68 <__ssputs_r+0xa0>
 800fb04:	4629      	mov	r1, r5
 800fb06:	f7ff ff85 	bl	800fa14 <_malloc_r>
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	b950      	cbnz	r0, 800fb24 <__ssputs_r+0x5c>
 800fb0e:	230c      	movs	r3, #12
 800fb10:	f8ca 3000 	str.w	r3, [sl]
 800fb14:	89a3      	ldrh	r3, [r4, #12]
 800fb16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb1a:	81a3      	strh	r3, [r4, #12]
 800fb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb24:	6921      	ldr	r1, [r4, #16]
 800fb26:	464a      	mov	r2, r9
 800fb28:	f7fe f872 	bl	800dc10 <memcpy>
 800fb2c:	89a3      	ldrh	r3, [r4, #12]
 800fb2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb36:	81a3      	strh	r3, [r4, #12]
 800fb38:	6126      	str	r6, [r4, #16]
 800fb3a:	6165      	str	r5, [r4, #20]
 800fb3c:	444e      	add	r6, r9
 800fb3e:	eba5 0509 	sub.w	r5, r5, r9
 800fb42:	6026      	str	r6, [r4, #0]
 800fb44:	60a5      	str	r5, [r4, #8]
 800fb46:	463e      	mov	r6, r7
 800fb48:	42be      	cmp	r6, r7
 800fb4a:	d900      	bls.n	800fb4e <__ssputs_r+0x86>
 800fb4c:	463e      	mov	r6, r7
 800fb4e:	4632      	mov	r2, r6
 800fb50:	6820      	ldr	r0, [r4, #0]
 800fb52:	4641      	mov	r1, r8
 800fb54:	f000 f966 	bl	800fe24 <memmove>
 800fb58:	68a3      	ldr	r3, [r4, #8]
 800fb5a:	6822      	ldr	r2, [r4, #0]
 800fb5c:	1b9b      	subs	r3, r3, r6
 800fb5e:	4432      	add	r2, r6
 800fb60:	60a3      	str	r3, [r4, #8]
 800fb62:	6022      	str	r2, [r4, #0]
 800fb64:	2000      	movs	r0, #0
 800fb66:	e7db      	b.n	800fb20 <__ssputs_r+0x58>
 800fb68:	462a      	mov	r2, r5
 800fb6a:	f000 f981 	bl	800fe70 <_realloc_r>
 800fb6e:	4606      	mov	r6, r0
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d1e1      	bne.n	800fb38 <__ssputs_r+0x70>
 800fb74:	6921      	ldr	r1, [r4, #16]
 800fb76:	4650      	mov	r0, sl
 800fb78:	f7ff fefc 	bl	800f974 <_free_r>
 800fb7c:	e7c7      	b.n	800fb0e <__ssputs_r+0x46>
	...

0800fb80 <_svfiprintf_r>:
 800fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb84:	4698      	mov	r8, r3
 800fb86:	898b      	ldrh	r3, [r1, #12]
 800fb88:	061b      	lsls	r3, r3, #24
 800fb8a:	b09d      	sub	sp, #116	; 0x74
 800fb8c:	4607      	mov	r7, r0
 800fb8e:	460d      	mov	r5, r1
 800fb90:	4614      	mov	r4, r2
 800fb92:	d50e      	bpl.n	800fbb2 <_svfiprintf_r+0x32>
 800fb94:	690b      	ldr	r3, [r1, #16]
 800fb96:	b963      	cbnz	r3, 800fbb2 <_svfiprintf_r+0x32>
 800fb98:	2140      	movs	r1, #64	; 0x40
 800fb9a:	f7ff ff3b 	bl	800fa14 <_malloc_r>
 800fb9e:	6028      	str	r0, [r5, #0]
 800fba0:	6128      	str	r0, [r5, #16]
 800fba2:	b920      	cbnz	r0, 800fbae <_svfiprintf_r+0x2e>
 800fba4:	230c      	movs	r3, #12
 800fba6:	603b      	str	r3, [r7, #0]
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	e0d1      	b.n	800fd52 <_svfiprintf_r+0x1d2>
 800fbae:	2340      	movs	r3, #64	; 0x40
 800fbb0:	616b      	str	r3, [r5, #20]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb6:	2320      	movs	r3, #32
 800fbb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbc0:	2330      	movs	r3, #48	; 0x30
 800fbc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fd6c <_svfiprintf_r+0x1ec>
 800fbc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbca:	f04f 0901 	mov.w	r9, #1
 800fbce:	4623      	mov	r3, r4
 800fbd0:	469a      	mov	sl, r3
 800fbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbd6:	b10a      	cbz	r2, 800fbdc <_svfiprintf_r+0x5c>
 800fbd8:	2a25      	cmp	r2, #37	; 0x25
 800fbda:	d1f9      	bne.n	800fbd0 <_svfiprintf_r+0x50>
 800fbdc:	ebba 0b04 	subs.w	fp, sl, r4
 800fbe0:	d00b      	beq.n	800fbfa <_svfiprintf_r+0x7a>
 800fbe2:	465b      	mov	r3, fp
 800fbe4:	4622      	mov	r2, r4
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	4638      	mov	r0, r7
 800fbea:	f7ff ff6d 	bl	800fac8 <__ssputs_r>
 800fbee:	3001      	adds	r0, #1
 800fbf0:	f000 80aa 	beq.w	800fd48 <_svfiprintf_r+0x1c8>
 800fbf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbf6:	445a      	add	r2, fp
 800fbf8:	9209      	str	r2, [sp, #36]	; 0x24
 800fbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 80a2 	beq.w	800fd48 <_svfiprintf_r+0x1c8>
 800fc04:	2300      	movs	r3, #0
 800fc06:	f04f 32ff 	mov.w	r2, #4294967295
 800fc0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc0e:	f10a 0a01 	add.w	sl, sl, #1
 800fc12:	9304      	str	r3, [sp, #16]
 800fc14:	9307      	str	r3, [sp, #28]
 800fc16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc1a:	931a      	str	r3, [sp, #104]	; 0x68
 800fc1c:	4654      	mov	r4, sl
 800fc1e:	2205      	movs	r2, #5
 800fc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc24:	4851      	ldr	r0, [pc, #324]	; (800fd6c <_svfiprintf_r+0x1ec>)
 800fc26:	f7f0 faeb 	bl	8000200 <memchr>
 800fc2a:	9a04      	ldr	r2, [sp, #16]
 800fc2c:	b9d8      	cbnz	r0, 800fc66 <_svfiprintf_r+0xe6>
 800fc2e:	06d0      	lsls	r0, r2, #27
 800fc30:	bf44      	itt	mi
 800fc32:	2320      	movmi	r3, #32
 800fc34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc38:	0711      	lsls	r1, r2, #28
 800fc3a:	bf44      	itt	mi
 800fc3c:	232b      	movmi	r3, #43	; 0x2b
 800fc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc42:	f89a 3000 	ldrb.w	r3, [sl]
 800fc46:	2b2a      	cmp	r3, #42	; 0x2a
 800fc48:	d015      	beq.n	800fc76 <_svfiprintf_r+0xf6>
 800fc4a:	9a07      	ldr	r2, [sp, #28]
 800fc4c:	4654      	mov	r4, sl
 800fc4e:	2000      	movs	r0, #0
 800fc50:	f04f 0c0a 	mov.w	ip, #10
 800fc54:	4621      	mov	r1, r4
 800fc56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc5a:	3b30      	subs	r3, #48	; 0x30
 800fc5c:	2b09      	cmp	r3, #9
 800fc5e:	d94e      	bls.n	800fcfe <_svfiprintf_r+0x17e>
 800fc60:	b1b0      	cbz	r0, 800fc90 <_svfiprintf_r+0x110>
 800fc62:	9207      	str	r2, [sp, #28]
 800fc64:	e014      	b.n	800fc90 <_svfiprintf_r+0x110>
 800fc66:	eba0 0308 	sub.w	r3, r0, r8
 800fc6a:	fa09 f303 	lsl.w	r3, r9, r3
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	46a2      	mov	sl, r4
 800fc74:	e7d2      	b.n	800fc1c <_svfiprintf_r+0x9c>
 800fc76:	9b03      	ldr	r3, [sp, #12]
 800fc78:	1d19      	adds	r1, r3, #4
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	9103      	str	r1, [sp, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	bfbb      	ittet	lt
 800fc82:	425b      	neglt	r3, r3
 800fc84:	f042 0202 	orrlt.w	r2, r2, #2
 800fc88:	9307      	strge	r3, [sp, #28]
 800fc8a:	9307      	strlt	r3, [sp, #28]
 800fc8c:	bfb8      	it	lt
 800fc8e:	9204      	strlt	r2, [sp, #16]
 800fc90:	7823      	ldrb	r3, [r4, #0]
 800fc92:	2b2e      	cmp	r3, #46	; 0x2e
 800fc94:	d10c      	bne.n	800fcb0 <_svfiprintf_r+0x130>
 800fc96:	7863      	ldrb	r3, [r4, #1]
 800fc98:	2b2a      	cmp	r3, #42	; 0x2a
 800fc9a:	d135      	bne.n	800fd08 <_svfiprintf_r+0x188>
 800fc9c:	9b03      	ldr	r3, [sp, #12]
 800fc9e:	1d1a      	adds	r2, r3, #4
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	9203      	str	r2, [sp, #12]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	bfb8      	it	lt
 800fca8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcac:	3402      	adds	r4, #2
 800fcae:	9305      	str	r3, [sp, #20]
 800fcb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd7c <_svfiprintf_r+0x1fc>
 800fcb4:	7821      	ldrb	r1, [r4, #0]
 800fcb6:	2203      	movs	r2, #3
 800fcb8:	4650      	mov	r0, sl
 800fcba:	f7f0 faa1 	bl	8000200 <memchr>
 800fcbe:	b140      	cbz	r0, 800fcd2 <_svfiprintf_r+0x152>
 800fcc0:	2340      	movs	r3, #64	; 0x40
 800fcc2:	eba0 000a 	sub.w	r0, r0, sl
 800fcc6:	fa03 f000 	lsl.w	r0, r3, r0
 800fcca:	9b04      	ldr	r3, [sp, #16]
 800fccc:	4303      	orrs	r3, r0
 800fcce:	3401      	adds	r4, #1
 800fcd0:	9304      	str	r3, [sp, #16]
 800fcd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd6:	4826      	ldr	r0, [pc, #152]	; (800fd70 <_svfiprintf_r+0x1f0>)
 800fcd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcdc:	2206      	movs	r2, #6
 800fcde:	f7f0 fa8f 	bl	8000200 <memchr>
 800fce2:	2800      	cmp	r0, #0
 800fce4:	d038      	beq.n	800fd58 <_svfiprintf_r+0x1d8>
 800fce6:	4b23      	ldr	r3, [pc, #140]	; (800fd74 <_svfiprintf_r+0x1f4>)
 800fce8:	bb1b      	cbnz	r3, 800fd32 <_svfiprintf_r+0x1b2>
 800fcea:	9b03      	ldr	r3, [sp, #12]
 800fcec:	3307      	adds	r3, #7
 800fcee:	f023 0307 	bic.w	r3, r3, #7
 800fcf2:	3308      	adds	r3, #8
 800fcf4:	9303      	str	r3, [sp, #12]
 800fcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcf8:	4433      	add	r3, r6
 800fcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800fcfc:	e767      	b.n	800fbce <_svfiprintf_r+0x4e>
 800fcfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd02:	460c      	mov	r4, r1
 800fd04:	2001      	movs	r0, #1
 800fd06:	e7a5      	b.n	800fc54 <_svfiprintf_r+0xd4>
 800fd08:	2300      	movs	r3, #0
 800fd0a:	3401      	adds	r4, #1
 800fd0c:	9305      	str	r3, [sp, #20]
 800fd0e:	4619      	mov	r1, r3
 800fd10:	f04f 0c0a 	mov.w	ip, #10
 800fd14:	4620      	mov	r0, r4
 800fd16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd1a:	3a30      	subs	r2, #48	; 0x30
 800fd1c:	2a09      	cmp	r2, #9
 800fd1e:	d903      	bls.n	800fd28 <_svfiprintf_r+0x1a8>
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d0c5      	beq.n	800fcb0 <_svfiprintf_r+0x130>
 800fd24:	9105      	str	r1, [sp, #20]
 800fd26:	e7c3      	b.n	800fcb0 <_svfiprintf_r+0x130>
 800fd28:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e7f0      	b.n	800fd14 <_svfiprintf_r+0x194>
 800fd32:	ab03      	add	r3, sp, #12
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	462a      	mov	r2, r5
 800fd38:	4b0f      	ldr	r3, [pc, #60]	; (800fd78 <_svfiprintf_r+0x1f8>)
 800fd3a:	a904      	add	r1, sp, #16
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f7fe f81d 	bl	800dd7c <_printf_float>
 800fd42:	1c42      	adds	r2, r0, #1
 800fd44:	4606      	mov	r6, r0
 800fd46:	d1d6      	bne.n	800fcf6 <_svfiprintf_r+0x176>
 800fd48:	89ab      	ldrh	r3, [r5, #12]
 800fd4a:	065b      	lsls	r3, r3, #25
 800fd4c:	f53f af2c 	bmi.w	800fba8 <_svfiprintf_r+0x28>
 800fd50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd52:	b01d      	add	sp, #116	; 0x74
 800fd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd58:	ab03      	add	r3, sp, #12
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	462a      	mov	r2, r5
 800fd5e:	4b06      	ldr	r3, [pc, #24]	; (800fd78 <_svfiprintf_r+0x1f8>)
 800fd60:	a904      	add	r1, sp, #16
 800fd62:	4638      	mov	r0, r7
 800fd64:	f7fe faae 	bl	800e2c4 <_printf_i>
 800fd68:	e7eb      	b.n	800fd42 <_svfiprintf_r+0x1c2>
 800fd6a:	bf00      	nop
 800fd6c:	08012ba4 	.word	0x08012ba4
 800fd70:	08012bae 	.word	0x08012bae
 800fd74:	0800dd7d 	.word	0x0800dd7d
 800fd78:	0800fac9 	.word	0x0800fac9
 800fd7c:	08012baa 	.word	0x08012baa

0800fd80 <_sbrk_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4d06      	ldr	r5, [pc, #24]	; (800fd9c <_sbrk_r+0x1c>)
 800fd84:	2300      	movs	r3, #0
 800fd86:	4604      	mov	r4, r0
 800fd88:	4608      	mov	r0, r1
 800fd8a:	602b      	str	r3, [r5, #0]
 800fd8c:	f7f2 ff84 	bl	8002c98 <_sbrk>
 800fd90:	1c43      	adds	r3, r0, #1
 800fd92:	d102      	bne.n	800fd9a <_sbrk_r+0x1a>
 800fd94:	682b      	ldr	r3, [r5, #0]
 800fd96:	b103      	cbz	r3, 800fd9a <_sbrk_r+0x1a>
 800fd98:	6023      	str	r3, [r4, #0]
 800fd9a:	bd38      	pop	{r3, r4, r5, pc}
 800fd9c:	20000bb8 	.word	0x20000bb8

0800fda0 <__assert_func>:
 800fda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fda2:	4614      	mov	r4, r2
 800fda4:	461a      	mov	r2, r3
 800fda6:	4b09      	ldr	r3, [pc, #36]	; (800fdcc <__assert_func+0x2c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4605      	mov	r5, r0
 800fdac:	68d8      	ldr	r0, [r3, #12]
 800fdae:	b14c      	cbz	r4, 800fdc4 <__assert_func+0x24>
 800fdb0:	4b07      	ldr	r3, [pc, #28]	; (800fdd0 <__assert_func+0x30>)
 800fdb2:	9100      	str	r1, [sp, #0]
 800fdb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdb8:	4906      	ldr	r1, [pc, #24]	; (800fdd4 <__assert_func+0x34>)
 800fdba:	462b      	mov	r3, r5
 800fdbc:	f000 f80e 	bl	800fddc <fiprintf>
 800fdc0:	f000 faa4 	bl	801030c <abort>
 800fdc4:	4b04      	ldr	r3, [pc, #16]	; (800fdd8 <__assert_func+0x38>)
 800fdc6:	461c      	mov	r4, r3
 800fdc8:	e7f3      	b.n	800fdb2 <__assert_func+0x12>
 800fdca:	bf00      	nop
 800fdcc:	200000dc 	.word	0x200000dc
 800fdd0:	08012bb5 	.word	0x08012bb5
 800fdd4:	08012bc2 	.word	0x08012bc2
 800fdd8:	08012bf0 	.word	0x08012bf0

0800fddc <fiprintf>:
 800fddc:	b40e      	push	{r1, r2, r3}
 800fdde:	b503      	push	{r0, r1, lr}
 800fde0:	4601      	mov	r1, r0
 800fde2:	ab03      	add	r3, sp, #12
 800fde4:	4805      	ldr	r0, [pc, #20]	; (800fdfc <fiprintf+0x20>)
 800fde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdea:	6800      	ldr	r0, [r0, #0]
 800fdec:	9301      	str	r3, [sp, #4]
 800fdee:	f000 f88f 	bl	800ff10 <_vfiprintf_r>
 800fdf2:	b002      	add	sp, #8
 800fdf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdf8:	b003      	add	sp, #12
 800fdfa:	4770      	bx	lr
 800fdfc:	200000dc 	.word	0x200000dc

0800fe00 <__ascii_mbtowc>:
 800fe00:	b082      	sub	sp, #8
 800fe02:	b901      	cbnz	r1, 800fe06 <__ascii_mbtowc+0x6>
 800fe04:	a901      	add	r1, sp, #4
 800fe06:	b142      	cbz	r2, 800fe1a <__ascii_mbtowc+0x1a>
 800fe08:	b14b      	cbz	r3, 800fe1e <__ascii_mbtowc+0x1e>
 800fe0a:	7813      	ldrb	r3, [r2, #0]
 800fe0c:	600b      	str	r3, [r1, #0]
 800fe0e:	7812      	ldrb	r2, [r2, #0]
 800fe10:	1e10      	subs	r0, r2, #0
 800fe12:	bf18      	it	ne
 800fe14:	2001      	movne	r0, #1
 800fe16:	b002      	add	sp, #8
 800fe18:	4770      	bx	lr
 800fe1a:	4610      	mov	r0, r2
 800fe1c:	e7fb      	b.n	800fe16 <__ascii_mbtowc+0x16>
 800fe1e:	f06f 0001 	mvn.w	r0, #1
 800fe22:	e7f8      	b.n	800fe16 <__ascii_mbtowc+0x16>

0800fe24 <memmove>:
 800fe24:	4288      	cmp	r0, r1
 800fe26:	b510      	push	{r4, lr}
 800fe28:	eb01 0402 	add.w	r4, r1, r2
 800fe2c:	d902      	bls.n	800fe34 <memmove+0x10>
 800fe2e:	4284      	cmp	r4, r0
 800fe30:	4623      	mov	r3, r4
 800fe32:	d807      	bhi.n	800fe44 <memmove+0x20>
 800fe34:	1e43      	subs	r3, r0, #1
 800fe36:	42a1      	cmp	r1, r4
 800fe38:	d008      	beq.n	800fe4c <memmove+0x28>
 800fe3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe42:	e7f8      	b.n	800fe36 <memmove+0x12>
 800fe44:	4402      	add	r2, r0
 800fe46:	4601      	mov	r1, r0
 800fe48:	428a      	cmp	r2, r1
 800fe4a:	d100      	bne.n	800fe4e <memmove+0x2a>
 800fe4c:	bd10      	pop	{r4, pc}
 800fe4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe56:	e7f7      	b.n	800fe48 <memmove+0x24>

0800fe58 <__malloc_lock>:
 800fe58:	4801      	ldr	r0, [pc, #4]	; (800fe60 <__malloc_lock+0x8>)
 800fe5a:	f000 bc17 	b.w	801068c <__retarget_lock_acquire_recursive>
 800fe5e:	bf00      	nop
 800fe60:	20000bc0 	.word	0x20000bc0

0800fe64 <__malloc_unlock>:
 800fe64:	4801      	ldr	r0, [pc, #4]	; (800fe6c <__malloc_unlock+0x8>)
 800fe66:	f000 bc12 	b.w	801068e <__retarget_lock_release_recursive>
 800fe6a:	bf00      	nop
 800fe6c:	20000bc0 	.word	0x20000bc0

0800fe70 <_realloc_r>:
 800fe70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe72:	4607      	mov	r7, r0
 800fe74:	4614      	mov	r4, r2
 800fe76:	460e      	mov	r6, r1
 800fe78:	b921      	cbnz	r1, 800fe84 <_realloc_r+0x14>
 800fe7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe7e:	4611      	mov	r1, r2
 800fe80:	f7ff bdc8 	b.w	800fa14 <_malloc_r>
 800fe84:	b922      	cbnz	r2, 800fe90 <_realloc_r+0x20>
 800fe86:	f7ff fd75 	bl	800f974 <_free_r>
 800fe8a:	4625      	mov	r5, r4
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe90:	f000 fc62 	bl	8010758 <_malloc_usable_size_r>
 800fe94:	42a0      	cmp	r0, r4
 800fe96:	d20f      	bcs.n	800feb8 <_realloc_r+0x48>
 800fe98:	4621      	mov	r1, r4
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	f7ff fdba 	bl	800fa14 <_malloc_r>
 800fea0:	4605      	mov	r5, r0
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d0f2      	beq.n	800fe8c <_realloc_r+0x1c>
 800fea6:	4631      	mov	r1, r6
 800fea8:	4622      	mov	r2, r4
 800feaa:	f7fd feb1 	bl	800dc10 <memcpy>
 800feae:	4631      	mov	r1, r6
 800feb0:	4638      	mov	r0, r7
 800feb2:	f7ff fd5f 	bl	800f974 <_free_r>
 800feb6:	e7e9      	b.n	800fe8c <_realloc_r+0x1c>
 800feb8:	4635      	mov	r5, r6
 800feba:	e7e7      	b.n	800fe8c <_realloc_r+0x1c>

0800febc <__sfputc_r>:
 800febc:	6893      	ldr	r3, [r2, #8]
 800febe:	3b01      	subs	r3, #1
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	b410      	push	{r4}
 800fec4:	6093      	str	r3, [r2, #8]
 800fec6:	da08      	bge.n	800feda <__sfputc_r+0x1e>
 800fec8:	6994      	ldr	r4, [r2, #24]
 800feca:	42a3      	cmp	r3, r4
 800fecc:	db01      	blt.n	800fed2 <__sfputc_r+0x16>
 800fece:	290a      	cmp	r1, #10
 800fed0:	d103      	bne.n	800feda <__sfputc_r+0x1e>
 800fed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fed6:	f000 b94b 	b.w	8010170 <__swbuf_r>
 800feda:	6813      	ldr	r3, [r2, #0]
 800fedc:	1c58      	adds	r0, r3, #1
 800fede:	6010      	str	r0, [r2, #0]
 800fee0:	7019      	strb	r1, [r3, #0]
 800fee2:	4608      	mov	r0, r1
 800fee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <__sfputs_r>:
 800feea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feec:	4606      	mov	r6, r0
 800feee:	460f      	mov	r7, r1
 800fef0:	4614      	mov	r4, r2
 800fef2:	18d5      	adds	r5, r2, r3
 800fef4:	42ac      	cmp	r4, r5
 800fef6:	d101      	bne.n	800fefc <__sfputs_r+0x12>
 800fef8:	2000      	movs	r0, #0
 800fefa:	e007      	b.n	800ff0c <__sfputs_r+0x22>
 800fefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff00:	463a      	mov	r2, r7
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7ff ffda 	bl	800febc <__sfputc_r>
 800ff08:	1c43      	adds	r3, r0, #1
 800ff0a:	d1f3      	bne.n	800fef4 <__sfputs_r+0xa>
 800ff0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff10 <_vfiprintf_r>:
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	460d      	mov	r5, r1
 800ff16:	b09d      	sub	sp, #116	; 0x74
 800ff18:	4614      	mov	r4, r2
 800ff1a:	4698      	mov	r8, r3
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	b118      	cbz	r0, 800ff28 <_vfiprintf_r+0x18>
 800ff20:	6983      	ldr	r3, [r0, #24]
 800ff22:	b90b      	cbnz	r3, 800ff28 <_vfiprintf_r+0x18>
 800ff24:	f000 fb14 	bl	8010550 <__sinit>
 800ff28:	4b89      	ldr	r3, [pc, #548]	; (8010150 <_vfiprintf_r+0x240>)
 800ff2a:	429d      	cmp	r5, r3
 800ff2c:	d11b      	bne.n	800ff66 <_vfiprintf_r+0x56>
 800ff2e:	6875      	ldr	r5, [r6, #4]
 800ff30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff32:	07d9      	lsls	r1, r3, #31
 800ff34:	d405      	bmi.n	800ff42 <_vfiprintf_r+0x32>
 800ff36:	89ab      	ldrh	r3, [r5, #12]
 800ff38:	059a      	lsls	r2, r3, #22
 800ff3a:	d402      	bmi.n	800ff42 <_vfiprintf_r+0x32>
 800ff3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff3e:	f000 fba5 	bl	801068c <__retarget_lock_acquire_recursive>
 800ff42:	89ab      	ldrh	r3, [r5, #12]
 800ff44:	071b      	lsls	r3, r3, #28
 800ff46:	d501      	bpl.n	800ff4c <_vfiprintf_r+0x3c>
 800ff48:	692b      	ldr	r3, [r5, #16]
 800ff4a:	b9eb      	cbnz	r3, 800ff88 <_vfiprintf_r+0x78>
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4630      	mov	r0, r6
 800ff50:	f000 f96e 	bl	8010230 <__swsetup_r>
 800ff54:	b1c0      	cbz	r0, 800ff88 <_vfiprintf_r+0x78>
 800ff56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff58:	07dc      	lsls	r4, r3, #31
 800ff5a:	d50e      	bpl.n	800ff7a <_vfiprintf_r+0x6a>
 800ff5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff60:	b01d      	add	sp, #116	; 0x74
 800ff62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff66:	4b7b      	ldr	r3, [pc, #492]	; (8010154 <_vfiprintf_r+0x244>)
 800ff68:	429d      	cmp	r5, r3
 800ff6a:	d101      	bne.n	800ff70 <_vfiprintf_r+0x60>
 800ff6c:	68b5      	ldr	r5, [r6, #8]
 800ff6e:	e7df      	b.n	800ff30 <_vfiprintf_r+0x20>
 800ff70:	4b79      	ldr	r3, [pc, #484]	; (8010158 <_vfiprintf_r+0x248>)
 800ff72:	429d      	cmp	r5, r3
 800ff74:	bf08      	it	eq
 800ff76:	68f5      	ldreq	r5, [r6, #12]
 800ff78:	e7da      	b.n	800ff30 <_vfiprintf_r+0x20>
 800ff7a:	89ab      	ldrh	r3, [r5, #12]
 800ff7c:	0598      	lsls	r0, r3, #22
 800ff7e:	d4ed      	bmi.n	800ff5c <_vfiprintf_r+0x4c>
 800ff80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff82:	f000 fb84 	bl	801068e <__retarget_lock_release_recursive>
 800ff86:	e7e9      	b.n	800ff5c <_vfiprintf_r+0x4c>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff8c:	2320      	movs	r3, #32
 800ff8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff96:	2330      	movs	r3, #48	; 0x30
 800ff98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801015c <_vfiprintf_r+0x24c>
 800ff9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffa0:	f04f 0901 	mov.w	r9, #1
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	469a      	mov	sl, r3
 800ffa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffac:	b10a      	cbz	r2, 800ffb2 <_vfiprintf_r+0xa2>
 800ffae:	2a25      	cmp	r2, #37	; 0x25
 800ffb0:	d1f9      	bne.n	800ffa6 <_vfiprintf_r+0x96>
 800ffb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ffb6:	d00b      	beq.n	800ffd0 <_vfiprintf_r+0xc0>
 800ffb8:	465b      	mov	r3, fp
 800ffba:	4622      	mov	r2, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f7ff ff93 	bl	800feea <__sfputs_r>
 800ffc4:	3001      	adds	r0, #1
 800ffc6:	f000 80aa 	beq.w	801011e <_vfiprintf_r+0x20e>
 800ffca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffcc:	445a      	add	r2, fp
 800ffce:	9209      	str	r2, [sp, #36]	; 0x24
 800ffd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 80a2 	beq.w	801011e <_vfiprintf_r+0x20e>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffe4:	f10a 0a01 	add.w	sl, sl, #1
 800ffe8:	9304      	str	r3, [sp, #16]
 800ffea:	9307      	str	r3, [sp, #28]
 800ffec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fff0:	931a      	str	r3, [sp, #104]	; 0x68
 800fff2:	4654      	mov	r4, sl
 800fff4:	2205      	movs	r2, #5
 800fff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fffa:	4858      	ldr	r0, [pc, #352]	; (801015c <_vfiprintf_r+0x24c>)
 800fffc:	f7f0 f900 	bl	8000200 <memchr>
 8010000:	9a04      	ldr	r2, [sp, #16]
 8010002:	b9d8      	cbnz	r0, 801003c <_vfiprintf_r+0x12c>
 8010004:	06d1      	lsls	r1, r2, #27
 8010006:	bf44      	itt	mi
 8010008:	2320      	movmi	r3, #32
 801000a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801000e:	0713      	lsls	r3, r2, #28
 8010010:	bf44      	itt	mi
 8010012:	232b      	movmi	r3, #43	; 0x2b
 8010014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010018:	f89a 3000 	ldrb.w	r3, [sl]
 801001c:	2b2a      	cmp	r3, #42	; 0x2a
 801001e:	d015      	beq.n	801004c <_vfiprintf_r+0x13c>
 8010020:	9a07      	ldr	r2, [sp, #28]
 8010022:	4654      	mov	r4, sl
 8010024:	2000      	movs	r0, #0
 8010026:	f04f 0c0a 	mov.w	ip, #10
 801002a:	4621      	mov	r1, r4
 801002c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010030:	3b30      	subs	r3, #48	; 0x30
 8010032:	2b09      	cmp	r3, #9
 8010034:	d94e      	bls.n	80100d4 <_vfiprintf_r+0x1c4>
 8010036:	b1b0      	cbz	r0, 8010066 <_vfiprintf_r+0x156>
 8010038:	9207      	str	r2, [sp, #28]
 801003a:	e014      	b.n	8010066 <_vfiprintf_r+0x156>
 801003c:	eba0 0308 	sub.w	r3, r0, r8
 8010040:	fa09 f303 	lsl.w	r3, r9, r3
 8010044:	4313      	orrs	r3, r2
 8010046:	9304      	str	r3, [sp, #16]
 8010048:	46a2      	mov	sl, r4
 801004a:	e7d2      	b.n	800fff2 <_vfiprintf_r+0xe2>
 801004c:	9b03      	ldr	r3, [sp, #12]
 801004e:	1d19      	adds	r1, r3, #4
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	9103      	str	r1, [sp, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	bfbb      	ittet	lt
 8010058:	425b      	neglt	r3, r3
 801005a:	f042 0202 	orrlt.w	r2, r2, #2
 801005e:	9307      	strge	r3, [sp, #28]
 8010060:	9307      	strlt	r3, [sp, #28]
 8010062:	bfb8      	it	lt
 8010064:	9204      	strlt	r2, [sp, #16]
 8010066:	7823      	ldrb	r3, [r4, #0]
 8010068:	2b2e      	cmp	r3, #46	; 0x2e
 801006a:	d10c      	bne.n	8010086 <_vfiprintf_r+0x176>
 801006c:	7863      	ldrb	r3, [r4, #1]
 801006e:	2b2a      	cmp	r3, #42	; 0x2a
 8010070:	d135      	bne.n	80100de <_vfiprintf_r+0x1ce>
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	1d1a      	adds	r2, r3, #4
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	9203      	str	r2, [sp, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	bfb8      	it	lt
 801007e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010082:	3402      	adds	r4, #2
 8010084:	9305      	str	r3, [sp, #20]
 8010086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801016c <_vfiprintf_r+0x25c>
 801008a:	7821      	ldrb	r1, [r4, #0]
 801008c:	2203      	movs	r2, #3
 801008e:	4650      	mov	r0, sl
 8010090:	f7f0 f8b6 	bl	8000200 <memchr>
 8010094:	b140      	cbz	r0, 80100a8 <_vfiprintf_r+0x198>
 8010096:	2340      	movs	r3, #64	; 0x40
 8010098:	eba0 000a 	sub.w	r0, r0, sl
 801009c:	fa03 f000 	lsl.w	r0, r3, r0
 80100a0:	9b04      	ldr	r3, [sp, #16]
 80100a2:	4303      	orrs	r3, r0
 80100a4:	3401      	adds	r4, #1
 80100a6:	9304      	str	r3, [sp, #16]
 80100a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ac:	482c      	ldr	r0, [pc, #176]	; (8010160 <_vfiprintf_r+0x250>)
 80100ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100b2:	2206      	movs	r2, #6
 80100b4:	f7f0 f8a4 	bl	8000200 <memchr>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d03f      	beq.n	801013c <_vfiprintf_r+0x22c>
 80100bc:	4b29      	ldr	r3, [pc, #164]	; (8010164 <_vfiprintf_r+0x254>)
 80100be:	bb1b      	cbnz	r3, 8010108 <_vfiprintf_r+0x1f8>
 80100c0:	9b03      	ldr	r3, [sp, #12]
 80100c2:	3307      	adds	r3, #7
 80100c4:	f023 0307 	bic.w	r3, r3, #7
 80100c8:	3308      	adds	r3, #8
 80100ca:	9303      	str	r3, [sp, #12]
 80100cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ce:	443b      	add	r3, r7
 80100d0:	9309      	str	r3, [sp, #36]	; 0x24
 80100d2:	e767      	b.n	800ffa4 <_vfiprintf_r+0x94>
 80100d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80100d8:	460c      	mov	r4, r1
 80100da:	2001      	movs	r0, #1
 80100dc:	e7a5      	b.n	801002a <_vfiprintf_r+0x11a>
 80100de:	2300      	movs	r3, #0
 80100e0:	3401      	adds	r4, #1
 80100e2:	9305      	str	r3, [sp, #20]
 80100e4:	4619      	mov	r1, r3
 80100e6:	f04f 0c0a 	mov.w	ip, #10
 80100ea:	4620      	mov	r0, r4
 80100ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100f0:	3a30      	subs	r2, #48	; 0x30
 80100f2:	2a09      	cmp	r2, #9
 80100f4:	d903      	bls.n	80100fe <_vfiprintf_r+0x1ee>
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d0c5      	beq.n	8010086 <_vfiprintf_r+0x176>
 80100fa:	9105      	str	r1, [sp, #20]
 80100fc:	e7c3      	b.n	8010086 <_vfiprintf_r+0x176>
 80100fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010102:	4604      	mov	r4, r0
 8010104:	2301      	movs	r3, #1
 8010106:	e7f0      	b.n	80100ea <_vfiprintf_r+0x1da>
 8010108:	ab03      	add	r3, sp, #12
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	462a      	mov	r2, r5
 801010e:	4b16      	ldr	r3, [pc, #88]	; (8010168 <_vfiprintf_r+0x258>)
 8010110:	a904      	add	r1, sp, #16
 8010112:	4630      	mov	r0, r6
 8010114:	f7fd fe32 	bl	800dd7c <_printf_float>
 8010118:	4607      	mov	r7, r0
 801011a:	1c78      	adds	r0, r7, #1
 801011c:	d1d6      	bne.n	80100cc <_vfiprintf_r+0x1bc>
 801011e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010120:	07d9      	lsls	r1, r3, #31
 8010122:	d405      	bmi.n	8010130 <_vfiprintf_r+0x220>
 8010124:	89ab      	ldrh	r3, [r5, #12]
 8010126:	059a      	lsls	r2, r3, #22
 8010128:	d402      	bmi.n	8010130 <_vfiprintf_r+0x220>
 801012a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801012c:	f000 faaf 	bl	801068e <__retarget_lock_release_recursive>
 8010130:	89ab      	ldrh	r3, [r5, #12]
 8010132:	065b      	lsls	r3, r3, #25
 8010134:	f53f af12 	bmi.w	800ff5c <_vfiprintf_r+0x4c>
 8010138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801013a:	e711      	b.n	800ff60 <_vfiprintf_r+0x50>
 801013c:	ab03      	add	r3, sp, #12
 801013e:	9300      	str	r3, [sp, #0]
 8010140:	462a      	mov	r2, r5
 8010142:	4b09      	ldr	r3, [pc, #36]	; (8010168 <_vfiprintf_r+0x258>)
 8010144:	a904      	add	r1, sp, #16
 8010146:	4630      	mov	r0, r6
 8010148:	f7fe f8bc 	bl	800e2c4 <_printf_i>
 801014c:	e7e4      	b.n	8010118 <_vfiprintf_r+0x208>
 801014e:	bf00      	nop
 8010150:	08012d1c 	.word	0x08012d1c
 8010154:	08012d3c 	.word	0x08012d3c
 8010158:	08012cfc 	.word	0x08012cfc
 801015c:	08012ba4 	.word	0x08012ba4
 8010160:	08012bae 	.word	0x08012bae
 8010164:	0800dd7d 	.word	0x0800dd7d
 8010168:	0800feeb 	.word	0x0800feeb
 801016c:	08012baa 	.word	0x08012baa

08010170 <__swbuf_r>:
 8010170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010172:	460e      	mov	r6, r1
 8010174:	4614      	mov	r4, r2
 8010176:	4605      	mov	r5, r0
 8010178:	b118      	cbz	r0, 8010182 <__swbuf_r+0x12>
 801017a:	6983      	ldr	r3, [r0, #24]
 801017c:	b90b      	cbnz	r3, 8010182 <__swbuf_r+0x12>
 801017e:	f000 f9e7 	bl	8010550 <__sinit>
 8010182:	4b21      	ldr	r3, [pc, #132]	; (8010208 <__swbuf_r+0x98>)
 8010184:	429c      	cmp	r4, r3
 8010186:	d12b      	bne.n	80101e0 <__swbuf_r+0x70>
 8010188:	686c      	ldr	r4, [r5, #4]
 801018a:	69a3      	ldr	r3, [r4, #24]
 801018c:	60a3      	str	r3, [r4, #8]
 801018e:	89a3      	ldrh	r3, [r4, #12]
 8010190:	071a      	lsls	r2, r3, #28
 8010192:	d52f      	bpl.n	80101f4 <__swbuf_r+0x84>
 8010194:	6923      	ldr	r3, [r4, #16]
 8010196:	b36b      	cbz	r3, 80101f4 <__swbuf_r+0x84>
 8010198:	6923      	ldr	r3, [r4, #16]
 801019a:	6820      	ldr	r0, [r4, #0]
 801019c:	1ac0      	subs	r0, r0, r3
 801019e:	6963      	ldr	r3, [r4, #20]
 80101a0:	b2f6      	uxtb	r6, r6
 80101a2:	4283      	cmp	r3, r0
 80101a4:	4637      	mov	r7, r6
 80101a6:	dc04      	bgt.n	80101b2 <__swbuf_r+0x42>
 80101a8:	4621      	mov	r1, r4
 80101aa:	4628      	mov	r0, r5
 80101ac:	f000 f93c 	bl	8010428 <_fflush_r>
 80101b0:	bb30      	cbnz	r0, 8010200 <__swbuf_r+0x90>
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	3b01      	subs	r3, #1
 80101b6:	60a3      	str	r3, [r4, #8]
 80101b8:	6823      	ldr	r3, [r4, #0]
 80101ba:	1c5a      	adds	r2, r3, #1
 80101bc:	6022      	str	r2, [r4, #0]
 80101be:	701e      	strb	r6, [r3, #0]
 80101c0:	6963      	ldr	r3, [r4, #20]
 80101c2:	3001      	adds	r0, #1
 80101c4:	4283      	cmp	r3, r0
 80101c6:	d004      	beq.n	80101d2 <__swbuf_r+0x62>
 80101c8:	89a3      	ldrh	r3, [r4, #12]
 80101ca:	07db      	lsls	r3, r3, #31
 80101cc:	d506      	bpl.n	80101dc <__swbuf_r+0x6c>
 80101ce:	2e0a      	cmp	r6, #10
 80101d0:	d104      	bne.n	80101dc <__swbuf_r+0x6c>
 80101d2:	4621      	mov	r1, r4
 80101d4:	4628      	mov	r0, r5
 80101d6:	f000 f927 	bl	8010428 <_fflush_r>
 80101da:	b988      	cbnz	r0, 8010200 <__swbuf_r+0x90>
 80101dc:	4638      	mov	r0, r7
 80101de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101e0:	4b0a      	ldr	r3, [pc, #40]	; (801020c <__swbuf_r+0x9c>)
 80101e2:	429c      	cmp	r4, r3
 80101e4:	d101      	bne.n	80101ea <__swbuf_r+0x7a>
 80101e6:	68ac      	ldr	r4, [r5, #8]
 80101e8:	e7cf      	b.n	801018a <__swbuf_r+0x1a>
 80101ea:	4b09      	ldr	r3, [pc, #36]	; (8010210 <__swbuf_r+0xa0>)
 80101ec:	429c      	cmp	r4, r3
 80101ee:	bf08      	it	eq
 80101f0:	68ec      	ldreq	r4, [r5, #12]
 80101f2:	e7ca      	b.n	801018a <__swbuf_r+0x1a>
 80101f4:	4621      	mov	r1, r4
 80101f6:	4628      	mov	r0, r5
 80101f8:	f000 f81a 	bl	8010230 <__swsetup_r>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d0cb      	beq.n	8010198 <__swbuf_r+0x28>
 8010200:	f04f 37ff 	mov.w	r7, #4294967295
 8010204:	e7ea      	b.n	80101dc <__swbuf_r+0x6c>
 8010206:	bf00      	nop
 8010208:	08012d1c 	.word	0x08012d1c
 801020c:	08012d3c 	.word	0x08012d3c
 8010210:	08012cfc 	.word	0x08012cfc

08010214 <__ascii_wctomb>:
 8010214:	b149      	cbz	r1, 801022a <__ascii_wctomb+0x16>
 8010216:	2aff      	cmp	r2, #255	; 0xff
 8010218:	bf85      	ittet	hi
 801021a:	238a      	movhi	r3, #138	; 0x8a
 801021c:	6003      	strhi	r3, [r0, #0]
 801021e:	700a      	strbls	r2, [r1, #0]
 8010220:	f04f 30ff 	movhi.w	r0, #4294967295
 8010224:	bf98      	it	ls
 8010226:	2001      	movls	r0, #1
 8010228:	4770      	bx	lr
 801022a:	4608      	mov	r0, r1
 801022c:	4770      	bx	lr
	...

08010230 <__swsetup_r>:
 8010230:	4b32      	ldr	r3, [pc, #200]	; (80102fc <__swsetup_r+0xcc>)
 8010232:	b570      	push	{r4, r5, r6, lr}
 8010234:	681d      	ldr	r5, [r3, #0]
 8010236:	4606      	mov	r6, r0
 8010238:	460c      	mov	r4, r1
 801023a:	b125      	cbz	r5, 8010246 <__swsetup_r+0x16>
 801023c:	69ab      	ldr	r3, [r5, #24]
 801023e:	b913      	cbnz	r3, 8010246 <__swsetup_r+0x16>
 8010240:	4628      	mov	r0, r5
 8010242:	f000 f985 	bl	8010550 <__sinit>
 8010246:	4b2e      	ldr	r3, [pc, #184]	; (8010300 <__swsetup_r+0xd0>)
 8010248:	429c      	cmp	r4, r3
 801024a:	d10f      	bne.n	801026c <__swsetup_r+0x3c>
 801024c:	686c      	ldr	r4, [r5, #4]
 801024e:	89a3      	ldrh	r3, [r4, #12]
 8010250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010254:	0719      	lsls	r1, r3, #28
 8010256:	d42c      	bmi.n	80102b2 <__swsetup_r+0x82>
 8010258:	06dd      	lsls	r5, r3, #27
 801025a:	d411      	bmi.n	8010280 <__swsetup_r+0x50>
 801025c:	2309      	movs	r3, #9
 801025e:	6033      	str	r3, [r6, #0]
 8010260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010264:	81a3      	strh	r3, [r4, #12]
 8010266:	f04f 30ff 	mov.w	r0, #4294967295
 801026a:	e03e      	b.n	80102ea <__swsetup_r+0xba>
 801026c:	4b25      	ldr	r3, [pc, #148]	; (8010304 <__swsetup_r+0xd4>)
 801026e:	429c      	cmp	r4, r3
 8010270:	d101      	bne.n	8010276 <__swsetup_r+0x46>
 8010272:	68ac      	ldr	r4, [r5, #8]
 8010274:	e7eb      	b.n	801024e <__swsetup_r+0x1e>
 8010276:	4b24      	ldr	r3, [pc, #144]	; (8010308 <__swsetup_r+0xd8>)
 8010278:	429c      	cmp	r4, r3
 801027a:	bf08      	it	eq
 801027c:	68ec      	ldreq	r4, [r5, #12]
 801027e:	e7e6      	b.n	801024e <__swsetup_r+0x1e>
 8010280:	0758      	lsls	r0, r3, #29
 8010282:	d512      	bpl.n	80102aa <__swsetup_r+0x7a>
 8010284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010286:	b141      	cbz	r1, 801029a <__swsetup_r+0x6a>
 8010288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801028c:	4299      	cmp	r1, r3
 801028e:	d002      	beq.n	8010296 <__swsetup_r+0x66>
 8010290:	4630      	mov	r0, r6
 8010292:	f7ff fb6f 	bl	800f974 <_free_r>
 8010296:	2300      	movs	r3, #0
 8010298:	6363      	str	r3, [r4, #52]	; 0x34
 801029a:	89a3      	ldrh	r3, [r4, #12]
 801029c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102a0:	81a3      	strh	r3, [r4, #12]
 80102a2:	2300      	movs	r3, #0
 80102a4:	6063      	str	r3, [r4, #4]
 80102a6:	6923      	ldr	r3, [r4, #16]
 80102a8:	6023      	str	r3, [r4, #0]
 80102aa:	89a3      	ldrh	r3, [r4, #12]
 80102ac:	f043 0308 	orr.w	r3, r3, #8
 80102b0:	81a3      	strh	r3, [r4, #12]
 80102b2:	6923      	ldr	r3, [r4, #16]
 80102b4:	b94b      	cbnz	r3, 80102ca <__swsetup_r+0x9a>
 80102b6:	89a3      	ldrh	r3, [r4, #12]
 80102b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102c0:	d003      	beq.n	80102ca <__swsetup_r+0x9a>
 80102c2:	4621      	mov	r1, r4
 80102c4:	4630      	mov	r0, r6
 80102c6:	f000 fa07 	bl	80106d8 <__smakebuf_r>
 80102ca:	89a0      	ldrh	r0, [r4, #12]
 80102cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102d0:	f010 0301 	ands.w	r3, r0, #1
 80102d4:	d00a      	beq.n	80102ec <__swsetup_r+0xbc>
 80102d6:	2300      	movs	r3, #0
 80102d8:	60a3      	str	r3, [r4, #8]
 80102da:	6963      	ldr	r3, [r4, #20]
 80102dc:	425b      	negs	r3, r3
 80102de:	61a3      	str	r3, [r4, #24]
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	b943      	cbnz	r3, 80102f6 <__swsetup_r+0xc6>
 80102e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80102e8:	d1ba      	bne.n	8010260 <__swsetup_r+0x30>
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
 80102ec:	0781      	lsls	r1, r0, #30
 80102ee:	bf58      	it	pl
 80102f0:	6963      	ldrpl	r3, [r4, #20]
 80102f2:	60a3      	str	r3, [r4, #8]
 80102f4:	e7f4      	b.n	80102e0 <__swsetup_r+0xb0>
 80102f6:	2000      	movs	r0, #0
 80102f8:	e7f7      	b.n	80102ea <__swsetup_r+0xba>
 80102fa:	bf00      	nop
 80102fc:	200000dc 	.word	0x200000dc
 8010300:	08012d1c 	.word	0x08012d1c
 8010304:	08012d3c 	.word	0x08012d3c
 8010308:	08012cfc 	.word	0x08012cfc

0801030c <abort>:
 801030c:	b508      	push	{r3, lr}
 801030e:	2006      	movs	r0, #6
 8010310:	f000 fa52 	bl	80107b8 <raise>
 8010314:	2001      	movs	r0, #1
 8010316:	f7f2 fc47 	bl	8002ba8 <_exit>
	...

0801031c <__sflush_r>:
 801031c:	898a      	ldrh	r2, [r1, #12]
 801031e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010322:	4605      	mov	r5, r0
 8010324:	0710      	lsls	r0, r2, #28
 8010326:	460c      	mov	r4, r1
 8010328:	d458      	bmi.n	80103dc <__sflush_r+0xc0>
 801032a:	684b      	ldr	r3, [r1, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	dc05      	bgt.n	801033c <__sflush_r+0x20>
 8010330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010332:	2b00      	cmp	r3, #0
 8010334:	dc02      	bgt.n	801033c <__sflush_r+0x20>
 8010336:	2000      	movs	r0, #0
 8010338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801033c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801033e:	2e00      	cmp	r6, #0
 8010340:	d0f9      	beq.n	8010336 <__sflush_r+0x1a>
 8010342:	2300      	movs	r3, #0
 8010344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010348:	682f      	ldr	r7, [r5, #0]
 801034a:	602b      	str	r3, [r5, #0]
 801034c:	d032      	beq.n	80103b4 <__sflush_r+0x98>
 801034e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010350:	89a3      	ldrh	r3, [r4, #12]
 8010352:	075a      	lsls	r2, r3, #29
 8010354:	d505      	bpl.n	8010362 <__sflush_r+0x46>
 8010356:	6863      	ldr	r3, [r4, #4]
 8010358:	1ac0      	subs	r0, r0, r3
 801035a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801035c:	b10b      	cbz	r3, 8010362 <__sflush_r+0x46>
 801035e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010360:	1ac0      	subs	r0, r0, r3
 8010362:	2300      	movs	r3, #0
 8010364:	4602      	mov	r2, r0
 8010366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010368:	6a21      	ldr	r1, [r4, #32]
 801036a:	4628      	mov	r0, r5
 801036c:	47b0      	blx	r6
 801036e:	1c43      	adds	r3, r0, #1
 8010370:	89a3      	ldrh	r3, [r4, #12]
 8010372:	d106      	bne.n	8010382 <__sflush_r+0x66>
 8010374:	6829      	ldr	r1, [r5, #0]
 8010376:	291d      	cmp	r1, #29
 8010378:	d82c      	bhi.n	80103d4 <__sflush_r+0xb8>
 801037a:	4a2a      	ldr	r2, [pc, #168]	; (8010424 <__sflush_r+0x108>)
 801037c:	40ca      	lsrs	r2, r1
 801037e:	07d6      	lsls	r6, r2, #31
 8010380:	d528      	bpl.n	80103d4 <__sflush_r+0xb8>
 8010382:	2200      	movs	r2, #0
 8010384:	6062      	str	r2, [r4, #4]
 8010386:	04d9      	lsls	r1, r3, #19
 8010388:	6922      	ldr	r2, [r4, #16]
 801038a:	6022      	str	r2, [r4, #0]
 801038c:	d504      	bpl.n	8010398 <__sflush_r+0x7c>
 801038e:	1c42      	adds	r2, r0, #1
 8010390:	d101      	bne.n	8010396 <__sflush_r+0x7a>
 8010392:	682b      	ldr	r3, [r5, #0]
 8010394:	b903      	cbnz	r3, 8010398 <__sflush_r+0x7c>
 8010396:	6560      	str	r0, [r4, #84]	; 0x54
 8010398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801039a:	602f      	str	r7, [r5, #0]
 801039c:	2900      	cmp	r1, #0
 801039e:	d0ca      	beq.n	8010336 <__sflush_r+0x1a>
 80103a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103a4:	4299      	cmp	r1, r3
 80103a6:	d002      	beq.n	80103ae <__sflush_r+0x92>
 80103a8:	4628      	mov	r0, r5
 80103aa:	f7ff fae3 	bl	800f974 <_free_r>
 80103ae:	2000      	movs	r0, #0
 80103b0:	6360      	str	r0, [r4, #52]	; 0x34
 80103b2:	e7c1      	b.n	8010338 <__sflush_r+0x1c>
 80103b4:	6a21      	ldr	r1, [r4, #32]
 80103b6:	2301      	movs	r3, #1
 80103b8:	4628      	mov	r0, r5
 80103ba:	47b0      	blx	r6
 80103bc:	1c41      	adds	r1, r0, #1
 80103be:	d1c7      	bne.n	8010350 <__sflush_r+0x34>
 80103c0:	682b      	ldr	r3, [r5, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0c4      	beq.n	8010350 <__sflush_r+0x34>
 80103c6:	2b1d      	cmp	r3, #29
 80103c8:	d001      	beq.n	80103ce <__sflush_r+0xb2>
 80103ca:	2b16      	cmp	r3, #22
 80103cc:	d101      	bne.n	80103d2 <__sflush_r+0xb6>
 80103ce:	602f      	str	r7, [r5, #0]
 80103d0:	e7b1      	b.n	8010336 <__sflush_r+0x1a>
 80103d2:	89a3      	ldrh	r3, [r4, #12]
 80103d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103d8:	81a3      	strh	r3, [r4, #12]
 80103da:	e7ad      	b.n	8010338 <__sflush_r+0x1c>
 80103dc:	690f      	ldr	r7, [r1, #16]
 80103de:	2f00      	cmp	r7, #0
 80103e0:	d0a9      	beq.n	8010336 <__sflush_r+0x1a>
 80103e2:	0793      	lsls	r3, r2, #30
 80103e4:	680e      	ldr	r6, [r1, #0]
 80103e6:	bf08      	it	eq
 80103e8:	694b      	ldreq	r3, [r1, #20]
 80103ea:	600f      	str	r7, [r1, #0]
 80103ec:	bf18      	it	ne
 80103ee:	2300      	movne	r3, #0
 80103f0:	eba6 0807 	sub.w	r8, r6, r7
 80103f4:	608b      	str	r3, [r1, #8]
 80103f6:	f1b8 0f00 	cmp.w	r8, #0
 80103fa:	dd9c      	ble.n	8010336 <__sflush_r+0x1a>
 80103fc:	6a21      	ldr	r1, [r4, #32]
 80103fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010400:	4643      	mov	r3, r8
 8010402:	463a      	mov	r2, r7
 8010404:	4628      	mov	r0, r5
 8010406:	47b0      	blx	r6
 8010408:	2800      	cmp	r0, #0
 801040a:	dc06      	bgt.n	801041a <__sflush_r+0xfe>
 801040c:	89a3      	ldrh	r3, [r4, #12]
 801040e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010412:	81a3      	strh	r3, [r4, #12]
 8010414:	f04f 30ff 	mov.w	r0, #4294967295
 8010418:	e78e      	b.n	8010338 <__sflush_r+0x1c>
 801041a:	4407      	add	r7, r0
 801041c:	eba8 0800 	sub.w	r8, r8, r0
 8010420:	e7e9      	b.n	80103f6 <__sflush_r+0xda>
 8010422:	bf00      	nop
 8010424:	20400001 	.word	0x20400001

08010428 <_fflush_r>:
 8010428:	b538      	push	{r3, r4, r5, lr}
 801042a:	690b      	ldr	r3, [r1, #16]
 801042c:	4605      	mov	r5, r0
 801042e:	460c      	mov	r4, r1
 8010430:	b913      	cbnz	r3, 8010438 <_fflush_r+0x10>
 8010432:	2500      	movs	r5, #0
 8010434:	4628      	mov	r0, r5
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	b118      	cbz	r0, 8010442 <_fflush_r+0x1a>
 801043a:	6983      	ldr	r3, [r0, #24]
 801043c:	b90b      	cbnz	r3, 8010442 <_fflush_r+0x1a>
 801043e:	f000 f887 	bl	8010550 <__sinit>
 8010442:	4b14      	ldr	r3, [pc, #80]	; (8010494 <_fflush_r+0x6c>)
 8010444:	429c      	cmp	r4, r3
 8010446:	d11b      	bne.n	8010480 <_fflush_r+0x58>
 8010448:	686c      	ldr	r4, [r5, #4]
 801044a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d0ef      	beq.n	8010432 <_fflush_r+0xa>
 8010452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010454:	07d0      	lsls	r0, r2, #31
 8010456:	d404      	bmi.n	8010462 <_fflush_r+0x3a>
 8010458:	0599      	lsls	r1, r3, #22
 801045a:	d402      	bmi.n	8010462 <_fflush_r+0x3a>
 801045c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801045e:	f000 f915 	bl	801068c <__retarget_lock_acquire_recursive>
 8010462:	4628      	mov	r0, r5
 8010464:	4621      	mov	r1, r4
 8010466:	f7ff ff59 	bl	801031c <__sflush_r>
 801046a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801046c:	07da      	lsls	r2, r3, #31
 801046e:	4605      	mov	r5, r0
 8010470:	d4e0      	bmi.n	8010434 <_fflush_r+0xc>
 8010472:	89a3      	ldrh	r3, [r4, #12]
 8010474:	059b      	lsls	r3, r3, #22
 8010476:	d4dd      	bmi.n	8010434 <_fflush_r+0xc>
 8010478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801047a:	f000 f908 	bl	801068e <__retarget_lock_release_recursive>
 801047e:	e7d9      	b.n	8010434 <_fflush_r+0xc>
 8010480:	4b05      	ldr	r3, [pc, #20]	; (8010498 <_fflush_r+0x70>)
 8010482:	429c      	cmp	r4, r3
 8010484:	d101      	bne.n	801048a <_fflush_r+0x62>
 8010486:	68ac      	ldr	r4, [r5, #8]
 8010488:	e7df      	b.n	801044a <_fflush_r+0x22>
 801048a:	4b04      	ldr	r3, [pc, #16]	; (801049c <_fflush_r+0x74>)
 801048c:	429c      	cmp	r4, r3
 801048e:	bf08      	it	eq
 8010490:	68ec      	ldreq	r4, [r5, #12]
 8010492:	e7da      	b.n	801044a <_fflush_r+0x22>
 8010494:	08012d1c 	.word	0x08012d1c
 8010498:	08012d3c 	.word	0x08012d3c
 801049c:	08012cfc 	.word	0x08012cfc

080104a0 <std>:
 80104a0:	2300      	movs	r3, #0
 80104a2:	b510      	push	{r4, lr}
 80104a4:	4604      	mov	r4, r0
 80104a6:	e9c0 3300 	strd	r3, r3, [r0]
 80104aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80104ae:	6083      	str	r3, [r0, #8]
 80104b0:	8181      	strh	r1, [r0, #12]
 80104b2:	6643      	str	r3, [r0, #100]	; 0x64
 80104b4:	81c2      	strh	r2, [r0, #14]
 80104b6:	6183      	str	r3, [r0, #24]
 80104b8:	4619      	mov	r1, r3
 80104ba:	2208      	movs	r2, #8
 80104bc:	305c      	adds	r0, #92	; 0x5c
 80104be:	f7fd fbb5 	bl	800dc2c <memset>
 80104c2:	4b05      	ldr	r3, [pc, #20]	; (80104d8 <std+0x38>)
 80104c4:	6263      	str	r3, [r4, #36]	; 0x24
 80104c6:	4b05      	ldr	r3, [pc, #20]	; (80104dc <std+0x3c>)
 80104c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80104ca:	4b05      	ldr	r3, [pc, #20]	; (80104e0 <std+0x40>)
 80104cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80104ce:	4b05      	ldr	r3, [pc, #20]	; (80104e4 <std+0x44>)
 80104d0:	6224      	str	r4, [r4, #32]
 80104d2:	6323      	str	r3, [r4, #48]	; 0x30
 80104d4:	bd10      	pop	{r4, pc}
 80104d6:	bf00      	nop
 80104d8:	080107f1 	.word	0x080107f1
 80104dc:	08010813 	.word	0x08010813
 80104e0:	0801084b 	.word	0x0801084b
 80104e4:	0801086f 	.word	0x0801086f

080104e8 <_cleanup_r>:
 80104e8:	4901      	ldr	r1, [pc, #4]	; (80104f0 <_cleanup_r+0x8>)
 80104ea:	f000 b8af 	b.w	801064c <_fwalk_reent>
 80104ee:	bf00      	nop
 80104f0:	08010429 	.word	0x08010429

080104f4 <__sfmoreglue>:
 80104f4:	b570      	push	{r4, r5, r6, lr}
 80104f6:	1e4a      	subs	r2, r1, #1
 80104f8:	2568      	movs	r5, #104	; 0x68
 80104fa:	4355      	muls	r5, r2
 80104fc:	460e      	mov	r6, r1
 80104fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010502:	f7ff fa87 	bl	800fa14 <_malloc_r>
 8010506:	4604      	mov	r4, r0
 8010508:	b140      	cbz	r0, 801051c <__sfmoreglue+0x28>
 801050a:	2100      	movs	r1, #0
 801050c:	e9c0 1600 	strd	r1, r6, [r0]
 8010510:	300c      	adds	r0, #12
 8010512:	60a0      	str	r0, [r4, #8]
 8010514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010518:	f7fd fb88 	bl	800dc2c <memset>
 801051c:	4620      	mov	r0, r4
 801051e:	bd70      	pop	{r4, r5, r6, pc}

08010520 <__sfp_lock_acquire>:
 8010520:	4801      	ldr	r0, [pc, #4]	; (8010528 <__sfp_lock_acquire+0x8>)
 8010522:	f000 b8b3 	b.w	801068c <__retarget_lock_acquire_recursive>
 8010526:	bf00      	nop
 8010528:	20000bc4 	.word	0x20000bc4

0801052c <__sfp_lock_release>:
 801052c:	4801      	ldr	r0, [pc, #4]	; (8010534 <__sfp_lock_release+0x8>)
 801052e:	f000 b8ae 	b.w	801068e <__retarget_lock_release_recursive>
 8010532:	bf00      	nop
 8010534:	20000bc4 	.word	0x20000bc4

08010538 <__sinit_lock_acquire>:
 8010538:	4801      	ldr	r0, [pc, #4]	; (8010540 <__sinit_lock_acquire+0x8>)
 801053a:	f000 b8a7 	b.w	801068c <__retarget_lock_acquire_recursive>
 801053e:	bf00      	nop
 8010540:	20000bbf 	.word	0x20000bbf

08010544 <__sinit_lock_release>:
 8010544:	4801      	ldr	r0, [pc, #4]	; (801054c <__sinit_lock_release+0x8>)
 8010546:	f000 b8a2 	b.w	801068e <__retarget_lock_release_recursive>
 801054a:	bf00      	nop
 801054c:	20000bbf 	.word	0x20000bbf

08010550 <__sinit>:
 8010550:	b510      	push	{r4, lr}
 8010552:	4604      	mov	r4, r0
 8010554:	f7ff fff0 	bl	8010538 <__sinit_lock_acquire>
 8010558:	69a3      	ldr	r3, [r4, #24]
 801055a:	b11b      	cbz	r3, 8010564 <__sinit+0x14>
 801055c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010560:	f7ff bff0 	b.w	8010544 <__sinit_lock_release>
 8010564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010568:	6523      	str	r3, [r4, #80]	; 0x50
 801056a:	4b13      	ldr	r3, [pc, #76]	; (80105b8 <__sinit+0x68>)
 801056c:	4a13      	ldr	r2, [pc, #76]	; (80105bc <__sinit+0x6c>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	62a2      	str	r2, [r4, #40]	; 0x28
 8010572:	42a3      	cmp	r3, r4
 8010574:	bf04      	itt	eq
 8010576:	2301      	moveq	r3, #1
 8010578:	61a3      	streq	r3, [r4, #24]
 801057a:	4620      	mov	r0, r4
 801057c:	f000 f820 	bl	80105c0 <__sfp>
 8010580:	6060      	str	r0, [r4, #4]
 8010582:	4620      	mov	r0, r4
 8010584:	f000 f81c 	bl	80105c0 <__sfp>
 8010588:	60a0      	str	r0, [r4, #8]
 801058a:	4620      	mov	r0, r4
 801058c:	f000 f818 	bl	80105c0 <__sfp>
 8010590:	2200      	movs	r2, #0
 8010592:	60e0      	str	r0, [r4, #12]
 8010594:	2104      	movs	r1, #4
 8010596:	6860      	ldr	r0, [r4, #4]
 8010598:	f7ff ff82 	bl	80104a0 <std>
 801059c:	68a0      	ldr	r0, [r4, #8]
 801059e:	2201      	movs	r2, #1
 80105a0:	2109      	movs	r1, #9
 80105a2:	f7ff ff7d 	bl	80104a0 <std>
 80105a6:	68e0      	ldr	r0, [r4, #12]
 80105a8:	2202      	movs	r2, #2
 80105aa:	2112      	movs	r1, #18
 80105ac:	f7ff ff78 	bl	80104a0 <std>
 80105b0:	2301      	movs	r3, #1
 80105b2:	61a3      	str	r3, [r4, #24]
 80105b4:	e7d2      	b.n	801055c <__sinit+0xc>
 80105b6:	bf00      	nop
 80105b8:	08012978 	.word	0x08012978
 80105bc:	080104e9 	.word	0x080104e9

080105c0 <__sfp>:
 80105c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105c2:	4607      	mov	r7, r0
 80105c4:	f7ff ffac 	bl	8010520 <__sfp_lock_acquire>
 80105c8:	4b1e      	ldr	r3, [pc, #120]	; (8010644 <__sfp+0x84>)
 80105ca:	681e      	ldr	r6, [r3, #0]
 80105cc:	69b3      	ldr	r3, [r6, #24]
 80105ce:	b913      	cbnz	r3, 80105d6 <__sfp+0x16>
 80105d0:	4630      	mov	r0, r6
 80105d2:	f7ff ffbd 	bl	8010550 <__sinit>
 80105d6:	3648      	adds	r6, #72	; 0x48
 80105d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80105dc:	3b01      	subs	r3, #1
 80105de:	d503      	bpl.n	80105e8 <__sfp+0x28>
 80105e0:	6833      	ldr	r3, [r6, #0]
 80105e2:	b30b      	cbz	r3, 8010628 <__sfp+0x68>
 80105e4:	6836      	ldr	r6, [r6, #0]
 80105e6:	e7f7      	b.n	80105d8 <__sfp+0x18>
 80105e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80105ec:	b9d5      	cbnz	r5, 8010624 <__sfp+0x64>
 80105ee:	4b16      	ldr	r3, [pc, #88]	; (8010648 <__sfp+0x88>)
 80105f0:	60e3      	str	r3, [r4, #12]
 80105f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80105f6:	6665      	str	r5, [r4, #100]	; 0x64
 80105f8:	f000 f847 	bl	801068a <__retarget_lock_init_recursive>
 80105fc:	f7ff ff96 	bl	801052c <__sfp_lock_release>
 8010600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010608:	6025      	str	r5, [r4, #0]
 801060a:	61a5      	str	r5, [r4, #24]
 801060c:	2208      	movs	r2, #8
 801060e:	4629      	mov	r1, r5
 8010610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010614:	f7fd fb0a 	bl	800dc2c <memset>
 8010618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801061c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010620:	4620      	mov	r0, r4
 8010622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010624:	3468      	adds	r4, #104	; 0x68
 8010626:	e7d9      	b.n	80105dc <__sfp+0x1c>
 8010628:	2104      	movs	r1, #4
 801062a:	4638      	mov	r0, r7
 801062c:	f7ff ff62 	bl	80104f4 <__sfmoreglue>
 8010630:	4604      	mov	r4, r0
 8010632:	6030      	str	r0, [r6, #0]
 8010634:	2800      	cmp	r0, #0
 8010636:	d1d5      	bne.n	80105e4 <__sfp+0x24>
 8010638:	f7ff ff78 	bl	801052c <__sfp_lock_release>
 801063c:	230c      	movs	r3, #12
 801063e:	603b      	str	r3, [r7, #0]
 8010640:	e7ee      	b.n	8010620 <__sfp+0x60>
 8010642:	bf00      	nop
 8010644:	08012978 	.word	0x08012978
 8010648:	ffff0001 	.word	0xffff0001

0801064c <_fwalk_reent>:
 801064c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010650:	4606      	mov	r6, r0
 8010652:	4688      	mov	r8, r1
 8010654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010658:	2700      	movs	r7, #0
 801065a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801065e:	f1b9 0901 	subs.w	r9, r9, #1
 8010662:	d505      	bpl.n	8010670 <_fwalk_reent+0x24>
 8010664:	6824      	ldr	r4, [r4, #0]
 8010666:	2c00      	cmp	r4, #0
 8010668:	d1f7      	bne.n	801065a <_fwalk_reent+0xe>
 801066a:	4638      	mov	r0, r7
 801066c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010670:	89ab      	ldrh	r3, [r5, #12]
 8010672:	2b01      	cmp	r3, #1
 8010674:	d907      	bls.n	8010686 <_fwalk_reent+0x3a>
 8010676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801067a:	3301      	adds	r3, #1
 801067c:	d003      	beq.n	8010686 <_fwalk_reent+0x3a>
 801067e:	4629      	mov	r1, r5
 8010680:	4630      	mov	r0, r6
 8010682:	47c0      	blx	r8
 8010684:	4307      	orrs	r7, r0
 8010686:	3568      	adds	r5, #104	; 0x68
 8010688:	e7e9      	b.n	801065e <_fwalk_reent+0x12>

0801068a <__retarget_lock_init_recursive>:
 801068a:	4770      	bx	lr

0801068c <__retarget_lock_acquire_recursive>:
 801068c:	4770      	bx	lr

0801068e <__retarget_lock_release_recursive>:
 801068e:	4770      	bx	lr

08010690 <__swhatbuf_r>:
 8010690:	b570      	push	{r4, r5, r6, lr}
 8010692:	460e      	mov	r6, r1
 8010694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010698:	2900      	cmp	r1, #0
 801069a:	b096      	sub	sp, #88	; 0x58
 801069c:	4614      	mov	r4, r2
 801069e:	461d      	mov	r5, r3
 80106a0:	da07      	bge.n	80106b2 <__swhatbuf_r+0x22>
 80106a2:	2300      	movs	r3, #0
 80106a4:	602b      	str	r3, [r5, #0]
 80106a6:	89b3      	ldrh	r3, [r6, #12]
 80106a8:	061a      	lsls	r2, r3, #24
 80106aa:	d410      	bmi.n	80106ce <__swhatbuf_r+0x3e>
 80106ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106b0:	e00e      	b.n	80106d0 <__swhatbuf_r+0x40>
 80106b2:	466a      	mov	r2, sp
 80106b4:	f000 f902 	bl	80108bc <_fstat_r>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	dbf2      	blt.n	80106a2 <__swhatbuf_r+0x12>
 80106bc:	9a01      	ldr	r2, [sp, #4]
 80106be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80106c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80106c6:	425a      	negs	r2, r3
 80106c8:	415a      	adcs	r2, r3
 80106ca:	602a      	str	r2, [r5, #0]
 80106cc:	e7ee      	b.n	80106ac <__swhatbuf_r+0x1c>
 80106ce:	2340      	movs	r3, #64	; 0x40
 80106d0:	2000      	movs	r0, #0
 80106d2:	6023      	str	r3, [r4, #0]
 80106d4:	b016      	add	sp, #88	; 0x58
 80106d6:	bd70      	pop	{r4, r5, r6, pc}

080106d8 <__smakebuf_r>:
 80106d8:	898b      	ldrh	r3, [r1, #12]
 80106da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106dc:	079d      	lsls	r5, r3, #30
 80106de:	4606      	mov	r6, r0
 80106e0:	460c      	mov	r4, r1
 80106e2:	d507      	bpl.n	80106f4 <__smakebuf_r+0x1c>
 80106e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80106e8:	6023      	str	r3, [r4, #0]
 80106ea:	6123      	str	r3, [r4, #16]
 80106ec:	2301      	movs	r3, #1
 80106ee:	6163      	str	r3, [r4, #20]
 80106f0:	b002      	add	sp, #8
 80106f2:	bd70      	pop	{r4, r5, r6, pc}
 80106f4:	ab01      	add	r3, sp, #4
 80106f6:	466a      	mov	r2, sp
 80106f8:	f7ff ffca 	bl	8010690 <__swhatbuf_r>
 80106fc:	9900      	ldr	r1, [sp, #0]
 80106fe:	4605      	mov	r5, r0
 8010700:	4630      	mov	r0, r6
 8010702:	f7ff f987 	bl	800fa14 <_malloc_r>
 8010706:	b948      	cbnz	r0, 801071c <__smakebuf_r+0x44>
 8010708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801070c:	059a      	lsls	r2, r3, #22
 801070e:	d4ef      	bmi.n	80106f0 <__smakebuf_r+0x18>
 8010710:	f023 0303 	bic.w	r3, r3, #3
 8010714:	f043 0302 	orr.w	r3, r3, #2
 8010718:	81a3      	strh	r3, [r4, #12]
 801071a:	e7e3      	b.n	80106e4 <__smakebuf_r+0xc>
 801071c:	4b0d      	ldr	r3, [pc, #52]	; (8010754 <__smakebuf_r+0x7c>)
 801071e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010720:	89a3      	ldrh	r3, [r4, #12]
 8010722:	6020      	str	r0, [r4, #0]
 8010724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010728:	81a3      	strh	r3, [r4, #12]
 801072a:	9b00      	ldr	r3, [sp, #0]
 801072c:	6163      	str	r3, [r4, #20]
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	6120      	str	r0, [r4, #16]
 8010732:	b15b      	cbz	r3, 801074c <__smakebuf_r+0x74>
 8010734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010738:	4630      	mov	r0, r6
 801073a:	f000 f8d1 	bl	80108e0 <_isatty_r>
 801073e:	b128      	cbz	r0, 801074c <__smakebuf_r+0x74>
 8010740:	89a3      	ldrh	r3, [r4, #12]
 8010742:	f023 0303 	bic.w	r3, r3, #3
 8010746:	f043 0301 	orr.w	r3, r3, #1
 801074a:	81a3      	strh	r3, [r4, #12]
 801074c:	89a0      	ldrh	r0, [r4, #12]
 801074e:	4305      	orrs	r5, r0
 8010750:	81a5      	strh	r5, [r4, #12]
 8010752:	e7cd      	b.n	80106f0 <__smakebuf_r+0x18>
 8010754:	080104e9 	.word	0x080104e9

08010758 <_malloc_usable_size_r>:
 8010758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801075c:	1f18      	subs	r0, r3, #4
 801075e:	2b00      	cmp	r3, #0
 8010760:	bfbc      	itt	lt
 8010762:	580b      	ldrlt	r3, [r1, r0]
 8010764:	18c0      	addlt	r0, r0, r3
 8010766:	4770      	bx	lr

08010768 <_raise_r>:
 8010768:	291f      	cmp	r1, #31
 801076a:	b538      	push	{r3, r4, r5, lr}
 801076c:	4604      	mov	r4, r0
 801076e:	460d      	mov	r5, r1
 8010770:	d904      	bls.n	801077c <_raise_r+0x14>
 8010772:	2316      	movs	r3, #22
 8010774:	6003      	str	r3, [r0, #0]
 8010776:	f04f 30ff 	mov.w	r0, #4294967295
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801077e:	b112      	cbz	r2, 8010786 <_raise_r+0x1e>
 8010780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010784:	b94b      	cbnz	r3, 801079a <_raise_r+0x32>
 8010786:	4620      	mov	r0, r4
 8010788:	f000 f830 	bl	80107ec <_getpid_r>
 801078c:	462a      	mov	r2, r5
 801078e:	4601      	mov	r1, r0
 8010790:	4620      	mov	r0, r4
 8010792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010796:	f000 b817 	b.w	80107c8 <_kill_r>
 801079a:	2b01      	cmp	r3, #1
 801079c:	d00a      	beq.n	80107b4 <_raise_r+0x4c>
 801079e:	1c59      	adds	r1, r3, #1
 80107a0:	d103      	bne.n	80107aa <_raise_r+0x42>
 80107a2:	2316      	movs	r3, #22
 80107a4:	6003      	str	r3, [r0, #0]
 80107a6:	2001      	movs	r0, #1
 80107a8:	e7e7      	b.n	801077a <_raise_r+0x12>
 80107aa:	2400      	movs	r4, #0
 80107ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107b0:	4628      	mov	r0, r5
 80107b2:	4798      	blx	r3
 80107b4:	2000      	movs	r0, #0
 80107b6:	e7e0      	b.n	801077a <_raise_r+0x12>

080107b8 <raise>:
 80107b8:	4b02      	ldr	r3, [pc, #8]	; (80107c4 <raise+0xc>)
 80107ba:	4601      	mov	r1, r0
 80107bc:	6818      	ldr	r0, [r3, #0]
 80107be:	f7ff bfd3 	b.w	8010768 <_raise_r>
 80107c2:	bf00      	nop
 80107c4:	200000dc 	.word	0x200000dc

080107c8 <_kill_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	4d07      	ldr	r5, [pc, #28]	; (80107e8 <_kill_r+0x20>)
 80107cc:	2300      	movs	r3, #0
 80107ce:	4604      	mov	r4, r0
 80107d0:	4608      	mov	r0, r1
 80107d2:	4611      	mov	r1, r2
 80107d4:	602b      	str	r3, [r5, #0]
 80107d6:	f7f2 f9d7 	bl	8002b88 <_kill>
 80107da:	1c43      	adds	r3, r0, #1
 80107dc:	d102      	bne.n	80107e4 <_kill_r+0x1c>
 80107de:	682b      	ldr	r3, [r5, #0]
 80107e0:	b103      	cbz	r3, 80107e4 <_kill_r+0x1c>
 80107e2:	6023      	str	r3, [r4, #0]
 80107e4:	bd38      	pop	{r3, r4, r5, pc}
 80107e6:	bf00      	nop
 80107e8:	20000bb8 	.word	0x20000bb8

080107ec <_getpid_r>:
 80107ec:	f7f2 b9c4 	b.w	8002b78 <_getpid>

080107f0 <__sread>:
 80107f0:	b510      	push	{r4, lr}
 80107f2:	460c      	mov	r4, r1
 80107f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107f8:	f000 f894 	bl	8010924 <_read_r>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	bfab      	itete	ge
 8010800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010802:	89a3      	ldrhlt	r3, [r4, #12]
 8010804:	181b      	addge	r3, r3, r0
 8010806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801080a:	bfac      	ite	ge
 801080c:	6563      	strge	r3, [r4, #84]	; 0x54
 801080e:	81a3      	strhlt	r3, [r4, #12]
 8010810:	bd10      	pop	{r4, pc}

08010812 <__swrite>:
 8010812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010816:	461f      	mov	r7, r3
 8010818:	898b      	ldrh	r3, [r1, #12]
 801081a:	05db      	lsls	r3, r3, #23
 801081c:	4605      	mov	r5, r0
 801081e:	460c      	mov	r4, r1
 8010820:	4616      	mov	r6, r2
 8010822:	d505      	bpl.n	8010830 <__swrite+0x1e>
 8010824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010828:	2302      	movs	r3, #2
 801082a:	2200      	movs	r2, #0
 801082c:	f000 f868 	bl	8010900 <_lseek_r>
 8010830:	89a3      	ldrh	r3, [r4, #12]
 8010832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801083a:	81a3      	strh	r3, [r4, #12]
 801083c:	4632      	mov	r2, r6
 801083e:	463b      	mov	r3, r7
 8010840:	4628      	mov	r0, r5
 8010842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010846:	f000 b817 	b.w	8010878 <_write_r>

0801084a <__sseek>:
 801084a:	b510      	push	{r4, lr}
 801084c:	460c      	mov	r4, r1
 801084e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010852:	f000 f855 	bl	8010900 <_lseek_r>
 8010856:	1c43      	adds	r3, r0, #1
 8010858:	89a3      	ldrh	r3, [r4, #12]
 801085a:	bf15      	itete	ne
 801085c:	6560      	strne	r0, [r4, #84]	; 0x54
 801085e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010866:	81a3      	strheq	r3, [r4, #12]
 8010868:	bf18      	it	ne
 801086a:	81a3      	strhne	r3, [r4, #12]
 801086c:	bd10      	pop	{r4, pc}

0801086e <__sclose>:
 801086e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010872:	f000 b813 	b.w	801089c <_close_r>
	...

08010878 <_write_r>:
 8010878:	b538      	push	{r3, r4, r5, lr}
 801087a:	4d07      	ldr	r5, [pc, #28]	; (8010898 <_write_r+0x20>)
 801087c:	4604      	mov	r4, r0
 801087e:	4608      	mov	r0, r1
 8010880:	4611      	mov	r1, r2
 8010882:	2200      	movs	r2, #0
 8010884:	602a      	str	r2, [r5, #0]
 8010886:	461a      	mov	r2, r3
 8010888:	f7f2 f9b5 	bl	8002bf6 <_write>
 801088c:	1c43      	adds	r3, r0, #1
 801088e:	d102      	bne.n	8010896 <_write_r+0x1e>
 8010890:	682b      	ldr	r3, [r5, #0]
 8010892:	b103      	cbz	r3, 8010896 <_write_r+0x1e>
 8010894:	6023      	str	r3, [r4, #0]
 8010896:	bd38      	pop	{r3, r4, r5, pc}
 8010898:	20000bb8 	.word	0x20000bb8

0801089c <_close_r>:
 801089c:	b538      	push	{r3, r4, r5, lr}
 801089e:	4d06      	ldr	r5, [pc, #24]	; (80108b8 <_close_r+0x1c>)
 80108a0:	2300      	movs	r3, #0
 80108a2:	4604      	mov	r4, r0
 80108a4:	4608      	mov	r0, r1
 80108a6:	602b      	str	r3, [r5, #0]
 80108a8:	f7f2 f9c1 	bl	8002c2e <_close>
 80108ac:	1c43      	adds	r3, r0, #1
 80108ae:	d102      	bne.n	80108b6 <_close_r+0x1a>
 80108b0:	682b      	ldr	r3, [r5, #0]
 80108b2:	b103      	cbz	r3, 80108b6 <_close_r+0x1a>
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
 80108b8:	20000bb8 	.word	0x20000bb8

080108bc <_fstat_r>:
 80108bc:	b538      	push	{r3, r4, r5, lr}
 80108be:	4d07      	ldr	r5, [pc, #28]	; (80108dc <_fstat_r+0x20>)
 80108c0:	2300      	movs	r3, #0
 80108c2:	4604      	mov	r4, r0
 80108c4:	4608      	mov	r0, r1
 80108c6:	4611      	mov	r1, r2
 80108c8:	602b      	str	r3, [r5, #0]
 80108ca:	f7f2 f9bc 	bl	8002c46 <_fstat>
 80108ce:	1c43      	adds	r3, r0, #1
 80108d0:	d102      	bne.n	80108d8 <_fstat_r+0x1c>
 80108d2:	682b      	ldr	r3, [r5, #0]
 80108d4:	b103      	cbz	r3, 80108d8 <_fstat_r+0x1c>
 80108d6:	6023      	str	r3, [r4, #0]
 80108d8:	bd38      	pop	{r3, r4, r5, pc}
 80108da:	bf00      	nop
 80108dc:	20000bb8 	.word	0x20000bb8

080108e0 <_isatty_r>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4d06      	ldr	r5, [pc, #24]	; (80108fc <_isatty_r+0x1c>)
 80108e4:	2300      	movs	r3, #0
 80108e6:	4604      	mov	r4, r0
 80108e8:	4608      	mov	r0, r1
 80108ea:	602b      	str	r3, [r5, #0]
 80108ec:	f7f2 f9bb 	bl	8002c66 <_isatty>
 80108f0:	1c43      	adds	r3, r0, #1
 80108f2:	d102      	bne.n	80108fa <_isatty_r+0x1a>
 80108f4:	682b      	ldr	r3, [r5, #0]
 80108f6:	b103      	cbz	r3, 80108fa <_isatty_r+0x1a>
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	bd38      	pop	{r3, r4, r5, pc}
 80108fc:	20000bb8 	.word	0x20000bb8

08010900 <_lseek_r>:
 8010900:	b538      	push	{r3, r4, r5, lr}
 8010902:	4d07      	ldr	r5, [pc, #28]	; (8010920 <_lseek_r+0x20>)
 8010904:	4604      	mov	r4, r0
 8010906:	4608      	mov	r0, r1
 8010908:	4611      	mov	r1, r2
 801090a:	2200      	movs	r2, #0
 801090c:	602a      	str	r2, [r5, #0]
 801090e:	461a      	mov	r2, r3
 8010910:	f7f2 f9b4 	bl	8002c7c <_lseek>
 8010914:	1c43      	adds	r3, r0, #1
 8010916:	d102      	bne.n	801091e <_lseek_r+0x1e>
 8010918:	682b      	ldr	r3, [r5, #0]
 801091a:	b103      	cbz	r3, 801091e <_lseek_r+0x1e>
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	bd38      	pop	{r3, r4, r5, pc}
 8010920:	20000bb8 	.word	0x20000bb8

08010924 <_read_r>:
 8010924:	b538      	push	{r3, r4, r5, lr}
 8010926:	4d07      	ldr	r5, [pc, #28]	; (8010944 <_read_r+0x20>)
 8010928:	4604      	mov	r4, r0
 801092a:	4608      	mov	r0, r1
 801092c:	4611      	mov	r1, r2
 801092e:	2200      	movs	r2, #0
 8010930:	602a      	str	r2, [r5, #0]
 8010932:	461a      	mov	r2, r3
 8010934:	f7f2 f942 	bl	8002bbc <_read>
 8010938:	1c43      	adds	r3, r0, #1
 801093a:	d102      	bne.n	8010942 <_read_r+0x1e>
 801093c:	682b      	ldr	r3, [r5, #0]
 801093e:	b103      	cbz	r3, 8010942 <_read_r+0x1e>
 8010940:	6023      	str	r3, [r4, #0]
 8010942:	bd38      	pop	{r3, r4, r5, pc}
 8010944:	20000bb8 	.word	0x20000bb8

08010948 <_init>:
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	bf00      	nop
 801094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801094e:	bc08      	pop	{r3}
 8010950:	469e      	mov	lr, r3
 8010952:	4770      	bx	lr

08010954 <_fini>:
 8010954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010956:	bf00      	nop
 8010958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801095a:	bc08      	pop	{r3}
 801095c:	469e      	mov	lr, r3
 801095e:	4770      	bx	lr
