
LAB_ADC_FFT_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013904  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c384  08013ab8  08013ab8  00023ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fe3c  0801fe3c  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801fe3c  0801fe3c  0002fe3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fe44  0801fe44  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fe44  0801fe44  0002fe44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fe48  0801fe48  0002fe48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0801fe4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c89c  200002b0  080200fc  000302b0  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  2000cb4c  080200fc  0003cb4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d0f7  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ab6  00000000  00000000  0006d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002960  00000000  00000000  00073e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002650  00000000  00000000  000767f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003447c  00000000  00000000  00078e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032067  00000000  00000000  000ad2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130bb2  00000000  00000000  000df323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020fed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bef8  00000000  00000000  0020ff28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013a9c 	.word	0x08013a9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b4 	.word	0x200002b4
 80001ec:	08013a9c 	.word	0x08013a9c

080001f0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001f0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001f2:	2b01      	cmp	r3, #1
	IT       LS
 80001f4:	bf98      	it	ls
	BXLS     lr
 80001f6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001fc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000208:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800020e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000210:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000212:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000214:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800021e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000224:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000228:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800022c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000230:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800023a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800024c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800024e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000250:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800025a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800025c:	2b01      	cmp	r3, #1
	IT       LS
 800025e:	bf98      	it	ls
	BXLS     lr
 8000260:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000266:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000272:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000290:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000296:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800029a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800029e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002a2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002a4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ae:	4770      	bx	lr

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001044:	4a30      	ldr	r2, [pc, #192]	; (8001108 <MX_ADC1_Init+0xe8>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_ADC1_Init+0xe4>)
 800104a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_ADC1_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001064:	2204      	movs	r2, #4
 8001066:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_ADC1_Init+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001070:	2200      	movs	r2, #0
 8001072:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001076:	2201      	movs	r2, #1
 8001078:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_ADC1_Init+0xe4>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_ADC1_Init+0xe4>)
 800108a:	2200      	movs	r2, #0
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_ADC1_Init+0xe4>)
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_ADC1_Init+0xe4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <MX_ADC1_Init+0xe4>)
 80010a6:	f007 fc77 	bl	8008998 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010b0:	f001 f9f2 	bl	8002498 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_ADC1_Init+0xe4>)
 80010c0:	f008 ff4e 	bl	8009f60 <HAL_ADCEx_MultiModeConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80010ca:	f001 f9e5 	bl	8002498 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_ADC1_Init+0xec>)
 80010d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d2:	2306      	movs	r3, #6
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010da:	237f      	movs	r3, #127	; 0x7f
 80010dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010de:	2304      	movs	r3, #4
 80010e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_ADC1_Init+0xe4>)
 80010ec:	f008 f956 	bl	800939c <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80010f6:	f001 f9cf 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000c40c 	.word	0x2000c40c
 8001108:	50040000 	.word	0x50040000
 800110c:	04300002 	.word	0x04300002

08001110 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_ADC_MspInit+0x84>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12b      	bne.n	800118a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_ADC_MspInit+0x88>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <HAL_ADC_MspInit+0x88>)
 8001138:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_ADC_MspInit+0x88>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_ADC_MspInit+0x88>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_ADC_MspInit+0x88>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_ADC_MspInit+0x88>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|GPIO_PIN_0|ARD_A2_Pin;
 8001162:	2319      	movs	r3, #25
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001166:	230b      	movs	r3, #11
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <HAL_ADC_MspInit+0x8c>)
 8001176:	f009 faf9 	bl	800a76c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2012      	movs	r0, #18
 8001180:	f009 f89d 	bl	800a2be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001184:	2012      	movs	r0, #18
 8001186:	f009 f8b6 	bl	800a2f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	50040000 	.word	0x50040000
 8001198:	40021000 	.word	0x40021000
 800119c:	48000800 	.word	0x48000800

080011a0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_DCMI_Init+0x60>)
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <MX_DCMI_Init+0x64>)
 80011a8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_DCMI_Init+0x60>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_DCMI_Init+0x60>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_DCMI_Init+0x60>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_DCMI_Init+0x60>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_DCMI_Init+0x60>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_DCMI_Init+0x60>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_DCMI_Init+0x60>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_DCMI_Init+0x60>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DCMI_Init+0x60>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_DCMI_Init+0x60>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_DCMI_Init+0x60>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_DCMI_Init+0x60>)
 80011ee:	f009 f8ab 	bl	800a348 <HAL_DCMI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80011f8:	f001 f94e 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000c474 	.word	0x2000c474
 8001204:	50050000 	.word	0x50050000

08001208 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_DCMI_MspInit+0xec>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d160      	bne.n	80012ec <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a2c      	ldr	r2, [pc, #176]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_DCMI_MspInit+0xf0>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 800128a:	f645 7320 	movw	r3, #24352	; 0x5f20
 800128e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800129c:	230a      	movs	r3, #10
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4815      	ldr	r0, [pc, #84]	; (80012fc <HAL_DCMI_MspInit+0xf4>)
 80012a8:	f009 fa60 	bl	800a76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80012ac:	23b0      	movs	r3, #176	; 0xb0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012bc:	230a      	movs	r3, #10
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <HAL_DCMI_MspInit+0xf8>)
 80012c8:	f009 fa50 	bl	800a76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80012cc:	2320      	movs	r3, #32
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012dc:	230a      	movs	r3, #10
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <HAL_DCMI_MspInit+0xfc>)
 80012e8:	f009 fa40 	bl	800a76c <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	3730      	adds	r7, #48	; 0x30
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	50050000 	.word	0x50050000
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48001c00 	.word	0x48001c00
 8001300:	48002000 	.word	0x48002000
 8001304:	48001000 	.word	0x48001000

08001308 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800130c:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <MX_DFSDM1_Init+0xcc>)
 8001310:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001314:	2201      	movs	r2, #1
 8001316:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001320:	2202      	movs	r2, #2
 8001322:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 800133e:	2204      	movs	r2, #4
 8001340:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 800134a:	2201      	movs	r2, #1
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001350:	2200      	movs	r2, #0
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 8001356:	2200      	movs	r2, #0
 8001358:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <MX_DFSDM1_Init+0xc8>)
 800135c:	f009 f87a 	bl	800a454 <HAL_DFSDM_ChannelInit>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001366:	f001 f897 	bl	8002498 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <MX_DFSDM1_Init+0xd4>)
 800136e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 8001372:	2201      	movs	r2, #1
 8001374:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 800137e:	2202      	movs	r2, #2
 8001380:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 8001390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001394:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 800139e:	2204      	movs	r2, #4
 80013a0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <MX_DFSDM1_Init+0xd0>)
 80013bc:	f009 f84a 	bl	800a454 <HAL_DFSDM_ChannelInit>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 80013c6:	f001 f867 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000c4d8 	.word	0x2000c4d8
 80013d4:	40016020 	.word	0x40016020
 80013d8:	2000c510 	.word	0x2000c510
 80013dc:	40016040 	.word	0x40016040

080013e0 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0ae      	sub	sp, #184	; 0xb8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	228c      	movs	r2, #140	; 0x8c
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00f fc91 	bl	8010d28 <memset>
  if(DFSDM1_Init == 0)
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d163      	bne.n	80014d6 <HAL_DFSDM_ChannelMspInit+0xf6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800140e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001412:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	4618      	mov	r0, r3
 8001420:	f00b fa8a 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800142a:	f001 f835 	bl	8002498 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	4a2c      	ldr	r2, [pc, #176]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001438:	6613      	str	r3, [r2, #96]	; 0x60
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_DFSDM_ChannelMspInit+0x104>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001476:	2384      	movs	r3, #132	; 0x84
 8001478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800148e:	2306      	movs	r3, #6
 8001490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001498:	4619      	mov	r1, r3
 800149a:	4813      	ldr	r0, [pc, #76]	; (80014e8 <HAL_DFSDM_ChannelMspInit+0x108>)
 800149c:	f009 f966 	bl	800a76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014ba:	2306      	movs	r3, #6
 80014bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4809      	ldr	r0, [pc, #36]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x10c>)
 80014c8:	f009 f950 	bl	800a76c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_DFSDM_ChannelMspInit+0x100>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <HAL_DFSDM_ChannelMspInit+0x100>)
 80014d4:	6013      	str	r3, [r2, #0]
  }
}
 80014d6:	bf00      	nop
 80014d8:	37b8      	adds	r7, #184	; 0xb8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002cc 	.word	0x200002cc
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000400 	.word	0x48000400

080014f0 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2220      	movs	r2, #32
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00f fc13 	bl	8010d28 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001502:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <MX_FMC_Init+0x150>)
 8001504:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001508:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <MX_FMC_Init+0x150>)
 800150c:	4a4d      	ldr	r2, [pc, #308]	; (8001644 <MX_FMC_Init+0x154>)
 800150e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <MX_FMC_Init+0x150>)
 8001512:	2202      	movs	r2, #2
 8001514:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <MX_FMC_Init+0x150>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800151c:	4b48      	ldr	r3, [pc, #288]	; (8001640 <MX_FMC_Init+0x150>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <MX_FMC_Init+0x150>)
 8001524:	2210      	movs	r2, #16
 8001526:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <MX_FMC_Init+0x150>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <MX_FMC_Init+0x150>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001534:	4b42      	ldr	r3, [pc, #264]	; (8001640 <MX_FMC_Init+0x150>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <MX_FMC_Init+0x150>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <MX_FMC_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <MX_FMC_Init+0x150>)
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800154c:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <MX_FMC_Init+0x150>)
 800154e:	2200      	movs	r2, #0
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <MX_FMC_Init+0x150>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <MX_FMC_Init+0x150>)
 800155a:	2200      	movs	r2, #0
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_FMC_Init+0x150>)
 8001560:	2200      	movs	r2, #0
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <MX_FMC_Init+0x150>)
 8001566:	2200      	movs	r2, #0
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800156a:	230f      	movs	r3, #15
 800156c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800156e:	230f      	movs	r3, #15
 8001570:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001572:	23ff      	movs	r3, #255	; 0xff
 8001574:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001576:	230f      	movs	r3, #15
 8001578:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800157a:	2310      	movs	r3, #16
 800157c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800157e:	2311      	movs	r3, #17
 8001580:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	482c      	ldr	r0, [pc, #176]	; (8001640 <MX_FMC_Init+0x150>)
 800158e:	f00c ffa8 	bl	800e4e2 <HAL_SRAM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8001598:	f000 ff7e 	bl	8002498 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_FMC_Init+0x158>)
 800159e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015a2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <MX_FMC_Init+0x158>)
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <MX_FMC_Init+0x154>)
 80015a8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <MX_FMC_Init+0x158>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_FMC_Init+0x158>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <MX_FMC_Init+0x158>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_FMC_Init+0x158>)
 80015be:	2210      	movs	r2, #16
 80015c0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_FMC_Init+0x158>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_FMC_Init+0x158>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_FMC_Init+0x158>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_FMC_Init+0x158>)
 80015d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_FMC_Init+0x158>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_FMC_Init+0x158>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_FMC_Init+0x158>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_FMC_Init+0x158>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_FMC_Init+0x158>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_FMC_Init+0x158>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_FMC_Init+0x158>)
 8001602:	2200      	movs	r2, #0
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001606:	230f      	movs	r3, #15
 8001608:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800160a:	230f      	movs	r3, #15
 800160c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800160e:	23ff      	movs	r3, #255	; 0xff
 8001610:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001612:	230f      	movs	r3, #15
 8001614:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001616:	2310      	movs	r3, #16
 8001618:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800161a:	2311      	movs	r3, #17
 800161c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001622:	463b      	mov	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_FMC_Init+0x158>)
 800162a:	f00c ff5a 	bl	800e4e2 <HAL_SRAM_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001634:	f000 ff30 	bl	8002498 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001638:	bf00      	nop
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000c548 	.word	0x2000c548
 8001644:	a0000104 	.word	0xa0000104
 8001648:	2000c598 	.word	0x2000c598

0800164c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_FMC_MspInit+0xc4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d14f      	bne.n	8001708 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_FMC_MspInit+0xc4>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_FMC_MspInit+0xc8>)
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	4a28      	ldr	r2, [pc, #160]	; (8001714 <HAL_FMC_MspInit+0xc8>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6513      	str	r3, [r2, #80]	; 0x50
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_FMC_MspInit+0xc8>)
 800167c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8001686:	f64f 7383 	movw	r3, #65411	; 0xff83
 800168a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001698:	230c      	movs	r3, #12
 800169a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	481d      	ldr	r0, [pc, #116]	; (8001718 <HAL_FMC_MspInit+0xcc>)
 80016a2:	f009 f863 	bl	800a76c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 80016a6:	f240 233f 	movw	r3, #575	; 0x23f
 80016aa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b8:	230c      	movs	r3, #12
 80016ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	4816      	ldr	r0, [pc, #88]	; (800171c <HAL_FMC_MspInit+0xd0>)
 80016c2:	f009 f853 	bl	800a76c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 80016c6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80016ca:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d8:	230c      	movs	r3, #12
 80016da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	480f      	ldr	r0, [pc, #60]	; (8001720 <HAL_FMC_MspInit+0xd4>)
 80016e2:	f009 f843 	bl	800a76c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80016e6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80016ea:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f8:	230c      	movs	r3, #12
 80016fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <HAL_FMC_MspInit+0xd8>)
 8001702:	f009 f833 	bl	800a76c <HAL_GPIO_Init>
 8001706:	e000      	b.n	800170a <HAL_FMC_MspInit+0xbe>
    return;
 8001708:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200002d0 	.word	0x200002d0
 8001714:	40021000 	.word	0x40021000
 8001718:	48001000 	.word	0x48001000
 800171c:	48001800 	.word	0x48001800
 8001720:	48000c00 	.word	0x48000c00
 8001724:	48001400 	.word	0x48001400

08001728 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001730:	f7ff ff8c 	bl	800164c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <MX_GPIO_Init>:
     PC1   ------> ADCx_IN2
     PA4   ------> ADCx_IN9
     PA1   ------> ADCx_IN6
*/
void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001752:	4bb1      	ldr	r3, [pc, #708]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4ab0      	ldr	r2, [pc, #704]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4bae      	ldr	r3, [pc, #696]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176a:	4bab      	ldr	r3, [pc, #684]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4aaa      	ldr	r2, [pc, #680]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4ba8      	ldr	r3, [pc, #672]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001782:	4ba5      	ldr	r3, [pc, #660]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4aa4      	ldr	r2, [pc, #656]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4ba2      	ldr	r3, [pc, #648]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4b9f      	ldr	r3, [pc, #636]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a9e      	ldr	r2, [pc, #632]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b9c      	ldr	r3, [pc, #624]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b99      	ldr	r3, [pc, #612]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a98      	ldr	r2, [pc, #608]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b96      	ldr	r3, [pc, #600]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ca:	4b93      	ldr	r3, [pc, #588]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a92      	ldr	r2, [pc, #584]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80017e2:	f00a f9ab 	bl	800bb3c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	4b8c      	ldr	r3, [pc, #560]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a8b      	ldr	r2, [pc, #556]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	4b86      	ldr	r3, [pc, #536]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a85      	ldr	r2, [pc, #532]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001816:	4b80      	ldr	r3, [pc, #512]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a7f      	ldr	r2, [pc, #508]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 800181c:	f043 0320 	orr.w	r3, r3, #32
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b7d      	ldr	r3, [pc, #500]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	487a      	ldr	r0, [pc, #488]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 8001834:	f009 fa1e 	bl	800ac74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2143      	movs	r1, #67	; 0x43
 800183c:	4878      	ldr	r0, [pc, #480]	; (8001a20 <MX_GPIO_Init+0x2e4>)
 800183e:	f009 fa19 	bl	800ac74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	4877      	ldr	r0, [pc, #476]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 8001848:	f009 fa14 	bl	800ac74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001852:	4875      	ldr	r0, [pc, #468]	; (8001a28 <MX_GPIO_Init+0x2ec>)
 8001854:	f009 fa0e 	bl	800ac74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI10 PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8001858:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <MX_GPIO_Init+0x2f0>)
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001862:	2302      	movs	r3, #2
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	486b      	ldr	r0, [pc, #428]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 800186e:	f008 ff7d 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001872:	2304      	movs	r3, #4
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <MX_GPIO_Init+0x2f0>)
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001882:	4619      	mov	r1, r3
 8001884:	4866      	ldr	r0, [pc, #408]	; (8001a20 <MX_GPIO_Init+0x2e4>)
 8001886:	f008 ff71 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800188a:	2301      	movs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	485e      	ldr	r0, [pc, #376]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 80018a2:	f008 ff63 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 80018a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	4858      	ldr	r0, [pc, #352]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 80018bc:	f008 ff56 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80018c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018d2:	2302      	movs	r3, #2
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	4619      	mov	r1, r3
 80018dc:	4852      	ldr	r0, [pc, #328]	; (8001a28 <MX_GPIO_Init+0x2ec>)
 80018de:	f008 ff45 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80018e2:	2304      	movs	r3, #4
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018f2:	230c      	movs	r3, #12
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	484c      	ldr	r0, [pc, #304]	; (8001a30 <MX_GPIO_Init+0x2f4>)
 80018fe:	f008 ff35 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001902:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001914:	230c      	movs	r3, #12
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	4841      	ldr	r0, [pc, #260]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 8001920:	f008 ff24 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	483a      	ldr	r0, [pc, #232]	; (8001a20 <MX_GPIO_Init+0x2e4>)
 8001938:	f008 ff18 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800193c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800194e:	230a      	movs	r3, #10
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f008 ff06 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001960:	2343      	movs	r3, #67	; 0x43
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	482a      	ldr	r0, [pc, #168]	; (8001a20 <MX_GPIO_Init+0x2e4>)
 8001978:	f008 fef8 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800197c:	2340      	movs	r3, #64	; 0x40
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4824      	ldr	r0, [pc, #144]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 8001994:	f008 feea 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001998:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <MX_GPIO_Init+0x2f0>)
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4821      	ldr	r0, [pc, #132]	; (8001a34 <MX_GPIO_Init+0x2f8>)
 80019ae:	f008 fedd 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80019b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80019c4:	230e      	movs	r3, #14
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d2:	f008 fecb 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019dc:	230b      	movs	r3, #11
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	4619      	mov	r1, r3
 80019ea:	4813      	ldr	r0, [pc, #76]	; (8001a38 <MX_GPIO_Init+0x2fc>)
 80019ec:	f008 febe 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019f0:	2302      	movs	r3, #2
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019f4:	230b      	movs	r3, #11
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 8001a04:	f008 feb2 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_GPIO_Init+0x2f0>)
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	e012      	b.n	8001a3c <MX_GPIO_Init+0x300>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48002000 	.word	0x48002000
 8001a20:	48001c00 	.word	0x48001c00
 8001a24:	48000800 	.word	0x48000800
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	10110000 	.word	0x10110000
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001800 	.word	0x48001800
 8001a38:	48001400 	.word	0x48001400
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	4826      	ldr	r0, [pc, #152]	; (8001adc <MX_GPIO_Init+0x3a0>)
 8001a44:	f008 fe92 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a4c:	230b      	movs	r3, #11
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f008 fe85 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	4619      	mov	r1, r3
 8001a76:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <MX_GPIO_Init+0x3a4>)
 8001a78:	f008 fe78 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <MX_GPIO_Init+0x3a8>)
 8001a90:	f008 fe6c 	bl	800a76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_GPIO_Init+0x3a8>)
 8001aae:	f008 fe5d 	bl	800a76c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2017      	movs	r0, #23
 8001ab8:	f008 fc01 	bl	800a2be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001abc:	2017      	movs	r0, #23
 8001abe:	f008 fc1a 	bl	800a2f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2028      	movs	r0, #40	; 0x28
 8001ac8:	f008 fbf9 	bl	800a2be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001acc:	2028      	movs	r0, #40	; 0x28
 8001ace:	f008 fc12 	bl	800a2f6 <HAL_NVIC_EnableIRQ>

}
 8001ad2:	bf00      	nop
 8001ad4:	3738      	adds	r7, #56	; 0x38
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48001400 	.word	0x48001400
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <MX_I2C1_Init+0x7c>)
 8001af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b24:	f009 f8f0 	bl	800ad08 <HAL_I2C_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b2e:	f000 fcb3 	bl	8002498 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b32:	2100      	movs	r1, #0
 8001b34:	4809      	ldr	r0, [pc, #36]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b36:	f009 ff05 	bl	800b944 <HAL_I2CEx_ConfigAnalogFilter>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b40:	f000 fcaa 	bl	8002498 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b44:	2100      	movs	r1, #0
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_I2C1_Init+0x74>)
 8001b48:	f009 ff47 	bl	800b9da <HAL_I2CEx_ConfigDigitalFilter>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b52:	f000 fca1 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000c5e8 	.word	0x2000c5e8
 8001b60:	40005400 	.word	0x40005400
 8001b64:	10909cec 	.word	0x10909cec

08001b68 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <MX_I2C2_Init+0x78>)
 8001b70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <MX_I2C2_Init+0x7c>)
 8001b76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba2:	480e      	ldr	r0, [pc, #56]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001ba4:	f009 f8b0 	bl	800ad08 <HAL_I2C_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001bae:	f000 fc73 	bl	8002498 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001bb6:	f009 fec5 	bl	800b944 <HAL_I2CEx_ConfigAnalogFilter>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bc0:	f000 fc6a 	bl	8002498 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_I2C2_Init+0x74>)
 8001bc8:	f009 ff07 	bl	800b9da <HAL_I2CEx_ConfigDigitalFilter>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bd2:	f000 fc61 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000c634 	.word	0x2000c634
 8001be0:	40005800 	.word	0x40005800
 8001be4:	10909cec 	.word	0x10909cec

08001be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0b0      	sub	sp, #192	; 0xc0
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c00:	f107 0320 	add.w	r3, r7, #32
 8001c04:	228c      	movs	r2, #140	; 0x8c
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00f f88d 	bl	8010d28 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a53      	ldr	r2, [pc, #332]	; (8001d60 <HAL_I2C_MspInit+0x178>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d13c      	bne.n	8001c92 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c18:	2340      	movs	r3, #64	; 0x40
 8001c1a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00a fe87 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c30:	f000 fc32 	bl	8002498 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c40:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c4c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c54:	2312      	movs	r3, #18
 8001c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c66:	2304      	movs	r3, #4
 8001c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c70:	4619      	mov	r1, r3
 8001c72:	483d      	ldr	r0, [pc, #244]	; (8001d68 <HAL_I2C_MspInit+0x180>)
 8001c74:	f008 fd7a 	bl	800a76c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a39      	ldr	r2, [pc, #228]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c82:	6593      	str	r3, [r2, #88]	; 0x58
 8001c84:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c90:	e061      	b.n	8001d56 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a35      	ldr	r2, [pc, #212]	; (8001d6c <HAL_I2C_MspInit+0x184>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d15c      	bne.n	8001d56 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00a fe45 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001cb4:	f000 fbf0 	bl	8002498 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d00:	2304      	movs	r3, #4
 8001d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4818      	ldr	r0, [pc, #96]	; (8001d70 <HAL_I2C_MspInit+0x188>)
 8001d0e:	f008 fd2d 	bl	800a76c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <HAL_I2C_MspInit+0x180>)
 8001d3a:	f008 fd17 	bl	800a76c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_I2C_MspInit+0x17c>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
}
 8001d56:	bf00      	nop
 8001d58:	37c0      	adds	r7, #192	; 0xc0
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40005400 	.word	0x40005400
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	40005800 	.word	0x40005800
 8001d70:	48001c00 	.word	0x48001c00

08001d74 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_I2C_MspDeInit+0x64>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10f      	bne.n	8001da6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_I2C_MspDeInit+0x68>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_I2C_MspDeInit+0x68>)
 8001d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d96:	4812      	ldr	r0, [pc, #72]	; (8001de0 <HAL_I2C_MspDeInit+0x6c>)
 8001d98:	f008 fe7a 	bl	800aa90 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	4810      	ldr	r0, [pc, #64]	; (8001de0 <HAL_I2C_MspDeInit+0x6c>)
 8001da0:	f008 fe76 	bl	800aa90 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001da4:	e013      	b.n	8001dce <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_I2C_MspDeInit+0x70>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d10e      	bne.n	8001dce <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_I2C_MspDeInit+0x68>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_I2C_MspDeInit+0x68>)
 8001db6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <HAL_I2C_MspDeInit+0x74>)
 8001dc0:	f008 fe66 	bl	800aa90 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <HAL_I2C_MspDeInit+0x6c>)
 8001dca:	f008 fe61 	bl	800aa90 <HAL_GPIO_DeInit>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48000400 	.word	0x48000400
 8001de4:	40005800 	.word	0x40005800
 8001de8:	48001c00 	.word	0x48001c00

08001dec <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) HAL_ADC_Start_IT(&hadc1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d102      	bne.n	8001e04 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e00:	f006 ff24 	bl	8008c4c <HAL_ADC_Start_IT>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	2000c40c 	.word	0x2000c40c

08001e14 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    static uint32_t AD_Value;
    static int sample_num = 0;

    HAL_ADC_Stop_IT(&hadc1);
 8001e1c:	482b      	ldr	r0, [pc, #172]	; (8001ecc <HAL_ADC_ConvCpltCallback+0xb8>)
 8001e1e:	f007 f847 	bl	8008eb0 <HAL_ADC_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3);
 8001e22:	482b      	ldr	r0, [pc, #172]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001e24:	f00c fc94 	bl	800e750 <HAL_TIM_Base_Stop_IT>

    AD_Value = HAL_ADC_GetValue(&hadc1);
 8001e28:	4828      	ldr	r0, [pc, #160]	; (8001ecc <HAL_ADC_ConvCpltCallback+0xb8>)
 8001e2a:	f007 f87c 	bl	8008f26 <HAL_ADC_GetValue>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001e32:	6013      	str	r3, [r2, #0]

    if (sample_num < FFT_LENGTH - 1)
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	dc38      	bgt.n	8001eb2 <HAL_ADC_ConvCpltCallback+0x9e>
    {
    	FFT_Input_Buffer[sample_num * 2] = (float32_t)AD_Value * 2.5 / 2048;
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4c:	ee17 0a90 	vmov	r0, s15
 8001e50:	f7fe fbea 	bl	8000628 <__aeabi_f2d>
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_ADC_ConvCpltCallback+0xc8>)
 8001e5a:	f7fe fc3d 	bl	80006d8 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001e6c:	f7fe fd5e 	bl	800092c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	005c      	lsls	r4, r3, #1
 8001e7e:	f7fe ff03 	bl	8000c88 <__aeabi_d2f>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4917      	ldr	r1, [pc, #92]	; (8001ee4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e86:	00a3      	lsls	r3, r4, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	601a      	str	r2, [r3, #0]
    	FFT_Input_Buffer[sample_num * 2 + 1] = 0;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
    	sample_num ++;
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001ea8:	6013      	str	r3, [r2, #0]
    	HAL_TIM_Base_Start_IT(&htim3);
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001eac:	f00c fbe0 	bl	800e670 <HAL_TIM_Base_Start_IT>
    	sample_num = 0; HAL_TIM_Base_Stop(&htim3);
    	FFT_flag = 1;
    }

    //HAL_TIM_Base_Start_IT(&htim3);
}
 8001eb0:	e008      	b.n	8001ec4 <HAL_ADC_ConvCpltCallback+0xb0>
    	sample_num = 0; HAL_TIM_Base_Stop(&htim3);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001eba:	f00c fbb1 	bl	800e620 <HAL_TIM_Base_Stop>
    	FFT_flag = 1;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	2000c40c 	.word	0x2000c40c
 8001ed0:	2000c8e8 	.word	0x2000c8e8
 8001ed4:	2000c2e4 	.word	0x2000c2e4
 8001ed8:	2000c2e8 	.word	0x2000c2e8
 8001edc:	40040000 	.word	0x40040000
 8001ee0:	40a00000 	.word	0x40a00000
 8001ee4:	200002e4 	.word	0x200002e4
 8001ee8:	200002d4 	.word	0x200002d4

08001eec <LCD_Print>:

void LCD_Print(int status, double frequency, double speed)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6178      	str	r0, [r7, #20]
 8001ef4:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ef8:	ed87 1b00 	vstr	d1, [r7]
	static int last_status = 1;
	static char Display1[20] = "";
	static char Display2[20] = "";
	static char Display3[20] = "";
	if (frequency == -1)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <LCD_Print+0xb8>)
 8001f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f06:	f7fe fe4f 	bl	8000ba8 <__aeabi_dcmpeq>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <LCD_Print+0x36>
	{
		sprintf(Display1, " Out of Range "); sprintf(Display2, " Out of Range ");
 8001f10:	4925      	ldr	r1, [pc, #148]	; (8001fa8 <LCD_Print+0xbc>)
 8001f12:	4826      	ldr	r0, [pc, #152]	; (8001fac <LCD_Print+0xc0>)
 8001f14:	f00f fb7a 	bl	801160c <siprintf>
 8001f18:	4923      	ldr	r1, [pc, #140]	; (8001fa8 <LCD_Print+0xbc>)
 8001f1a:	4825      	ldr	r0, [pc, #148]	; (8001fb0 <LCD_Print+0xc4>)
 8001f1c:	f00f fb76 	bl	801160c <siprintf>
 8001f20:	e00b      	b.n	8001f3a <LCD_Print+0x4e>
	}
	else
	{
		sprintf(Display1, "%9.2f Hz ", frequency); sprintf(Display2, "%9.3f m/s", speed);
 8001f22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f26:	4923      	ldr	r1, [pc, #140]	; (8001fb4 <LCD_Print+0xc8>)
 8001f28:	4820      	ldr	r0, [pc, #128]	; (8001fac <LCD_Print+0xc0>)
 8001f2a:	f00f fb6f 	bl	801160c <siprintf>
 8001f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f32:	4921      	ldr	r1, [pc, #132]	; (8001fb8 <LCD_Print+0xcc>)
 8001f34:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <LCD_Print+0xc4>)
 8001f36:	f00f fb69 	bl	801160c <siprintf>
	}
	BSP_LCD_DisplayStringAtLine(2,(uint8_t*)Display1);
 8001f3a:	491c      	ldr	r1, [pc, #112]	; (8001fac <LCD_Print+0xc0>)
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f003 fdb3 	bl	8005aa8 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(6,(uint8_t*)Display2);
 8001f42:	491b      	ldr	r1, [pc, #108]	; (8001fb0 <LCD_Print+0xc4>)
 8001f44:	2006      	movs	r0, #6
 8001f46:	f003 fdaf 	bl	8005aa8 <BSP_LCD_DisplayStringAtLine>
	if (last_status != status)
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <LCD_Print+0xd0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d01f      	beq.n	8001f94 <LCD_Print+0xa8>
	{
		BSP_LCD_ClearStringLine(8);
 8001f54:	2008      	movs	r0, #8
 8001f56:	f003 fcc3 	bl	80058e0 <BSP_LCD_ClearStringLine>
		sprintf(Display3, "Status: %s", (status == 0) ? "OFF":"ON");
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <LCD_Print+0x78>
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <LCD_Print+0xd4>)
 8001f62:	e000      	b.n	8001f66 <LCD_Print+0x7a>
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <LCD_Print+0xd8>)
 8001f66:	461a      	mov	r2, r3
 8001f68:	4917      	ldr	r1, [pc, #92]	; (8001fc8 <LCD_Print+0xdc>)
 8001f6a:	4818      	ldr	r0, [pc, #96]	; (8001fcc <LCD_Print+0xe0>)
 8001f6c:	f00f fb4e 	bl	801160c <siprintf>
		BSP_LCD_SetTextColor((status == 0) ? LCD_COLOR_RED : LCD_COLOR_GREEN);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <LCD_Print+0x90>
 8001f76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f7a:	e001      	b.n	8001f80 <LCD_Print+0x94>
 8001f7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fc71 	bl	8005868 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(8,(uint8_t*)Display3);
 8001f86:	4911      	ldr	r1, [pc, #68]	; (8001fcc <LCD_Print+0xe0>)
 8001f88:	2008      	movs	r0, #8
 8001f8a:	f003 fd8d 	bl	8005aa8 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f003 fc6a 	bl	8005868 <BSP_LCD_SetTextColor>
	}
	last_status = status;
 8001f94:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <LCD_Print+0xd0>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	bff00000 	.word	0xbff00000
 8001fa8:	08013ab8 	.word	0x08013ab8
 8001fac:	2000c2ec 	.word	0x2000c2ec
 8001fb0:	2000c300 	.word	0x2000c300
 8001fb4:	08013ac8 	.word	0x08013ac8
 8001fb8:	08013ad4 	.word	0x08013ad4
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	08013ae0 	.word	0x08013ae0
 8001fc4:	08013ae4 	.word	0x08013ae4
 8001fc8:	08013ae8 	.word	0x08013ae8
 8001fcc:	2000c314 	.word	0x2000c314

08001fd0 <LCD_Config>:

void LCD_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    BSP_LCD_Init();
 8001fd4:	f003 fb8e 	bl	80056f4 <BSP_LCD_Init>

    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fdc:	f003 fc54 	bl	8005888 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font24);
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <LCD_Config+0x40>)
 8001fe2:	f003 fc61 	bl	80058a8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Frequency:");
 8001fe6:	490b      	ldr	r1, [pc, #44]	; (8002014 <LCD_Config+0x44>)
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f003 fd5d 	bl	8005aa8 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(4,(uint8_t*)"Speed:");
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <LCD_Config+0x48>)
 8001ff0:	2004      	movs	r0, #4
 8001ff2:	f003 fd59 	bl	8005aa8 <BSP_LCD_DisplayStringAtLine>
    LCD_Print(0,0,0);
 8001ff6:	ed9f 1b04 	vldr	d1, [pc, #16]	; 8002008 <LCD_Config+0x38>
 8001ffa:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8002008 <LCD_Config+0x38>
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff ff74 	bl	8001eec <LCD_Print>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
	...
 8002010:	200000c0 	.word	0x200000c0
 8002014:	08013af4 	.word	0x08013af4
 8002018:	08013b00 	.word	0x08013b00
 800201c:	00000000 	.word	0x00000000

08002020 <speed_calcluation>:

void speed_calcluation(int n)
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	frequency = (float)n / (float)FFT_LENGTH * SAMPLE_FEQ - n * BIAS;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002032:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80020e8 <speed_calcluation+0xc8>
 8002036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80020ec <speed_calcluation+0xcc>
 800203e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002042:	ee17 0a90 	vmov	r0, s15
 8002046:	f7fe faef 	bl	8000628 <__aeabi_f2d>
 800204a:	4604      	mov	r4, r0
 800204c:	460d      	mov	r5, r1
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe fad8 	bl	8000604 <__aeabi_i2d>
 8002054:	a31e      	add	r3, pc, #120	; (adr r3, 80020d0 <speed_calcluation+0xb0>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe fb3d 	bl	80006d8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4620      	mov	r0, r4
 8002064:	4629      	mov	r1, r5
 8002066:	f7fe f97f 	bl	8000368 <__aeabi_dsub>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fe09 	bl	8000c88 <__aeabi_d2f>
 8002076:	4603      	mov	r3, r0
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <speed_calcluation+0xd0>)
 800207a:	6013      	str	r3, [r2, #0]
	speed = frequency * LIGHT_SPEED / TRANS_FEQ /2;
 800207c:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <speed_calcluation+0xd0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fad1 	bl	8000628 <__aeabi_f2d>
 8002086:	a314      	add	r3, pc, #80	; (adr r3, 80020d8 <speed_calcluation+0xb8>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe fb24 	bl	80006d8 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	a311      	add	r3, pc, #68	; (adr r3, 80020e0 <speed_calcluation+0xc0>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe fc45 	bl	800092c <__aeabi_ddiv>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b2:	f7fe fc3b 	bl	800092c <__aeabi_ddiv>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fde3 	bl	8000c88 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <speed_calcluation+0xd4>)
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bdb0      	pop	{r4, r5, r7, pc}
 80020d0:	adab9f56 	.word	0xadab9f56
 80020d4:	3fa65fd8 	.word	0x3fa65fd8
 80020d8:	00000000 	.word	0x00000000
 80020dc:	41b1e1a3 	.word	0x41b1e1a3
 80020e0:	0a000000 	.word	0x0a000000
 80020e4:	42039ab6 	.word	0x42039ab6
 80020e8:	45800000 	.word	0x45800000
 80020ec:	459c4000 	.word	0x459c4000
 80020f0:	200002e0 	.word	0x200002e0
 80020f4:	200002dc 	.word	0x200002dc

080020f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002108:	d112      	bne.n	8002130 <HAL_GPIO_EXTI_Callback+0x38>
	{
		Startflag = (Startflag == 0) ? 1: 0;
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_GPIO_EXTI_Callback+0xa0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_GPIO_EXTI_Callback+0xa0>)
 800211c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800211e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002122:	481e      	ldr	r0, [pc, #120]	; (800219c <HAL_GPIO_EXTI_Callback+0xa4>)
 8002124:	f008 fdbe 	bl	800aca4 <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim3);
 8002128:	481d      	ldr	r0, [pc, #116]	; (80021a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800212a:	f00c faa1 	bl	800e670 <HAL_TIM_Base_Start_IT>
 800212e:	e022      	b.n	8002176 <HAL_GPIO_EXTI_Callback+0x7e>
	}
	else if(GPIO_Pin == GPIO_PIN_8)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002136:	d11e      	bne.n	8002176 <HAL_GPIO_EXTI_Callback+0x7e>
	{
		Startflag = 0; TIM3->CNT = 0; frequency = 0; speed = 0; FFT_flag = 0;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_GPIO_EXTI_Callback+0xa0>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_GPIO_EXTI_Callback+0xac>)
 8002140:	2200      	movs	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_GPIO_EXTI_Callback+0xb4>)
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)"---Reset---\r\n", sizeof("---Reset---\r\n"));
 800215a:	220e      	movs	r2, #14
 800215c:	4915      	ldr	r1, [pc, #84]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800215e:	4816      	ldr	r0, [pc, #88]	; (80021b8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002160:	f00d fd42 	bl	800fbe8 <HAL_UART_Transmit_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8002164:	2201      	movs	r2, #1
 8002166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216a:	480c      	ldr	r0, [pc, #48]	; (800219c <HAL_GPIO_EXTI_Callback+0xa4>)
 800216c:	f008 fd82 	bl	800ac74 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 8002170:	480b      	ldr	r0, [pc, #44]	; (80021a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002172:	f00c fa55 	bl	800e620 <HAL_TIM_Base_Stop>
	}

	if (Startflag == 0)
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d108      	bne.n	8002190 <HAL_GPIO_EXTI_Callback+0x98>
	{
		FFT_flag = 0;
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
		memset(FFT_Input_Buffer,0,sizeof(FFT_Input_Buffer));
 8002184:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002188:	2100      	movs	r1, #0
 800218a:	480c      	ldr	r0, [pc, #48]	; (80021bc <HAL_GPIO_EXTI_Callback+0xc4>)
 800218c:	f00e fdcc 	bl	8010d28 <memset>
	}
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200002d8 	.word	0x200002d8
 800219c:	48000400 	.word	0x48000400
 80021a0:	2000c8e8 	.word	0x2000c8e8
 80021a4:	40000400 	.word	0x40000400
 80021a8:	200002e0 	.word	0x200002e0
 80021ac:	200002dc 	.word	0x200002dc
 80021b0:	200002d4 	.word	0x200002d4
 80021b4:	08013b08 	.word	0x08013b08
 80021b8:	2000ca3c 	.word	0x2000ca3c
 80021bc:	200002e4 	.word	0x200002e4

080021c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c8:	f006 f8aa 	bl	8008320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021cc:	f000 f8e2 	bl	8002394 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021d0:	f000 f932 	bl	8002438 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d4:	f7ff fab2 	bl	800173c <MX_GPIO_Init>
  MX_ADC1_Init();
 80021d8:	f7fe ff22 	bl	8001020 <MX_ADC1_Init>
  MX_DCMI_Init();
 80021dc:	f7fe ffe0 	bl	80011a0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80021e0:	f7ff f892 	bl	8001308 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80021e4:	f7ff f984 	bl	80014f0 <MX_FMC_Init>
  MX_I2C1_Init();
 80021e8:	f7ff fc7e 	bl	8001ae8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021ec:	f7ff fcbc 	bl	8001b68 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80021f0:	f000 ff42 	bl	8003078 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80021f4:	f000 ff6e 	bl	80030d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021f8:	f000 ff9c 	bl	8003134 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 80021fc:	f000 f952 	bl	80024a4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8002200:	f000 f9de 	bl	80025c0 <MX_SAI1_Init>
  MX_SPI1_Init();
 8002204:	f000 fafe 	bl	8002804 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002208:	f000 fb3a 	bl	8002880 <MX_SPI2_Init>
  MX_TIM3_Init();
 800220c:	f000 fda8 	bl	8002d60 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002210:	f000 fdf4 	bl	8002dfc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  LCD_Config();
 8002214:	f7ff fedc 	bl	8001fd0 <LCD_Config>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8002218:	2104      	movs	r1, #4
 800221a:	484c      	ldr	r0, [pc, #304]	; (800234c <main+0x18c>)
 800221c:	f00c fb1e 	bl	800e85c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002226:	484a      	ldr	r0, [pc, #296]	; (8002350 <main+0x190>)
 8002228:	f008 fd24 	bl	800ac74 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (FFT_flag == 1 && Startflag == 1)
 800222c:	4b49      	ldr	r3, [pc, #292]	; (8002354 <main+0x194>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d158      	bne.n	80022e6 <main+0x126>
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <main+0x198>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d154      	bne.n	80022e6 <main+0x126>
	{
	    arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFT_Input_Buffer, 0, 1);
 800223c:	2301      	movs	r3, #1
 800223e:	2200      	movs	r2, #0
 8002240:	4946      	ldr	r1, [pc, #280]	; (800235c <main+0x19c>)
 8002242:	4847      	ldr	r0, [pc, #284]	; (8002360 <main+0x1a0>)
 8002244:	f004 ffac 	bl	80071a0 <arm_cfft_f32>
	    arm_cmplx_mag_f32(FFT_Input_Buffer, FFT_Output_Buffer, FFT_LENGTH);
 8002248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224c:	4945      	ldr	r1, [pc, #276]	; (8002364 <main+0x1a4>)
 800224e:	4843      	ldr	r0, [pc, #268]	; (800235c <main+0x19c>)
 8002250:	f003 fde0 	bl	8005e14 <arm_cmplx_mag_f32>
	    FFT_Output_Buffer[0] = 0;
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <main+0x1a4>)
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
	    arm_max_f32(FFT_Output_Buffer, FFT_LENGTH / 2, &value, &FFT_index);
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <main+0x1a8>)
 800225e:	4a43      	ldr	r2, [pc, #268]	; (800236c <main+0x1ac>)
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	483f      	ldr	r0, [pc, #252]	; (8002364 <main+0x1a4>)
 8002266:	f003 fee6 	bl	8006036 <arm_max_f32>
	    speed_calcluation(FFT_index);
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <main+0x1a8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fed6 	bl	8002020 <speed_calcluation>

	    sprintf(Txmsg, "num: %4lu frq: %7.2fHz  maxvalue: %5.0f speed: %6.3fm/s\r\n", FFT_index, frequency, value, speed);
 8002274:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <main+0x1a8>)
 8002276:	681e      	ldr	r6, [r3, #0]
 8002278:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <main+0x1b0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe f9d3 	bl	8000628 <__aeabi_f2d>
 8002282:	4604      	mov	r4, r0
 8002284:	460d      	mov	r5, r1
 8002286:	4b39      	ldr	r3, [pc, #228]	; (800236c <main+0x1ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f9cc 	bl	8000628 <__aeabi_f2d>
 8002290:	4680      	mov	r8, r0
 8002292:	4689      	mov	r9, r1
 8002294:	4b37      	ldr	r3, [pc, #220]	; (8002374 <main+0x1b4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f9c5 	bl	8000628 <__aeabi_f2d>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022a6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022aa:	e9cd 4500 	strd	r4, r5, [sp]
 80022ae:	4632      	mov	r2, r6
 80022b0:	4931      	ldr	r1, [pc, #196]	; (8002378 <main+0x1b8>)
 80022b2:	4832      	ldr	r0, [pc, #200]	; (800237c <main+0x1bc>)
 80022b4:	f00f f9aa 	bl	801160c <siprintf>
	    HAL_UART_Transmit_IT(&huart2, (uint8_t*)Txmsg, sizeof(Txmsg));
 80022b8:	2246      	movs	r2, #70	; 0x46
 80022ba:	4930      	ldr	r1, [pc, #192]	; (800237c <main+0x1bc>)
 80022bc:	4830      	ldr	r0, [pc, #192]	; (8002380 <main+0x1c0>)
 80022be:	f00d fc93 	bl	800fbe8 <HAL_UART_Transmit_IT>
	    while(huart2.gState != HAL_UART_STATE_READY);
 80022c2:	bf00      	nop
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <main+0x1c0>)
 80022c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d1fb      	bne.n	80022c4 <main+0x104>

	    FFT_index = 0; value = 0; FFT_flag = 0;
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <main+0x1a8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <main+0x1ac>)
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <main+0x194>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start_IT(&htim3);
 80022e0:	4828      	ldr	r0, [pc, #160]	; (8002384 <main+0x1c4>)
 80022e2:	f00c f9c5 	bl	800e670 <HAL_TIM_Base_Start_IT>
	}
	if (Startflag == 1 && (frequency > 1200 || frequency < 70)) frequency = -1;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <main+0x198>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d116      	bne.n	800231c <main+0x15c>
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <main+0x1b0>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002388 <main+0x1c8>
 80022f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002300:	dc09      	bgt.n	8002316 <main+0x156>
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <main+0x1b0>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800238c <main+0x1cc>
 800230c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002314:	d502      	bpl.n	800231c <main+0x15c>
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <main+0x1b0>)
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <main+0x1d0>)
 800231a:	601a      	str	r2, [r3, #0]
	LCD_Print(Startflag, frequency, speed);
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <main+0x198>)
 800231e:	681c      	ldr	r4, [r3, #0]
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <main+0x1b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f97f 	bl	8000628 <__aeabi_f2d>
 800232a:	4680      	mov	r8, r0
 800232c:	4689      	mov	r9, r1
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <main+0x1b4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f978 	bl	8000628 <__aeabi_f2d>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	ec43 2b11 	vmov	d1, r2, r3
 8002340:	ec49 8b10 	vmov	d0, r8, r9
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff fdd1 	bl	8001eec <LCD_Print>
	if (FFT_flag == 1 && Startflag == 1)
 800234a:	e76f      	b.n	800222c <main+0x6c>
 800234c:	2000c89c 	.word	0x2000c89c
 8002350:	48000400 	.word	0x48000400
 8002354:	200002d4 	.word	0x200002d4
 8002358:	200002d8 	.word	0x200002d8
 800235c:	200002e4 	.word	0x200002e4
 8002360:	0801fa48 	.word	0x0801fa48
 8002364:	200082e4 	.word	0x200082e4
 8002368:	2000c32c 	.word	0x2000c32c
 800236c:	2000c328 	.word	0x2000c328
 8002370:	200002e0 	.word	0x200002e0
 8002374:	200002dc 	.word	0x200002dc
 8002378:	08013b18 	.word	0x08013b18
 800237c:	2000c330 	.word	0x2000c330
 8002380:	2000ca3c 	.word	0x2000ca3c
 8002384:	2000c8e8 	.word	0x2000c8e8
 8002388:	44960000 	.word	0x44960000
 800238c:	428c0000 	.word	0x428c0000
 8002390:	bf800000 	.word	0xbf800000

08002394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b096      	sub	sp, #88	; 0x58
 8002398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	2244      	movs	r2, #68	; 0x44
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00e fcc0 	bl	8010d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80023b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023ba:	f009 fb69 	bl	800ba90 <HAL_PWREx_ControlVoltageScaling>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023c4:	f000 f868 	bl	8002498 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023c8:	2302      	movs	r3, #2
 80023ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d2:	2340      	movs	r3, #64	; 0x40
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d6:	2302      	movs	r3, #2
 80023d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023da:	2302      	movs	r3, #2
 80023dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80023e2:	230a      	movs	r3, #10
 80023e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023e6:	2304      	movs	r3, #4
 80023e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80023ea:	2304      	movs	r3, #4
 80023ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023ee:	2302      	movs	r3, #2
 80023f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4618      	mov	r0, r3
 80023f8:	f009 fc72 	bl	800bce0 <HAL_RCC_OscConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002402:	f000 f849 	bl	8002498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002406:	230f      	movs	r3, #15
 8002408:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800240a:	2303      	movs	r3, #3
 800240c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800241a:	463b      	mov	r3, r7
 800241c:	2104      	movs	r1, #4
 800241e:	4618      	mov	r0, r3
 8002420:	f00a f884 	bl	800c52c <HAL_RCC_ClockConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800242a:	f000 f835 	bl	8002498 <Error_Handler>
  }
}
 800242e:	bf00      	nop
 8002430:	3758      	adds	r7, #88	; 0x58
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0a4      	sub	sp, #144	; 0x90
 800243c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	228c      	movs	r2, #140	; 0x8c
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f00e fc6f 	bl	8010d28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 800244a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800244e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002450:	2300      	movs	r3, #0
 8002452:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800245c:	2302      	movs	r3, #2
 800245e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002460:	2301      	movs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002464:	2310      	movs	r3, #16
 8002466:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV4;
 8002468:	2304      	movs	r3, #4
 800246a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002470:	2304      	movs	r3, #4
 8002472:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <PeriphCommonClock_Config+0x5c>)
 8002476:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4618      	mov	r0, r3
 800247c:	f00a fa5c 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002486:	f000 f807 	bl	8002498 <Error_Handler>
  }
}
 800248a:	bf00      	nop
 800248c:	3790      	adds	r7, #144	; 0x90
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	01010000 	.word	0x01010000

08002498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800249c:	b672      	cpsid	i
}
 800249e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <Error_Handler+0x8>
	...

080024a4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024aa:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <MX_QUADSPI_Init+0x54>)
 80024ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024b0:	2202      	movs	r2, #2
 80024b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024b6:	2204      	movs	r2, #4
 80024b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024bc:	2210      	movs	r2, #16
 80024be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024c2:	2217      	movs	r2, #23
 80024c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <MX_QUADSPI_Init+0x50>)
 80024e0:	f009 fb3c 	bl	800bb5c <HAL_QSPI_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80024ea:	f7ff ffd5 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000c680 	.word	0x2000c680
 80024f8:	a0001000 	.word	0xa0001000

080024fc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_QSPI_MspInit+0xb8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d145      	bne.n	80025aa <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 8002520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002522:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002528:	6513      	str	r3, [r2, #80]	; 0x50
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 800252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_QSPI_MspInit+0xbc>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002566:	f640 0303 	movw	r3, #2051	; 0x803
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002578:	230a      	movs	r3, #10
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	480e      	ldr	r0, [pc, #56]	; (80025bc <HAL_QSPI_MspInit+0xc0>)
 8002584:	f008 f8f2 	bl	800a76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8002588:	23c8      	movs	r3, #200	; 0xc8
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002598:	230a      	movs	r3, #10
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a6:	f008 f8e1 	bl	800a76c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	a0001000 	.word	0xa0001000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	48000400 	.word	0x48000400

080025c0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80025c4:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025c6:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <MX_SAI1_Init+0x140>)
 80025c8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80025d0:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025d8:	2240      	movs	r2, #64	; 0x40
 80025da:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80025dc:	4b47      	ldr	r3, [pc, #284]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80025e2:	4b46      	ldr	r3, [pc, #280]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <MX_SAI1_Init+0x13c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002600:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002602:	4a40      	ldr	r2, [pc, #256]	; (8002704 <MX_SAI1_Init+0x144>)
 8002604:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800260c:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <MX_SAI1_Init+0x13c>)
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002612:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002614:	2200      	movs	r2, #0
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <MX_SAI1_Init+0x13c>)
 800261a:	2200      	movs	r2, #0
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002620:	2208      	movs	r2, #8
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002626:	2201      	movs	r2, #1
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <MX_SAI1_Init+0x13c>)
 800262c:	2200      	movs	r2, #0
 800262e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002630:	4b32      	ldr	r3, [pc, #200]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002632:	2200      	movs	r2, #0
 8002634:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002636:	4b31      	ldr	r3, [pc, #196]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002638:	2200      	movs	r2, #0
 800263a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <MX_SAI1_Init+0x13c>)
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002644:	2200      	movs	r2, #0
 8002646:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002648:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <MX_SAI1_Init+0x13c>)
 800264a:	2201      	movs	r2, #1
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002650:	2200      	movs	r2, #0
 8002652:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002654:	4829      	ldr	r0, [pc, #164]	; (80026fc <MX_SAI1_Init+0x13c>)
 8002656:	f00b fcf5 	bl	800e044 <HAL_SAI_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8002660:	f7ff ff1a 	bl	8002498 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <MX_SAI1_Init+0x148>)
 8002666:	4a29      	ldr	r2, [pc, #164]	; (800270c <MX_SAI1_Init+0x14c>)
 8002668:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <MX_SAI1_Init+0x148>)
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <MX_SAI1_Init+0x148>)
 8002672:	2203      	movs	r2, #3
 8002674:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <MX_SAI1_Init+0x148>)
 8002678:	2240      	movs	r2, #64	; 0x40
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <MX_SAI1_Init+0x148>)
 800267e:	2200      	movs	r2, #0
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002682:	4b21      	ldr	r3, [pc, #132]	; (8002708 <MX_SAI1_Init+0x148>)
 8002684:	2200      	movs	r2, #0
 8002686:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002688:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <MX_SAI1_Init+0x148>)
 800268a:	2201      	movs	r2, #1
 800268c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <MX_SAI1_Init+0x148>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <MX_SAI1_Init+0x148>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <MX_SAI1_Init+0x148>)
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <MX_SAI1_Init+0x148>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <MX_SAI1_Init+0x148>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <MX_SAI1_Init+0x148>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_SAI1_Init+0x148>)
 80026b4:	2208      	movs	r2, #8
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <MX_SAI1_Init+0x148>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <MX_SAI1_Init+0x148>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80026c4:	4b10      	ldr	r3, [pc, #64]	; (8002708 <MX_SAI1_Init+0x148>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <MX_SAI1_Init+0x148>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <MX_SAI1_Init+0x148>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <MX_SAI1_Init+0x148>)
 80026d8:	2200      	movs	r2, #0
 80026da:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <MX_SAI1_Init+0x148>)
 80026de:	2201      	movs	r2, #1
 80026e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <MX_SAI1_Init+0x148>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80026e8:	4807      	ldr	r0, [pc, #28]	; (8002708 <MX_SAI1_Init+0x148>)
 80026ea:	f00b fcab 	bl	800e044 <HAL_SAI_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80026f4:	f7ff fed0 	bl	8002498 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	2000c750 	.word	0x2000c750
 8002700:	40015404 	.word	0x40015404
 8002704:	0002ee00 	.word	0x0002ee00
 8002708:	2000c6cc 	.word	0x2000c6cc
 800270c:	40015424 	.word	0x40015424

08002710 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a33      	ldr	r2, [pc, #204]	; (80027ec <HAL_SAI_MspInit+0xdc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d135      	bne.n	800278e <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002722:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <HAL_SAI_MspInit+0xe0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10b      	bne.n	8002742 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_SAI_MspInit+0xe4>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_SAI_MspInit+0xe4>)
 8002730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002734:	6613      	str	r3, [r2, #96]	; 0x60
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_SAI_MspInit+0xe4>)
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002742:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <HAL_SAI_MspInit+0xe0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_SAI_MspInit+0xe0>)
 800274a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 800274c:	2354      	movs	r3, #84	; 0x54
 800274e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800275c:	230d      	movs	r3, #13
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	4824      	ldr	r0, [pc, #144]	; (80027f8 <HAL_SAI_MspInit+0xe8>)
 8002768:	f008 f800 	bl	800a76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800276c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800277e:	230d      	movs	r3, #13
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	481c      	ldr	r0, [pc, #112]	; (80027fc <HAL_SAI_MspInit+0xec>)
 800278a:	f007 ffef 	bl	800a76c <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_SAI_MspInit+0xf0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d124      	bne.n	80027e2 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_SAI_MspInit+0xe0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_SAI_MspInit+0xe4>)
 80027a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <HAL_SAI_MspInit+0xe4>)
 80027a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027aa:	6613      	str	r3, [r2, #96]	; 0x60
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_SAI_MspInit+0xe4>)
 80027ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_SAI_MspInit+0xe0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_SAI_MspInit+0xe0>)
 80027c0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80027c2:	2308      	movs	r3, #8
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80027d2:	230d      	movs	r3, #13
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4806      	ldr	r0, [pc, #24]	; (80027f8 <HAL_SAI_MspInit+0xe8>)
 80027de:	f007 ffc5 	bl	800a76c <HAL_GPIO_Init>

    }
}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40015404 	.word	0x40015404
 80027f0:	2000c378 	.word	0x2000c378
 80027f4:	40021000 	.word	0x40021000
 80027f8:	48001000 	.word	0x48001000
 80027fc:	48000400 	.word	0x48000400
 8002800:	40015424 	.word	0x40015424

08002804 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <MX_SPI1_Init+0x74>)
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <MX_SPI1_Init+0x78>)
 800280c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <MX_SPI1_Init+0x74>)
 8002810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <MX_SPI1_Init+0x74>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <MX_SPI1_Init+0x74>)
 800281e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <MX_SPI1_Init+0x74>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <MX_SPI1_Init+0x74>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_SPI1_Init+0x74>)
 8002832:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_SPI1_Init+0x74>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_SPI1_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_SPI1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <MX_SPI1_Init+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_SPI1_Init+0x74>)
 8002852:	2207      	movs	r2, #7
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <MX_SPI1_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_SPI1_Init+0x74>)
 800285e:	2208      	movs	r2, #8
 8002860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_SPI1_Init+0x74>)
 8002864:	f00b fd9a 	bl	800e39c <HAL_SPI_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800286e:	f7ff fe13 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000c838 	.word	0x2000c838
 800287c:	40013000 	.word	0x40013000

08002880 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <MX_SPI2_Init+0x74>)
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <MX_SPI2_Init+0x78>)
 8002888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <MX_SPI2_Init+0x74>)
 800288c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <MX_SPI2_Init+0x74>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <MX_SPI2_Init+0x74>)
 800289a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800289e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028ce:	2207      	movs	r2, #7
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028da:	2208      	movs	r2, #8
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_SPI2_Init+0x74>)
 80028e0:	f00b fd5c 	bl	800e39c <HAL_SPI_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80028ea:	f7ff fdd5 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000c7d4 	.word	0x2000c7d4
 80028f8:	40003800 	.word	0x40003800

080028fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_SPI_MspInit+0x14c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d146      	bne.n	80029ac <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800291e:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 8002924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002928:	6613      	str	r3, [r2, #96]	; 0x60
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002932:	623b      	str	r3, [r7, #32]
 8002934:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	4a44      	ldr	r2, [pc, #272]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002942:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	4a3e      	ldr	r2, [pc, #248]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295a:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002966:	2330      	movs	r3, #48	; 0x30
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002976:	2305      	movs	r3, #5
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	4833      	ldr	r0, [pc, #204]	; (8002a50 <HAL_SPI_MspInit+0x154>)
 8002982:	f007 fef3 	bl	800a76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8002986:	f248 0320 	movw	r3, #32800	; 0x8020
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002998:	2305      	movs	r3, #5
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a6:	f007 fee1 	bl	800a76c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029aa:	e049      	b.n	8002a40 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <HAL_SPI_MspInit+0x158>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d144      	bne.n	8002a40 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029b6:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6593      	str	r3, [r2, #88]	; 0x58
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_SPI_MspInit+0x150>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80029fe:	2306      	movs	r3, #6
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a0e:	2305      	movs	r3, #5
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a16:	4619      	mov	r1, r3
 8002a18:	480f      	ldr	r0, [pc, #60]	; (8002a58 <HAL_SPI_MspInit+0x15c>)
 8002a1a:	f007 fea7 	bl	800a76c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a30:	2305      	movs	r3, #5
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <HAL_SPI_MspInit+0x154>)
 8002a3c:	f007 fe96 	bl	800a76c <HAL_GPIO_Init>
}
 8002a40:	bf00      	nop
 8002a42:	3738      	adds	r7, #56	; 0x38
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40013000 	.word	0x40013000
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	48000400 	.word	0x48000400
 8002a54:	40003800 	.word	0x40003800
 8002a58:	48002000 	.word	0x48002000

08002a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_MspInit+0x50>)
 8002a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_MspInit+0x50>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_MspInit+0x50>)
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_MspInit+0x50>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_MspInit+0x50>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6593      	str	r3, [r2, #88]	; 0x58
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_MspInit+0x50>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8002a92:	2004      	movs	r0, #4
 8002a94:	f005 fcdc 	bl	8008450 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f005 fced 	bl	8008478 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002a9e:	f005 fcff 	bl	80084a0 <HAL_SYSCFG_EnableVREFBUF>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <NMI_Handler+0x4>

08002ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <BusFault_Handler+0x4>

08002ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <UsageFault_Handler+0x4>

08002ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002afc:	f005 fc64 	bl	80083c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <ADC1_2_IRQHandler+0x10>)
 8002b0a:	f006 fa19 	bl	8008f40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000c40c 	.word	0x2000c40c

08002b18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b1c:	2020      	movs	r0, #32
 8002b1e:	f008 f8db 	bl	800acd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002b22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b26:	f008 f8d7 	bl	800acd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <TIM3_IRQHandler+0x10>)
 8002b36:	f00b ff97 	bl	800ea68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000c8e8 	.word	0x2000c8e8

08002b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <USART2_IRQHandler+0x10>)
 8002b4a:	f00d f8a9 	bl	800fca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000ca3c 	.word	0x2000ca3c

08002b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002b5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b60:	f008 f8ba 	bl	800acd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002b64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b68:	f008 f8b6 	bl	800acd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	return 1;
 8002b74:	2301      	movs	r3, #1
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_kill>:

int _kill(int pid, int sig)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b8a:	f00e f895 	bl	8010cb8 <__errno>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2216      	movs	r2, #22
 8002b92:	601a      	str	r2, [r3, #0]
	return -1;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_exit>:

void _exit (int status)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ffe7 	bl	8002b80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bb2:	e7fe      	b.n	8002bb2 <_exit+0x12>

08002bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e00a      	b.n	8002bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bc6:	f3af 8000 	nop.w
 8002bca:	4601      	mov	r1, r0
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	b2ca      	uxtb	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbf0      	blt.n	8002bc6 <_read+0x12>
	}

return len;
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e009      	b.n	8002c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	60ba      	str	r2, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3301      	adds	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	dbf1      	blt.n	8002c00 <_write+0x12>
	}
	return len;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_close>:

int _close(int file)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_isatty>:

int _isatty(int file)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
	return 1;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c98:	4a14      	ldr	r2, [pc, #80]	; (8002cec <_sbrk+0x5c>)
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <_sbrk+0x60>)
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <_sbrk+0x64>)
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <_sbrk+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d207      	bcs.n	8002cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc0:	f00d fffa 	bl	8010cb8 <__errno>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	e009      	b.n	8002ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <_sbrk+0x64>)
 8002ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20040000 	.word	0x20040000
 8002cf0:	00002000 	.word	0x00002000
 8002cf4:	2000c37c 	.word	0x2000c37c
 8002cf8:	2000cb50 	.word	0x2000cb50

08002cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <SystemInit+0x5c>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <SystemInit+0x5c>)
 8002d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <SystemInit+0x60>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <SystemInit+0x60>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <SystemInit+0x60>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <SystemInit+0x60>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <SystemInit+0x60>)
 8002d28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <SystemInit+0x60>)
 8002d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <SystemInit+0x60>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <SystemInit+0x60>)
 8002d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <SystemInit+0x60>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00
 8002d5c:	40021000 	.word	0x40021000

08002d60 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d66:	f107 0310 	add.w	r3, r7, #16
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <MX_TIM3_Init+0x98>)
 8002d82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d86:	224f      	movs	r2, #79	; 0x4f
 8002d88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d92:	22c7      	movs	r2, #199	; 0xc7
 8002d94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002da2:	4814      	ldr	r0, [pc, #80]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002da4:	f00b fbe5 	bl	800e572 <HAL_TIM_Base_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002dae:	f7ff fb73 	bl	8002498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	480d      	ldr	r0, [pc, #52]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002dc0:	f00c f882 	bl	800eec8 <HAL_TIM_ConfigClockSource>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002dca:	f7ff fb65 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4806      	ldr	r0, [pc, #24]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002ddc:	f00c fd92 	bl	800f904 <HAL_TIMEx_MasterConfigSynchronization>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002de6:	f7ff fb57 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dea:	bf00      	nop
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000c8e8 	.word	0x2000c8e8
 8002df8:	40000400 	.word	0x40000400

08002dfc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b09a      	sub	sp, #104	; 0x68
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
 8002e2c:	615a      	str	r2, [r3, #20]
 8002e2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	222c      	movs	r2, #44	; 0x2c
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f00d ff76 	bl	8010d28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e3c:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e3e:	4a45      	ldr	r2, [pc, #276]	; (8002f54 <MX_TIM8_Init+0x158>)
 8002e40:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e44:	224f      	movs	r2, #79	; 0x4f
 8002e46:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 8002e4e:	4b40      	ldr	r3, [pc, #256]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e50:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002e54:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e56:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e5c:	4b3c      	ldr	r3, [pc, #240]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e68:	4839      	ldr	r0, [pc, #228]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e6a:	f00b fb82 	bl	800e572 <HAL_TIM_Base_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002e74:	f7ff fb10 	bl	8002498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e82:	4619      	mov	r1, r3
 8002e84:	4832      	ldr	r0, [pc, #200]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e86:	f00c f81f 	bl	800eec8 <HAL_TIM_ConfigClockSource>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002e90:	f7ff fb02 	bl	8002498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e94:	482e      	ldr	r0, [pc, #184]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002e96:	f00b fc8a 	bl	800e7ae <HAL_TIM_PWM_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002ea0:	f7ff fafa 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002eb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4826      	ldr	r0, [pc, #152]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002eb8:	f00c fd24 	bl	800f904 <HAL_TIMEx_MasterConfigSynchronization>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002ec2:	f7ff fae9 	bl	8002498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec6:	2360      	movs	r3, #96	; 0x60
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 999;
 8002eca:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ece:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ee8:	2204      	movs	r2, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4818      	ldr	r0, [pc, #96]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002eee:	f00b fedb 	bl	800eca8 <HAL_TIM_PWM_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8002ef8:	f7ff face 	bl	8002498 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002f32:	f00c fd6f 	bl	800fa14 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8002f3c:	f7ff faac 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f40:	4803      	ldr	r0, [pc, #12]	; (8002f50 <MX_TIM8_Init+0x154>)
 8002f42:	f000 f843 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 8002f46:	bf00      	nop
 8002f48:	3768      	adds	r7, #104	; 0x68
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2000c89c 	.word	0x2000c89c
 8002f54:	40013400 	.word	0x40013400

08002f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_TIM_Base_MspInit+0x68>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d114      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_TIM_Base_MspInit+0x6c>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <HAL_TIM_Base_MspInit+0x6c>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	6593      	str	r3, [r2, #88]	; 0x58
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_TIM_Base_MspInit+0x6c>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	201d      	movs	r0, #29
 8002f88:	f007 f999 	bl	800a2be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f8c:	201d      	movs	r0, #29
 8002f8e:	f007 f9b2 	bl	800a2f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002f92:	e010      	b.n	8002fb6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_TIM_Base_MspInit+0x70>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_TIM_Base_MspInit+0x6c>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_TIM_Base_MspInit+0x6c>)
 8002fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_TIM_Base_MspInit+0x6c>)
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40013400 	.word	0x40013400

08002fcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <HAL_TIM_MspPostInit+0x9c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d138      	bne.n	8003060 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fee:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_TIM_MspPostInit+0xa0>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_TIM_MspPostInit+0xa0>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_TIM_MspPostInit+0xa0>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_TIM_MspPostInit+0xa0>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_TIM_MspPostInit+0xa0>)
 800300c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_TIM_MspPostInit+0xa0>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    PH15     ------> TIM8_CH3N
    PH13     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 800301e:	2340      	movs	r3, #64	; 0x40
 8003020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800302e:	2303      	movs	r3, #3
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	480d      	ldr	r0, [pc, #52]	; (8003070 <HAL_TIM_MspPostInit+0xa4>)
 800303a:	f007 fb97 	bl	800a76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 800303e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304c:	2300      	movs	r3, #0
 800304e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003050:	2303      	movs	r3, #3
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	4619      	mov	r1, r3
 800305a:	4806      	ldr	r0, [pc, #24]	; (8003074 <HAL_TIM_MspPostInit+0xa8>)
 800305c:	f007 fb86 	bl	800a76c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40013400 	.word	0x40013400
 800306c:	40021000 	.word	0x40021000
 8003070:	48002000 	.word	0x48002000
 8003074:	48001c00 	.word	0x48001c00

08003078 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 800307e:	4a13      	ldr	r2, [pc, #76]	; (80030cc <MX_LPUART1_UART_Init+0x54>)
 8003080:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 8003084:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <MX_LPUART1_UART_Init+0x58>)
 8003086:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 800308a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 800309e:	220c      	movs	r2, #12
 80030a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <MX_LPUART1_UART_Init+0x50>)
 80030b6:	f00c fd49 	bl	800fb4c <HAL_UART_Init>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80030c0:	f7ff f9ea 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	2000c934 	.word	0x2000c934
 80030cc:	40008000 	.word	0x40008000
 80030d0:	00033324 	.word	0x00033324

080030d4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <MX_USART1_UART_Init+0x58>)
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <MX_USART1_UART_Init+0x5c>)
 80030dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <MX_USART1_UART_Init+0x58>)
 80030e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <MX_USART1_UART_Init+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <MX_USART1_UART_Init+0x58>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <MX_USART1_UART_Init+0x58>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <MX_USART1_UART_Init+0x58>)
 80030fa:	220c      	movs	r2, #12
 80030fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <MX_USART1_UART_Init+0x58>)
 8003100:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003104:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <MX_USART1_UART_Init+0x58>)
 8003108:	2200      	movs	r2, #0
 800310a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <MX_USART1_UART_Init+0x58>)
 800310e:	2200      	movs	r2, #0
 8003110:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <MX_USART1_UART_Init+0x58>)
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003118:	4804      	ldr	r0, [pc, #16]	; (800312c <MX_USART1_UART_Init+0x58>)
 800311a:	f00c fd17 	bl	800fb4c <HAL_UART_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8003124:	f7ff f9b8 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000c9b8 	.word	0x2000c9b8
 8003130:	40013800 	.word	0x40013800

08003134 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <MX_USART2_UART_Init+0x58>)
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <MX_USART2_UART_Init+0x5c>)
 800313c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <MX_USART2_UART_Init+0x58>)
 8003140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <MX_USART2_UART_Init+0x58>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_USART2_UART_Init+0x58>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <MX_USART2_UART_Init+0x58>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_USART2_UART_Init+0x58>)
 800315a:	220c      	movs	r2, #12
 800315c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <MX_USART2_UART_Init+0x58>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_USART2_UART_Init+0x58>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <MX_USART2_UART_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <MX_USART2_UART_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003176:	4805      	ldr	r0, [pc, #20]	; (800318c <MX_USART2_UART_Init+0x58>)
 8003178:	f00c fce8 	bl	800fb4c <HAL_UART_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003182:	f7ff f989 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000ca3c 	.word	0x2000ca3c
 8003190:	40004400 	.word	0x40004400

08003194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b0b2      	sub	sp, #200	; 0xc8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031b0:	228c      	movs	r2, #140	; 0x8c
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00d fdb7 	bl	8010d28 <memset>
  if(uartHandle->Instance==LPUART1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a8a      	ldr	r2, [pc, #552]	; (80033e8 <HAL_UART_MspInit+0x254>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d13e      	bne.n	8003242 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80031c4:	2320      	movs	r3, #32
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80031c8:	2300      	movs	r3, #0
 80031ca:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031d0:	4618      	mov	r0, r3
 80031d2:	f009 fbb1 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031dc:	f7ff f95c 	bl	8002498 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80031e0:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_UART_MspInit+0x258>)
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	4a81      	ldr	r2, [pc, #516]	; (80033ec <HAL_UART_MspInit+0x258>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	65d3      	str	r3, [r2, #92]	; 0x5c
 80031ec:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_UART_MspInit+0x258>)
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031f8:	4b7c      	ldr	r3, [pc, #496]	; (80033ec <HAL_UART_MspInit+0x258>)
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	4a7b      	ldr	r2, [pc, #492]	; (80033ec <HAL_UART_MspInit+0x258>)
 80031fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003204:	4b79      	ldr	r3, [pc, #484]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	623b      	str	r3, [r7, #32]
 800320e:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8003210:	f008 fc94 	bl	800bb3c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003214:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003228:	2303      	movs	r3, #3
 800322a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800322e:	2308      	movs	r3, #8
 8003230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003234:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003238:	4619      	mov	r1, r3
 800323a:	486d      	ldr	r0, [pc, #436]	; (80033f0 <HAL_UART_MspInit+0x25c>)
 800323c:	f007 fa96 	bl	800a76c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003240:	e0ce      	b.n	80033e0 <HAL_UART_MspInit+0x24c>
  else if(uartHandle->Instance==USART1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6b      	ldr	r2, [pc, #428]	; (80033f4 <HAL_UART_MspInit+0x260>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d15f      	bne.n	800330c <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800324c:	2301      	movs	r3, #1
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003250:	2300      	movs	r3, #0
 8003252:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003258:	4618      	mov	r0, r3
 800325a:	f009 fb6d 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003264:	f7ff f918 	bl	8002498 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003268:	4b60      	ldr	r3, [pc, #384]	; (80033ec <HAL_UART_MspInit+0x258>)
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	4a5f      	ldr	r2, [pc, #380]	; (80033ec <HAL_UART_MspInit+0x258>)
 800326e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003272:	6613      	str	r3, [r2, #96]	; 0x60
 8003274:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003280:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	4a59      	ldr	r2, [pc, #356]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800328c:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_UART_MspInit+0x258>)
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003298:	4b54      	ldr	r3, [pc, #336]	; (80033ec <HAL_UART_MspInit+0x258>)
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	4a53      	ldr	r2, [pc, #332]	; (80033ec <HAL_UART_MspInit+0x258>)
 800329e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a4:	4b51      	ldr	r3, [pc, #324]	; (80033ec <HAL_UART_MspInit+0x258>)
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80032b0:	f008 fc44 	bl	800bb3c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80032b4:	2340      	movs	r3, #64	; 0x40
 80032b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032cc:	2307      	movs	r3, #7
 80032ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80032d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032d6:	4619      	mov	r1, r3
 80032d8:	4847      	ldr	r0, [pc, #284]	; (80033f8 <HAL_UART_MspInit+0x264>)
 80032da:	f007 fa47 	bl	800a76c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80032de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032f8:	2307      	movs	r3, #7
 80032fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003302:	4619      	mov	r1, r3
 8003304:	483a      	ldr	r0, [pc, #232]	; (80033f0 <HAL_UART_MspInit+0x25c>)
 8003306:	f007 fa31 	bl	800a76c <HAL_GPIO_Init>
}
 800330a:	e069      	b.n	80033e0 <HAL_UART_MspInit+0x24c>
  else if(uartHandle->Instance==USART2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a3a      	ldr	r2, [pc, #232]	; (80033fc <HAL_UART_MspInit+0x268>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d164      	bne.n	80033e0 <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003316:	2302      	movs	r3, #2
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800331a:	2300      	movs	r3, #0
 800331c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800331e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003322:	4618      	mov	r0, r3
 8003324:	f009 fb08 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800332e:	f7ff f8b3 	bl	8002498 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	6593      	str	r3, [r2, #88]	; 0x58
 800333e:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_UART_MspInit+0x258>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	4a27      	ldr	r2, [pc, #156]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	4a21      	ldr	r2, [pc, #132]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800336e:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_UART_MspInit+0x258>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800337a:	2340      	movs	r3, #64	; 0x40
 800337c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338c:	2303      	movs	r3, #3
 800338e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003392:	2307      	movs	r3, #7
 8003394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003398:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800339c:	4619      	mov	r1, r3
 800339e:	4818      	ldr	r0, [pc, #96]	; (8003400 <HAL_UART_MspInit+0x26c>)
 80033a0:	f007 f9e4 	bl	800a76c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80033a4:	2304      	movs	r3, #4
 80033a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033bc:	2307      	movs	r3, #7
 80033be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80033c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033c6:	4619      	mov	r1, r3
 80033c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033cc:	f007 f9ce 	bl	800a76c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	2026      	movs	r0, #38	; 0x26
 80033d6:	f006 ff72 	bl	800a2be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033da:	2026      	movs	r0, #38	; 0x26
 80033dc:	f006 ff8b 	bl	800a2f6 <HAL_NVIC_EnableIRQ>
}
 80033e0:	bf00      	nop
 80033e2:	37c8      	adds	r7, #200	; 0xc8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40008000 	.word	0x40008000
 80033ec:	40021000 	.word	0x40021000
 80033f0:	48001800 	.word	0x48001800
 80033f4:	40013800 	.word	0x40013800
 80033f8:	48000400 	.word	0x48000400
 80033fc:	40004400 	.word	0x40004400
 8003400:	48000c00 	.word	0x48000c00

08003404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800343c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003408:	f7ff fc78 	bl	8002cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800340c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800340e:	e003      	b.n	8003418 <LoopCopyDataInit>

08003410 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003412:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003414:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003416:	3104      	adds	r1, #4

08003418 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003418:	480a      	ldr	r0, [pc, #40]	; (8003444 <LoopForever+0xa>)
	ldr	r3, =_edata
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <LoopForever+0xe>)
	adds	r2, r0, r1
 800341c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800341e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003420:	d3f6      	bcc.n	8003410 <CopyDataInit>
	ldr	r2, =_sbss
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003424:	e002      	b.n	800342c <LoopFillZerobss>

08003426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003426:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003428:	f842 3b04 	str.w	r3, [r2], #4

0800342c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <LoopForever+0x16>)
	cmp	r2, r3
 800342e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003430:	d3f9      	bcc.n	8003426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003432:	f00d fc47 	bl	8010cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003436:	f7fe fec3 	bl	80021c0 <main>

0800343a <LoopForever>:

LoopForever:
    b LoopForever
 800343a:	e7fe      	b.n	800343a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800343c:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8003440:	0801fe4c 	.word	0x0801fe4c
	ldr	r0, =_sdata
 8003444:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003448:	200002b0 	.word	0x200002b0
	ldr	r2, =_sbss
 800344c:	200002b0 	.word	0x200002b0
	ldr	r3, = _ebss
 8003450:	2000cb4c 	.word	0x2000cb4c

08003454 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003454:	e7fe      	b.n	8003454 <ADC3_IRQHandler>
	...

08003458 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 ffd1 	bl	800440c <mfxstm32l152_GetInstance>
 800346a:	4603      	mov	r3, r0
 800346c:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2bff      	cmp	r3, #255	; 0xff
 8003472:	d10e      	bne.n	8003492 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8003474:	2000      	movs	r0, #0
 8003476:	f000 ffc9 	bl	800440c <mfxstm32l152_GetInstance>
 800347a:	4603      	mov	r3, r0
 800347c:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800347e:	7bbb      	ldrb	r3, [r7, #14]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d806      	bhi.n	8003492 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	88fa      	ldrh	r2, [r7, #6]
 8003488:	b2d1      	uxtb	r1, r2
 800348a:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <mfxstm32l152_Init+0x58>)
 800348c:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800348e:	f001 fe87 	bl	80051a0 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f8db 	bl	8003652 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f8fc 	bl	800369e <mfxstm32l152_SetIrqOutPinType>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	2000c380 	.word	0x2000c380

080034b4 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 ffc3 	bl	800444c <mfxstm32l152_ReleaseInstance>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2bff      	cmp	r3, #255	; 0xff
 80034ce:	d001      	beq.n	80034d4 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80034d0:	f001 fe76 	bl	80051c0 <MFX_IO_DeInit>
  }
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	2140      	movs	r1, #64	; 0x40
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 ff09 	bl	8005304 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 80034f2:	200a      	movs	r0, #10
 80034f4:	f001 ff48 	bl	8005388 <MFX_IO_Delay>
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2240      	movs	r2, #64	; 0x40
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	4618      	mov	r0, r3
 8003512:	f001 fef7 	bl	8005304 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8003516:	f001 febd 	bl	8005294 <MFX_IO_EnableWakeupPin>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 ff6c 	bl	800440c <mfxstm32l152_GetInstance>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2bff      	cmp	r3, #255	; 0xff
 800353c:	d101      	bne.n	8003542 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800353e:	f001 fea9 	bl	8005294 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8003542:	f001 fecb 	bl	80052dc <MFX_IO_Wakeup>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8003558:	2001      	movs	r0, #1
 800355a:	f001 ff15 	bl	8005388 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800355e:	f001 fe1f 	bl	80051a0 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fee0 	bl	800532c <MFX_IO_Read>
 800356c:	4603      	mov	r3, r0
 800356e:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	b29b      	uxth	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	460a      	mov	r2, r1
 8003586:	80fb      	strh	r3, [r7, #6]
 8003588:	4613      	mov	r3, r2
 800358a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2142      	movs	r1, #66	; 0x42
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fec9 	bl	800532c <MFX_IO_Read>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	797b      	ldrb	r3, [r7, #5]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	2142      	movs	r1, #66	; 0x42
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fea9 	bl	8005304 <MFX_IO_Write>
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	460a      	mov	r2, r1
 80035c4:	80fb      	strh	r3, [r7, #6]
 80035c6:	4613      	mov	r3, r2
 80035c8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2142      	movs	r1, #66	; 0x42
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 feaa 	bl	800532c <MFX_IO_Read>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80035dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	b25a      	sxtb	r2, r3
 80035e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2142      	movs	r1, #66	; 0x42
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 fe85 	bl	8005304 <MFX_IO_Write>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	460a      	mov	r2, r1
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	4613      	mov	r3, r2
 8003610:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2108      	movs	r1, #8
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fe88 	bl	800532c <MFX_IO_Read>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	797b      	ldrb	r3, [r7, #5]
 8003622:	4013      	ands	r3, r2
 8003624:	b2db      	uxtb	r3, r3
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	4603      	mov	r3, r0
 8003636:	460a      	mov	r2, r1
 8003638:	80fb      	strh	r3, [r7, #6]
 800363a:	4613      	mov	r3, r2
 800363c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 800363e:	797a      	ldrb	r2, [r7, #5]
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2144      	movs	r1, #68	; 0x44
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fe5d 	bl	8005304 <MFX_IO_Write>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	460a      	mov	r2, r1
 800365c:	80fb      	strh	r3, [r7, #6]
 800365e:	4613      	mov	r3, r2
 8003660:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	2141      	movs	r1, #65	; 0x41
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fe5e 	bl	800532c <MFX_IO_Read>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	f023 0302 	bic.w	r3, r3, #2
 800367a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	797b      	ldrb	r3, [r7, #5]
 8003680:	4313      	orrs	r3, r2
 8003682:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2141      	movs	r1, #65	; 0x41
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fe3a 	bl	8005304 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003690:	2001      	movs	r0, #1
 8003692:	f001 fe79 	bl	8005388 <MFX_IO_Delay>

}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	460a      	mov	r2, r1
 80036a8:	80fb      	strh	r3, [r7, #6]
 80036aa:	4613      	mov	r3, r2
 80036ac:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2141      	movs	r1, #65	; 0x41
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fe38 	bl	800532c <MFX_IO_Read>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	797b      	ldrb	r3, [r7, #5]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	2141      	movs	r1, #65	; 0x41
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fe14 	bl	8005304 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80036dc:	2001      	movs	r0, #1
 80036de:	f001 fe53 	bl	8005388 <MFX_IO_Delay>

}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	6039      	str	r1, [r7, #0]
 80036f4:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fe16 	bl	800532c <MFX_IO_Read>
 8003700:	4603      	mov	r3, r0
 8003702:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d304      	bcc.n	800371e <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	e003      	b.n	8003726 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	f023 0308 	bic.w	r3, r3, #8
 8003724:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	2140      	movs	r1, #64	; 0x40
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fde9 	bl	8005304 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003732:	2001      	movs	r0, #1
 8003734:	f001 fe28 	bl	8005388 <MFX_IO_Delay>
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	80fb      	strh	r3, [r7, #6]
 800374c:	4613      	mov	r3, r2
 800374e:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8003754:	797b      	ldrb	r3, [r7, #5]
 8003756:	2b17      	cmp	r3, #23
 8003758:	f200 82d4 	bhi.w	8003d04 <mfxstm32l152_IO_Config+0x5c4>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <mfxstm32l152_IO_Config+0x24>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	080037f5 	.word	0x080037f5
 8003768:	08003885 	.word	0x08003885
 800376c:	08003945 	.word	0x08003945
 8003770:	08003a35 	.word	0x08003a35
 8003774:	08003b25 	.word	0x08003b25
 8003778:	08003c15 	.word	0x08003c15
 800377c:	080037c5 	.word	0x080037c5
 8003780:	080037c5 	.word	0x080037c5
 8003784:	08003825 	.word	0x08003825
 8003788:	08003855 	.word	0x08003855
 800378c:	08003d05 	.word	0x08003d05
 8003790:	08003915 	.word	0x08003915
 8003794:	080038e5 	.word	0x080038e5
 8003798:	08003d05 	.word	0x08003d05
 800379c:	080038b5 	.word	0x080038b5
 80037a0:	08003885 	.word	0x08003885
 80037a4:	08003995 	.word	0x08003995
 80037a8:	080039e5 	.word	0x080039e5
 80037ac:	08003a85 	.word	0x08003a85
 80037b0:	08003ad5 	.word	0x08003ad5
 80037b4:	08003b75 	.word	0x08003b75
 80037b8:	08003bc5 	.word	0x08003bc5
 80037bc:	08003c65 	.word	0x08003c65
 80037c0:	08003cb5 	.word	0x08003cb5
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	6839      	ldr	r1, [r7, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fb67 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	2200      	movs	r2, #0
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fa9d 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80037da:	88f8      	ldrh	r0, [r7, #6]
 80037dc:	2300      	movs	r3, #0
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	2164      	movs	r1, #100	; 0x64
 80037e2:	f000 fe57 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80037e6:	88f8      	ldrh	r0, [r7, #6]
 80037e8:	2300      	movs	r3, #0
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	2168      	movs	r1, #104	; 0x68
 80037ee:	f000 fe51 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 80037f2:	e28a      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fb4f 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	2200      	movs	r2, #0
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa85 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800380a:	88f8      	ldrh	r0, [r7, #6]
 800380c:	2300      	movs	r3, #0
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	2164      	movs	r1, #100	; 0x64
 8003812:	f000 fe3f 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003816:	88f8      	ldrh	r0, [r7, #6]
 8003818:	2301      	movs	r3, #1
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	2168      	movs	r1, #104	; 0x68
 800381e:	f000 fe39 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 8003822:	e272      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	6839      	ldr	r1, [r7, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fb37 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2200      	movs	r2, #0
 8003832:	6839      	ldr	r1, [r7, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa6d 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800383a:	88f8      	ldrh	r0, [r7, #6]
 800383c:	2301      	movs	r3, #1
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	2164      	movs	r1, #100	; 0x64
 8003842:	f000 fe27 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003846:	88f8      	ldrh	r0, [r7, #6]
 8003848:	2301      	movs	r3, #1
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	2168      	movs	r1, #104	; 0x68
 800384e:	f000 fe21 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 8003852:	e25a      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	6839      	ldr	r1, [r7, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fb1f 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2200      	movs	r2, #0
 8003862:	6839      	ldr	r1, [r7, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fa55 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800386a:	88f8      	ldrh	r0, [r7, #6]
 800386c:	2301      	movs	r3, #1
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	2164      	movs	r1, #100	; 0x64
 8003872:	f000 fe0f 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003876:	88f8      	ldrh	r0, [r7, #6]
 8003878:	2300      	movs	r3, #0
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	2168      	movs	r1, #104	; 0x68
 800387e:	f000 fe09 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 8003882:	e242      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fb07 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2201      	movs	r2, #1
 8003892:	6839      	ldr	r1, [r7, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fa3d 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800389a:	88f8      	ldrh	r0, [r7, #6]
 800389c:	2300      	movs	r3, #0
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	2164      	movs	r1, #100	; 0x64
 80038a2:	f000 fdf7 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80038a6:	88f8      	ldrh	r0, [r7, #6]
 80038a8:	2300      	movs	r3, #0
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	2168      	movs	r1, #104	; 0x68
 80038ae:	f000 fdf1 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 80038b2:	e22a      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	6839      	ldr	r1, [r7, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 faef 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2201      	movs	r2, #1
 80038c2:	6839      	ldr	r1, [r7, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fa25 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80038ca:	88f8      	ldrh	r0, [r7, #6]
 80038cc:	2300      	movs	r3, #0
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	2164      	movs	r1, #100	; 0x64
 80038d2:	f000 fddf 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80038d6:	88f8      	ldrh	r0, [r7, #6]
 80038d8:	2301      	movs	r3, #1
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	2168      	movs	r1, #104	; 0x68
 80038de:	f000 fdd9 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 80038e2:	e212      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fad7 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2201      	movs	r2, #1
 80038f2:	6839      	ldr	r1, [r7, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fa0d 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80038fa:	88f8      	ldrh	r0, [r7, #6]
 80038fc:	2301      	movs	r3, #1
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	2164      	movs	r1, #100	; 0x64
 8003902:	f000 fdc7 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003906:	88f8      	ldrh	r0, [r7, #6]
 8003908:	2300      	movs	r3, #0
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	2168      	movs	r1, #104	; 0x68
 800390e:	f000 fdc1 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 8003912:	e1fa      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	6839      	ldr	r1, [r7, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fabf 	bl	8003e9c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	2201      	movs	r2, #1
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f9f5 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800392a:	88f8      	ldrh	r0, [r7, #6]
 800392c:	2301      	movs	r3, #1
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	2164      	movs	r1, #100	; 0x64
 8003932:	f000 fdaf 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003936:	88f8      	ldrh	r0, [r7, #6]
 8003938:	2301      	movs	r3, #1
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	2168      	movs	r1, #104	; 0x68
 800393e:	f000 fda9 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    break;
 8003942:	e1e2      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fa7a 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2200      	movs	r2, #0
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f9de 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003958:	88f8      	ldrh	r0, [r7, #6]
 800395a:	2300      	movs	r3, #0
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	f000 fd98 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003964:	88f8      	ldrh	r0, [r7, #6]
 8003966:	2301      	movs	r3, #1
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	2168      	movs	r1, #104	; 0x68
 800396c:	f000 fd92 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	2201      	movs	r2, #1
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9de 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	2201      	movs	r2, #1
 8003980:	6839      	ldr	r1, [r7, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f9ed 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	6839      	ldr	r1, [r7, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fa75 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003992:	e1ba      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fa52 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2200      	movs	r2, #0
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f9b6 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80039a8:	88f8      	ldrh	r0, [r7, #6]
 80039aa:	2301      	movs	r3, #1
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	2164      	movs	r1, #100	; 0x64
 80039b0:	f000 fd70 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80039b4:	88f8      	ldrh	r0, [r7, #6]
 80039b6:	2301      	movs	r3, #1
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	2168      	movs	r1, #104	; 0x68
 80039bc:	f000 fd6a 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2201      	movs	r2, #1
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f9b6 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	2201      	movs	r2, #1
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f9c5 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fa4d 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 80039e2:	e192      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fa2a 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	2200      	movs	r2, #0
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f98e 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80039f8:	88f8      	ldrh	r0, [r7, #6]
 80039fa:	2301      	movs	r3, #1
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	2164      	movs	r1, #100	; 0x64
 8003a00:	f000 fd48 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003a04:	88f8      	ldrh	r0, [r7, #6]
 8003a06:	2300      	movs	r3, #0
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	2168      	movs	r1, #104	; 0x68
 8003a0c:	f000 fd42 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	2201      	movs	r2, #1
 8003a14:	6839      	ldr	r1, [r7, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f98e 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f99d 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fa25 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003a32:	e16a      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fa02 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	6839      	ldr	r1, [r7, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f966 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003a48:	88f8      	ldrh	r0, [r7, #6]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	2164      	movs	r1, #100	; 0x64
 8003a50:	f000 fd20 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003a54:	88f8      	ldrh	r0, [r7, #6]
 8003a56:	2301      	movs	r3, #1
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	2168      	movs	r1, #104	; 0x68
 8003a5c:	f000 fd1a 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	2201      	movs	r2, #1
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f966 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	6839      	ldr	r1, [r7, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f975 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f9fd 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003a82:	e142      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f9da 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f93e 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003a98:	88f8      	ldrh	r0, [r7, #6]
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	2164      	movs	r1, #100	; 0x64
 8003aa0:	f000 fcf8 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003aa4:	88f8      	ldrh	r0, [r7, #6]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	2168      	movs	r1, #104	; 0x68
 8003aac:	f000 fcf2 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	6839      	ldr	r1, [r7, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f93e 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f94d 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f9d5 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003ad2:	e11a      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f9b2 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f916 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003ae8:	88f8      	ldrh	r0, [r7, #6]
 8003aea:	2301      	movs	r3, #1
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	f000 fcd0 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003af4:	88f8      	ldrh	r0, [r7, #6]
 8003af6:	2300      	movs	r3, #0
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	2168      	movs	r1, #104	; 0x68
 8003afc:	f000 fcca 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2201      	movs	r2, #1
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f916 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f925 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f9ad 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003b22:	e0f2      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f98a 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	6839      	ldr	r1, [r7, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f8ee 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003b38:	88f8      	ldrh	r0, [r7, #6]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	2164      	movs	r1, #100	; 0x64
 8003b40:	f000 fca8 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003b44:	88f8      	ldrh	r0, [r7, #6]
 8003b46:	2301      	movs	r3, #1
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	2168      	movs	r1, #104	; 0x68
 8003b4c:	f000 fca2 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	2200      	movs	r2, #0
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f8ee 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f8fd 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f985 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003b72:	e0ca      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f962 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	6839      	ldr	r1, [r7, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f8c6 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003b88:	88f8      	ldrh	r0, [r7, #6]
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	2164      	movs	r1, #100	; 0x64
 8003b90:	f000 fc80 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003b94:	88f8      	ldrh	r0, [r7, #6]
 8003b96:	2301      	movs	r3, #1
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	2168      	movs	r1, #104	; 0x68
 8003b9c:	f000 fc7a 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f8c6 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f8d5 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	6839      	ldr	r1, [r7, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f95d 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003bc2:	e0a2      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f93a 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f89e 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003bd8:	88f8      	ldrh	r0, [r7, #6]
 8003bda:	2301      	movs	r3, #1
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	2164      	movs	r1, #100	; 0x64
 8003be0:	f000 fc58 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003be4:	88f8      	ldrh	r0, [r7, #6]
 8003be6:	2300      	movs	r3, #0
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	2168      	movs	r1, #104	; 0x68
 8003bec:	f000 fc52 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f89e 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f8ad 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f935 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003c12:	e07a      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f912 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	6839      	ldr	r1, [r7, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f876 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003c28:	88f8      	ldrh	r0, [r7, #6]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	2164      	movs	r1, #100	; 0x64
 8003c30:	f000 fc30 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003c34:	88f8      	ldrh	r0, [r7, #6]
 8003c36:	2301      	movs	r3, #1
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	2168      	movs	r1, #104	; 0x68
 8003c3c:	f000 fc2a 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	2200      	movs	r2, #0
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f876 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f885 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	6839      	ldr	r1, [r7, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f90d 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003c62:	e052      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f8ea 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	6839      	ldr	r1, [r7, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f84e 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003c78:	88f8      	ldrh	r0, [r7, #6]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	2164      	movs	r1, #100	; 0x64
 8003c80:	f000 fc08 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003c84:	88f8      	ldrh	r0, [r7, #6]
 8003c86:	2301      	movs	r3, #1
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	2168      	movs	r1, #104	; 0x68
 8003c8c:	f000 fc02 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2200      	movs	r2, #0
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f84e 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f85d 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	6839      	ldr	r1, [r7, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f8e5 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003cb2:	e02a      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f8c2 	bl	8003e40 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f826 	bl	8003d14 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003cc8:	88f8      	ldrh	r0, [r7, #6]
 8003cca:	2301      	movs	r3, #1
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	2164      	movs	r1, #100	; 0x64
 8003cd0:	f000 fbe0 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003cd4:	88f8      	ldrh	r0, [r7, #6]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	2168      	movs	r1, #104	; 0x68
 8003cdc:	f000 fbda 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	6839      	ldr	r1, [r7, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f826 	bl	8003d38 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f835 	bl	8003d62 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f8bd 	bl	8003e7c <mfxstm32l152_IO_EnablePinIT>
    break;
 8003d02:	e002      	b.n	8003d0a <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8003d04:	797b      	ldrb	r3, [r7, #5]
 8003d06:	73fb      	strb	r3, [r7, #15]
    break;
 8003d08:	bf00      	nop
  }

  return error_code;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	80fb      	strh	r3, [r7, #6]
 8003d20:	4613      	mov	r3, r2
 8003d22:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8003d24:	797b      	ldrb	r3, [r7, #5]
 8003d26:	88f8      	ldrh	r0, [r7, #6]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	2160      	movs	r1, #96	; 0x60
 8003d2c:	f000 fbb2 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	80fb      	strh	r3, [r7, #6]
 8003d44:	4613      	mov	r3, r2
 8003d46:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8003d48:	797b      	ldrb	r3, [r7, #5]
 8003d4a:	88f8      	ldrh	r0, [r7, #6]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	214c      	movs	r1, #76	; 0x4c
 8003d50:	f000 fba0 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003d54:	2001      	movs	r0, #1
 8003d56:	f001 fb17 	bl	8005388 <MFX_IO_Delay>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	6039      	str	r1, [r7, #0]
 8003d6c:	80fb      	strh	r3, [r7, #6]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8003d72:	797b      	ldrb	r3, [r7, #5]
 8003d74:	88f8      	ldrh	r0, [r7, #6]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	2150      	movs	r1, #80	; 0x50
 8003d7a:	f000 fb8b 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f001 fb02 	bl	8005388 <MFX_IO_Delay>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	80fb      	strh	r3, [r7, #6]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8003d9c:	797b      	ldrb	r3, [r7, #5]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8003da2:	88f8      	ldrh	r0, [r7, #6]
 8003da4:	2301      	movs	r3, #1
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	216c      	movs	r1, #108	; 0x6c
 8003daa:	f000 fb73 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8003dae:	e005      	b.n	8003dbc <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8003db0:	88f8      	ldrh	r0, [r7, #6]
 8003db2:	2301      	movs	r3, #1
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	2170      	movs	r1, #112	; 0x70
 8003db8:	f000 fb6c 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d006      	beq.n	8003df2 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	2110      	movs	r1, #16
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fa9f 	bl	800532c <MFX_IO_Read>
 8003dee:	4603      	mov	r3, r0
 8003df0:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2111      	movs	r1, #17
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fa93 	bl	800532c <MFX_IO_Read>
 8003e06:	4603      	mov	r3, r0
 8003e08:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d006      	beq.n	8003e22 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	2112      	movs	r1, #18
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fa87 	bl	800532c <MFX_IO_Read>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	441a      	add	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	4413      	add	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4013      	ands	r3, r2
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003e4a:	f001 f9f5 	bl	8005238 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fb92 	bl	800357c <mfxstm32l152_EnableITSource>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fba3 	bl	80035ba <mfxstm32l152_DisableITSource>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8003e88:	88f8      	ldrh	r0, [r7, #6]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	2148      	movs	r1, #72	; 0x48
 8003e90:	f000 fb00 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	6039      	str	r1, [r7, #0]
 8003ea6:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8003ea8:	88f8      	ldrh	r0, [r7, #6]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	2148      	movs	r1, #72	; 0x48
 8003eb0:	f000 faf0 	bl	8004494 <mfxstm32l152_reg24_setPinValue>
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	210c      	movs	r1, #12
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 fa23 	bl	800532c <MFX_IO_Read>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ef0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	210d      	movs	r1, #13
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 fa15 	bl	800532c <MFX_IO_Read>
 8003f02:	4603      	mov	r3, r0
 8003f04:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	210e      	movs	r1, #14
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fa09 	bl	800532c <MFX_IO_Read>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003f1e:	7bfa      	ldrb	r2, [r7, #15]
 8003f20:	89bb      	ldrh	r3, [r7, #12]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4413      	add	r3, r2
 8003f26:	461a      	mov	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	4013      	ands	r3, r2
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4603      	mov	r3, r0
 8003f46:	6039      	str	r1, [r7, #0]
 8003f48:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	2154      	movs	r1, #84	; 0x54
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f9cc 	bl	8005304 <MFX_IO_Write>
  }
  if (pin_8_15)
 8003f6c:	7bbb      	ldrb	r3, [r7, #14]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8003f72:	7bba      	ldrb	r2, [r7, #14]
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2155      	movs	r1, #85	; 0x55
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f9c3 	bl	8005304 <MFX_IO_Write>
  }
  if (pin_16_23)
 8003f7e:	7b7b      	ldrb	r3, [r7, #13]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8003f84:	7b7a      	ldrb	r2, [r7, #13]
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2156      	movs	r1, #86	; 0x56
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 f9ba 	bl	8005304 <MFX_IO_Write>
  }
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 f9bc 	bl	800532c <MFX_IO_Read>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f99a 	bl	8005304 <MFX_IO_Write>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8003fd8:	b084      	sub	sp, #16
 8003fda:	b590      	push	{r4, r7, lr}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003fea:	4623      	mov	r3, r4
 8003fec:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 f994 	bl	800532c <MFX_IO_Read>
 8004004:	4603      	mov	r3, r0
 8004006:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8004012:	7bbb      	ldrb	r3, [r7, #14]
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	b29b      	uxth	r3, r3
 8004020:	7bba      	ldrb	r2, [r7, #14]
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	4618      	mov	r0, r3
 8004026:	f001 f96d 	bl	8005304 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 800402a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 030e 	and.w	r3, r3, #14
 8004036:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8004038:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800403c:	b25b      	sxtb	r3, r3
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	b25a      	sxtb	r2, r3
 8004044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004048:	4313      	orrs	r3, r2
 800404a:	b25b      	sxtb	r3, r3
 800404c:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800404e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004052:	b25b      	sxtb	r3, r3
 8004054:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004058:	b25a      	sxtb	r2, r3
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4313      	orrs	r3, r2
 8004060:	b25b      	sxtb	r3, r3
 8004062:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	b29b      	uxth	r3, r3
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	2180      	movs	r1, #128	; 0x80
 800406e:	4618      	mov	r0, r3
 8004070:	f001 f948 	bl	8005304 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004074:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004078:	b25b      	sxtb	r3, r3
 800407a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800407e:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8004080:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004084:	b25b      	sxtb	r3, r3
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 800408c:	4313      	orrs	r3, r2
 800408e:	b25b      	sxtb	r3, r3
 8004090:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	b29b      	uxth	r3, r3
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	2181      	movs	r1, #129	; 0x81
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f931 	bl	8005304 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 80040a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	2182      	movs	r1, #130	; 0x82
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 f925 	bl	8005304 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 80040ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040bc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	2183      	movs	r1, #131	; 0x83
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 f91b 	bl	8005304 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80040ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	b29b      	uxth	r3, r3
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	2184      	movs	r1, #132	; 0x84
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 f90f 	bl	8005304 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80040e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040e8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	2185      	movs	r1, #133	; 0x85
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 f905 	bl	8005304 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80040fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	b29b      	uxth	r3, r3
 8004100:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	b29b      	uxth	r3, r3
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	2186      	movs	r1, #134	; 0x86
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f8f9 	bl	8005304 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8004112:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004114:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	2187      	movs	r1, #135	; 0x87
 8004120:	4618      	mov	r0, r3
 8004122:	f001 f8ef 	bl	8005304 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8004126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	b29b      	uxth	r3, r3
 800412c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	2188      	movs	r1, #136	; 0x88
 8004138:	4618      	mov	r0, r3
 800413a:	f001 f8e3 	bl	8005304 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800413e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004140:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	b29b      	uxth	r3, r3
 8004148:	7bfa      	ldrb	r2, [r7, #15]
 800414a:	2189      	movs	r1, #137	; 0x89
 800414c:	4618      	mov	r0, r3
 800414e:	f001 f8d9 	bl	8005304 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8004152:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	b29b      	uxth	r3, r3
 8004158:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	b29b      	uxth	r3, r3
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	218a      	movs	r1, #138	; 0x8a
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f8cd 	bl	8005304 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 800416a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800416c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	b29b      	uxth	r3, r3
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	218b      	movs	r1, #139	; 0x8b
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f8c3 	bl	8005304 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800417e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004180:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	b29b      	uxth	r3, r3
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	2190      	movs	r1, #144	; 0x90
 800418c:	4618      	mov	r0, r3
 800418e:	f001 f8b9 	bl	8005304 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8004192:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004194:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	b29b      	uxth	r3, r3
 800419c:	7bfa      	ldrb	r2, [r7, #15]
 800419e:	2191      	movs	r1, #145	; 0x91
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 f8af 	bl	8005304 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 80041a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041a8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	7bfa      	ldrb	r2, [r7, #15]
 80041b2:	2192      	movs	r1, #146	; 0x92
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f8a5 	bl	8005304 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 80041ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041bc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	2193      	movs	r1, #147	; 0x93
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 f89b 	bl	8005304 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80041ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041d0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	2194      	movs	r1, #148	; 0x94
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f891 	bl	8005304 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80041e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	218c      	movs	r1, #140	; 0x8c
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 f885 	bl	8005304 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80041fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041fc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	7bfa      	ldrb	r2, [r7, #15]
 8004206:	218d      	movs	r1, #141	; 0x8d
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f87b 	bl	8005304 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 800420e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	b29b      	uxth	r3, r3
 8004214:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	b29b      	uxth	r3, r3
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	218e      	movs	r1, #142	; 0x8e
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f86f 	bl	8005304 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8004226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004228:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	b29b      	uxth	r3, r3
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	218f      	movs	r1, #143	; 0x8f
 8004234:	4618      	mov	r0, r3
 8004236:	f001 f865 	bl	8005304 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 800423a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800423e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	b29b      	uxth	r3, r3
 8004246:	7bfa      	ldrb	r2, [r7, #15]
 8004248:	2196      	movs	r1, #150	; 0x96
 800424a:	4618      	mov	r0, r3
 800424c:	f001 f85a 	bl	8005304 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8004250:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004254:	b25b      	sxtb	r3, r3
 8004256:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800425a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 800425c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004260:	b25b      	sxtb	r3, r3
 8004262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004266:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8004268:	4313      	orrs	r3, r2
 800426a:	b25b      	sxtb	r3, r3
 800426c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	2197      	movs	r1, #151	; 0x97
 8004278:	4618      	mov	r0, r3
 800427a:	f001 f843 	bl	8005304 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800427e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004282:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	b29b      	uxth	r3, r3
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	2198      	movs	r1, #152	; 0x98
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f838 	bl	8005304 <MFX_IO_Write>
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800429e:	b004      	add	sp, #16
 80042a0:	4770      	bx	lr

080042a2 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	6039      	str	r1, [r7, #0]
 80042ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	b298      	uxth	r0, r3
 80042b4:	f107 020c 	add.w	r2, r7, #12
 80042b8:	2303      	movs	r3, #3
 80042ba:	2114      	movs	r1, #20
 80042bc:	f001 f84a 	bl	8005354 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 80042c0:	7b3b      	ldrb	r3, [r7, #12]
 80042c2:	041a      	lsls	r2, r3, #16
 80042c4:	7b7b      	ldrb	r3, [r7, #13]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4313      	orrs	r3, r2
 80042ca:	7bba      	ldrb	r2, [r7, #14]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	461a      	mov	r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	601a      	str	r2, [r3, #0]

}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80042e6:	f000 ffa7 	bl	8005238 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2102      	movs	r1, #2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f944 	bl	800357c <mfxstm32l152_EnableITSource>
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f98f 	bl	800362e <mfxstm32l152_ClearGlobalIT>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2102      	movs	r1, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff f96b 	bl	8003602 <mfxstm32l152_GlobalITStatus>
 800432c:	4603      	mov	r3, r0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	2102      	movs	r1, #2
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff f938 	bl	80035ba <mfxstm32l152_DisableITSource>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	4603      	mov	r3, r0
 800435a:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	b29b      	uxth	r3, r3
 8004362:	2103      	movs	r1, #3
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ffe1 	bl	800532c <MFX_IO_Read>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	b29b      	uxth	r3, r3
 8004384:	2104      	movs	r1, #4
 8004386:	4618      	mov	r0, r3
 8004388:	f000 ffd0 	bl	800532c <MFX_IO_Read>
 800438c:	4603      	mov	r3, r0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80043a0:	f000 ff4a 	bl	8005238 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	2104      	movs	r1, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff f8e7 	bl	800357c <mfxstm32l152_EnableITSource>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2104      	movs	r1, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff f932 	bl	800362e <mfxstm32l152_ClearGlobalIT>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	2104      	movs	r1, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f90e 	bl	8003602 <mfxstm32l152_GlobalITStatus>
 80043e6:	4603      	mov	r3, r0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2104      	movs	r1, #4
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f8db 	bl	80035ba <mfxstm32l152_DisableITSource>
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e00b      	b.n	8004434 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <mfxstm32l152_GetInstance+0x3c>)
 8004420:	5cd3      	ldrb	r3, [r2, r3]
 8004422:	b29b      	uxth	r3, r3
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	429a      	cmp	r2, r3
 8004428:	d101      	bne.n	800442e <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	e006      	b.n	800443c <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	3301      	adds	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d9f0      	bls.n	800441c <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 800443a:	23ff      	movs	r3, #255	; 0xff
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	2000c380 	.word	0x2000c380

0800444c <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	e00f      	b.n	800447c <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <mfxstm32l152_ReleaseInstance+0x44>)
 8004460:	5cd3      	ldrb	r3, [r2, r3]
 8004462:	b29b      	uxth	r3, r3
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	429a      	cmp	r2, r3
 8004468:	d105      	bne.n	8004476 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	4a08      	ldr	r2, [pc, #32]	; (8004490 <mfxstm32l152_ReleaseInstance+0x44>)
 800446e:	2100      	movs	r1, #0
 8004470:	54d1      	strb	r1, [r2, r3]
      return idx;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	e006      	b.n	8004484 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	3301      	adds	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d9ec      	bls.n	800445c <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8004482:	23ff      	movs	r3, #255	; 0xff
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	2000c380 	.word	0x2000c380

08004494 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	603a      	str	r2, [r7, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	80fb      	strh	r3, [r7, #6]
 80044a2:	460b      	mov	r3, r1
 80044a4:	717b      	strb	r3, [r7, #5]
 80044a6:	4613      	mov	r3, r2
 80044a8:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 80044be:	7bbb      	ldrb	r3, [r7, #14]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01e      	beq.n	8004502 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80044c4:	797a      	ldrb	r2, [r7, #5]
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 ff2e 	bl	800532c <MFX_IO_Read>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80044d4:	793b      	ldrb	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	7bbb      	ldrb	r3, [r7, #14]
 80044de:	4313      	orrs	r3, r2
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	e008      	b.n	80044f6 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80044e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	b25a      	sxtb	r2, r3
 80044ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	7979      	ldrb	r1, [r7, #5]
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 ff01 	bl	8005304 <MFX_IO_Write>
  }

  if (pin_8_15)
 8004502:	7b7b      	ldrb	r3, [r7, #13]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d022      	beq.n	800454e <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8004508:	797b      	ldrb	r3, [r7, #5]
 800450a:	3301      	adds	r3, #1
 800450c:	b2da      	uxtb	r2, r3
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ff0a 	bl	800532c <MFX_IO_Read>
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800451c:	793b      	ldrb	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	7b7b      	ldrb	r3, [r7, #13]
 8004526:	4313      	orrs	r3, r2
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e008      	b.n	800453e <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 800452c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004530:	43db      	mvns	r3, r3
 8004532:	b25a      	sxtb	r2, r3
 8004534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004538:	4013      	ands	r3, r2
 800453a:	b25b      	sxtb	r3, r3
 800453c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800453e:	797b      	ldrb	r3, [r7, #5]
 8004540:	3301      	adds	r3, #1
 8004542:	b2d9      	uxtb	r1, r3
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fedb 	bl	8005304 <MFX_IO_Write>
  }

  if (pin_16_23)
 800454e:	7b3b      	ldrb	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d022      	beq.n	800459a <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8004554:	797b      	ldrb	r3, [r7, #5]
 8004556:	3302      	adds	r3, #2
 8004558:	b2da      	uxtb	r2, r3
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fee4 	bl	800532c <MFX_IO_Read>
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004568:	793b      	ldrb	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	7b3b      	ldrb	r3, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e008      	b.n	800458a <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8004578:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	b25a      	sxtb	r2, r3
 8004580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004584:	4013      	ands	r3, r2
 8004586:	b25b      	sxtb	r3, r3
 8004588:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800458a:	797b      	ldrb	r3, [r7, #5]
 800458c:	3302      	adds	r3, #2
 800458e:	b2d9      	uxtb	r1, r3
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 feb5 	bl	8005304 <MFX_IO_Write>
  }
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80045a8:	f000 fff6 	bl	8005598 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80045ac:	2200      	movs	r2, #0
 80045ae:	2100      	movs	r1, #0
 80045b0:	2010      	movs	r0, #16
 80045b2:	f000 f9e4 	bl	800497e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80045b6:	200a      	movs	r0, #10
 80045b8:	f001 f815 	bl	80055e6 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	2001      	movs	r0, #1
 80045c2:	f000 f9dc 	bl	800497e <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80045c6:	20c8      	movs	r0, #200	; 0xc8
 80045c8:	f001 f80d 	bl	80055e6 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80045cc:	2200      	movs	r2, #0
 80045ce:	2100      	movs	r1, #0
 80045d0:	2011      	movs	r0, #17
 80045d2:	f000 f9d4 	bl	800497e <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80045d6:	2078      	movs	r0, #120	; 0x78
 80045d8:	f001 f805 	bl	80055e6 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80045dc:	2300      	movs	r3, #0
 80045de:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80045e0:	463b      	mov	r3, r7
 80045e2:	2201      	movs	r2, #1
 80045e4:	4619      	mov	r1, r3
 80045e6:	2036      	movs	r0, #54	; 0x36
 80045e8:	f000 f9c9 	bl	800497e <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80045ec:	2305      	movs	r3, #5
 80045ee:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80045f0:	463b      	mov	r3, r7
 80045f2:	2201      	movs	r2, #1
 80045f4:	4619      	mov	r1, r3
 80045f6:	203a      	movs	r0, #58	; 0x3a
 80045f8:	f000 f9c1 	bl	800497e <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80045fc:	2200      	movs	r2, #0
 80045fe:	2100      	movs	r1, #0
 8004600:	2021      	movs	r0, #33	; 0x21
 8004602:	f000 f9bc 	bl	800497e <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8004606:	2300      	movs	r3, #0
 8004608:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800460a:	2300      	movs	r3, #0
 800460c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800460e:	2300      	movs	r3, #0
 8004610:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004612:	23ef      	movs	r3, #239	; 0xef
 8004614:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004616:	463b      	mov	r3, r7
 8004618:	2204      	movs	r2, #4
 800461a:	4619      	mov	r1, r3
 800461c:	202a      	movs	r0, #42	; 0x2a
 800461e:	f000 f9ae 	bl	800497e <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8004622:	2300      	movs	r3, #0
 8004624:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8004626:	2300      	movs	r3, #0
 8004628:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800462a:	2300      	movs	r3, #0
 800462c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800462e:	23ef      	movs	r3, #239	; 0xef
 8004630:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004632:	463b      	mov	r3, r7
 8004634:	2204      	movs	r2, #4
 8004636:	4619      	mov	r1, r3
 8004638:	202b      	movs	r0, #43	; 0x2b
 800463a:	f000 f9a0 	bl	800497e <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800463e:	230c      	movs	r3, #12
 8004640:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8004642:	230c      	movs	r3, #12
 8004644:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004646:	2300      	movs	r3, #0
 8004648:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800464a:	2333      	movs	r3, #51	; 0x33
 800464c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800464e:	2333      	movs	r3, #51	; 0x33
 8004650:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8004652:	463b      	mov	r3, r7
 8004654:	2205      	movs	r2, #5
 8004656:	4619      	mov	r1, r3
 8004658:	20b2      	movs	r0, #178	; 0xb2
 800465a:	f000 f990 	bl	800497e <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800465e:	2335      	movs	r3, #53	; 0x35
 8004660:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8004662:	463b      	mov	r3, r7
 8004664:	2201      	movs	r2, #1
 8004666:	4619      	mov	r1, r3
 8004668:	20b7      	movs	r0, #183	; 0xb7
 800466a:	f000 f988 	bl	800497e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800466e:	231f      	movs	r3, #31
 8004670:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8004672:	463b      	mov	r3, r7
 8004674:	2201      	movs	r2, #1
 8004676:	4619      	mov	r1, r3
 8004678:	20bb      	movs	r0, #187	; 0xbb
 800467a:	f000 f980 	bl	800497e <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800467e:	232c      	movs	r3, #44	; 0x2c
 8004680:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8004682:	463b      	mov	r3, r7
 8004684:	2201      	movs	r2, #1
 8004686:	4619      	mov	r1, r3
 8004688:	20c0      	movs	r0, #192	; 0xc0
 800468a:	f000 f978 	bl	800497e <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800468e:	2301      	movs	r3, #1
 8004690:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8004692:	23c3      	movs	r3, #195	; 0xc3
 8004694:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8004696:	463b      	mov	r3, r7
 8004698:	2202      	movs	r2, #2
 800469a:	4619      	mov	r1, r3
 800469c:	20c2      	movs	r0, #194	; 0xc2
 800469e:	f000 f96e 	bl	800497e <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80046a2:	2320      	movs	r3, #32
 80046a4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80046a6:	463b      	mov	r3, r7
 80046a8:	2201      	movs	r2, #1
 80046aa:	4619      	mov	r1, r3
 80046ac:	20c4      	movs	r0, #196	; 0xc4
 80046ae:	f000 f966 	bl	800497e <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80046b2:	230f      	movs	r3, #15
 80046b4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80046b6:	463b      	mov	r3, r7
 80046b8:	2201      	movs	r2, #1
 80046ba:	4619      	mov	r1, r3
 80046bc:	20c6      	movs	r0, #198	; 0xc6
 80046be:	f000 f95e 	bl	800497e <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80046c2:	23a4      	movs	r3, #164	; 0xa4
 80046c4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80046c6:	23a1      	movs	r3, #161	; 0xa1
 80046c8:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 80046ca:	463b      	mov	r3, r7
 80046cc:	2202      	movs	r2, #2
 80046ce:	4619      	mov	r1, r3
 80046d0:	20d0      	movs	r0, #208	; 0xd0
 80046d2:	f000 f954 	bl	800497e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80046d6:	23d0      	movs	r3, #208	; 0xd0
 80046d8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80046da:	2308      	movs	r3, #8
 80046dc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80046de:	2311      	movs	r3, #17
 80046e0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80046e2:	2308      	movs	r3, #8
 80046e4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80046e6:	230c      	movs	r3, #12
 80046e8:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80046ea:	2315      	movs	r3, #21
 80046ec:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80046ee:	2339      	movs	r3, #57	; 0x39
 80046f0:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80046f2:	2333      	movs	r3, #51	; 0x33
 80046f4:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80046f6:	2350      	movs	r3, #80	; 0x50
 80046f8:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80046fa:	2336      	movs	r3, #54	; 0x36
 80046fc:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80046fe:	2313      	movs	r3, #19
 8004700:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004702:	2314      	movs	r3, #20
 8004704:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8004706:	2329      	movs	r3, #41	; 0x29
 8004708:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800470a:	232d      	movs	r3, #45	; 0x2d
 800470c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800470e:	463b      	mov	r3, r7
 8004710:	220e      	movs	r2, #14
 8004712:	4619      	mov	r1, r3
 8004714:	20e0      	movs	r0, #224	; 0xe0
 8004716:	f000 f932 	bl	800497e <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800471a:	23d0      	movs	r3, #208	; 0xd0
 800471c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800471e:	2308      	movs	r3, #8
 8004720:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8004722:	2310      	movs	r3, #16
 8004724:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004726:	2308      	movs	r3, #8
 8004728:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800472a:	2306      	movs	r3, #6
 800472c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800472e:	2306      	movs	r3, #6
 8004730:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004732:	2339      	movs	r3, #57	; 0x39
 8004734:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8004736:	2344      	movs	r3, #68	; 0x44
 8004738:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800473a:	2351      	movs	r3, #81	; 0x51
 800473c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800473e:	230b      	movs	r3, #11
 8004740:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8004742:	2316      	movs	r3, #22
 8004744:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004746:	2314      	movs	r3, #20
 8004748:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800474a:	232f      	movs	r3, #47	; 0x2f
 800474c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800474e:	2331      	movs	r3, #49	; 0x31
 8004750:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8004752:	463b      	mov	r3, r7
 8004754:	220e      	movs	r2, #14
 8004756:	4619      	mov	r1, r3
 8004758:	20e1      	movs	r0, #225	; 0xe1
 800475a:	f000 f910 	bl	800497e <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800475e:	f000 f847 	bl	80047f0 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8004762:	2300      	movs	r3, #0
 8004764:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8004766:	463b      	mov	r3, r7
 8004768:	2201      	movs	r2, #1
 800476a:	4619      	mov	r1, r3
 800476c:	2035      	movs	r0, #53	; 0x35
 800476e:	f000 f906 	bl	800497e <ST7789H2_WriteReg>

}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d102      	bne.n	800478e <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8004788:	2300      	movs	r3, #0
 800478a:	723b      	strb	r3, [r7, #8]
 800478c:	e025      	b.n	80047da <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d120      	bne.n	80047d6 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8004794:	2300      	movs	r3, #0
 8004796:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8004798:	2300      	movs	r3, #0
 800479a:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 800479c:	2301      	movs	r3, #1
 800479e:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80047a0:	23f0      	movs	r3, #240	; 0xf0
 80047a2:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80047a4:	2300      	movs	r3, #0
 80047a6:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80047a8:	2300      	movs	r3, #0
 80047aa:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80047ac:	f107 0308 	add.w	r3, r7, #8
 80047b0:	2206      	movs	r2, #6
 80047b2:	4619      	mov	r1, r3
 80047b4:	2033      	movs	r0, #51	; 0x33
 80047b6:	f000 f8e2 	bl	800497e <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80047ba:	2300      	movs	r3, #0
 80047bc:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80047be:	2350      	movs	r3, #80	; 0x50
 80047c0:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80047c2:	f107 0308 	add.w	r3, r7, #8
 80047c6:	2202      	movs	r2, #2
 80047c8:	4619      	mov	r1, r3
 80047ca:	2037      	movs	r0, #55	; 0x37
 80047cc:	f000 f8d7 	bl	800497e <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80047d0:	23c0      	movs	r3, #192	; 0xc0
 80047d2:	723b      	strb	r3, [r7, #8]
 80047d4:	e001      	b.n	80047da <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80047d6:	2360      	movs	r3, #96	; 0x60
 80047d8:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	2201      	movs	r2, #1
 80047e0:	4619      	mov	r1, r3
 80047e2:	2036      	movs	r0, #54	; 0x36
 80047e4:	f000 f8cb 	bl	800497e <ST7789H2_WriteReg>
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80047f4:	2200      	movs	r2, #0
 80047f6:	2100      	movs	r1, #0
 80047f8:	2029      	movs	r0, #41	; 0x29
 80047fa:	f000 f8c0 	bl	800497e <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	2011      	movs	r0, #17
 8004804:	f000 f8bb 	bl	800497e <ST7789H2_WriteReg>
}
 8004808:	bf00      	nop
 800480a:	bd80      	pop	{r7, pc}

0800480c <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8004812:	23fe      	movs	r3, #254	; 0xfe
 8004814:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	2201      	movs	r2, #1
 800481a:	4619      	mov	r1, r3
 800481c:	20bd      	movs	r0, #189	; 0xbd
 800481e:	f000 f8ae 	bl	800497e <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004822:	2200      	movs	r2, #0
 8004824:	2100      	movs	r1, #0
 8004826:	2010      	movs	r0, #16
 8004828:	f000 f8a9 	bl	800497e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800482c:	200a      	movs	r0, #10
 800482e:	f000 feda 	bl	80055e6 <LCD_IO_Delay>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800483e:	23f0      	movs	r3, #240	; 0xf0
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800484a:	b480      	push	{r7}
 800484c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800484e:	23f0      	movs	r3, #240	; 0xf0
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800485e:	f000 fe9b 	bl	8005598 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8004862:	2004      	movs	r0, #4
 8004864:	f000 f8ae 	bl	80049c4 <ST7789H2_ReadReg>
 8004868:	4603      	mov	r3, r0
 800486a:	b29b      	uxth	r3, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}

08004870 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	460a      	mov	r2, r1
 800487a:	80fb      	strh	r3, [r7, #6]
 800487c:	4613      	mov	r3, r2
 800487e:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8004880:	2300      	movs	r3, #0
 8004882:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800488a:	2300      	movs	r3, #0
 800488c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3b11      	subs	r3, #17
 8004894:	b2db      	uxtb	r3, r3
 8004896:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	2204      	movs	r2, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	202a      	movs	r0, #42	; 0x2a
 80048a2:	f000 f86c 	bl	800497e <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80048a6:	2300      	movs	r3, #0
 80048a8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80048aa:	88bb      	ldrh	r3, [r7, #4]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80048b4:	88bb      	ldrh	r3, [r7, #4]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3b11      	subs	r3, #17
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80048be:	f107 030c 	add.w	r3, r7, #12
 80048c2:	2204      	movs	r2, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	202b      	movs	r0, #43	; 0x2b
 80048c8:	f000 f859 	bl	800497e <ST7789H2_WriteReg>
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	80fb      	strh	r3, [r7, #6]
 80048de:	460b      	mov	r3, r1
 80048e0:	80bb      	strh	r3, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80048e6:	88ba      	ldrh	r2, [r7, #4]
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ffbf 	bl	8004870 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	202c      	movs	r0, #44	; 0x2c
 80048f8:	f000 f841 	bl	800497e <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fe50 	bl	80055a4 <LCD_IO_WriteData>
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	460a      	mov	r2, r1
 8004916:	80fb      	strh	r3, [r7, #6]
 8004918:	4613      	mov	r3, r2
 800491a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800491c:	88ba      	ldrh	r2, [r7, #4]
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ffa4 	bl	8004870 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8004928:	88ba      	ldrh	r2, [r7, #4]
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	4611      	mov	r1, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f9c0 	bl	8004cb4 <ST7789H2_ReadPixel_rgb888>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	733a      	strb	r2, [r7, #12]
 800493a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800493e:	737a      	strb	r2, [r7, #13]
 8004940:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004944:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8004946:	7b3b      	ldrb	r3, [r7, #12]
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 800494c:	7b7b      	ldrb	r3, [r7, #13]
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8004952:	7bbb      	ldrb	r3, [r7, #14]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	b29b      	uxth	r3, r3
 800495c:	02db      	lsls	r3, r3, #11
 800495e:	b29a      	uxth	r2, r3
 8004960:	7dbb      	ldrb	r3, [r7, #22]
 8004962:	b29b      	uxth	r3, r3
 8004964:	015b      	lsls	r3, r3, #5
 8004966:	b29b      	uxth	r3, r3
 8004968:	4413      	add	r3, r2
 800496a:	b29a      	uxth	r2, r3
 800496c:	7d7b      	ldrb	r3, [r7, #21]
 800496e:	b29b      	uxth	r3, r3
 8004970:	4413      	add	r3, r2
 8004972:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8004974:	8a7b      	ldrh	r3, [r7, #18]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	4603      	mov	r3, r0
 8004986:	6039      	str	r1, [r7, #0]
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	4613      	mov	r3, r2
 800498c:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fe14 	bl	80055be <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	e00a      	b.n	80049b2 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fdfc 	bl	80055a4 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	3301      	adds	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	79bb      	ldrb	r3, [r7, #6]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3f0      	bcc.n	800499c <ST7789H2_WriteReg+0x1e>
  }
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fdf4 	bl	80055be <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80049d6:	f000 fdff 	bl	80055d8 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80049da:	f000 fdfd 	bl	80055d8 <LCD_IO_ReadData>
 80049de:	4603      	mov	r3, r0
 80049e0:	b2db      	uxtb	r3, r3
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80049ec:	b490      	push	{r4, r7}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	80fb      	strh	r3, [r7, #6]
 80049fe:	4603      	mov	r3, r0
 8004a00:	80bb      	strh	r3, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	807b      	strh	r3, [r7, #2]
 8004a06:	4613      	mov	r3, r2
 8004a08:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2bef      	cmp	r3, #239	; 0xef
 8004a0e:	d803      	bhi.n	8004a18 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <ST7789H2_SetDisplayWindow+0x94>)
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	8013      	strh	r3, [r2, #0]
 8004a16:	e002      	b.n	8004a1e <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <ST7789H2_SetDisplayWindow+0x94>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8004a1e:	88bb      	ldrh	r3, [r7, #4]
 8004a20:	2bef      	cmp	r3, #239	; 0xef
 8004a22:	d803      	bhi.n	8004a2c <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8004a24:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <ST7789H2_SetDisplayWindow+0x98>)
 8004a26:	88bb      	ldrh	r3, [r7, #4]
 8004a28:	8013      	strh	r3, [r2, #0]
 8004a2a:	e002      	b.n	8004a32 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <ST7789H2_SetDisplayWindow+0x98>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	4413      	add	r3, r2
 8004a38:	2bf0      	cmp	r3, #240	; 0xf0
 8004a3a:	dc08      	bgt.n	8004a4e <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	4413      	add	r3, r2
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <ST7789H2_SetDisplayWindow+0x9c>)
 8004a4a:	801a      	strh	r2, [r3, #0]
 8004a4c:	e002      	b.n	8004a54 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <ST7789H2_SetDisplayWindow+0x9c>)
 8004a50:	22ef      	movs	r2, #239	; 0xef
 8004a52:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8004a54:	883a      	ldrh	r2, [r7, #0]
 8004a56:	88bb      	ldrh	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	2bf0      	cmp	r3, #240	; 0xf0
 8004a5c:	dc08      	bgt.n	8004a70 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8004a5e:	883a      	ldrh	r2, [r7, #0]
 8004a60:	88bb      	ldrh	r3, [r7, #4]
 8004a62:	4413      	add	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <ST7789H2_SetDisplayWindow+0xa0>)
 8004a6c:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8004a6e:	e002      	b.n	8004a76 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <ST7789H2_SetDisplayWindow+0xa0>)
 8004a72:	22ef      	movs	r2, #239	; 0xef
 8004a74:	801a      	strh	r2, [r3, #0]
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc90      	pop	{r4, r7}
 8004a7e:	4770      	bx	lr
 8004a80:	2000c384 	.word	0x2000c384
 8004a84:	2000c386 	.word	0x2000c386
 8004a88:	200000b8 	.word	0x200000b8
 8004a8c:	200000ba 	.word	0x200000ba

08004a90 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4604      	mov	r4, r0
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	80fb      	strh	r3, [r7, #6]
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80bb      	strh	r3, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	807b      	strh	r3, [r7, #2]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	88bb      	ldrh	r3, [r7, #4]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fedb 	bl	8004870 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004aba:	2200      	movs	r2, #0
 8004abc:	2100      	movs	r1, #0
 8004abe:	202c      	movs	r0, #44	; 0x2c
 8004ac0:	f7ff ff5d 	bl	800497e <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	81fb      	strh	r3, [r7, #14]
 8004ac8:	e006      	b.n	8004ad8 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fd69 	bl	80055a4 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8004ad2:	89fb      	ldrh	r3, [r7, #14]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	81fb      	strh	r3, [r7, #14]
 8004ad8:	89fa      	ldrh	r2, [r7, #14]
 8004ada:	883b      	ldrh	r3, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3f4      	bcc.n	8004aca <ST7789H2_DrawHLine+0x3a>
  }  
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd90      	pop	{r4, r7, pc}

08004aea <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004aea:	b590      	push	{r4, r7, lr}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	4604      	mov	r4, r0
 8004af2:	4608      	mov	r0, r1
 8004af4:	4611      	mov	r1, r2
 8004af6:	461a      	mov	r2, r3
 8004af8:	4623      	mov	r3, r4
 8004afa:	80fb      	strh	r3, [r7, #6]
 8004afc:	4603      	mov	r3, r0
 8004afe:	80bb      	strh	r3, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
 8004b04:	4613      	mov	r3, r2
 8004b06:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004b08:	887a      	ldrh	r2, [r7, #2]
 8004b0a:	88bb      	ldrh	r3, [r7, #4]
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff feae 	bl	8004870 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	202c      	movs	r0, #44	; 0x2c
 8004b1a:	f7ff ff30 	bl	800497e <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	81fb      	strh	r3, [r7, #14]
 8004b22:	e00b      	b.n	8004b3c <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004b24:	887a      	ldrh	r2, [r7, #2]
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	4413      	add	r3, r2
 8004b2a:	b299      	uxth	r1, r3
 8004b2c:	88fa      	ldrh	r2, [r7, #6]
 8004b2e:	88bb      	ldrh	r3, [r7, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fecf 	bl	80048d4 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8004b36:	89fb      	ldrh	r3, [r7, #14]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	81fb      	strh	r3, [r7, #14]
 8004b3c:	89fa      	ldrh	r2, [r7, #14]
 8004b3e:	883b      	ldrh	r3, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d3ef      	bcc.n	8004b24 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd90      	pop	{r4, r7, pc}
	...

08004b50 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	603a      	str	r2, [r7, #0]
 8004b5a:	80fb      	strh	r3, [r7, #6]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8004b6c:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <ST7789H2_DrawBitmap+0xe0>)
 8004b6e:	881a      	ldrh	r2, [r3, #0]
 8004b70:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <ST7789H2_DrawBitmap+0xe4>)
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8004b7c:	4b2e      	ldr	r3, [pc, #184]	; (8004c38 <ST7789H2_DrawBitmap+0xe8>)
 8004b7e:	881a      	ldrh	r2, [r3, #0]
 8004b80:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <ST7789H2_DrawBitmap+0xec>)
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	3302      	adds	r3, #2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	041b      	lsls	r3, r3, #16
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	330a      	adds	r3, #10
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004bd6:	88ba      	ldrh	r2, [r7, #4]
 8004bd8:	89bb      	ldrh	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	e01d      	b.n	8004c1c <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fe3f 	bl	8004870 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b299      	uxth	r1, r3
 8004bfa:	89fb      	ldrh	r3, [r7, #14]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	89fa      	ldrh	r2, [r7, #14]
 8004c0a:	88f8      	ldrh	r0, [r7, #6]
 8004c0c:	f000 f89c 	bl	8004d48 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	3301      	adds	r3, #1
 8004c14:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	88bb      	ldrh	r3, [r7, #4]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d8dd      	bhi.n	8004be0 <ST7789H2_DrawBitmap+0x90>
  }
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200000b8 	.word	0x200000b8
 8004c34:	2000c384 	.word	0x2000c384
 8004c38:	200000ba 	.word	0x200000ba
 8004c3c:	2000c386 	.word	0x2000c386

08004c40 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4623      	mov	r3, r4
 8004c50:	80fb      	strh	r3, [r7, #6]
 8004c52:	4603      	mov	r3, r0
 8004c54:	80bb      	strh	r3, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	807b      	strh	r3, [r7, #2]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004c62:	88bb      	ldrh	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e019      	b.n	8004c9c <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fdfd 	bl	8004870 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	b299      	uxth	r1, r3
 8004c7a:	887b      	ldrh	r3, [r7, #2]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	4413      	add	r3, r2
 8004c88:	887a      	ldrh	r2, [r7, #2]
 8004c8a:	88f8      	ldrh	r0, [r7, #6]
 8004c8c:	f000 f85c 	bl	8004d48 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	88ba      	ldrh	r2, [r7, #4]
 8004c9e:	883b      	ldrh	r3, [r7, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d3de      	bcc.n	8004c68 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}

08004cb4 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	80fb      	strh	r3, [r7, #6]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004cc4:	88ba      	ldrh	r2, [r7, #4]
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fdd0 	bl	8004870 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	202e      	movs	r0, #46	; 0x2e
 8004cd6:	f7ff fe52 	bl	800497e <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8004cda:	f000 fc7d 	bl	80055d8 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8004cde:	f000 fc7b 	bl	80055d8 <LCD_IO_ReadData>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8004ce6:	f000 fc77 	bl	80055d8 <LCD_IO_ReadData>
 8004cea:	4603      	mov	r3, r0
 8004cec:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8004cee:	8afb      	ldrh	r3, [r7, #22]
 8004cf0:	121b      	asrs	r3, r3, #8
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f023 0303 	bic.w	r3, r3, #3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8004cfc:	8afb      	ldrh	r3, [r7, #22]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f023 0303 	bic.w	r3, r3, #3
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8004d08:	8abb      	ldrh	r3, [r7, #20]
 8004d0a:	121b      	asrs	r3, r3, #8
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	f107 020c 	add.w	r2, r7, #12
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	4611      	mov	r1, r2
 8004d22:	8019      	strh	r1, [r3, #0]
 8004d24:	3302      	adds	r3, #2
 8004d26:	0c12      	lsrs	r2, r2, #16
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	7c3a      	ldrb	r2, [r7, #16]
 8004d2e:	f362 0307 	bfi	r3, r2, #0, #8
 8004d32:	7c7a      	ldrb	r2, [r7, #17]
 8004d34:	f362 230f 	bfi	r3, r2, #8, #8
 8004d38:	7cba      	ldrb	r2, [r7, #18]
 8004d3a:	f362 4317 	bfi	r3, r2, #16, #8
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	4603      	mov	r3, r0
 8004d52:	81fb      	strh	r3, [r7, #14]
 8004d54:	460b      	mov	r3, r1
 8004d56:	81bb      	strh	r3, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004d64:	2200      	movs	r2, #0
 8004d66:	2100      	movs	r1, #0
 8004d68:	202c      	movs	r0, #44	; 0x2c
 8004d6a:	f7ff fe08 	bl	800497e <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004d6e:	89fb      	ldrh	r3, [r7, #14]
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	e029      	b.n	8004dc8 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004d74:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <ST7789H2_DrawRGBHLine+0x98>)
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d320      	bcc.n	8004dc2 <ST7789H2_DrawRGBHLine+0x7a>
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <ST7789H2_DrawRGBHLine+0x9c>)
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	89ba      	ldrh	r2, [r7, #12]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d31b      	bcc.n	8004dc2 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004d8a:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <ST7789H2_DrawRGBHLine+0xa0>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d815      	bhi.n	8004dc2 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <ST7789H2_DrawRGBHLine+0xa4>)
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	89ba      	ldrh	r2, [r7, #12]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d810      	bhi.n	8004dc2 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8004da0:	897a      	ldrh	r2, [r7, #10]
 8004da2:	89fb      	ldrh	r3, [r7, #14]
 8004da4:	441a      	add	r2, r3
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d007      	beq.n	8004dbc <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fbf4 	bl	80055a4 <LCD_IO_WriteData>
      }      
      i++;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	897a      	ldrh	r2, [r7, #10]
 8004dca:	89fb      	ldrh	r3, [r7, #14]
 8004dcc:	4413      	add	r3, r2
 8004dce:	461a      	mov	r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d3ce      	bcc.n	8004d74 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2000c384 	.word	0x2000c384
 8004de4:	2000c386 	.word	0x2000c386
 8004de8:	200000b8 	.word	0x200000b8
 8004dec:	200000ba 	.word	0x200000ba

08004df0 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  while (1);
 8004df4:	e7fe      	b.n	8004df4 <BSP_ErrorHandler+0x4>
	...

08004df8 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8004dfc:	4812      	ldr	r0, [pc, #72]	; (8004e48 <I2C2_Init+0x50>)
 8004dfe:	f006 fb76 	bl	800b4ee <HAL_I2C_GetState>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11d      	bne.n	8004e44 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <I2C2_Init+0x50>)
 8004e0a:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <I2C2_Init+0x54>)
 8004e0c:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <I2C2_Init+0x50>)
 8004e10:	4a0f      	ldr	r2, [pc, #60]	; (8004e50 <I2C2_Init+0x58>)
 8004e12:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <I2C2_Init+0x50>)
 8004e16:	2270      	movs	r2, #112	; 0x70
 8004e18:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <I2C2_Init+0x50>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <I2C2_Init+0x50>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <I2C2_Init+0x50>)
 8004e28:	22ff      	movs	r2, #255	; 0xff
 8004e2a:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <I2C2_Init+0x50>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <I2C2_Init+0x50>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8004e38:	4803      	ldr	r0, [pc, #12]	; (8004e48 <I2C2_Init+0x50>)
 8004e3a:	f000 f80b 	bl	8004e54 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8004e3e:	4802      	ldr	r0, [pc, #8]	; (8004e48 <I2C2_Init+0x50>)
 8004e40:	f005 ff62 	bl	800ad08 <HAL_I2C_Init>
  }
}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	2000c388 	.word	0x2000c388
 8004e4c:	40005800 	.word	0x40005800
 8004e50:	40403e5d 	.word	0x40403e5d

08004e54 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b0ae      	sub	sp, #184	; 0xb8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <I2C2_MspInit+0xec>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d168      	bne.n	8004f38 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8004e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004e70:	f107 0318 	add.w	r3, r7, #24
 8004e74:	4618      	mov	r0, r3
 8004e76:	f007 fd5f 	bl	800c938 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8004e7a:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7e:	4a31      	ldr	r2, [pc, #196]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e86:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8004e92:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e9e:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8004eaa:	2310      	movs	r3, #16
 8004eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8004eb0:	2312      	movs	r3, #18
 8004eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8004ec8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	481e      	ldr	r0, [pc, #120]	; (8004f48 <I2C2_MspInit+0xf4>)
 8004ed0:	f005 fc4c 	bl	800a76c <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8004ed4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8004edc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	481a      	ldr	r0, [pc, #104]	; (8004f4c <I2C2_MspInit+0xf8>)
 8004ee4:	f005 fc42 	bl	800a76c <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8004ee8:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	4a0f      	ldr	r2, [pc, #60]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004f06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f0a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <I2C2_MspInit+0xf0>)
 8004f12:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004f16:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2021      	movs	r0, #33	; 0x21
 8004f1e:	f005 f9ce 	bl	800a2be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8004f22:	2021      	movs	r0, #33	; 0x21
 8004f24:	f005 f9e7 	bl	800a2f6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	2022      	movs	r0, #34	; 0x22
 8004f2e:	f005 f9c6 	bl	800a2be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8004f32:	2022      	movs	r0, #34	; 0x22
 8004f34:	f005 f9df 	bl	800a2f6 <HAL_NVIC_EnableIRQ>
  }
}
 8004f38:	bf00      	nop
 8004f3a:	37b8      	adds	r7, #184	; 0xb8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40005800 	.word	0x40005800
 8004f44:	40021000 	.word	0x40021000
 8004f48:	48001c00 	.word	0x48001c00
 8004f4c:	48000400 	.word	0x48000400

08004f50 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8004f54:	4806      	ldr	r0, [pc, #24]	; (8004f70 <I2C2_DeInit+0x20>)
 8004f56:	f006 faca 	bl	800b4ee <HAL_I2C_GetState>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8004f60:	4803      	ldr	r0, [pc, #12]	; (8004f70 <I2C2_DeInit+0x20>)
 8004f62:	f005 ff60 	bl	800ae26 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8004f66:	4802      	ldr	r0, [pc, #8]	; (8004f70 <I2C2_DeInit+0x20>)
 8004f68:	f000 f804 	bl	8004f74 <I2C2_MspDeInit>
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	2000c388 	.word	0x2000c388

08004f74 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <I2C2_MspDeInit+0x8c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d138      	bne.n	8004ff8 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8004f86:	4b1f      	ldr	r3, [pc, #124]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f92:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8004f9e:	4b19      	ldr	r3, [pc, #100]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	4a18      	ldr	r2, [pc, #96]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	4813      	ldr	r0, [pc, #76]	; (8005008 <I2C2_MspDeInit+0x94>)
 8004fba:	f005 fd69 	bl	800aa90 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8004fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fc2:	4812      	ldr	r0, [pc, #72]	; (800500c <I2C2_MspDeInit+0x98>)
 8004fc4:	f005 fd64 	bl	800aa90 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	4a0d      	ldr	r2, [pc, #52]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fd2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fda:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004fde:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8004fe0:	4b08      	ldr	r3, [pc, #32]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	4a07      	ldr	r2, [pc, #28]	; (8005004 <I2C2_MspDeInit+0x90>)
 8004fe6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004fea:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8004fec:	2021      	movs	r0, #33	; 0x21
 8004fee:	f005 f990 	bl	800a312 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8004ff2:	2022      	movs	r0, #34	; 0x22
 8004ff4:	f005 f98d 	bl	800a312 <HAL_NVIC_DisableIRQ>
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40005800 	.word	0x40005800
 8005004:	40021000 	.word	0x40021000
 8005008:	48001c00 	.word	0x48001c00
 800500c:	48000400 	.word	0x48000400

08005010 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af04      	add	r7, sp, #16
 8005016:	4604      	mov	r4, r0
 8005018:	4608      	mov	r0, r1
 800501a:	4611      	mov	r1, r2
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	80fb      	strh	r3, [r7, #6]
 8005022:	4603      	mov	r3, r0
 8005024:	80bb      	strh	r3, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	807b      	strh	r3, [r7, #2]
 800502a:	4613      	mov	r3, r2
 800502c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005032:	b672      	cpsid	i
}
 8005034:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <I2C2_WriteData+0x5c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	8878      	ldrh	r0, [r7, #2]
 800503c:	88ba      	ldrh	r2, [r7, #4]
 800503e:	88f9      	ldrh	r1, [r7, #6]
 8005040:	9302      	str	r3, [sp, #8]
 8005042:	2301      	movs	r3, #1
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	1c7b      	adds	r3, r7, #1
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	4603      	mov	r3, r0
 800504c:	4808      	ldr	r0, [pc, #32]	; (8005070 <I2C2_WriteData+0x60>)
 800504e:	f005 ff19 	bl	800ae84 <HAL_I2C_Mem_Write>
 8005052:	4603      	mov	r3, r0
 8005054:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005056:	b662      	cpsie	i
}
 8005058:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8005060:	f000 f890 	bl	8005184 <I2C2_Error>
  }
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}
 800506c:	200000bc 	.word	0x200000bc
 8005070:	2000c388 	.word	0x2000c388

08005074 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af04      	add	r7, sp, #16
 800507a:	4603      	mov	r3, r0
 800507c:	80fb      	strh	r3, [r7, #6]
 800507e:	460b      	mov	r3, r1
 8005080:	80bb      	strh	r3, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800508a:	2300      	movs	r3, #0
 800508c:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800508e:	b672      	cpsid	i
}
 8005090:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <I2C2_ReadData+0x60>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	8878      	ldrh	r0, [r7, #2]
 8005098:	88ba      	ldrh	r2, [r7, #4]
 800509a:	88f9      	ldrh	r1, [r7, #6]
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	2301      	movs	r3, #1
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	f107 030e 	add.w	r3, r7, #14
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4603      	mov	r3, r0
 80050aa:	480b      	ldr	r0, [pc, #44]	; (80050d8 <I2C2_ReadData+0x64>)
 80050ac:	f005 fffe 	bl	800b0ac <HAL_I2C_Mem_Read>
 80050b0:	4603      	mov	r3, r0
 80050b2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80050b4:	b662      	cpsie	i
}
 80050b6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80050be:	f000 f861 	bl	8005184 <I2C2_Error>
    HAL_Delay(200);
 80050c2:	20c8      	movs	r0, #200	; 0xc8
 80050c4:	f003 f9a0 	bl	8008408 <HAL_Delay>
  }

  return value;
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200000bc 	.word	0x200000bc
 80050d8:	2000c388 	.word	0x2000c388

080050dc <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80050f0:	b672      	cpsid	i
}
 80050f2:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 80050f4:	88f9      	ldrh	r1, [r7, #6]
 80050f6:	2332      	movs	r3, #50	; 0x32
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	480a      	ldr	r0, [pc, #40]	; (8005124 <I2C2_isDeviceReady+0x48>)
 80050fc:	f006 f8f0 	bl	800b2e0 <HAL_I2C_IsDeviceReady>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005104:	b662      	cpsie	i
}
 8005106:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800510e:	f000 f839 	bl	8005184 <I2C2_Error>
    HAL_Delay(200);
 8005112:	20c8      	movs	r0, #200	; 0xc8
 8005114:	f003 f978 	bl	8008408 <HAL_Delay>
  }

  return value;
 8005118:	7bbb      	ldrb	r3, [r7, #14]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2000c388 	.word	0x2000c388

08005128 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af04      	add	r7, sp, #16
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	4603      	mov	r3, r0
 8005132:	81fb      	strh	r3, [r7, #14]
 8005134:	460b      	mov	r3, r1
 8005136:	81bb      	strh	r3, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8005140:	b672      	cpsid	i
}
 8005142:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8005144:	4b0d      	ldr	r3, [pc, #52]	; (800517c <I2C2_ReadBuffer+0x54>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	8978      	ldrh	r0, [r7, #10]
 800514a:	89ba      	ldrh	r2, [r7, #12]
 800514c:	89f9      	ldrh	r1, [r7, #14]
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	8c3b      	ldrh	r3, [r7, #32]
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	4603      	mov	r3, r0
 800515a:	4809      	ldr	r0, [pc, #36]	; (8005180 <I2C2_ReadBuffer+0x58>)
 800515c:	f005 ffa6 	bl	800b0ac <HAL_I2C_Mem_Read>
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8005164:	b662      	cpsie	i
}
 8005166:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800516e:	f000 f809 	bl	8005184 <I2C2_Error>
  }

  return status;
 8005172:	7dfb      	ldrb	r3, [r7, #23]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	200000bc 	.word	0x200000bc
 8005180:	2000c388 	.word	0x2000c388

08005184 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8005188:	f7ff fe32 	bl	8004df0 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 800518c:	4803      	ldr	r0, [pc, #12]	; (800519c <I2C2_Error+0x18>)
 800518e:	f005 fe4a 	bl	800ae26 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8005192:	f7ff fe31 	bl	8004df8 <I2C2_Init>
}
 8005196:	bf00      	nop
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000c388 	.word	0x2000c388

080051a0 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 80051a4:	f7ff fe28 	bl	8004df8 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 80051a8:	2104      	movs	r1, #4
 80051aa:	2084      	movs	r0, #132	; 0x84
 80051ac:	f7ff ff96 	bl	80050dc <I2C2_isDeviceReady>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 80051b6:	f7ff fe1b 	bl	8004df0 <BSP_ErrorHandler>
  }
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80051c6:	4b19      	ldr	r3, [pc, #100]	; (800522c <MFX_IO_DeInit+0x6c>)
 80051c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ca:	4a18      	ldr	r2, [pc, #96]	; (800522c <MFX_IO_DeInit+0x6c>)
 80051cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051d2:	4b16      	ldr	r3, [pc, #88]	; (800522c <MFX_IO_DeInit+0x6c>)
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80051de:	2340      	movs	r3, #64	; 0x40
 80051e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80051e2:	2301      	movs	r3, #1
 80051e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80051ea:	2302      	movs	r3, #2
 80051ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	4619      	mov	r1, r3
 80051f4:	480e      	ldr	r0, [pc, #56]	; (8005230 <MFX_IO_DeInit+0x70>)
 80051f6:	f005 fab9 	bl	800a76c <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80051fa:	2017      	movs	r0, #23
 80051fc:	f005 f889 	bl	800a312 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <MFX_IO_DeInit+0x6c>)
 8005202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005204:	4a09      	ldr	r2, [pc, #36]	; (800522c <MFX_IO_DeInit+0x6c>)
 8005206:	f043 0304 	orr.w	r3, r3, #4
 800520a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <MFX_IO_DeInit+0x6c>)
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8005218:	2120      	movs	r1, #32
 800521a:	4806      	ldr	r0, [pc, #24]	; (8005234 <MFX_IO_DeInit+0x74>)
 800521c:	f005 fc38 	bl	800aa90 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8005220:	f7ff fe96 	bl	8004f50 <I2C2_DeInit>
}
 8005224:	bf00      	nop
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	48001c00 	.word	0x48001c00
 8005234:	48000800 	.word	0x48000800

08005238 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <MFX_IO_ITConfig+0x50>)
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	4a11      	ldr	r2, [pc, #68]	; (8005288 <MFX_IO_ITConfig+0x50>)
 8005244:	f043 0304 	orr.w	r3, r3, #4
 8005248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <MFX_IO_ITConfig+0x50>)
 800524c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8005256:	2320      	movs	r3, #32
 8005258:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <MFX_IO_ITConfig+0x54>)
 8005264:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4809      	ldr	r0, [pc, #36]	; (8005290 <MFX_IO_ITConfig+0x58>)
 800526c:	f005 fa7e 	bl	800a76c <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8005270:	220f      	movs	r2, #15
 8005272:	210f      	movs	r1, #15
 8005274:	2017      	movs	r0, #23
 8005276:	f005 f822 	bl	800a2be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800527a:	2017      	movs	r0, #23
 800527c:	f005 f83b 	bl	800a2f6 <HAL_NVIC_EnableIRQ>
}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40021000 	.word	0x40021000
 800528c:	10110000 	.word	0x10110000
 8005290:	48000800 	.word	0x48000800

08005294 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800529a:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <MFX_IO_EnableWakeupPin+0x40>)
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <MFX_IO_EnableWakeupPin+0x40>)
 80052a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <MFX_IO_EnableWakeupPin+0x40>)
 80052a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80052b2:	2340      	movs	r3, #64	; 0x40
 80052b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80052b6:	2301      	movs	r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052ba:	2302      	movs	r3, #2
 80052bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4804      	ldr	r0, [pc, #16]	; (80052d8 <MFX_IO_EnableWakeupPin+0x44>)
 80052c8:	f005 fa50 	bl	800a76c <HAL_GPIO_Init>
}
 80052cc:	bf00      	nop
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000
 80052d8:	48001c00 	.word	0x48001c00

080052dc <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80052e0:	2201      	movs	r2, #1
 80052e2:	2140      	movs	r1, #64	; 0x40
 80052e4:	4806      	ldr	r0, [pc, #24]	; (8005300 <MFX_IO_Wakeup+0x24>)
 80052e6:	f005 fcc5 	bl	800ac74 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80052ea:	2001      	movs	r0, #1
 80052ec:	f003 f88c 	bl	8008408 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80052f0:	2200      	movs	r2, #0
 80052f2:	2140      	movs	r1, #64	; 0x40
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <MFX_IO_Wakeup+0x24>)
 80052f6:	f005 fcbd 	bl	800ac74 <HAL_GPIO_WritePin>
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	48001c00 	.word	0x48001c00

08005304 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	80fb      	strh	r3, [r7, #6]
 800530e:	460b      	mov	r3, r1
 8005310:	717b      	strb	r3, [r7, #5]
 8005312:	4613      	mov	r3, r2
 8005314:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8005316:	797b      	ldrb	r3, [r7, #5]
 8005318:	b299      	uxth	r1, r3
 800531a:	793b      	ldrb	r3, [r7, #4]
 800531c:	88f8      	ldrh	r0, [r7, #6]
 800531e:	2201      	movs	r2, #1
 8005320:	f7ff fe76 	bl	8005010 <I2C2_WriteData>
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	460a      	mov	r2, r1
 8005336:	80fb      	strh	r3, [r7, #6]
 8005338:	4613      	mov	r3, r2
 800533a:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800533c:	797b      	ldrb	r3, [r7, #5]
 800533e:	b299      	uxth	r1, r3
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	2201      	movs	r2, #1
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fe95 	bl	8005074 <I2C2_ReadData>
 800534a:	4603      	mov	r3, r0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af02      	add	r7, sp, #8
 800535a:	60ba      	str	r2, [r7, #8]
 800535c:	461a      	mov	r2, r3
 800535e:	4603      	mov	r3, r0
 8005360:	81fb      	strh	r3, [r7, #14]
 8005362:	460b      	mov	r3, r1
 8005364:	737b      	strb	r3, [r7, #13]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800536a:	7b7b      	ldrb	r3, [r7, #13]
 800536c:	b299      	uxth	r1, r3
 800536e:	89f8      	ldrh	r0, [r7, #14]
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2201      	movs	r2, #1
 8005378:	f7ff fed6 	bl	8005128 <I2C2_ReadBuffer>
 800537c:	4603      	mov	r3, r0
 800537e:	b29b      	uxth	r3, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f003 f839 	bl	8008408 <HAL_Delay>
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08c      	sub	sp, #48	; 0x30
 80053a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80053a6:	4b38      	ldr	r3, [pc, #224]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	4a37      	ldr	r2, [pc, #220]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6513      	str	r3, [r2, #80]	; 0x50
 80053b2:	4b35      	ldr	r3, [pc, #212]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053be:	4b32      	ldr	r3, [pc, #200]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c2:	4a31      	ldr	r2, [pc, #196]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053c4:	f043 0308 	orr.w	r3, r3, #8
 80053c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ca:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053d6:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053da:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053dc:	f043 0310 	orr.w	r3, r3, #16
 80053e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ee:	4b26      	ldr	r3, [pc, #152]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	4a25      	ldr	r2, [pc, #148]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053f4:	f043 0320 	orr.w	r3, r3, #32
 80053f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053fa:	4b23      	ldr	r3, [pc, #140]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005406:	4b20      	ldr	r3, [pc, #128]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 800540c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005412:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800541e:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005428:	6593      	str	r3, [r2, #88]	; 0x58
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <FMC_BANK1_MspInit+0xe8>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8005436:	f006 fb81 	bl	800bb3c <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800543a:	2302      	movs	r3, #2
 800543c:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800543e:	2301      	movs	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005442:	2303      	movs	r3, #3
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8005446:	230c      	movs	r3, #12
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 800544a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800544e:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8005450:	f107 031c 	add.w	r3, r7, #28
 8005454:	4619      	mov	r1, r3
 8005456:	480d      	ldr	r0, [pc, #52]	; (800548c <FMC_BANK1_MspInit+0xec>)
 8005458:	f005 f988 	bl	800a76c <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 800545c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005460:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8005462:	f107 031c 	add.w	r3, r7, #28
 8005466:	4619      	mov	r1, r3
 8005468:	4809      	ldr	r0, [pc, #36]	; (8005490 <FMC_BANK1_MspInit+0xf0>)
 800546a:	f005 f97f 	bl	800a76c <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800546e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8005474:	f107 031c 	add.w	r3, r7, #28
 8005478:	4619      	mov	r1, r3
 800547a:	4804      	ldr	r0, [pc, #16]	; (800548c <FMC_BANK1_MspInit+0xec>)
 800547c:	f005 f976 	bl	800a76c <HAL_GPIO_Init>

}
 8005480:	bf00      	nop
 8005482:	3730      	adds	r7, #48	; 0x30
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	48000c00 	.word	0x48000c00
 8005490:	48001000 	.word	0x48001000

08005494 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b0a4      	sub	sp, #144	; 0x90
 8005498:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 800549a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800549e:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 80054a0:	4b26      	ldr	r3, [pc, #152]	; (800553c <FMC_BANK1_Init+0xa8>)
 80054a2:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 80054a4:	2301      	movs	r3, #1
 80054a6:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 80054a8:	2301      	movs	r3, #1
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 80054b4:	2302      	movs	r3, #2
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 80054b8:	2302      	movs	r3, #2
 80054ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 80054bc:	2300      	movs	r3, #0
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 80054c0:	2305      	movs	r3, #5
 80054c2:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80054c4:	2301      	movs	r3, #1
 80054c6:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 80054c8:	2303      	movs	r3, #3
 80054ca:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 80054cc:	2302      	movs	r3, #2
 80054ce:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 80054d0:	2302      	movs	r3, #2
 80054d2:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 80054d4:	2302      	movs	r3, #2
 80054d6:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 80054dc:	2300      	movs	r3, #0
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 80054e4:	2300      	movs	r3, #0
 80054e6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80054e8:	2310      	movs	r3, #16
 80054ea:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80054f0:	2300      	movs	r3, #0
 80054f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 80054f4:	2300      	movs	r3, #0
 80054f6:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 80054f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054fc:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 80054fe:	2300      	movs	r3, #0
 8005500:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 8005502:	2300      	movs	r3, #0
 8005504:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005506:	2300      	movs	r3, #0
 8005508:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800550a:	2300      	movs	r3, #0
 800550c:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8005514:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005518:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800551a:	2300      	movs	r3, #0
 800551c:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800551e:	f7ff ff3f 	bl	80053a0 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8005522:	463a      	mov	r2, r7
 8005524:	f107 0120 	add.w	r1, r7, #32
 8005528:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800552c:	4618      	mov	r0, r3
 800552e:	f008 ffd8 	bl	800e4e2 <HAL_SRAM_Init>

}
 8005532:	bf00      	nop
 8005534:	3790      	adds	r7, #144	; 0x90
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	a0000104 	.word	0xa0000104

08005540 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 800554a:	4a04      	ldr	r2, [pc, #16]	; (800555c <FMC_BANK1_WriteData+0x1c>)
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	8013      	strh	r3, [r2, #0]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	60080000 	.word	0x60080000

08005560 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 800556a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800556e:	79fa      	ldrb	r2, [r7, #7]
 8005570:	b292      	uxth	r2, r2
 8005572:	801a      	strh	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <FMC_BANK1_ReadData+0x14>)
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
}
 800558a:	4618      	mov	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	60080000 	.word	0x60080000

08005598 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 800559c:	f7ff ff7a 	bl	8005494 <FMC_BANK1_Init>
}
 80055a0:	bf00      	nop
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ffc5 	bl	8005540 <FMC_BANK1_WriteData>
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	4603      	mov	r3, r0
 80055c6:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ffc8 	bl	8005560 <FMC_BANK1_WriteReg>
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 80055dc:	f7ff ffd0 	bl	8005580 <FMC_BANK1_ReadData>
 80055e0:	4603      	mov	r3, r0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f002 ff0a 	bl	8008408 <HAL_Delay>
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800560a:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <BSP_IO_Init+0x78>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d128      	bne.n	8005664 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8005612:	4b19      	ldr	r3, [pc, #100]	; (8005678 <BSP_IO_Init+0x7c>)
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	2084      	movs	r0, #132	; 0x84
 8005618:	4798      	blx	r3

    HAL_Delay(10);
 800561a:	200a      	movs	r0, #10
 800561c:	f002 fef4 	bl	8008408 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8005620:	4b16      	ldr	r3, [pc, #88]	; (800567c <BSP_IO_Init+0x80>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2084      	movs	r0, #132	; 0x84
 8005626:	4798      	blx	r3
 8005628:	4603      	mov	r3, r0
 800562a:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 800562c:	79bb      	ldrb	r3, [r7, #6]
 800562e:	2b7b      	cmp	r3, #123	; 0x7b
 8005630:	d002      	beq.n	8005638 <BSP_IO_Init+0x3c>
 8005632:	79bb      	ldrb	r3, [r7, #6]
 8005634:	2b79      	cmp	r3, #121	; 0x79
 8005636:	d117      	bne.n	8005668 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8005638:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <BSP_IO_Init+0x78>)
 800563a:	4a10      	ldr	r2, [pc, #64]	; (800567c <BSP_IO_Init+0x80>)
 800563c:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800563e:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <BSP_IO_Init+0x78>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00f      	beq.n	8005668 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <BSP_IO_Init+0x78>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2084      	movs	r0, #132	; 0x84
 8005650:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8005652:	4b08      	ldr	r3, [pc, #32]	; (8005674 <BSP_IO_Init+0x78>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4909      	ldr	r1, [pc, #36]	; (8005680 <BSP_IO_Init+0x84>)
 800565a:	2084      	movs	r0, #132	; 0x84
 800565c:	4798      	blx	r3

        ret = IO_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	71fb      	strb	r3, [r7, #7]
 8005662:	e001      	b.n	8005668 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8005664:	2303      	movs	r3, #3
 8005666:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8005668:	79fb      	ldrb	r3, [r7, #7]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2000c3d4 	.word	0x2000c3d4
 8005678:	20000034 	.word	0x20000034
 800567c:	20000008 	.word	0x20000008
 8005680:	000301ff 	.word	0x000301ff

08005684 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <BSP_IO_ConfigPin+0x30>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <BSP_IO_ConfigPin+0x34>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	2084      	movs	r0, #132	; 0x84
 80056a8:	4798      	blx	r3

  return IO_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	000301ff 	.word	0x000301ff
 80056b8:	2000c3d4 	.word	0x2000c3d4

080056bc <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <BSP_IO_WritePin+0x30>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <BSP_IO_WritePin+0x34>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	68f9      	ldr	r1, [r7, #12]
 80056de:	2084      	movs	r0, #132	; 0x84
 80056e0:	4798      	blx	r3

}
 80056e2:	bf00      	nop
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	000301ff 	.word	0x000301ff
 80056f0:	2000c3d4 	.word	0x2000c3d4

080056f4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80056f8:	2001      	movs	r0, #1
 80056fa:	f000 f803 	bl	8005704 <BSP_LCD_InitEx>
 80056fe:	4603      	mov	r3, r0
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}

08005704 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8005714:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <BSP_LCD_InitEx+0xe0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d102      	bne.n	8005722 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]
 8005720:	e05b      	b.n	80057da <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8005722:	f7ff ff6b 	bl	80055fc <BSP_IO_Init>
 8005726:	4603      	mov	r3, r0
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 800572c:	f7ff fb60 	bl	8004df0 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8005730:	f000 fa7a 	bl	8005c28 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8005734:	2200      	movs	r2, #0
 8005736:	2101      	movs	r1, #1
 8005738:	482b      	ldr	r0, [pc, #172]	; (80057e8 <BSP_LCD_InitEx+0xe4>)
 800573a:	f005 fa9b 	bl	800ac74 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 800573e:	4b2b      	ldr	r3, [pc, #172]	; (80057ec <BSP_LCD_InitEx+0xe8>)
 8005740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005744:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8005746:	4b29      	ldr	r3, [pc, #164]	; (80057ec <BSP_LCD_InitEx+0xe8>)
 8005748:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <BSP_LCD_InitEx+0xec>)
 800574a:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 800574c:	4b27      	ldr	r3, [pc, #156]	; (80057ec <BSP_LCD_InitEx+0xe8>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8005752:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <BSP_LCD_InitEx+0xf0>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d108      	bne.n	800576c <BSP_LCD_InitEx+0x68>
 800575a:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <BSP_LCD_InitEx+0xf4>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005762:	2201      	movs	r2, #1
 8005764:	2101      	movs	r1, #1
 8005766:	4825      	ldr	r0, [pc, #148]	; (80057fc <BSP_LCD_InitEx+0xf8>)
 8005768:	f005 fa84 	bl	800ac74 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 800576c:	f000 f850 	bl	8005810 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8005770:	4b23      	ldr	r3, [pc, #140]	; (8005800 <BSP_LCD_InitEx+0xfc>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4798      	blx	r3
 8005776:	4603      	mov	r3, r0
 8005778:	2b85      	cmp	r3, #133	; 0x85
 800577a:	d12e      	bne.n	80057da <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 800577c:	4b21      	ldr	r3, [pc, #132]	; (8005804 <BSP_LCD_InitEx+0x100>)
 800577e:	4a20      	ldr	r2, [pc, #128]	; (8005800 <BSP_LCD_InitEx+0xfc>)
 8005780:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8005782:	4b20      	ldr	r3, [pc, #128]	; (8005804 <BSP_LCD_InitEx+0x100>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 800578a:	2200      	movs	r2, #0
 800578c:	2100      	movs	r1, #0
 800578e:	202c      	movs	r0, #44	; 0x2c
 8005790:	f7ff f8f5 	bl	800497e <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8005794:	2300      	movs	r3, #0
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	e006      	b.n	80057a8 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 800579a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800579e:	f7ff ff01 	bl	80055a4 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 80057ae:	d3f4      	bcc.n	800579a <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7fe ffdf 	bl	800477a <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 80057bc:	4b12      	ldr	r3, [pc, #72]	; (8005808 <BSP_LCD_InitEx+0x104>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e002      	b.n	80057ca <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 80057c4:	4b10      	ldr	r3, [pc, #64]	; (8005808 <BSP_LCD_InitEx+0x104>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80057ca:	4810      	ldr	r0, [pc, #64]	; (800580c <BSP_LCD_InitEx+0x108>)
 80057cc:	f000 f86c 	bl	80058a8 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 80057d0:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <BSP_LCD_InitEx+0xe0>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	2000c3d8 	.word	0x2000c3d8
 80057e8:	48001c00 	.word	0x48001c00
 80057ec:	2000cac0 	.word	0x2000cac0
 80057f0:	200000c0 	.word	0x200000c0
 80057f4:	2000cae9 	.word	0x2000cae9
 80057f8:	2000cae8 	.word	0x2000cae8
 80057fc:	48002000 	.word	0x48002000
 8005800:	20000080 	.word	0x20000080
 8005804:	2000c3dc 	.word	0x2000c3dc
 8005808:	200000d0 	.word	0x200000d0
 800580c:	200000c8 	.word	0x200000c8

08005810 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005814:	2100      	movs	r1, #0
 8005816:	2004      	movs	r0, #4
 8005818:	f7ff ff50 	bl	80056bc <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800581c:	2005      	movs	r0, #5
 800581e:	f002 fdf3 	bl	8008408 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8005822:	2101      	movs	r1, #1
 8005824:	2004      	movs	r0, #4
 8005826:	f7ff ff49 	bl	80056bc <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800582a:	200a      	movs	r0, #10
 800582c:	f002 fdec 	bl	8008408 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005830:	2100      	movs	r1, #0
 8005832:	2004      	movs	r0, #4
 8005834:	f7ff ff42 	bl	80056bc <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8005838:	2014      	movs	r0, #20
 800583a:	f002 fde5 	bl	8008408 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800583e:	2101      	movs	r1, #1
 8005840:	2004      	movs	r0, #4
 8005842:	f7ff ff3b 	bl	80056bc <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8005846:	200a      	movs	r0, #10
 8005848:	f002 fdde 	bl	8008408 <HAL_Delay>
}
 800584c:	bf00      	nop
 800584e:	bd80      	pop	{r7, pc}

08005850 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <BSP_LCD_GetXSize+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	4798      	blx	r3
 800585c:	4603      	mov	r3, r0
}
 800585e:	4618      	mov	r0, r3
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	2000c3dc 	.word	0x2000c3dc

08005868 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	4a03      	ldr	r2, [pc, #12]	; (8005884 <BSP_LCD_SetTextColor+0x1c>)
 8005876:	6013      	str	r3, [r2, #0]
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	2000cac0 	.word	0x2000cac0

08005888 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	4a03      	ldr	r2, [pc, #12]	; (80058a4 <BSP_LCD_SetBackColor+0x1c>)
 8005896:	6053      	str	r3, [r2, #4]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	2000cac0 	.word	0x2000cac0

080058a8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80058b0:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <BSP_LCD_SetFont+0x1c>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6093      	str	r3, [r2, #8]
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	2000cac0 	.word	0x2000cac0

080058c8 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <BSP_LCD_GetFont+0x14>)
 80058ce:	689b      	ldr	r3, [r3, #8]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	2000cac0 	.word	0x2000cac0

080058e0 <BSP_LCD_ClearStringLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint16_t Line)
{
 80058e0:	b590      	push	{r4, r7, lr}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	80fb      	strh	r3, [r7, #6]
  uint32_t color_backup = DrawProp.TextColor;
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <BSP_LCD_ClearStringLine+0x58>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = DrawProp.BackColor;;
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <BSP_LCD_ClearStringLine+0x58>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4a10      	ldr	r2, [pc, #64]	; (8005938 <BSP_LCD_ClearStringLine+0x58>)
 80058f6:	6013      	str	r3, [r2, #0]

  /* Draw a rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp.pFont->Height), BSP_LCD_GetXSize(), DrawProp.pFont->Height);
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <BSP_LCD_ClearStringLine+0x58>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	88db      	ldrh	r3, [r3, #6]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	fb12 f303 	smulbb	r3, r2, r3
 8005904:	b29c      	uxth	r4, r3
 8005906:	f7ff ffa3 	bl	8005850 <BSP_LCD_GetXSize>
 800590a:	4603      	mov	r3, r0
 800590c:	b29a      	uxth	r2, r3
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <BSP_LCD_ClearStringLine+0x58>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	88db      	ldrh	r3, [r3, #6]
 8005914:	4621      	mov	r1, r4
 8005916:	2000      	movs	r0, #0
 8005918:	f000 f934 	bl	8005b84 <BSP_LCD_FillRect>

  DrawProp.TextColor = color_backup;
 800591c:	4a06      	ldr	r2, [pc, #24]	; (8005938 <BSP_LCD_ClearStringLine+0x58>)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <BSP_LCD_ClearStringLine+0x58>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff ff9d 	bl	8005868 <BSP_LCD_SetTextColor>
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}
 8005936:	bf00      	nop
 8005938:	2000cac0 	.word	0x2000cac0

0800593c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	80fb      	strh	r3, [r7, #6]
 8005946:	460b      	mov	r3, r1
 8005948:	80bb      	strh	r3, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <BSP_LCD_DisplayChar+0x50>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005958:	490c      	ldr	r1, [pc, #48]	; (800598c <BSP_LCD_DisplayChar+0x50>)
 800595a:	6889      	ldr	r1, [r1, #8]
 800595c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800595e:	fb01 f103 	mul.w	r1, r1, r3
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <BSP_LCD_DisplayChar+0x50>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	889b      	ldrh	r3, [r3, #4]
 8005968:	3307      	adds	r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	da00      	bge.n	8005970 <BSP_LCD_DisplayChar+0x34>
 800596e:	3307      	adds	r3, #7
 8005970:	10db      	asrs	r3, r3, #3
 8005972:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005976:	441a      	add	r2, r3
 8005978:	88b9      	ldrh	r1, [r7, #4]
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f9af 	bl	8005ce0 <DrawChar>
}
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	2000cac0 	.word	0x2000cac0

08005990 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	60ba      	str	r2, [r7, #8]
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	81fb      	strh	r3, [r7, #14]
 800599e:	460b      	mov	r3, r1
 80059a0:	81bb      	strh	r3, [r7, #12]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80059a6:	2301      	movs	r3, #1
 80059a8:	83fb      	strh	r3, [r7, #30]
 80059aa:	2300      	movs	r3, #0
 80059ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 80059ba:	e002      	b.n	80059c2 <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3301      	adds	r3, #1
 80059c0:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	617a      	str	r2, [r7, #20]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f6      	bne.n	80059bc <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 80059ce:	f7ff ff3f 	bl	8005850 <BSP_LCD_GetXSize>
 80059d2:	4602      	mov	r2, r0
 80059d4:	4b33      	ldr	r3, [pc, #204]	; (8005aa4 <BSP_LCD_DisplayStringAt+0x114>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	889b      	ldrh	r3, [r3, #4]
 80059da:	fbb2 f3f3 	udiv	r3, r2, r3
 80059de:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d014      	beq.n	8005a10 <BSP_LCD_DisplayStringAt+0x80>
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	dc23      	bgt.n	8005a32 <BSP_LCD_DisplayStringAt+0xa2>
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d002      	beq.n	80059f4 <BSP_LCD_DisplayStringAt+0x64>
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d011      	beq.n	8005a16 <BSP_LCD_DisplayStringAt+0x86>
 80059f2:	e01e      	b.n	8005a32 <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <BSP_LCD_DisplayStringAt+0x114>)
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	8892      	ldrh	r2, [r2, #4]
 8005a00:	fb02 f303 	mul.w	r3, r2, r3
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	83fb      	strh	r3, [r7, #30]
      break;
 8005a0e:	e013      	b.n	8005a38 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 8005a10:	89fb      	ldrh	r3, [r7, #14]
 8005a12:	83fb      	strh	r3, [r7, #30]
      break;
 8005a14:	e010      	b.n	8005a38 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <BSP_LCD_DisplayStringAt+0x114>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	889b      	ldrh	r3, [r3, #4]
 8005a24:	fb12 f303 	smulbb	r3, r2, r3
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	89fb      	ldrh	r3, [r7, #14]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	83fb      	strh	r3, [r7, #30]
      break;
 8005a30:	e002      	b.n	8005a38 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 8005a32:	89fb      	ldrh	r3, [r7, #14]
 8005a34:	83fb      	strh	r3, [r7, #30]
      break;
 8005a36:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8005a38:	8bfb      	ldrh	r3, [r7, #30]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <BSP_LCD_DisplayStringAt+0xb6>
 8005a3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da15      	bge.n	8005a72 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8005a46:	2301      	movs	r3, #1
 8005a48:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8005a4a:	e012      	b.n	8005a72 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	89b9      	ldrh	r1, [r7, #12]
 8005a52:	8bfb      	ldrh	r3, [r7, #30]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff71 	bl	800593c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <BSP_LCD_DisplayStringAt+0x114>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	889a      	ldrh	r2, [r3, #4]
 8005a60:	8bfb      	ldrh	r3, [r7, #30]
 8005a62:	4413      	add	r3, r2
 8005a64:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60bb      	str	r3, [r7, #8]
    i++;
 8005a6c:	8bbb      	ldrh	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00f      	beq.n	8005a9a <BSP_LCD_DisplayStringAt+0x10a>
 8005a7a:	f7ff fee9 	bl	8005850 <BSP_LCD_GetXSize>
 8005a7e:	4601      	mov	r1, r0
 8005a80:	8bbb      	ldrh	r3, [r7, #28]
 8005a82:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <BSP_LCD_DisplayStringAt+0x114>)
 8005a84:	6892      	ldr	r2, [r2, #8]
 8005a86:	8892      	ldrh	r2, [r2, #4]
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	1acb      	subs	r3, r1, r3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <BSP_LCD_DisplayStringAt+0x114>)
 8005a92:	6892      	ldr	r2, [r2, #8]
 8005a94:	8892      	ldrh	r2, [r2, #4]
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d2d8      	bcs.n	8005a4c <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	2000cac0 	.word	0x2000cac0

08005aa8 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8005ab4:	f7ff ff08 	bl	80058c8 <BSP_LCD_GetFont>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	88db      	ldrh	r3, [r3, #6]
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	fb12 f303 	smulbb	r3, r2, r3
 8005ac2:	b299      	uxth	r1, r3
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f7ff ff61 	bl	8005990 <BSP_LCD_DisplayStringAt>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	80fb      	strh	r3, [r7, #6]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	80bb      	strh	r3, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 8005aea:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <BSP_LCD_DrawPixel+0x34>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d006      	beq.n	8005b02 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <BSP_LCD_DrawPixel+0x34>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	88b9      	ldrh	r1, [r7, #4]
 8005afe:	88f8      	ldrh	r0, [r7, #6]
 8005b00:	4798      	blx	r3
  }
}
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2000c3dc 	.word	0x2000c3dc

08005b10 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	80fb      	strh	r3, [r7, #6]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	80bb      	strh	r3, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <BSP_LCD_DrawHLine+0x6c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8005b30:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <BSP_LCD_DrawHLine+0x6c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a1c      	ldr	r4, [r3, #32]
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <BSP_LCD_DrawHLine+0x70>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	b298      	uxth	r0, r3
 8005b3c:	887b      	ldrh	r3, [r7, #2]
 8005b3e:	88ba      	ldrh	r2, [r7, #4]
 8005b40:	88f9      	ldrh	r1, [r7, #6]
 8005b42:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8005b44:	e015      	b.n	8005b72 <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e00e      	b.n	8005b6a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	4413      	add	r3, r2
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <BSP_LCD_DrawHLine+0x70>)
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	88b9      	ldrh	r1, [r7, #4]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff ffba 	bl	8005ad8 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	887b      	ldrh	r3, [r7, #2]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d3ec      	bcc.n	8005b4c <BSP_LCD_DrawHLine+0x3c>
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	2000c3dc 	.word	0x2000c3dc
 8005b80:	2000cac0 	.word	0x2000cac0

08005b84 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4623      	mov	r3, r4
 8005b94:	80fb      	strh	r3, [r7, #6]
 8005b96:	4603      	mov	r3, r0
 8005b98:	80bb      	strh	r3, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	807b      	strh	r3, [r7, #2]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <BSP_LCD_FillRect+0x50>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fe5d 	bl	8005868 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);
 8005bae:	88bb      	ldrh	r3, [r7, #4]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	80ba      	strh	r2, [r7, #4]
 8005bb4:	887a      	ldrh	r2, [r7, #2]
 8005bb6:	88f8      	ldrh	r0, [r7, #6]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f7ff ffa9 	bl	8005b10 <BSP_LCD_DrawHLine>
  }
  while (Height--);
 8005bbe:	883b      	ldrh	r3, [r7, #0]
 8005bc0:	1e5a      	subs	r2, r3, #1
 8005bc2:	803a      	strh	r2, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f2      	bne.n	8005bae <BSP_LCD_FillRect+0x2a>
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd90      	pop	{r4, r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000cac0 	.word	0x2000cac0

08005bd8 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8005be0:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <HAL_TIM_PWM_MspInit+0x48>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <HAL_TIM_PWM_MspInit+0x48>)
 8005be6:	f043 0308 	orr.w	r3, r3, #8
 8005bea:	6593      	str	r3, [r2, #88]	; 0x58
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <HAL_TIM_PWM_MspInit+0x48>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c00:	2303      	movs	r3, #3
 8005c02:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 8005c04:	2302      	movs	r3, #2
 8005c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005c0c:	f107 030c 	add.w	r3, r7, #12
 8005c10:	4619      	mov	r1, r3
 8005c12:	4804      	ldr	r0, [pc, #16]	; (8005c24 <HAL_TIM_PWM_MspInit+0x4c>)
 8005c14:	f004 fdaa 	bl	800a76c <HAL_GPIO_Init>
}
 8005c18:	bf00      	nop
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	48002000 	.word	0x48002000

08005c28 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 8005c2e:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c32:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005c46:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c52:	4b20      	ldr	r3, [pc, #128]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c62:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <BSP_LCD_MspInit+0xac>)
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8005c76:	f7ff fcc1 	bl	80055fc <BSP_IO_Init>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 8005c80:	f7ff f8b6 	bl	8004df0 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8005c84:	2101      	movs	r1, #1
 8005c86:	2004      	movs	r0, #4
 8005c88:	f7ff fcfc 	bl	8005684 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005c90:	2301      	movs	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	480c      	ldr	r0, [pc, #48]	; (8005cd8 <BSP_LCD_MspInit+0xb0>)
 8005ca8:	f004 fd60 	bl	800a76c <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 8005cac:	2301      	movs	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8005cc0:	f107 030c 	add.w	r3, r7, #12
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4805      	ldr	r0, [pc, #20]	; (8005cdc <BSP_LCD_MspInit+0xb4>)
 8005cc8:	f004 fd50 	bl	800a76c <HAL_GPIO_Init>
}
 8005ccc:	bf00      	nop
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	48002000 	.word	0x48002000
 8005cdc:	48001c00 	.word	0x48001c00

08005ce0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	603a      	str	r2, [r7, #0]
 8005cea:	80fb      	strh	r3, [r7, #6]
 8005cec:	460b      	mov	r3, r1
 8005cee:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 8005cf8:	4b45      	ldr	r3, [pc, #276]	; (8005e10 <DrawChar+0x130>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	88db      	ldrh	r3, [r3, #6]
 8005cfe:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8005d00:	4b43      	ldr	r3, [pc, #268]	; (8005e10 <DrawChar+0x130>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	889b      	ldrh	r3, [r3, #4]
 8005d06:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 8005d08:	8a3b      	ldrh	r3, [r7, #16]
 8005d0a:	3307      	adds	r3, #7
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da00      	bge.n	8005d12 <DrawChar+0x32>
 8005d10:	3307      	adds	r3, #7
 8005d12:	10db      	asrs	r3, r3, #3
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8a3b      	ldrh	r3, [r7, #16]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	e069      	b.n	8005dfc <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8005d28:	8a3b      	ldrh	r3, [r7, #16]
 8005d2a:	3307      	adds	r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	da00      	bge.n	8005d32 <DrawChar+0x52>
 8005d30:	3307      	adds	r3, #7
 8005d32:	10db      	asrs	r3, r3, #3
 8005d34:	461a      	mov	r2, r3
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	fb03 f302 	mul.w	r3, r3, r2
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	4413      	add	r3, r2
 8005d40:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8005d42:	8a3b      	ldrh	r3, [r7, #16]
 8005d44:	3307      	adds	r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	da00      	bge.n	8005d4c <DrawChar+0x6c>
 8005d4a:	3307      	adds	r3, #7
 8005d4c:	10db      	asrs	r3, r3, #3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d002      	beq.n	8005d58 <DrawChar+0x78>
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d004      	beq.n	8005d60 <DrawChar+0x80>
 8005d56:	e00c      	b.n	8005d72 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	617b      	str	r3, [r7, #20]
        break;
 8005d5e:	e016      	b.n	8005d8e <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	3201      	adds	r2, #1
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
        break;
 8005d70:	e00d      	b.n	8005d8e <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	041a      	lsls	r2, r3, #16
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	4313      	orrs	r3, r2
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	3202      	adds	r2, #2
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
        break;
 8005d8c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e029      	b.n	8005de8 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 8005d94:	8a3a      	ldrh	r2, [r7, #16]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	1ad2      	subs	r2, r2, r3
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	2201      	movs	r2, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00c      	beq.n	8005dca <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	4413      	add	r3, r2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <DrawChar+0x130>)
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	88b9      	ldrh	r1, [r7, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fe88 	bl	8005ad8 <BSP_LCD_DrawPixel>
 8005dc8:	e00b      	b.n	8005de2 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	4a0e      	ldr	r2, [pc, #56]	; (8005e10 <DrawChar+0x130>)
 8005dd6:	6852      	ldr	r2, [r2, #4]
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	88b9      	ldrh	r1, [r7, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fe7b 	bl	8005ad8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	3301      	adds	r3, #1
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	8a3b      	ldrh	r3, [r7, #16]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d3d1      	bcc.n	8005d94 <DrawChar+0xb4>
      }
    }
    Ypos++;
 8005df0:	88bb      	ldrh	r3, [r7, #4]
 8005df2:	3301      	adds	r3, #1
 8005df4:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	8a7b      	ldrh	r3, [r7, #18]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d391      	bcc.n	8005d28 <DrawChar+0x48>
  }
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000cac0 	.word	0x2000cac0

08005e14 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b092      	sub	sp, #72	; 0x48
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8005e26:	e0c2      	b.n	8005fae <arm_cmplx_mag_f32+0x19a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1d1a      	adds	r2, r3, #4
 8005e2c:	60fa      	str	r2, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1d1a      	adds	r2, r3, #4
 8005e36:	60fa      	str	r2, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8005e3c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005e40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005e44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005e48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	60ba      	str	r2, [r7, #8]
 8005e56:	edc7 7a08 	vstr	s15, [r7, #32]
 8005e5a:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8005e5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e68:	db09      	blt.n	8005e7e <arm_cmplx_mag_f32+0x6a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8005e6a:	ed97 0a08 	vldr	s0, [r7, #32]
 8005e6e:	f00d fdeb 	bl	8013a48 <sqrtf>
 8005e72:	eef0 7a40 	vmov.f32	s15, s0
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8005e7c:	e004      	b.n	8005e88 <arm_cmplx_mag_f32+0x74>
    }
    else
    {
      *pOut = 0.0f;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8005e86:	bf00      	nop

    realIn = *pSrc++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	60fa      	str	r2, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1d1a      	adds	r2, r3, #4
 8005e96:	60fa      	str	r2, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8005e9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005ea0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005ea4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005ea8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	1d1a      	adds	r2, r3, #4
 8005eb4:	60ba      	str	r2, [r7, #8]
 8005eb6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 8005ebc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec8:	db09      	blt.n	8005ede <arm_cmplx_mag_f32+0xca>
      *pOut = __builtin_sqrtf(in);
 8005eca:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005ece:	f00d fdbb 	bl	8013a48 <sqrtf>
 8005ed2:	eef0 7a40 	vmov.f32	s15, s0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8005edc:	e004      	b.n	8005ee8 <arm_cmplx_mag_f32+0xd4>
      *pOut = 0.0f;
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8005ee6:	bf00      	nop

    realIn = *pSrc++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1d1a      	adds	r2, r3, #4
 8005eec:	60fa      	str	r2, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	60fa      	str	r2, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8005efc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005f00:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005f04:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	60ba      	str	r2, [r7, #8]
 8005f16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 8005f1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f28:	db09      	blt.n	8005f3e <arm_cmplx_mag_f32+0x12a>
      *pOut = __builtin_sqrtf(in);
 8005f2a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8005f2e:	f00d fd8b 	bl	8013a48 <sqrtf>
 8005f32:	eef0 7a40 	vmov.f32	s15, s0
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8005f3c:	e004      	b.n	8005f48 <arm_cmplx_mag_f32+0x134>
      *pOut = 0.0f;
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8005f46:	bf00      	nop

    realIn = *pSrc++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	60fa      	str	r2, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	60fa      	str	r2, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8005f5c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005f60:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005f64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005f68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	60ba      	str	r2, [r7, #8]
 8005f76:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 8005f7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f88:	db09      	blt.n	8005f9e <arm_cmplx_mag_f32+0x18a>
      *pOut = __builtin_sqrtf(in);
 8005f8a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8005f8e:	f00d fd5b 	bl	8013a48 <sqrtf>
 8005f92:	eef0 7a40 	vmov.f32	s15, s0
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8005f9c:	e004      	b.n	8005fa8 <arm_cmplx_mag_f32+0x194>
      *pOut = 0.0f;
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8005fa6:	bf00      	nop


    /* Decrement the loop counter */
    blkCnt--;
 8005fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005faa:	3b01      	subs	r3, #1
 8005fac:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f af39 	bne.w	8005e28 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 8005fbe:	e032      	b.n	8006026 <arm_cmplx_mag_f32+0x212>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1d1a      	adds	r2, r3, #4
 8005fc4:	60fa      	str	r2, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	60fa      	str	r2, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8005fd4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005fd8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005fdc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005fe0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	60ba      	str	r2, [r7, #8]
 8005fee:	edc7 7a06 	vstr	s15, [r7, #24]
 8005ff2:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8005ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006000:	db09      	blt.n	8006016 <arm_cmplx_mag_f32+0x202>
      *pOut = __builtin_sqrtf(in);
 8006002:	ed97 0a06 	vldr	s0, [r7, #24]
 8006006:	f00d fd1f 	bl	8013a48 <sqrtf>
 800600a:	eef0 7a40 	vmov.f32	s15, s0
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8006014:	e004      	b.n	8006020 <arm_cmplx_mag_f32+0x20c>
      *pOut = 0.0f;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800601e:	bf00      	nop

    /* Decrement the loop counter */
    blkCnt--;
 8006020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006022:	3b01      	subs	r3, #1
 8006024:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8006026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1c9      	bne.n	8005fc0 <arm_cmplx_mag_f32+0x1ac>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	3748      	adds	r7, #72	; 0x48
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8006036:	b480      	push	{r7}
 8006038:	b08b      	sub	sp, #44	; 0x2c
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	603b      	str	r3, [r7, #0]

  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	60fa      	str	r2, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3b01      	subs	r3, #1
 800605a:	089b      	lsrs	r3, r3, #2
 800605c:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 800605e:	e051      	b.n	8006104 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	60fa      	str	r2, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1d1a      	adds	r2, r3, #4
 800606e:	60fa      	str	r2, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 8006074:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006078:	edd7 7a05 	vldr	s15, [r7, #20]
 800607c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006084:	d504      	bpl.n	8006090 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1U;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	3301      	adds	r3, #1
 800608e:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8006090:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006094:	edd7 7a04 	vldr	s15, [r7, #16]
 8006098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800609c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a0:	d504      	bpl.n	80060ac <arm_max_f32+0x76>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2U;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3302      	adds	r3, #2
 80060aa:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1d1a      	adds	r2, r3, #4
 80060b0:	60fa      	str	r2, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1d1a      	adds	r2, r3, #4
 80060ba:	60fa      	str	r2, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 80060c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80060c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d0:	d504      	bpl.n	80060dc <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3U;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	3303      	adds	r3, #3
 80060da:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 80060dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80060e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ec:	d504      	bpl.n	80060f8 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4U;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	3304      	adds	r3, #4
 80060f6:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	3304      	adds	r3, #4
 80060fc:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	3b01      	subs	r3, #1
 8006102:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1aa      	bne.n	8006060 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3b01      	subs	r3, #1
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8006114:	e016      	b.n	8006144 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	60fa      	str	r2, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 8006120:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006124:	edd7 7a05 	vldr	s15, [r7, #20]
 8006128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	d505      	bpl.n	800613e <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	3b01      	subs	r3, #1
 8006142:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e5      	bne.n	8006116 <arm_max_f32+0xe0>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614e:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	601a      	str	r2, [r3, #0]
}
 8006156:	bf00      	nop
 8006158:	372c      	adds	r7, #44	; 0x2c
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b0a0      	sub	sp, #128	; 0x80
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8006172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4413      	add	r3, r2
 800617a:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8006186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006188:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800618a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8006190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	4413      	add	r3, r2
 8006198:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 800619a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80061a0:	4413      	add	r3, r2
 80061a2:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 80061a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061aa:	e1b6      	b.n	800651a <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 80061c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80061ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80061d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80061d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80061dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80061e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80061e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80061ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80061f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80061fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8006200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8006206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 800620c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006210:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	1d1a      	adds	r2, r3, #4
 8006218:	603a      	str	r2, [r7, #0]
 800621a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800621e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8006222:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006226:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	1d1a      	adds	r2, r3, #4
 800622e:	603a      	str	r2, [r7, #0]
 8006230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006234:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8006238:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800623c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	1d1a      	adds	r2, r3, #4
 8006244:	603a      	str	r2, [r7, #0]
 8006246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800624a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800624e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006252:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	1d1a      	adds	r2, r3, #4
 800625a:	603a      	str	r2, [r7, #0]
 800625c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006260:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8006264:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006268:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800626c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006270:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8006274:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006278:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800627c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006280:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8006284:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006288:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800628c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006290:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8006294:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006298:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800629c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80062a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80062a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80062ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b6:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80062ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80062be:	edd7 7a03 	vldr	s15, [r7, #12]
 80062c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062c4:	1d1a      	adds	r2, r3, #4
 80062c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062cc:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80062d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80062d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80062d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e2:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80062e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80062ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80062ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062f0:	1d1a      	adds	r2, r3, #4
 80062f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062f8:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80062fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8006300:	edd7 7a06 	vldr	s15, [r7, #24]
 8006304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006308:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800630c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006310:	edd7 7a07 	vldr	s15, [r7, #28]
 8006314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006318:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800631c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006320:	edd7 7a08 	vldr	s15, [r7, #32]
 8006324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006328:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800632c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006330:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006338:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800633c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	673a      	str	r2, [r7, #112]	; 0x70
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8006346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	673a      	str	r2, [r7, #112]	; 0x70
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8006350:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006354:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8006360:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006364:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8006370:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006374:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8006380:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006384:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8006390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006392:	1d1a      	adds	r2, r3, #4
 8006394:	677a      	str	r2, [r7, #116]	; 0x74
 8006396:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800639a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800639e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a2:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80063a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a8:	1d1a      	adds	r2, r3, #4
 80063aa:	677a      	str	r2, [r7, #116]	; 0x74
 80063ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80063b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80063b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063b8:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80063bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80063c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80063c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80063cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80063d0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80063d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80063dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80063e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80063e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80063ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80063f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80063f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80063fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	67ba      	str	r2, [r7, #120]	; 0x78
 8006402:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006406:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800640a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800640e:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8006412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	67ba      	str	r2, [r7, #120]	; 0x78
 8006418:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800641c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006424:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8006428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800642a:	1d1a      	adds	r2, r3, #4
 800642c:	673a      	str	r2, [r7, #112]	; 0x70
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8006432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006434:	1d1a      	adds	r2, r3, #4
 8006436:	673a      	str	r2, [r7, #112]	; 0x70
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 800643c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006440:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006448:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800644c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006450:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006458:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800645c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006460:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006468:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800646c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006470:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006478:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 800647c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	677a      	str	r2, [r7, #116]	; 0x74
 8006482:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006486:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800648a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800648e:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8006492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	677a      	str	r2, [r7, #116]	; 0x74
 8006498:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800649c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80064a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064a4:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 80064a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80064ac:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80064b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80064b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80064bc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80064c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80064c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80064cc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80064d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80064d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80064dc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80064e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	67ba      	str	r2, [r7, #120]	; 0x78
 80064ee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80064f2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80064f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064fa:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80064fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006500:	1d1a      	adds	r2, r3, #4
 8006502:	67ba      	str	r2, [r7, #120]	; 0x78
 8006504:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006508:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800650c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006510:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8006514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006516:	3b01      	subs	r3, #1
 8006518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800651a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651c:	2b00      	cmp	r3, #0
 800651e:	f47f ae45 	bne.w	80061ac <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8006522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006524:	b299      	uxth	r1, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	2302      	movs	r3, #2
 800652c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800652e:	f000 fef1 	bl	8007314 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8006532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006534:	b299      	uxth	r1, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	2302      	movs	r3, #2
 800653c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800653e:	f000 fee9 	bl	8007314 <arm_radix8_butterfly_f32>
}
 8006542:	bf00      	nop
 8006544:	3780      	adds	r7, #128	; 0x80
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b0ac      	sub	sp, #176	; 0xb0
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8006560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	4413      	add	r3, r2
 800656a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800656e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006578:	4413      	add	r3, r2
 800657a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800657e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006588:	4413      	add	r3, r2
 800658a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8006592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006596:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8006598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800659c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800659e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065a2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80065a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065a8:	3b04      	subs	r3, #4
 80065aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80065ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065b2:	3b04      	subs	r3, #4
 80065b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80065b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065bc:	3b04      	subs	r3, #4
 80065be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80065c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80065cc:	4413      	add	r3, r2
 80065ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80065ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80065f4:	2302      	movs	r3, #2
 80065f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80065f8:	2304      	movs	r3, #4
 80065fa:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80065fc:	2306      	movs	r3, #6
 80065fe:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	ed93 7a00 	vldr	s14, [r3]
 8006606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660a:	edd3 7a00 	vldr	s15, [r3]
 800660e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006612:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	ed93 7a00 	vldr	s14, [r3]
 800661c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006620:	edd3 7a00 	vldr	s15, [r3]
 8006624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006628:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	3304      	adds	r3, #4
 8006630:	ed93 7a00 	vldr	s14, [r3]
 8006634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006638:	3304      	adds	r3, #4
 800663a:	edd3 7a00 	vldr	s15, [r3]
 800663e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006642:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	3304      	adds	r3, #4
 800664a:	ed93 7a00 	vldr	s14, [r3]
 800664e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006652:	3304      	adds	r3, #4
 8006654:	edd3 7a00 	vldr	s15, [r3]
 8006658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800665c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8006660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006664:	3304      	adds	r3, #4
 8006666:	ed93 7a00 	vldr	s14, [r3]
 800666a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800666e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006676:	3304      	adds	r3, #4
 8006678:	edd3 7a00 	vldr	s15, [r3]
 800667c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006680:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8006684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006688:	edd3 7a00 	vldr	s15, [r3]
 800668c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006698:	edd3 7a00 	vldr	s15, [r3]
 800669c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80066a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066a8:	edd3 7a00 	vldr	s15, [r3]
 80066ac:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80066b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066b8:	edd3 7a00 	vldr	s15, [r3]
 80066bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066c0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80066c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066c8:	3304      	adds	r3, #4
 80066ca:	edd3 7a00 	vldr	s15, [r3]
 80066ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80066d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066da:	3304      	adds	r3, #4
 80066dc:	edd3 7a00 	vldr	s15, [r3]
 80066e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e4:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80066e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066ec:	3304      	adds	r3, #4
 80066ee:	edd3 7a00 	vldr	s15, [r3]
 80066f2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80066f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066fe:	3304      	adds	r3, #4
 8006700:	edd3 7a00 	vldr	s15, [r3]
 8006704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006708:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800670c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006710:	ed93 7a00 	vldr	s14, [r3]
 8006714:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800671c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006728:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800672c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006730:	ed93 7a00 	vldr	s14, [r3]
 8006734:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800673c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006740:	edd3 7a00 	vldr	s15, [r3]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	1d1a      	adds	r2, r3, #4
 8006748:	603a      	str	r2, [r7, #0]
 800674a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800674e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8006752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006756:	3304      	adds	r3, #4
 8006758:	ed93 7a00 	vldr	s14, [r3]
 800675c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006768:	3304      	adds	r3, #4
 800676a:	edd3 7a00 	vldr	s15, [r3]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	1d1a      	adds	r2, r3, #4
 8006772:	603a      	str	r2, [r7, #0]
 8006774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006778:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800677c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006780:	1d1a      	adds	r2, r3, #4
 8006782:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006788:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800678a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800678e:	1d1a      	adds	r2, r3, #4
 8006790:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006796:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8006798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80067a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80067b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067b8:	1d1a      	adds	r2, r3, #4
 80067ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80067c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067c6:	1d1a      	adds	r2, r3, #4
 80067c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80067d8:	4413      	add	r3, r2
 80067da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80067de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80067e6:	4413      	add	r3, r2
 80067e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80067ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067f4:	4413      	add	r3, r2
 80067f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80067fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067fe:	3b02      	subs	r3, #2
 8006800:	085b      	lsrs	r3, r3, #1
 8006802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006806:	e31a      	b.n	8006e3e <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	ed93 7a00 	vldr	s14, [r3]
 800680e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006812:	edd3 7a00 	vldr	s15, [r3]
 8006816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800681a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	ed93 7a00 	vldr	s14, [r3]
 8006824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006828:	edd3 7a00 	vldr	s15, [r3]
 800682c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006830:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	3304      	adds	r3, #4
 8006838:	ed93 7a00 	vldr	s14, [r3]
 800683c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006840:	3304      	adds	r3, #4
 8006842:	edd3 7a00 	vldr	s15, [r3]
 8006846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800684a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	3304      	adds	r3, #4
 8006852:	ed93 7a00 	vldr	s14, [r3]
 8006856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800685a:	3304      	adds	r3, #4
 800685c:	edd3 7a00 	vldr	s15, [r3]
 8006860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006864:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8006868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800686c:	3304      	adds	r3, #4
 800686e:	ed93 7a00 	vldr	s14, [r3]
 8006872:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800687a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800687e:	3304      	adds	r3, #4
 8006880:	edd3 7a00 	vldr	s15, [r3]
 8006884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006888:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800688c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006890:	edd3 7a00 	vldr	s15, [r3]
 8006894:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800689c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068a0:	edd3 7a00 	vldr	s15, [r3]
 80068a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80068ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068b0:	edd3 7a00 	vldr	s15, [r3]
 80068b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80068b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068c0:	edd3 7a00 	vldr	s15, [r3]
 80068c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068c8:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80068cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068d0:	3304      	adds	r3, #4
 80068d2:	edd3 7a00 	vldr	s15, [r3]
 80068d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80068da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e2:	3304      	adds	r3, #4
 80068e4:	edd3 7a00 	vldr	s15, [r3]
 80068e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ec:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80068f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068f4:	3304      	adds	r3, #4
 80068f6:	edd3 7a00 	vldr	s15, [r3]
 80068fa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80068fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006902:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006906:	3304      	adds	r3, #4
 8006908:	edd3 7a00 	vldr	s15, [r3]
 800690c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006910:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006918:	ed93 7a00 	vldr	s14, [r3]
 800691c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006928:	edd3 7a00 	vldr	s15, [r3]
 800692c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006930:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006938:	ed93 7a00 	vldr	s14, [r3]
 800693c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006948:	edd3 7a00 	vldr	s15, [r3]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	603a      	str	r2, [r7, #0]
 8006952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006956:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 800695a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800695e:	3304      	adds	r3, #4
 8006960:	ed93 7a00 	vldr	s14, [r3]
 8006964:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800696c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006970:	3304      	adds	r3, #4
 8006972:	edd3 7a00 	vldr	s15, [r3]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	1d1a      	adds	r2, r3, #4
 800697a:	603a      	str	r2, [r7, #0]
 800697c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006980:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8006984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006988:	3b04      	subs	r3, #4
 800698a:	ed93 7a00 	vldr	s14, [r3]
 800698e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006992:	3b04      	subs	r3, #4
 8006994:	edd3 7a00 	vldr	s15, [r3]
 8006998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800699c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80069a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069a4:	3b04      	subs	r3, #4
 80069a6:	ed93 7a00 	vldr	s14, [r3]
 80069aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069ae:	3b04      	subs	r3, #4
 80069b0:	edd3 7a00 	vldr	s15, [r3]
 80069b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80069bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069c0:	ed93 7a00 	vldr	s14, [r3]
 80069c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069c8:	edd3 7a00 	vldr	s15, [r3]
 80069cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069d0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80069d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069d8:	ed93 7a00 	vldr	s14, [r3]
 80069dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069e0:	edd3 7a00 	vldr	s15, [r3]
 80069e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069e8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80069ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069f0:	ed93 7a00 	vldr	s14, [r3]
 80069f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069f8:	edd3 7a00 	vldr	s15, [r3]
 80069fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a00:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8006a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a10:	ed93 7a00 	vldr	s14, [r3]
 8006a14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a18:	edd3 7a00 	vldr	s15, [r3]
 8006a1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a24:	3b04      	subs	r3, #4
 8006a26:	edd3 7a00 	vldr	s15, [r3]
 8006a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a32:	3b04      	subs	r3, #4
 8006a34:	edd3 7a00 	vldr	s15, [r3]
 8006a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a3c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8006a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a44:	3b04      	subs	r3, #4
 8006a46:	edd3 7a00 	vldr	s15, [r3]
 8006a4a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a56:	3b04      	subs	r3, #4
 8006a58:	edd3 7a00 	vldr	s15, [r3]
 8006a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8006a64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a68:	edd3 7a00 	vldr	s15, [r3]
 8006a6c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a78:	edd3 7a00 	vldr	s15, [r3]
 8006a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8006a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a88:	ed93 7a00 	vldr	s14, [r3]
 8006a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a90:	edd3 7a00 	vldr	s15, [r3]
 8006a94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a98:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aa0:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8006aa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aa8:	3b04      	subs	r3, #4
 8006aaa:	ed93 7a00 	vldr	s14, [r3]
 8006aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	edd3 7a00 	vldr	s15, [r3]
 8006ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006abc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac4:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8006ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006acc:	ed93 7a00 	vldr	s14, [r3]
 8006ad0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006adc:	edd3 7a00 	vldr	s15, [r3]
 8006ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ae4:	1f1a      	subs	r2, r3, #4
 8006ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aee:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8006af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006af6:	3b04      	subs	r3, #4
 8006af8:	ed93 7a00 	vldr	s14, [r3]
 8006afc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b08:	3b04      	subs	r3, #4
 8006b0a:	edd3 7a00 	vldr	s15, [r3]
 8006b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b12:	1f1a      	subs	r2, r3, #4
 8006b14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b1c:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8006b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b24:	1d1a      	adds	r2, r3, #4
 8006b26:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8006b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b32:	1d1a      	adds	r2, r3, #4
 8006b34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 8006b3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006b40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8006b4c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006b50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8006b5c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006b60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8006b6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006b70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 8006b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b80:	1d1a      	adds	r2, r3, #4
 8006b82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006b86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006b8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b92:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8006b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006ba0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006ba4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bac:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8006bb0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006bb4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bbc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8006bc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006bc4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bcc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8006bd0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006bd4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bdc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8006be0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006be4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 8006bf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bf4:	1f1a      	subs	r2, r3, #4
 8006bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bfa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006bfe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c06:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8006c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c0e:	1f1a      	subs	r2, r3, #4
 8006c10:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c14:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006c18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c20:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8006c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8006c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8006c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8006c42:	edd7 7a07 	vldr	s15, [r7, #28]
 8006c46:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8006c52:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8006c62:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c66:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8006c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8006c76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8006c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c86:	1d1a      	adds	r2, r3, #4
 8006c88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c8c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006c90:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c98:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8006c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ca6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006caa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cb2:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8006cb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006cba:	eef1 7a67 	vneg.f32	s15, s15
 8006cbe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8006cca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006cce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8006cda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006cde:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8006cea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006cee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 8006cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cfe:	1f1a      	subs	r2, r3, #4
 8006d00:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d04:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006d08:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d10:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8006d14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d18:	1f1a      	subs	r2, r3, #4
 8006d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d1e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006d22:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d2a:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8006d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8006d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8006d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d46:	4413      	add	r3, r2
 8006d48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8006d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d50:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d58:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8006d5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d60:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8006d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d78:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8006d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8006d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d90:	1d1a      	adds	r2, r3, #4
 8006d92:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006d96:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006d9a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006da2:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8006da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006daa:	1d1a      	adds	r2, r3, #4
 8006dac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006db0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006db4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dbc:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8006dc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006dc4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dcc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8006dd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dd4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ddc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8006de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006de4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8006df0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006df4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8006e00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e04:	1f1a      	subs	r2, r3, #4
 8006e06:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8006e0a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006e0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e16:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8006e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e1e:	1f1a      	subs	r2, r3, #4
 8006e20:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8006e24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006e28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e30:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8006e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f47f ace0 	bne.w	8006808 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	ed93 7a00 	vldr	s14, [r3]
 8006e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e52:	edd3 7a00 	vldr	s15, [r3]
 8006e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e5a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	ed93 7a00 	vldr	s14, [r3]
 8006e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e68:	edd3 7a00 	vldr	s15, [r3]
 8006e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e70:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	3304      	adds	r3, #4
 8006e78:	ed93 7a00 	vldr	s14, [r3]
 8006e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e80:	3304      	adds	r3, #4
 8006e82:	edd3 7a00 	vldr	s15, [r3]
 8006e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e8a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	3304      	adds	r3, #4
 8006e92:	ed93 7a00 	vldr	s14, [r3]
 8006e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	edd3 7a00 	vldr	s15, [r3]
 8006ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ea4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8006ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eac:	3304      	adds	r3, #4
 8006eae:	ed93 7a00 	vldr	s14, [r3]
 8006eb2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	edd3 7a00 	vldr	s15, [r3]
 8006ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ec8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8006ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed0:	edd3 7a00 	vldr	s15, [r3]
 8006ed4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006ed8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ee0:	edd3 7a00 	vldr	s15, [r3]
 8006ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ee8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8006eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ef0:	edd3 7a00 	vldr	s15, [r3]
 8006ef4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006ef8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f00:	edd3 7a00 	vldr	s15, [r3]
 8006f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f08:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8006f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f10:	3304      	adds	r3, #4
 8006f12:	edd3 7a00 	vldr	s15, [r3]
 8006f16:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006f1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f22:	3304      	adds	r3, #4
 8006f24:	edd3 7a00 	vldr	s15, [r3]
 8006f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f2c:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8006f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f34:	3304      	adds	r3, #4
 8006f36:	edd3 7a00 	vldr	s15, [r3]
 8006f3a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f46:	3304      	adds	r3, #4
 8006f48:	edd3 7a00 	vldr	s15, [r3]
 8006f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f50:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f58:	ed93 7a00 	vldr	s14, [r3]
 8006f5c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f68:	edd3 7a00 	vldr	s15, [r3]
 8006f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f70:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f78:	ed93 7a00 	vldr	s14, [r3]
 8006f7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f88:	edd3 7a00 	vldr	s15, [r3]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	603a      	str	r2, [r7, #0]
 8006f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f96:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8006f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	ed93 7a00 	vldr	s14, [r3]
 8006fa4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	edd3 7a00 	vldr	s15, [r3]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	1d1a      	adds	r2, r3, #4
 8006fba:	603a      	str	r2, [r7, #0]
 8006fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fc0:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8006fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8006fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8006fd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006fd8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8006fe4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006fe8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8006ff4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006ff8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007000:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8007004:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007008:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800700c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007010:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8007014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007018:	1d1a      	adds	r2, r3, #4
 800701a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800701e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007022:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800702a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800702e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007032:	1d1a      	adds	r2, r3, #4
 8007034:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007038:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800703c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007044:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8007048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8007050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8007058:	edd7 7a07 	vldr	s15, [r7, #28]
 800705c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007064:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8007068:	edd7 7a08 	vldr	s15, [r7, #32]
 800706c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007074:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8007078:	edd7 7a08 	vldr	s15, [r7, #32]
 800707c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007084:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8007088:	edd7 7a07 	vldr	s15, [r7, #28]
 800708c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007094:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8007098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800709c:	1d1a      	adds	r2, r3, #4
 800709e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80070a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80070aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ae:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80070b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80070c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80070c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070c8:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 80070cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80070d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80070dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80070e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80070e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80070ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80070f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80070f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80070fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8007100:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007108:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800710c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007110:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007118:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800711c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007120:	1d1a      	adds	r2, r3, #4
 8007122:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007126:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800712a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800712e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007132:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8007136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800713a:	1d1a      	adds	r2, r3, #4
 800713c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007140:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007144:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800714c:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8007150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007154:	b299      	uxth	r1, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	2304      	movs	r3, #4
 800715c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800715e:	f000 f8d9 	bl	8007314 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8007162:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007166:	b299      	uxth	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	2304      	movs	r3, #4
 800716e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007170:	f000 f8d0 	bl	8007314 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8007174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007178:	b299      	uxth	r1, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	2304      	movs	r3, #4
 8007180:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007182:	f000 f8c7 	bl	8007314 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8007186:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800718a:	b299      	uxth	r1, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	2304      	movs	r3, #4
 8007192:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007194:	f000 f8be 	bl	8007314 <arm_radix8_butterfly_f32>
}
 8007198:	bf00      	nop
 800719a:	37b0      	adds	r7, #176	; 0xb0
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4611      	mov	r1, r2
 80071ac:	461a      	mov	r2, r3
 80071ae:	460b      	mov	r3, r1
 80071b0:	71fb      	strb	r3, [r7, #7]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d117      	bne.n	80071f2 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	3304      	adds	r3, #4
 80071c6:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e00d      	b.n	80071ea <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	edd3 7a00 	vldr	s15, [r3]
 80071d4:	eef1 7a67 	vneg.f32	s15, s15
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	3308      	adds	r3, #8
 80071e2:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	3301      	adds	r3, #1
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d3ed      	bcc.n	80071ce <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f8:	d040      	beq.n	800727c <arm_cfft_f32+0xdc>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007200:	d845      	bhi.n	800728e <arm_cfft_f32+0xee>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007208:	d033      	beq.n	8007272 <arm_cfft_f32+0xd2>
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007210:	d83d      	bhi.n	800728e <arm_cfft_f32+0xee>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007218:	d026      	beq.n	8007268 <arm_cfft_f32+0xc8>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007220:	d835      	bhi.n	800728e <arm_cfft_f32+0xee>
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007228:	d028      	beq.n	800727c <arm_cfft_f32+0xdc>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007230:	d82d      	bhi.n	800728e <arm_cfft_f32+0xee>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007238:	d01b      	beq.n	8007272 <arm_cfft_f32+0xd2>
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007240:	d825      	bhi.n	800728e <arm_cfft_f32+0xee>
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b80      	cmp	r3, #128	; 0x80
 8007246:	d00f      	beq.n	8007268 <arm_cfft_f32+0xc8>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b80      	cmp	r3, #128	; 0x80
 800724c:	d81f      	bhi.n	800728e <arm_cfft_f32+0xee>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	d013      	beq.n	800727c <arm_cfft_f32+0xdc>
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d819      	bhi.n	800728e <arm_cfft_f32+0xee>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b10      	cmp	r3, #16
 800725e:	d003      	beq.n	8007268 <arm_cfft_f32+0xc8>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b20      	cmp	r3, #32
 8007264:	d005      	beq.n	8007272 <arm_cfft_f32+0xd2>
 8007266:	e012      	b.n	800728e <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7fe ff79 	bl	8006162 <arm_cfft_radix8by2_f32>
        break;
 8007270:	e00d      	b.n	800728e <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff f968 	bl	800654a <arm_cfft_radix8by4_f32>
        break;
 800727a:	e008      	b.n	800728e <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	b299      	uxth	r1, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	2301      	movs	r3, #1
 8007286:	68b8      	ldr	r0, [r7, #8]
 8007288:	f000 f844 	bl	8007314 <arm_radix8_butterfly_f32>
        break;
 800728c:	bf00      	nop
    }

    if ( bitReverseFlag )
 800728e:	79bb      	ldrb	r3, [r7, #6]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8999      	ldrh	r1, [r3, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	461a      	mov	r2, r3
 800729e:	68b8      	ldr	r0, [r7, #8]
 80072a0:	f7f8 ffa6 	bl	80001f0 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d130      	bne.n	800730c <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072bc:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	e01c      	b.n	8007304 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	1d1a      	adds	r2, r3, #4
 80072ce:	61ba      	str	r2, [r7, #24]
 80072d0:	ed93 7a00 	vldr	s14, [r3]
 80072d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80072d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072dc:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	edd3 7a00 	vldr	s15, [r3]
 80072e6:	eeb1 7a67 	vneg.f32	s14, s15
 80072ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	3304      	adds	r3, #4
 80072fc:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	3301      	adds	r3, #1
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	429a      	cmp	r2, r3
 800730a:	d3de      	bcc.n	80072ca <arm_cfft_f32+0x12a>
        }
    }
}
 800730c:	bf00      	nop
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8007314:	b480      	push	{r7}
 8007316:	b0bd      	sub	sp, #244	; 0xf4
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	461a      	mov	r2, r3
 8007320:	460b      	mov	r3, r1
 8007322:	817b      	strh	r3, [r7, #10]
 8007324:	4613      	mov	r3, r2
 8007326:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <arm_radix8_butterfly_f32+0x3c>)
 800732a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800732e:	897b      	ldrh	r3, [r7, #10]
 8007330:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007340:	08db      	lsrs	r3, r3, #3
 8007342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800734c:	e002      	b.n	8007354 <arm_radix8_butterfly_f32+0x40>
 800734e:	bf00      	nop
 8007350:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8007354:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735c:	4413      	add	r3, r2
 800735e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8007362:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736a:	4413      	add	r3, r2
 800736c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8007370:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007378:	4413      	add	r3, r2
 800737a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800737e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007386:	4413      	add	r3, r2
 8007388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800738c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007394:	4413      	add	r3, r2
 8007396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800739a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a2:	4413      	add	r3, r2
 80073a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80073a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b0:	4413      	add	r3, r2
 80073b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80073b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	ed93 7a00 	vldr	s14, [r3]
 80073c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	edd3 7a00 	vldr	s15, [r3]
 80073d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073d6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80073da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	ed93 7a00 	vldr	s14, [r3]
 80073e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	edd3 7a00 	vldr	s15, [r3]
 80073f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073fa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80073fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	ed93 7a00 	vldr	s14, [r3]
 800740c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	edd3 7a00 	vldr	s15, [r3]
 800741a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800741e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8007422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	ed93 7a00 	vldr	s14, [r3]
 8007430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	edd3 7a00 	vldr	s15, [r3]
 800743e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007442:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8007446:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	ed93 7a00 	vldr	s14, [r3]
 8007454:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	edd3 7a00 	vldr	s15, [r3]
 8007462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007466:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800746a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	ed93 7a00 	vldr	s14, [r3]
 8007478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	edd3 7a00 	vldr	s15, [r3]
 8007486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800748a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800748e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	ed93 7a00 	vldr	s14, [r3]
 800749c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	edd3 7a00 	vldr	s15, [r3]
 80074aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ae:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80074b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	ed93 7a00 	vldr	s14, [r3]
 80074c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	edd3 7a00 	vldr	s15, [r3]
 80074ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074d2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80074d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80074da:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80074de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074e2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80074e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80074ea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80074ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074f2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80074f6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80074fa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80074fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007502:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8007506:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800750a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800750e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007512:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8007516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007524:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800752c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8007530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800753e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007546:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800754a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3304      	adds	r3, #4
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	ed93 7a00 	vldr	s14, [r3]
 800755a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	3304      	adds	r3, #4
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	edd3 7a00 	vldr	s15, [r3]
 800756a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800756e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8007572:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	3304      	adds	r3, #4
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	ed93 7a00 	vldr	s14, [r3]
 8007582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	3304      	adds	r3, #4
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	edd3 7a00 	vldr	s15, [r3]
 8007592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007596:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800759a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	3304      	adds	r3, #4
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	ed93 7a00 	vldr	s14, [r3]
 80075aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	3304      	adds	r3, #4
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	edd3 7a00 	vldr	s15, [r3]
 80075ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80075c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	3304      	adds	r3, #4
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	ed93 7a00 	vldr	s14, [r3]
 80075d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	3304      	adds	r3, #4
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	edd3 7a00 	vldr	s15, [r3]
 80075e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075e6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80075ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	3304      	adds	r3, #4
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	ed93 7a00 	vldr	s14, [r3]
 80075fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	3304      	adds	r3, #4
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	edd3 7a00 	vldr	s15, [r3]
 800760a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800760e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8007612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	3304      	adds	r3, #4
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	ed93 7a00 	vldr	s14, [r3]
 8007622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	3304      	adds	r3, #4
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	edd3 7a00 	vldr	s15, [r3]
 8007632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007636:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800763a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	3304      	adds	r3, #4
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	ed93 7a00 	vldr	s14, [r3]
 800764a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	3304      	adds	r3, #4
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	edd3 7a00 	vldr	s15, [r3]
 800765a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800765e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8007662:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	3304      	adds	r3, #4
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	ed93 7a00 	vldr	s14, [r3]
 8007672:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	3304      	adds	r3, #4
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	edd3 7a00 	vldr	s15, [r3]
 8007682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007686:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800768a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800768e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007696:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800769a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800769e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80076a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80076aa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80076ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80076b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076b6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80076ba:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80076be:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80076c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076c6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80076ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	3304      	adds	r3, #4
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80076da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80076de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80076e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	3304      	adds	r3, #4
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80076f6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80076fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8007702:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007710:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007718:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800771c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800772a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800772e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007732:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8007736:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	3304      	adds	r3, #4
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007746:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800774a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800774e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8007752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	3304      	adds	r3, #4
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007762:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800776a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800776e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007772:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800777a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800777e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007782:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8007786:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800778a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800778e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007792:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800779e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80077a2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80077a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80077b6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80077ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80077be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80077ce:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80077d2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80077d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80077de:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80077e2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80077e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077ea:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80077ee:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80077f2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80077f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077fa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80077fe:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007802:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8007806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800780a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800780e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007812:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800781a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800781e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007822:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800782a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800782e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007832:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800783a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800783e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007842:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800784a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800784e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800785c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007864:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8007868:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007876:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800787a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800787e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8007882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007890:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007898:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800789c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80078aa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80078ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80078b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	3304      	adds	r3, #4
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80078c6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80078ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078ce:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80078d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	3304      	adds	r3, #4
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80078e2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80078e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80078ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	3304      	adds	r3, #4
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80078fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007906:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800790a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	3304      	adds	r3, #4
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800791a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800791e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007922:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8007926:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800792a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800792e:	4413      	add	r3, r2
 8007930:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8007934:	897b      	ldrh	r3, [r7, #10]
 8007936:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800793a:	429a      	cmp	r2, r3
 800793c:	f4ff ad0a 	bcc.w	8007354 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8007940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007944:	2b07      	cmp	r3, #7
 8007946:	f240 84e3 	bls.w	8008310 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8007950:	2301      	movs	r3, #1
 8007952:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8007956:	893b      	ldrh	r3, [r7, #8]
 8007958:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800795c:	4413      	add	r3, r2
 800795e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8007960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007962:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8007966:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800796a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800796c:	4413      	add	r3, r2
 800796e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8007970:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007972:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007974:	4413      	add	r3, r2
 8007976:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8007978:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800797a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800797c:	4413      	add	r3, r2
 800797e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8007980:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007984:	4413      	add	r3, r2
 8007986:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8007988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800798a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800798c:	4413      	add	r3, r2
 800798e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8007990:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007992:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007994:	4413      	add	r3, r2
 8007996:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8007998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	4413      	add	r3, r2
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80079a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	4413      	add	r3, r2
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80079b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80079be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80079d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80079e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80079ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	3304      	adds	r3, #4
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80079fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	3304      	adds	r3, #4
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8007a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	3304      	adds	r3, #4
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8007a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	3304      	adds	r3, #4
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	4413      	add	r3, r2
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8007a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8007a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	4413      	add	r3, r2
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8007a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	3304      	adds	r3, #4
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8007a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8007a5a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8007a68:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a70:	4413      	add	r3, r2
 8007a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8007a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7e:	4413      	add	r3, r2
 8007a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8007a84:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8007a92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8007aa0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8007aae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8007abc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	ed93 7a00 	vldr	s14, [r3]
 8007aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	edd3 7a00 	vldr	s15, [r3]
 8007ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007adc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8007ae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	ed93 7a00 	vldr	s14, [r3]
 8007aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	edd3 7a00 	vldr	s15, [r3]
 8007afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b00:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8007b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	ed93 7a00 	vldr	s14, [r3]
 8007b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	edd3 7a00 	vldr	s15, [r3]
 8007b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b24:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8007b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	ed93 7a00 	vldr	s14, [r3]
 8007b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	edd3 7a00 	vldr	s15, [r3]
 8007b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b48:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8007b4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	ed93 7a00 	vldr	s14, [r3]
 8007b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	edd3 7a00 	vldr	s15, [r3]
 8007b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b6c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8007b70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	ed93 7a00 	vldr	s14, [r3]
 8007b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	edd3 7a00 	vldr	s15, [r3]
 8007b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b90:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8007b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	ed93 7a00 	vldr	s14, [r3]
 8007ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	edd3 7a00 	vldr	s15, [r3]
 8007bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bb4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8007bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	ed93 7a00 	vldr	s14, [r3]
 8007bc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	edd3 7a00 	vldr	s15, [r3]
 8007bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bd8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8007bdc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007be0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007be8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8007bec:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007bf0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bf8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8007bfc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007c00:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c08:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8007c0c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007c10:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c18:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8007c1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007c2a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c32:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8007c36:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007c3a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c42:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8007c46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	ed93 7a00 	vldr	s14, [r3]
 8007c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	edd3 7a00 	vldr	s15, [r3]
 8007c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8007c6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	3304      	adds	r3, #4
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	ed93 7a00 	vldr	s14, [r3]
 8007c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	3304      	adds	r3, #4
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	edd3 7a00 	vldr	s15, [r3]
 8007c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c92:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8007c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	ed93 7a00 	vldr	s14, [r3]
 8007ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	3304      	adds	r3, #4
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	edd3 7a00 	vldr	s15, [r3]
 8007cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8007cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	ed93 7a00 	vldr	s14, [r3]
 8007cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4413      	add	r3, r2
 8007cda:	edd3 7a00 	vldr	s15, [r3]
 8007cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ce2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8007ce6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	3304      	adds	r3, #4
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	ed93 7a00 	vldr	s14, [r3]
 8007cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	edd3 7a00 	vldr	s15, [r3]
 8007d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d0a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8007d0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	3304      	adds	r3, #4
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4413      	add	r3, r2
 8007d1a:	ed93 7a00 	vldr	s14, [r3]
 8007d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	3304      	adds	r3, #4
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4413      	add	r3, r2
 8007d2a:	edd3 7a00 	vldr	s15, [r3]
 8007d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d32:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8007d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	ed93 7a00 	vldr	s14, [r3]
 8007d46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	edd3 7a00 	vldr	s15, [r3]
 8007d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d5a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8007d5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	3304      	adds	r3, #4
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	ed93 7a00 	vldr	s14, [r3]
 8007d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	3304      	adds	r3, #4
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	edd3 7a00 	vldr	s15, [r3]
 8007d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d82:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8007d86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007d8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d92:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8007d96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007d9a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8007da6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007daa:	edd7 7a08 	vldr	s15, [r7, #32]
 8007dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007db2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8007db6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007dba:	edd7 7a08 	vldr	s15, [r7, #32]
 8007dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8007dc6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007dca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dd2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8007dd6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007dda:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007de2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8007de6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	3304      	adds	r3, #4
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007df6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dfe:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8007e02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007e06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8007e12:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007e16:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e1e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8007e22:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007e26:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e2e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8007e32:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007e36:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8007e42:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007e46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8007e52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007e56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8007e62:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007e66:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8007e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007e80:	edd7 7a06 	vldr	s15, [r7, #24]
 8007e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e88:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8007e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	3304      	adds	r3, #4
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ea4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8007ea8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007eac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8007eb8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007ebc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8007ec8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007ecc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8007ed8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007edc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8007ee8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	ed97 7a07 	vldr	s14, [r7, #28]
 8007ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8007efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007efe:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8007f02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	3304      	adds	r3, #4
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f1a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8007f1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007f22:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8007f2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007f32:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8007f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8007f3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007f42:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8007f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8007f4e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007f52:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8007f5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	ed97 7a07 	vldr	s14, [r7, #28]
 8007f6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f74:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8007f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	3304      	adds	r3, #4
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	ed97 7a05 	vldr	s14, [r7, #20]
 8007f88:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f90:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8007f94:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007f98:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8007fac:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007fb0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fb8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8007fc4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007fc8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fd0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8007fdc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007fe0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fe8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8007ff4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007ff8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008000:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8008004:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008008:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800800c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008010:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8008014:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008018:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800801c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008020:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8008024:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008028:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800802c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008030:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8008034:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008038:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800803c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008040:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8008044:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008048:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800804c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008050:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8008054:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008058:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800805c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008060:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8008064:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008068:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800806c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008070:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8008074:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008078:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800807c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008080:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8008084:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008088:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800808c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008090:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8008094:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008098:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800809c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080a0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80080a4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80080a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80080ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080b0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80080b4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80080b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80080bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80080c4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80080c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80080cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080d0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80080d4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80080d8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80080dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080e0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80080e4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80080e8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80080ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080f0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80080f4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80080f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80080fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008100:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8008104:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008108:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800810c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008110:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8008114:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008118:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800811c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008120:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8008124:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008128:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800812c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008130:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8008134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008142:	edd7 7a06 	vldr	s15, [r7, #24]
 8008146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800814a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800814e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	3304      	adds	r3, #4
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	ed97 7a05 	vldr	s14, [r7, #20]
 800815e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008166:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800816a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800816e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800817a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800817e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008186:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800818a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800818e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800819a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800819e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80081a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80081aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80081b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80081bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081c0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80081c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	3304      	adds	r3, #4
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80081d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80081d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081dc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80081e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80081e4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80081e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ec:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80081f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80081f4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80081f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8008200:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008204:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8008210:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008214:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8008218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8008220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	ed97 7a07 	vldr	s14, [r7, #28]
 800822e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008236:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800823a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	3304      	adds	r3, #4
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	ed97 7a05 	vldr	s14, [r7, #20]
 800824a:	edd7 7a04 	vldr	s15, [r7, #16]
 800824e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008252:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8008256:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800825a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800825e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008262:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8008266:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800826a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800826e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008272:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8008276:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800827a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800827e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008282:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8008286:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800828a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800828e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008292:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8008296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80082a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80082a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082ac:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80082b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	3304      	adds	r3, #4
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4413      	add	r3, r2
 80082bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80082c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80082c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082c8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80082cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80082d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082d4:	4413      	add	r3, r2
 80082d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80082da:	897b      	ldrh	r3, [r7, #10]
 80082dc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80082e0:	429a      	cmp	r2, r3
 80082e2:	f4ff abba 	bcc.w	8007a5a <arm_radix8_butterfly_f32+0x746>

         j++;
 80082e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ea:	3301      	adds	r3, #1
 80082ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80082f0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80082f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f8:	429a      	cmp	r2, r3
 80082fa:	f4ff ab2c 	bcc.w	8007956 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80082fe:	893b      	ldrh	r3, [r7, #8]
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	2b07      	cmp	r3, #7
 800830a:	f63f a813 	bhi.w	8007334 <arm_radix8_butterfly_f32+0x20>
}
 800830e:	e000      	b.n	8008312 <arm_radix8_butterfly_f32+0xffe>
         break;
 8008310:	bf00      	nop
}
 8008312:	bf00      	nop
 8008314:	37f4      	adds	r7, #244	; 0xf4
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop

08008320 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800832a:	2003      	movs	r0, #3
 800832c:	f001 ffbc 	bl	800a2a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008330:	2000      	movs	r0, #0
 8008332:	f000 f80d 	bl	8008350 <HAL_InitTick>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	71fb      	strb	r3, [r7, #7]
 8008340:	e001      	b.n	8008346 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008342:	f7fa fb8b 	bl	8002a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008346:	79fb      	ldrb	r3, [r7, #7]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800835c:	4b17      	ldr	r3, [pc, #92]	; (80083bc <HAL_InitTick+0x6c>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d023      	beq.n	80083ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008364:	4b16      	ldr	r3, [pc, #88]	; (80083c0 <HAL_InitTick+0x70>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b14      	ldr	r3, [pc, #80]	; (80083bc <HAL_InitTick+0x6c>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	4619      	mov	r1, r3
 800836e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008372:	fbb3 f3f1 	udiv	r3, r3, r1
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	4618      	mov	r0, r3
 800837c:	f001 ffd7 	bl	800a32e <HAL_SYSTICK_Config>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10f      	bne.n	80083a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b0f      	cmp	r3, #15
 800838a:	d809      	bhi.n	80083a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800838c:	2200      	movs	r2, #0
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	f001 ff93 	bl	800a2be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008398:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <HAL_InitTick+0x74>)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	e007      	b.n	80083b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
 80083a4:	e004      	b.n	80083b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	73fb      	strb	r3, [r7, #15]
 80083aa:	e001      	b.n	80083b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200000d8 	.word	0x200000d8
 80083c0:	20000004 	.word	0x20000004
 80083c4:	200000d4 	.word	0x200000d4

080083c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80083cc:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <HAL_IncTick+0x20>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	4b06      	ldr	r3, [pc, #24]	; (80083ec <HAL_IncTick+0x24>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4413      	add	r3, r2
 80083d8:	4a04      	ldr	r2, [pc, #16]	; (80083ec <HAL_IncTick+0x24>)
 80083da:	6013      	str	r3, [r2, #0]
}
 80083dc:	bf00      	nop
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	200000d8 	.word	0x200000d8
 80083ec:	2000cb38 	.word	0x2000cb38

080083f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  return uwTick;
 80083f4:	4b03      	ldr	r3, [pc, #12]	; (8008404 <HAL_GetTick+0x14>)
 80083f6:	681b      	ldr	r3, [r3, #0]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000cb38 	.word	0x2000cb38

08008408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008410:	f7ff ffee 	bl	80083f0 <HAL_GetTick>
 8008414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008420:	d005      	beq.n	800842e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008422:	4b0a      	ldr	r3, [pc, #40]	; (800844c <HAL_Delay+0x44>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800842e:	bf00      	nop
 8008430:	f7ff ffde 	bl	80083f0 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	429a      	cmp	r2, r3
 800843e:	d8f7      	bhi.n	8008430 <HAL_Delay+0x28>
  {
  }
}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200000d8 	.word	0x200000d8

08008450 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8008458:	4b06      	ldr	r3, [pc, #24]	; (8008474 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f023 0204 	bic.w	r2, r3, #4
 8008460:	4904      	ldr	r1, [pc, #16]	; (8008474 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	40010030 	.word	0x40010030

08008478 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8008480:	4b06      	ldr	r3, [pc, #24]	; (800849c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f023 0202 	bic.w	r2, r3, #2
 8008488:	4904      	ldr	r1, [pc, #16]	; (800849c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4313      	orrs	r3, r2
 800848e:	600b      	str	r3, [r1, #0]
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	40010030 	.word	0x40010030

080084a0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80084a6:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a0e      	ldr	r2, [pc, #56]	; (80084e4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084b2:	f7ff ff9d 	bl	80083f0 <HAL_GetTick>
 80084b6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80084b8:	e008      	b.n	80084cc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80084ba:	f7ff ff99 	bl	80083f0 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b0a      	cmp	r3, #10
 80084c6:	d901      	bls.n	80084cc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e006      	b.n	80084da <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0f0      	beq.n	80084ba <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40010030 	.word	0x40010030

080084e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	609a      	str	r2, [r3, #8]
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	431a      	orrs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	609a      	str	r2, [r3, #8]
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3360      	adds	r3, #96	; 0x60
 8008562:	461a      	mov	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	4b08      	ldr	r3, [pc, #32]	; (8008594 <LL_ADC_SetOffset+0x44>)
 8008572:	4013      	ands	r3, r2
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	03fff000 	.word	0x03fff000

08008598 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3360      	adds	r3, #96	; 0x60
 80085a6:	461a      	mov	r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3360      	adds	r3, #96	; 0x60
 80085d4:	461a      	mov	r2, r3
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	615a      	str	r2, [r3, #20]
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008646:	b480      	push	{r7}
 8008648:	b087      	sub	sp, #28
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3330      	adds	r3, #48	; 0x30
 8008656:	461a      	mov	r2, r3
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	0a1b      	lsrs	r3, r3, #8
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	f003 030c 	and.w	r3, r3, #12
 8008662:	4413      	add	r3, r2
 8008664:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f003 031f 	and.w	r3, r3, #31
 8008670:	211f      	movs	r1, #31
 8008672:	fa01 f303 	lsl.w	r3, r1, r3
 8008676:	43db      	mvns	r3, r3
 8008678:	401a      	ands	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	0e9b      	lsrs	r3, r3, #26
 800867e:	f003 011f 	and.w	r1, r3, #31
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	fa01 f303 	lsl.w	r3, r1, r3
 800868c:	431a      	orrs	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3314      	adds	r3, #20
 80086d4:	461a      	mov	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	0e5b      	lsrs	r3, r3, #25
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	4413      	add	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	0d1b      	lsrs	r3, r3, #20
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	2107      	movs	r1, #7
 80086f2:	fa01 f303 	lsl.w	r3, r1, r3
 80086f6:	43db      	mvns	r3, r3
 80086f8:	401a      	ands	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	0d1b      	lsrs	r3, r3, #20
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	fa01 f303 	lsl.w	r3, r1, r3
 8008708:	431a      	orrs	r2, r3
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
	...

0800871c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008734:	43db      	mvns	r3, r3
 8008736:	401a      	ands	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f003 0318 	and.w	r3, r3, #24
 800873e:	4908      	ldr	r1, [pc, #32]	; (8008760 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008740:	40d9      	lsrs	r1, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	400b      	ands	r3, r1
 8008746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800874a:	431a      	orrs	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	0007ffff 	.word	0x0007ffff

08008764 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 031f 	and.w	r3, r3, #31
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80087ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6093      	str	r3, [r2, #8]
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d4:	d101      	bne.n	80087da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80087f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008824:	d101      	bne.n	800882a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008826:	2301      	movs	r3, #1
 8008828:	e000      	b.n	800882c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008848:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800884c:	f043 0201 	orr.w	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008874:	f043 0202 	orr.w	r2, r3, #2
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <LL_ADC_IsEnabled+0x18>
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <LL_ADC_IsEnabled+0x1a>
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d101      	bne.n	80088c6 <LL_ADC_IsDisableOngoing+0x18>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <LL_ADC_IsDisableOngoing+0x1a>
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088e8:	f043 0204 	orr.w	r2, r3, #4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800890c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008910:	f043 0210 	orr.w	r2, r3, #16
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b04      	cmp	r3, #4
 8008936:	d101      	bne.n	800893c <LL_ADC_REG_IsConversionOngoing+0x18>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800895a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800895e:	f043 0220 	orr.w	r2, r3, #32
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b08      	cmp	r3, #8
 8008984:	d101      	bne.n	800898a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b089      	sub	sp, #36	; 0x24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e139      	b.n	8008c26 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d109      	bne.n	80089d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7f8 fba5 	bl	8001110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff fef1 	bl	80087c0 <LL_ADC_IsDeepPowerDownEnabled>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fed7 	bl	800879c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff ff0c 	bl	8008810 <LL_ADC_IsInternalRegulatorEnabled>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d115      	bne.n	8008a2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fef0 	bl	80087e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a08:	4b89      	ldr	r3, [pc, #548]	; (8008c30 <HAL_ADC_Init+0x298>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	099b      	lsrs	r3, r3, #6
 8008a0e:	4a89      	ldr	r2, [pc, #548]	; (8008c34 <HAL_ADC_Init+0x29c>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	099b      	lsrs	r3, r3, #6
 8008a16:	3301      	adds	r3, #1
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008a1c:	e002      	b.n	8008a24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1f9      	bne.n	8008a1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff feee 	bl	8008810 <LL_ADC_IsInternalRegulatorEnabled>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10d      	bne.n	8008a56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3e:	f043 0210 	orr.w	r2, r3, #16
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4a:	f043 0201 	orr.w	r2, r3, #1
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff ff62 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 8008a60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f040 80d2 	bne.w	8008c14 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 80ce 	bne.w	8008c14 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008a80:	f043 0202 	orr.w	r2, r3, #2
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7ff fefb 	bl	8008888 <LL_ADC_IsEnabled>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d115      	bne.n	8008ac4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a98:	4867      	ldr	r0, [pc, #412]	; (8008c38 <HAL_ADC_Init+0x2a0>)
 8008a9a:	f7ff fef5 	bl	8008888 <LL_ADC_IsEnabled>
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4866      	ldr	r0, [pc, #408]	; (8008c3c <HAL_ADC_Init+0x2a4>)
 8008aa2:	f7ff fef1 	bl	8008888 <LL_ADC_IsEnabled>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	431c      	orrs	r4, r3
 8008aaa:	4865      	ldr	r0, [pc, #404]	; (8008c40 <HAL_ADC_Init+0x2a8>)
 8008aac:	f7ff feec 	bl	8008888 <LL_ADC_IsEnabled>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4323      	orrs	r3, r4
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4619      	mov	r1, r3
 8008abe:	4861      	ldr	r0, [pc, #388]	; (8008c44 <HAL_ADC_Init+0x2ac>)
 8008ac0:	f7ff fd12 	bl	80084e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7e5b      	ldrb	r3, [r3, #25]
 8008ac8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ace:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008ad4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008ada:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ae2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d106      	bne.n	8008b00 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	3b01      	subs	r3, #1
 8008af8:	045b      	lsls	r3, r3, #17
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d009      	beq.n	8008b1c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	4b49      	ldr	r3, [pc, #292]	; (8008c48 <HAL_ADC_Init+0x2b0>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	6812      	ldr	r2, [r2, #0]
 8008b2a:	69b9      	ldr	r1, [r7, #24]
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff fef5 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 8008b3a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff ff16 	bl	8008972 <LL_ADC_INJ_IsConversionOngoing>
 8008b46:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d140      	bne.n	8008bd0 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d13d      	bne.n	8008bd0 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	7e1b      	ldrb	r3, [r3, #24]
 8008b5c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008b5e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b66:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b76:	f023 0306 	bic.w	r3, r3, #6
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	69b9      	ldr	r1, [r7, #24]
 8008b80:	430b      	orrs	r3, r1
 8008b82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d118      	bne.n	8008bc0 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b98:	f023 0304 	bic.w	r3, r3, #4
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008ba4:	4311      	orrs	r1, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008baa:	4311      	orrs	r1, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0201 	orr.w	r2, r2, #1
 8008bbc:	611a      	str	r2, [r3, #16]
 8008bbe:	e007      	b.n	8008bd0 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691a      	ldr	r2, [r3, #16]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0201 	bic.w	r2, r2, #1
 8008bce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d10c      	bne.n	8008bf2 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	f023 010f 	bic.w	r1, r3, #15
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	1e5a      	subs	r2, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
 8008bf0:	e007      	b.n	8008c02 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 020f 	bic.w	r2, r2, #15
 8008c00:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c06:	f023 0303 	bic.w	r3, r3, #3
 8008c0a:	f043 0201 	orr.w	r2, r3, #1
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	659a      	str	r2, [r3, #88]	; 0x58
 8008c12:	e007      	b.n	8008c24 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	f043 0210 	orr.w	r2, r3, #16
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3724      	adds	r7, #36	; 0x24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd90      	pop	{r4, r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000004 	.word	0x20000004
 8008c34:	053e2d63 	.word	0x053e2d63
 8008c38:	50040000 	.word	0x50040000
 8008c3c:	50040100 	.word	0x50040100
 8008c40:	50040200 	.word	0x50040200
 8008c44:	50040300 	.word	0x50040300
 8008c48:	fff0c007 	.word	0xfff0c007

08008c4c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008c54:	4893      	ldr	r0, [pc, #588]	; (8008ea4 <HAL_ADC_Start_IT+0x258>)
 8008c56:	f7ff fd85 	bl	8008764 <LL_ADC_GetMultimode>
 8008c5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff fe5f 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f040 8111 	bne.w	8008e90 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_ADC_Start_IT+0x30>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e10e      	b.n	8008e9a <HAL_ADC_Start_IT+0x24e>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 f851 	bl	8009d2c <ADC_Enable>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f040 80f8 	bne.w	8008e86 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a7e      	ldr	r2, [pc, #504]	; (8008ea8 <HAL_ADC_Start_IT+0x25c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d002      	beq.n	8008cba <HAL_ADC_Start_IT+0x6e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	e000      	b.n	8008cbc <HAL_ADC_Start_IT+0x70>
 8008cba:	4b7c      	ldr	r3, [pc, #496]	; (8008eac <HAL_ADC_Start_IT+0x260>)
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6812      	ldr	r2, [r2, #0]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d002      	beq.n	8008cca <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d105      	bne.n	8008cd6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d006      	beq.n	8008cf0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce6:	f023 0206 	bic.w	r2, r3, #6
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	65da      	str	r2, [r3, #92]	; 0x5c
 8008cee:	e002      	b.n	8008cf6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	221c      	movs	r2, #28
 8008cfc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 021c 	bic.w	r2, r2, #28
 8008d14:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d108      	bne.n	8008d30 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f042 0208 	orr.w	r2, r2, #8
 8008d2c:	605a      	str	r2, [r3, #4]
          break;
 8008d2e:	e008      	b.n	8008d42 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0204 	orr.w	r2, r2, #4
 8008d3e:	605a      	str	r2, [r3, #4]
          break;
 8008d40:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f042 0210 	orr.w	r2, r2, #16
 8008d58:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a52      	ldr	r2, [pc, #328]	; (8008ea8 <HAL_ADC_Start_IT+0x25c>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d002      	beq.n	8008d6a <HAL_ADC_Start_IT+0x11e>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	e000      	b.n	8008d6c <HAL_ADC_Start_IT+0x120>
 8008d6a:	4b50      	ldr	r3, [pc, #320]	; (8008eac <HAL_ADC_Start_IT+0x260>)
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d008      	beq.n	8008d86 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	d002      	beq.n	8008d86 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d13b      	bne.n	8008dfe <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d02d      	beq.n	8008df0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008d9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d110      	bne.n	8008dce <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0220 	bic.w	r2, r2, #32
 8008dba:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dca:	605a      	str	r2, [r3, #4]
              break;
 8008dcc:	e011      	b.n	8008df2 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ddc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0220 	orr.w	r2, r2, #32
 8008dec:	605a      	str	r2, [r3, #4]
              break;
 8008dee:	e000      	b.n	8008df2 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8008df0:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fd6c 	bl	80088d4 <LL_ADC_REG_StartConversion>
 8008dfc:	e04c      	b.n	8008e98 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a26      	ldr	r2, [pc, #152]	; (8008ea8 <HAL_ADC_Start_IT+0x25c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d002      	beq.n	8008e1a <HAL_ADC_Start_IT+0x1ce>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	e000      	b.n	8008e1c <HAL_ADC_Start_IT+0x1d0>
 8008e1a:	4b24      	ldr	r3, [pc, #144]	; (8008eac <HAL_ADC_Start_IT+0x260>)
 8008e1c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d035      	beq.n	8008e96 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	659a      	str	r2, [r3, #88]	; 0x58
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d110      	bne.n	8008e64 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0220 	bic.w	r2, r2, #32
 8008e50:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e60:	605a      	str	r2, [r3, #4]
              break;
 8008e62:	e019      	b.n	8008e98 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e72:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0220 	orr.w	r2, r2, #32
 8008e82:	605a      	str	r2, [r3, #4]
              break;
 8008e84:	e008      	b.n	8008e98 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008e8e:	e003      	b.n	8008e98 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008e90:	2302      	movs	r3, #2
 8008e92:	75fb      	strb	r3, [r7, #23]
 8008e94:	e000      	b.n	8008e98 <HAL_ADC_Start_IT+0x24c>
        }
 8008e96:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	50040300 	.word	0x50040300
 8008ea8:	50040100 	.word	0x50040100
 8008eac:	50040000 	.word	0x50040000

08008eb0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_ADC_Stop_IT+0x16>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e02b      	b.n	8008f1e <HAL_ADC_Stop_IT+0x6e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008ece:	2103      	movs	r1, #3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fe6f 	bl	8009bb4 <ADC_ConversionStop>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d119      	bne.n	8008f14 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 021c 	bic.w	r2, r2, #28
 8008eee:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 ff7d 	bl	8009df0 <ADC_Disable>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f08:	f023 0301 	bic.w	r3, r3, #1
 8008f0c:	f043 0201 	orr.w	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008f48:	2300      	movs	r3, #0
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f5c:	4882      	ldr	r0, [pc, #520]	; (8009168 <HAL_ADC_IRQHandler+0x228>)
 8008f5e:	f7ff fc01 	bl	8008764 <LL_ADC_GetMultimode>
 8008f62:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d017      	beq.n	8008f9e <HAL_ADC_IRQHandler+0x5e>
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d012      	beq.n	8008f9e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f88:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 ffda 	bl	8009f4a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d004      	beq.n	8008fb2 <HAL_ADC_IRQHandler+0x72>
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8083 	beq.w	80090c4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d07d      	beq.n	80090c4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d105      	bne.n	8008fe0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff fb1b 	bl	8008620 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d062      	beq.n	80090b6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a5d      	ldr	r2, [pc, #372]	; (800916c <HAL_ADC_IRQHandler+0x22c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d002      	beq.n	8009000 <HAL_ADC_IRQHandler+0xc0>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	e000      	b.n	8009002 <HAL_ADC_IRQHandler+0xc2>
 8009000:	4b5b      	ldr	r3, [pc, #364]	; (8009170 <HAL_ADC_IRQHandler+0x230>)
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6812      	ldr	r2, [r2, #0]
 8009006:	4293      	cmp	r3, r2
 8009008:	d008      	beq.n	800901c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b05      	cmp	r3, #5
 8009014:	d002      	beq.n	800901c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b09      	cmp	r3, #9
 800901a:	d104      	bne.n	8009026 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	623b      	str	r3, [r7, #32]
 8009024:	e00c      	b.n	8009040 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a50      	ldr	r2, [pc, #320]	; (800916c <HAL_ADC_IRQHandler+0x22c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d002      	beq.n	8009036 <HAL_ADC_IRQHandler+0xf6>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	e000      	b.n	8009038 <HAL_ADC_IRQHandler+0xf8>
 8009036:	4b4e      	ldr	r3, [pc, #312]	; (8009170 <HAL_ADC_IRQHandler+0x230>)
 8009038:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d135      	bne.n	80090b6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b08      	cmp	r3, #8
 8009056:	d12e      	bne.n	80090b6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fc61 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11a      	bne.n	800909e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 020c 	bic.w	r2, r2, #12
 8009076:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800907c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d112      	bne.n	80090b6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009094:	f043 0201 	orr.w	r2, r3, #1
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	659a      	str	r2, [r3, #88]	; 0x58
 800909c:	e00b      	b.n	80090b6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a2:	f043 0210 	orr.w	r2, r3, #16
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ae:	f043 0201 	orr.w	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7f8 feac 	bl	8001e14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	220c      	movs	r2, #12
 80090c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <HAL_ADC_IRQHandler+0x198>
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10b      	bne.n	80090f0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 809f 	beq.w	8009222 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 8099 	beq.w	8009222 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d105      	bne.n	8009108 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009100:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff fac6 	bl	800869e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009112:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fa81 	bl	8008620 <LL_ADC_REG_IsTriggerSourceSWStart>
 800911e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a11      	ldr	r2, [pc, #68]	; (800916c <HAL_ADC_IRQHandler+0x22c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d002      	beq.n	8009130 <HAL_ADC_IRQHandler+0x1f0>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	e000      	b.n	8009132 <HAL_ADC_IRQHandler+0x1f2>
 8009130:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <HAL_ADC_IRQHandler+0x230>)
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6812      	ldr	r2, [r2, #0]
 8009136:	4293      	cmp	r3, r2
 8009138:	d008      	beq.n	800914c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2b06      	cmp	r3, #6
 8009144:	d002      	beq.n	800914c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b07      	cmp	r3, #7
 800914a:	d104      	bne.n	8009156 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	623b      	str	r3, [r7, #32]
 8009154:	e013      	b.n	800917e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a04      	ldr	r2, [pc, #16]	; (800916c <HAL_ADC_IRQHandler+0x22c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d009      	beq.n	8009174 <HAL_ADC_IRQHandler+0x234>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	e007      	b.n	8009176 <HAL_ADC_IRQHandler+0x236>
 8009166:	bf00      	nop
 8009168:	50040300 	.word	0x50040300
 800916c:	50040100 	.word	0x50040100
 8009170:	50040000 	.word	0x50040000
 8009174:	4b7d      	ldr	r3, [pc, #500]	; (800936c <HAL_ADC_IRQHandler+0x42c>)
 8009176:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d047      	beq.n	8009214 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <HAL_ADC_IRQHandler+0x25e>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d03f      	beq.n	8009214 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800919a:	2b00      	cmp	r3, #0
 800919c:	d13a      	bne.n	8009214 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a8:	2b40      	cmp	r3, #64	; 0x40
 80091aa:	d133      	bne.n	8009214 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d12e      	bne.n	8009214 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff fbd9 	bl	8008972 <LL_ADC_INJ_IsConversionOngoing>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11a      	bne.n	80091fc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80091d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d112      	bne.n	8009214 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f2:	f043 0201 	orr.w	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	659a      	str	r2, [r3, #88]	; 0x58
 80091fa:	e00b      	b.n	8009214 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009200:	f043 0210 	orr.w	r2, r3, #16
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800920c:	f043 0201 	orr.w	r2, r3, #1
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fe70 	bl	8009efa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2260      	movs	r2, #96	; 0x60
 8009220:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009228:	2b00      	cmp	r3, #0
 800922a:	d011      	beq.n	8009250 <HAL_ADC_IRQHandler+0x310>
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00c      	beq.n	8009250 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f896 	bl	8009374 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2280      	movs	r2, #128	; 0x80
 800924e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009256:	2b00      	cmp	r3, #0
 8009258:	d012      	beq.n	8009280 <HAL_ADC_IRQHandler+0x340>
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00d      	beq.n	8009280 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009268:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fe56 	bl	8009f22 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800927e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009286:	2b00      	cmp	r3, #0
 8009288:	d012      	beq.n	80092b0 <HAL_ADC_IRQHandler+0x370>
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00d      	beq.n	80092b0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fe48 	bl	8009f36 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d036      	beq.n	8009328 <HAL_ADC_IRQHandler+0x3e8>
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d031      	beq.n	8009328 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80092cc:	2301      	movs	r3, #1
 80092ce:	627b      	str	r3, [r7, #36]	; 0x24
 80092d0:	e014      	b.n	80092fc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d008      	beq.n	80092ea <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80092d8:	4825      	ldr	r0, [pc, #148]	; (8009370 <HAL_ADC_IRQHandler+0x430>)
 80092da:	f7ff fa51 	bl	8008780 <LL_ADC_GetMultiDMATransfer>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80092e4:	2301      	movs	r3, #1
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
 80092e8:	e008      	b.n	80092fc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80092f8:	2301      	movs	r3, #1
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d10e      	bne.n	8009320 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009306:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009312:	f043 0202 	orr.w	r2, r3, #2
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f834 	bl	8009388 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2210      	movs	r2, #16
 8009326:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800932e:	2b00      	cmp	r3, #0
 8009330:	d018      	beq.n	8009364 <HAL_ADC_IRQHandler+0x424>
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009338:	2b00      	cmp	r3, #0
 800933a:	d013      	beq.n	8009364 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009340:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800934c:	f043 0208 	orr.w	r2, r3, #8
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800935c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fdd5 	bl	8009f0e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009364:	bf00      	nop
 8009366:	3728      	adds	r7, #40	; 0x28
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	50040000 	.word	0x50040000
 8009370:	50040300 	.word	0x50040300

08009374 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b0b6      	sub	sp, #216	; 0xd8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <HAL_ADC_ConfigChannel+0x22>
 80093ba:	2302      	movs	r3, #2
 80093bc:	e3e3      	b.n	8009b86 <HAL_ADC_ConfigChannel+0x7ea>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff faaa 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 83c4 	bne.w	8009b60 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	2b05      	cmp	r3, #5
 80093de:	d824      	bhi.n	800942a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	3b02      	subs	r3, #2
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d81b      	bhi.n	8009422 <HAL_ADC_ConfigChannel+0x86>
 80093ea:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <HAL_ADC_ConfigChannel+0x54>)
 80093ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f0:	08009401 	.word	0x08009401
 80093f4:	08009409 	.word	0x08009409
 80093f8:	08009411 	.word	0x08009411
 80093fc:	08009419 	.word	0x08009419
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	220c      	movs	r2, #12
 8009404:	605a      	str	r2, [r3, #4]
          break;
 8009406:	e011      	b.n	800942c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2212      	movs	r2, #18
 800940c:	605a      	str	r2, [r3, #4]
          break;
 800940e:	e00d      	b.n	800942c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2218      	movs	r2, #24
 8009414:	605a      	str	r2, [r3, #4]
          break;
 8009416:	e009      	b.n	800942c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800941e:	605a      	str	r2, [r3, #4]
          break;
 8009420:	e004      	b.n	800942c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2206      	movs	r2, #6
 8009426:	605a      	str	r2, [r3, #4]
          break;
 8009428:	e000      	b.n	800942c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800942a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	6859      	ldr	r1, [r3, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	f7ff f904 	bl	8008646 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff fa6e 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 8009448:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff fa8e 	bl	8008972 <LL_ADC_INJ_IsConversionOngoing>
 8009456:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800945a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800945e:	2b00      	cmp	r3, #0
 8009460:	f040 81c1 	bne.w	80097e6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 81bc 	bne.w	80097e6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009476:	d10f      	bne.n	8009498 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2200      	movs	r2, #0
 8009482:	4619      	mov	r1, r3
 8009484:	f7ff f91e 	bl	80086c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff f8b2 	bl	80085fa <LL_ADC_SetSamplingTimeCommonConfig>
 8009496:	e00e      	b.n	80094b6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6818      	ldr	r0, [r3, #0]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	6819      	ldr	r1, [r3, #0]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	461a      	mov	r2, r3
 80094a6:	f7ff f90d 	bl	80086c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2100      	movs	r1, #0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff f8a2 	bl	80085fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	695a      	ldr	r2, [r3, #20]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	08db      	lsrs	r3, r3, #3
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d00a      	beq.n	80094ee <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6818      	ldr	r0, [r3, #0]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	6919      	ldr	r1, [r3, #16]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094e8:	f7ff f832 	bl	8008550 <LL_ADC_SetOffset>
 80094ec:	e17b      	b.n	80097e6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff f84f 	bl	8008598 <LL_ADC_GetOffsetChannel>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <HAL_ADC_ConfigChannel+0x17e>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff f844 	bl	8008598 <LL_ADC_GetOffsetChannel>
 8009510:	4603      	mov	r3, r0
 8009512:	0e9b      	lsrs	r3, r3, #26
 8009514:	f003 021f 	and.w	r2, r3, #31
 8009518:	e01e      	b.n	8009558 <HAL_ADC_ConfigChannel+0x1bc>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff f839 	bl	8008598 <LL_ADC_GetOffsetChannel>
 8009526:	4603      	mov	r3, r0
 8009528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800952c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009530:	fa93 f3a3 	rbit	r3, r3
 8009534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800953c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8009548:	2320      	movs	r3, #32
 800954a:	e004      	b.n	8009556 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800954c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009550:	fab3 f383 	clz	r3, r3
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009560:	2b00      	cmp	r3, #0
 8009562:	d105      	bne.n	8009570 <HAL_ADC_ConfigChannel+0x1d4>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	0e9b      	lsrs	r3, r3, #26
 800956a:	f003 031f 	and.w	r3, r3, #31
 800956e:	e018      	b.n	80095a2 <HAL_ADC_ConfigChannel+0x206>
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800957c:	fa93 f3a3 	rbit	r3, r3
 8009580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8009584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800958c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8009594:	2320      	movs	r3, #32
 8009596:	e004      	b.n	80095a2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8009598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800959c:	fab3 f383 	clz	r3, r3
 80095a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d106      	bne.n	80095b4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2200      	movs	r2, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff f808 	bl	80085c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2101      	movs	r1, #1
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe ffec 	bl	8008598 <LL_ADC_GetOffsetChannel>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <HAL_ADC_ConfigChannel+0x244>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2101      	movs	r1, #1
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe ffe1 	bl	8008598 <LL_ADC_GetOffsetChannel>
 80095d6:	4603      	mov	r3, r0
 80095d8:	0e9b      	lsrs	r3, r3, #26
 80095da:	f003 021f 	and.w	r2, r3, #31
 80095de:	e01e      	b.n	800961e <HAL_ADC_ConfigChannel+0x282>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2101      	movs	r1, #1
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe ffd6 	bl	8008598 <LL_ADC_GetOffsetChannel>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095f6:	fa93 f3a3 	rbit	r3, r3
 80095fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80095fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8009606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800960e:	2320      	movs	r3, #32
 8009610:	e004      	b.n	800961c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8009612:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009616:	fab3 f383 	clz	r3, r3
 800961a:	b2db      	uxtb	r3, r3
 800961c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <HAL_ADC_ConfigChannel+0x29a>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	0e9b      	lsrs	r3, r3, #26
 8009630:	f003 031f 	and.w	r3, r3, #31
 8009634:	e018      	b.n	8009668 <HAL_ADC_ConfigChannel+0x2cc>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800963e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009642:	fa93 f3a3 	rbit	r3, r3
 8009646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800964a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800964e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8009652:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800965a:	2320      	movs	r3, #32
 800965c:	e004      	b.n	8009668 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800965e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009662:	fab3 f383 	clz	r3, r3
 8009666:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009668:	429a      	cmp	r2, r3
 800966a:	d106      	bne.n	800967a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	2101      	movs	r1, #1
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe ffa5 	bl	80085c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2102      	movs	r1, #2
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe ff89 	bl	8008598 <LL_ADC_GetOffsetChannel>
 8009686:	4603      	mov	r3, r0
 8009688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <HAL_ADC_ConfigChannel+0x30a>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2102      	movs	r1, #2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe ff7e 	bl	8008598 <LL_ADC_GetOffsetChannel>
 800969c:	4603      	mov	r3, r0
 800969e:	0e9b      	lsrs	r3, r3, #26
 80096a0:	f003 021f 	and.w	r2, r3, #31
 80096a4:	e01e      	b.n	80096e4 <HAL_ADC_ConfigChannel+0x348>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2102      	movs	r1, #2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fe ff73 	bl	8008598 <LL_ADC_GetOffsetChannel>
 80096b2:	4603      	mov	r3, r0
 80096b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096bc:	fa93 f3a3 	rbit	r3, r3
 80096c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80096c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80096cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80096d4:	2320      	movs	r3, #32
 80096d6:	e004      	b.n	80096e2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80096d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096dc:	fab3 f383 	clz	r3, r3
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d105      	bne.n	80096fc <HAL_ADC_ConfigChannel+0x360>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	0e9b      	lsrs	r3, r3, #26
 80096f6:	f003 031f 	and.w	r3, r3, #31
 80096fa:	e016      	b.n	800972a <HAL_ADC_ConfigChannel+0x38e>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009708:	fa93 f3a3 	rbit	r3, r3
 800970c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800970e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8009714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800971c:	2320      	movs	r3, #32
 800971e:	e004      	b.n	800972a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8009720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009724:	fab3 f383 	clz	r3, r3
 8009728:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800972a:	429a      	cmp	r2, r3
 800972c:	d106      	bne.n	800973c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2200      	movs	r2, #0
 8009734:	2102      	movs	r1, #2
 8009736:	4618      	mov	r0, r3
 8009738:	f7fe ff44 	bl	80085c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2103      	movs	r1, #3
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe ff28 	bl	8008598 <LL_ADC_GetOffsetChannel>
 8009748:	4603      	mov	r3, r0
 800974a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <HAL_ADC_ConfigChannel+0x3cc>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2103      	movs	r1, #3
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe ff1d 	bl	8008598 <LL_ADC_GetOffsetChannel>
 800975e:	4603      	mov	r3, r0
 8009760:	0e9b      	lsrs	r3, r3, #26
 8009762:	f003 021f 	and.w	r2, r3, #31
 8009766:	e017      	b.n	8009798 <HAL_ADC_ConfigChannel+0x3fc>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2103      	movs	r1, #3
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe ff12 	bl	8008598 <LL_ADC_GetOffsetChannel>
 8009774:	4603      	mov	r3, r0
 8009776:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800977a:	fa93 f3a3 	rbit	r3, r3
 800977e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8009780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009782:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8009784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800978a:	2320      	movs	r3, #32
 800978c:	e003      	b.n	8009796 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800978e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009790:	fab3 f383 	clz	r3, r3
 8009794:	b2db      	uxtb	r3, r3
 8009796:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <HAL_ADC_ConfigChannel+0x414>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	0e9b      	lsrs	r3, r3, #26
 80097aa:	f003 031f 	and.w	r3, r3, #31
 80097ae:	e011      	b.n	80097d4 <HAL_ADC_ConfigChannel+0x438>
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097b8:	fa93 f3a3 	rbit	r3, r3
 80097bc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80097be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80097c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80097c8:	2320      	movs	r3, #32
 80097ca:	e003      	b.n	80097d4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80097cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ce:	fab3 f383 	clz	r3, r3
 80097d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d106      	bne.n	80097e6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2200      	movs	r2, #0
 80097de:	2103      	movs	r1, #3
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe feef 	bl	80085c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff f84c 	bl	8008888 <LL_ADC_IsEnabled>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f040 8140 	bne.w	8009a78 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	6819      	ldr	r1, [r3, #0]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	461a      	mov	r2, r3
 8009806:	f7fe ff89 	bl	800871c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	4a8f      	ldr	r2, [pc, #572]	; (8009a4c <HAL_ADC_ConfigChannel+0x6b0>)
 8009810:	4293      	cmp	r3, r2
 8009812:	f040 8131 	bne.w	8009a78 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10b      	bne.n	800983e <HAL_ADC_ConfigChannel+0x4a2>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	0e9b      	lsrs	r3, r3, #26
 800982c:	3301      	adds	r3, #1
 800982e:	f003 031f 	and.w	r3, r3, #31
 8009832:	2b09      	cmp	r3, #9
 8009834:	bf94      	ite	ls
 8009836:	2301      	movls	r3, #1
 8009838:	2300      	movhi	r3, #0
 800983a:	b2db      	uxtb	r3, r3
 800983c:	e019      	b.n	8009872 <HAL_ADC_ConfigChannel+0x4d6>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009846:	fa93 f3a3 	rbit	r3, r3
 800984a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800984c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800984e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8009850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8009856:	2320      	movs	r3, #32
 8009858:	e003      	b.n	8009862 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800985a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800985c:	fab3 f383 	clz	r3, r3
 8009860:	b2db      	uxtb	r3, r3
 8009862:	3301      	adds	r3, #1
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	2b09      	cmp	r3, #9
 800986a:	bf94      	ite	ls
 800986c:	2301      	movls	r3, #1
 800986e:	2300      	movhi	r3, #0
 8009870:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009872:	2b00      	cmp	r3, #0
 8009874:	d079      	beq.n	800996a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800987e:	2b00      	cmp	r3, #0
 8009880:	d107      	bne.n	8009892 <HAL_ADC_ConfigChannel+0x4f6>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	0e9b      	lsrs	r3, r3, #26
 8009888:	3301      	adds	r3, #1
 800988a:	069b      	lsls	r3, r3, #26
 800988c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009890:	e015      	b.n	80098be <HAL_ADC_ConfigChannel+0x522>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800989a:	fa93 f3a3 	rbit	r3, r3
 800989e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80098a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80098a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80098aa:	2320      	movs	r3, #32
 80098ac:	e003      	b.n	80098b6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80098ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b0:	fab3 f383 	clz	r3, r3
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	3301      	adds	r3, #1
 80098b8:	069b      	lsls	r3, r3, #26
 80098ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <HAL_ADC_ConfigChannel+0x542>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	0e9b      	lsrs	r3, r3, #26
 80098d0:	3301      	adds	r3, #1
 80098d2:	f003 031f 	and.w	r3, r3, #31
 80098d6:	2101      	movs	r1, #1
 80098d8:	fa01 f303 	lsl.w	r3, r1, r3
 80098dc:	e017      	b.n	800990e <HAL_ADC_ConfigChannel+0x572>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e6:	fa93 f3a3 	rbit	r3, r3
 80098ea:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80098ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80098f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80098f6:	2320      	movs	r3, #32
 80098f8:	e003      	b.n	8009902 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80098fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098fc:	fab3 f383 	clz	r3, r3
 8009900:	b2db      	uxtb	r3, r3
 8009902:	3301      	adds	r3, #1
 8009904:	f003 031f 	and.w	r3, r3, #31
 8009908:	2101      	movs	r1, #1
 800990a:	fa01 f303 	lsl.w	r3, r1, r3
 800990e:	ea42 0103 	orr.w	r1, r2, r3
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <HAL_ADC_ConfigChannel+0x598>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	0e9b      	lsrs	r3, r3, #26
 8009924:	3301      	adds	r3, #1
 8009926:	f003 021f 	and.w	r2, r3, #31
 800992a:	4613      	mov	r3, r2
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4413      	add	r3, r2
 8009930:	051b      	lsls	r3, r3, #20
 8009932:	e018      	b.n	8009966 <HAL_ADC_ConfigChannel+0x5ca>
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	fa93 f3a3 	rbit	r3, r3
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8009946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800994c:	2320      	movs	r3, #32
 800994e:	e003      	b.n	8009958 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8009950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009952:	fab3 f383 	clz	r3, r3
 8009956:	b2db      	uxtb	r3, r3
 8009958:	3301      	adds	r3, #1
 800995a:	f003 021f 	and.w	r2, r3, #31
 800995e:	4613      	mov	r3, r2
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	4413      	add	r3, r2
 8009964:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009966:	430b      	orrs	r3, r1
 8009968:	e081      	b.n	8009a6e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009972:	2b00      	cmp	r3, #0
 8009974:	d107      	bne.n	8009986 <HAL_ADC_ConfigChannel+0x5ea>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	0e9b      	lsrs	r3, r3, #26
 800997c:	3301      	adds	r3, #1
 800997e:	069b      	lsls	r3, r3, #26
 8009980:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009984:	e015      	b.n	80099b2 <HAL_ADC_ConfigChannel+0x616>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	fa93 f3a3 	rbit	r3, r3
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800999e:	2320      	movs	r3, #32
 80099a0:	e003      	b.n	80099aa <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	fab3 f383 	clz	r3, r3
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	3301      	adds	r3, #1
 80099ac:	069b      	lsls	r3, r3, #26
 80099ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d109      	bne.n	80099d2 <HAL_ADC_ConfigChannel+0x636>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	0e9b      	lsrs	r3, r3, #26
 80099c4:	3301      	adds	r3, #1
 80099c6:	f003 031f 	and.w	r3, r3, #31
 80099ca:	2101      	movs	r1, #1
 80099cc:	fa01 f303 	lsl.w	r3, r1, r3
 80099d0:	e017      	b.n	8009a02 <HAL_ADC_ConfigChannel+0x666>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	fa93 f3a3 	rbit	r3, r3
 80099de:	61fb      	str	r3, [r7, #28]
  return result;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80099ea:	2320      	movs	r3, #32
 80099ec:	e003      	b.n	80099f6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	fab3 f383 	clz	r3, r3
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	3301      	adds	r3, #1
 80099f8:	f003 031f 	and.w	r3, r3, #31
 80099fc:	2101      	movs	r1, #1
 80099fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009a02:	ea42 0103 	orr.w	r1, r2, r3
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10d      	bne.n	8009a2e <HAL_ADC_ConfigChannel+0x692>
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	0e9b      	lsrs	r3, r3, #26
 8009a18:	3301      	adds	r3, #1
 8009a1a:	f003 021f 	and.w	r2, r3, #31
 8009a1e:	4613      	mov	r3, r2
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	4413      	add	r3, r2
 8009a24:	3b1e      	subs	r3, #30
 8009a26:	051b      	lsls	r3, r3, #20
 8009a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a2c:	e01e      	b.n	8009a6c <HAL_ADC_ConfigChannel+0x6d0>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	fa93 f3a3 	rbit	r3, r3
 8009a3a:	613b      	str	r3, [r7, #16]
  return result;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d104      	bne.n	8009a50 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8009a46:	2320      	movs	r3, #32
 8009a48:	e006      	b.n	8009a58 <HAL_ADC_ConfigChannel+0x6bc>
 8009a4a:	bf00      	nop
 8009a4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	fab3 f383 	clz	r3, r3
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	3301      	adds	r3, #1
 8009a5a:	f003 021f 	and.w	r2, r3, #31
 8009a5e:	4613      	mov	r3, r2
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4413      	add	r3, r2
 8009a64:	3b1e      	subs	r3, #30
 8009a66:	051b      	lsls	r3, r3, #20
 8009a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6892      	ldr	r2, [r2, #8]
 8009a72:	4619      	mov	r1, r3
 8009a74:	f7fe fe26 	bl	80086c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	4b44      	ldr	r3, [pc, #272]	; (8009b90 <HAL_ADC_ConfigChannel+0x7f4>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d07a      	beq.n	8009b7a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009a84:	4843      	ldr	r0, [pc, #268]	; (8009b94 <HAL_ADC_ConfigChannel+0x7f8>)
 8009a86:	f7fe fd55 	bl	8008534 <LL_ADC_GetCommonPathInternalCh>
 8009a8a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a41      	ldr	r2, [pc, #260]	; (8009b98 <HAL_ADC_ConfigChannel+0x7fc>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d12c      	bne.n	8009af2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d126      	bne.n	8009af2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a3c      	ldr	r2, [pc, #240]	; (8009b9c <HAL_ADC_ConfigChannel+0x800>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d004      	beq.n	8009ab8 <HAL_ADC_ConfigChannel+0x71c>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a3b      	ldr	r2, [pc, #236]	; (8009ba0 <HAL_ADC_ConfigChannel+0x804>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d15d      	bne.n	8009b74 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4834      	ldr	r0, [pc, #208]	; (8009b94 <HAL_ADC_ConfigChannel+0x7f8>)
 8009ac4:	f7fe fd23 	bl	800850e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009ac8:	4b36      	ldr	r3, [pc, #216]	; (8009ba4 <HAL_ADC_ConfigChannel+0x808>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	099b      	lsrs	r3, r3, #6
 8009ace:	4a36      	ldr	r2, [pc, #216]	; (8009ba8 <HAL_ADC_ConfigChannel+0x80c>)
 8009ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad4:	099b      	lsrs	r3, r3, #6
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	4613      	mov	r3, r2
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009ae2:	e002      	b.n	8009aea <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1f9      	bne.n	8009ae4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009af0:	e040      	b.n	8009b74 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a2d      	ldr	r2, [pc, #180]	; (8009bac <HAL_ADC_ConfigChannel+0x810>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d118      	bne.n	8009b2e <HAL_ADC_ConfigChannel+0x792>
 8009afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d112      	bne.n	8009b2e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a23      	ldr	r2, [pc, #140]	; (8009b9c <HAL_ADC_ConfigChannel+0x800>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d004      	beq.n	8009b1c <HAL_ADC_ConfigChannel+0x780>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a22      	ldr	r2, [pc, #136]	; (8009ba0 <HAL_ADC_ConfigChannel+0x804>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d12d      	bne.n	8009b78 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b24:	4619      	mov	r1, r3
 8009b26:	481b      	ldr	r0, [pc, #108]	; (8009b94 <HAL_ADC_ConfigChannel+0x7f8>)
 8009b28:	f7fe fcf1 	bl	800850e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009b2c:	e024      	b.n	8009b78 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a1f      	ldr	r2, [pc, #124]	; (8009bb0 <HAL_ADC_ConfigChannel+0x814>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d120      	bne.n	8009b7a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d11a      	bne.n	8009b7a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a14      	ldr	r2, [pc, #80]	; (8009b9c <HAL_ADC_ConfigChannel+0x800>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d115      	bne.n	8009b7a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b56:	4619      	mov	r1, r3
 8009b58:	480e      	ldr	r0, [pc, #56]	; (8009b94 <HAL_ADC_ConfigChannel+0x7f8>)
 8009b5a:	f7fe fcd8 	bl	800850e <LL_ADC_SetCommonPathInternalCh>
 8009b5e:	e00c      	b.n	8009b7a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8009b72:	e002      	b.n	8009b7a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009b74:	bf00      	nop
 8009b76:	e000      	b.n	8009b7a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009b78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8009b82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	37d8      	adds	r7, #216	; 0xd8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	80080000 	.word	0x80080000
 8009b94:	50040300 	.word	0x50040300
 8009b98:	c7520000 	.word	0xc7520000
 8009b9c:	50040000 	.word	0x50040000
 8009ba0:	50040200 	.word	0x50040200
 8009ba4:	20000004 	.word	0x20000004
 8009ba8:	053e2d63 	.word	0x053e2d63
 8009bac:	cb840000 	.word	0xcb840000
 8009bb0:	80000001 	.word	0x80000001

08009bb4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe feaa 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 8009bd0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fecb 	bl	8008972 <LL_ADC_INJ_IsConversionOngoing>
 8009bdc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d103      	bne.n	8009bec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 8098 	beq.w	8009d1c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d02a      	beq.n	8009c50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	7e5b      	ldrb	r3, [r3, #25]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d126      	bne.n	8009c50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	7e1b      	ldrb	r3, [r3, #24]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d122      	bne.n	8009c50 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009c0e:	e014      	b.n	8009c3a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	4a45      	ldr	r2, [pc, #276]	; (8009d28 <ADC_ConversionStop+0x174>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d90d      	bls.n	8009c34 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c1c:	f043 0210 	orr.w	r2, r3, #16
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c28:	f043 0201 	orr.w	r2, r3, #1
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e074      	b.n	8009d1e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	3301      	adds	r3, #1
 8009c38:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c44:	2b40      	cmp	r3, #64	; 0x40
 8009c46:	d1e3      	bne.n	8009c10 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2240      	movs	r2, #64	; 0x40
 8009c4e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d014      	beq.n	8009c80 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe fe62 	bl	8008924 <LL_ADC_REG_IsConversionOngoing>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00c      	beq.n	8009c80 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fe1f 	bl	80088ae <LL_ADC_IsDisableOngoing>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d104      	bne.n	8009c80 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fe3e 	bl	80088fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d014      	beq.n	8009cb0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fe71 	bl	8008972 <LL_ADC_INJ_IsConversionOngoing>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00c      	beq.n	8009cb0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fe07 	bl	80088ae <LL_ADC_IsDisableOngoing>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d104      	bne.n	8009cb0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fe4d 	bl	800894a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d005      	beq.n	8009cc2 <ADC_ConversionStop+0x10e>
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d105      	bne.n	8009cc8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009cbc:	230c      	movs	r3, #12
 8009cbe:	617b      	str	r3, [r7, #20]
        break;
 8009cc0:	e005      	b.n	8009cce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	617b      	str	r3, [r7, #20]
        break;
 8009cc6:	e002      	b.n	8009cce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009cc8:	2304      	movs	r3, #4
 8009cca:	617b      	str	r3, [r7, #20]
        break;
 8009ccc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8009cce:	f7fe fb8f 	bl	80083f0 <HAL_GetTick>
 8009cd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009cd4:	e01b      	b.n	8009d0e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009cd6:	f7fe fb8b 	bl	80083f0 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	2b05      	cmp	r3, #5
 8009ce2:	d914      	bls.n	8009d0e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00d      	beq.n	8009d0e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf6:	f043 0210 	orr.w	r2, r3, #16
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d02:	f043 0201 	orr.w	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e007      	b.n	8009d1e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	4013      	ands	r3, r2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1dc      	bne.n	8009cd6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3720      	adds	r7, #32
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	a33fffff 	.word	0xa33fffff

08009d2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fda5 	bl	8008888 <LL_ADC_IsEnabled>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d14d      	bne.n	8009de0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	4b28      	ldr	r3, [pc, #160]	; (8009dec <ADC_Enable+0xc0>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00d      	beq.n	8009d6e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d56:	f043 0210 	orr.w	r2, r3, #16
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d62:	f043 0201 	orr.w	r2, r3, #1
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e039      	b.n	8009de2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fd60 	bl	8008838 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009d78:	f7fe fb3a 	bl	80083f0 <HAL_GetTick>
 8009d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009d7e:	e028      	b.n	8009dd2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fe fd7f 	bl	8008888 <LL_ADC_IsEnabled>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fd4f 	bl	8008838 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009d9a:	f7fe fb29 	bl	80083f0 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d914      	bls.n	8009dd2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d00d      	beq.n	8009dd2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dba:	f043 0210 	orr.w	r2, r3, #16
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc6:	f043 0201 	orr.w	r2, r3, #1
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e007      	b.n	8009de2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d1cf      	bne.n	8009d80 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	8000003f 	.word	0x8000003f

08009df0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe fd56 	bl	80088ae <LL_ADC_IsDisableOngoing>
 8009e02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fd3d 	bl	8008888 <LL_ADC_IsEnabled>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d047      	beq.n	8009ea4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d144      	bne.n	8009ea4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 030d 	and.w	r3, r3, #13
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d10c      	bne.n	8009e42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe fd17 	bl	8008860 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2203      	movs	r2, #3
 8009e38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009e3a:	f7fe fad9 	bl	80083f0 <HAL_GetTick>
 8009e3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e40:	e029      	b.n	8009e96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e46:	f043 0210 	orr.w	r2, r3, #16
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e52:	f043 0201 	orr.w	r2, r3, #1
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e023      	b.n	8009ea6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009e5e:	f7fe fac7 	bl	80083f0 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d914      	bls.n	8009e96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00d      	beq.n	8009e96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7e:	f043 0210 	orr.w	r2, r3, #16
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e8a:	f043 0201 	orr.w	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e007      	b.n	8009ea6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1dc      	bne.n	8009e5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <LL_ADC_IsEnabled>:
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <LL_ADC_IsEnabled+0x18>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e000      	b.n	8009ec8 <LL_ADC_IsEnabled+0x1a>
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <LL_ADC_REG_IsConversionOngoing>:
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d101      	bne.n	8009eec <LL_ADC_REG_IsConversionOngoing+0x18>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009f02:	bf00      	nop
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009f16:	bf00      	nop
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009f2a:	bf00      	nop
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009f52:	bf00      	nop
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
	...

08009f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b0a1      	sub	sp, #132	; 0x84
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d101      	bne.n	8009f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e093      	b.n	800a0a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8009f86:	2300      	movs	r3, #0
 8009f88:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a47      	ldr	r2, [pc, #284]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d102      	bne.n	8009f9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009f98:	4b46      	ldr	r3, [pc, #280]	; (800a0b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e001      	b.n	8009fa2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10b      	bne.n	8009fc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fac:	f043 0220 	orr.w	r2, r3, #32
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e072      	b.n	800a0a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7ff ff86 	bl	8009ed4 <LL_ADC_REG_IsConversionOngoing>
 8009fc8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff ff80 	bl	8009ed4 <LL_ADC_REG_IsConversionOngoing>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d154      	bne.n	800a084 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d151      	bne.n	800a084 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009fe0:	4b35      	ldr	r3, [pc, #212]	; (800a0b8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8009fe2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02c      	beq.n	800a046 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	6859      	ldr	r1, [r3, #4]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ffe:	035b      	lsls	r3, r3, #13
 800a000:	430b      	orrs	r3, r1
 800a002:	431a      	orrs	r2, r3
 800a004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a006:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a008:	4829      	ldr	r0, [pc, #164]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a00a:	f7ff ff50 	bl	8009eae <LL_ADC_IsEnabled>
 800a00e:	4604      	mov	r4, r0
 800a010:	4828      	ldr	r0, [pc, #160]	; (800a0b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a012:	f7ff ff4c 	bl	8009eae <LL_ADC_IsEnabled>
 800a016:	4603      	mov	r3, r0
 800a018:	431c      	orrs	r4, r3
 800a01a:	4828      	ldr	r0, [pc, #160]	; (800a0bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800a01c:	f7ff ff47 	bl	8009eae <LL_ADC_IsEnabled>
 800a020:	4603      	mov	r3, r0
 800a022:	4323      	orrs	r3, r4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d137      	bne.n	800a098 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a030:	f023 030f 	bic.w	r3, r3, #15
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	6811      	ldr	r1, [r2, #0]
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	6892      	ldr	r2, [r2, #8]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	431a      	orrs	r2, r3
 800a040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a042:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a044:	e028      	b.n	800a098 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a04e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a050:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a052:	4817      	ldr	r0, [pc, #92]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a054:	f7ff ff2b 	bl	8009eae <LL_ADC_IsEnabled>
 800a058:	4604      	mov	r4, r0
 800a05a:	4816      	ldr	r0, [pc, #88]	; (800a0b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a05c:	f7ff ff27 	bl	8009eae <LL_ADC_IsEnabled>
 800a060:	4603      	mov	r3, r0
 800a062:	431c      	orrs	r4, r3
 800a064:	4815      	ldr	r0, [pc, #84]	; (800a0bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800a066:	f7ff ff22 	bl	8009eae <LL_ADC_IsEnabled>
 800a06a:	4603      	mov	r3, r0
 800a06c:	4323      	orrs	r3, r4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d112      	bne.n	800a098 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a07a:	f023 030f 	bic.w	r3, r3, #15
 800a07e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a080:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a082:	e009      	b.n	800a098 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a088:	f043 0220 	orr.w	r2, r3, #32
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a096:	e000      	b.n	800a09a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a098:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800a0a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3784      	adds	r7, #132	; 0x84
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd90      	pop	{r4, r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	50040000 	.word	0x50040000
 800a0b4:	50040100 	.word	0x50040100
 800a0b8:	50040300 	.word	0x50040300
 800a0bc:	50040200 	.word	0x50040200

0800a0c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <__NVIC_SetPriorityGrouping+0x44>)
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a0dc:	4013      	ands	r3, r2
 800a0de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a0e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a0ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a0f2:	4a04      	ldr	r2, [pc, #16]	; (800a104 <__NVIC_SetPriorityGrouping+0x44>)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	60d3      	str	r3, [r2, #12]
}
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	e000ed00 	.word	0xe000ed00

0800a108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <__NVIC_GetPriorityGrouping+0x18>)
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	0a1b      	lsrs	r3, r3, #8
 800a112:	f003 0307 	and.w	r3, r3, #7
}
 800a116:	4618      	mov	r0, r3
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	e000ed00 	.word	0xe000ed00

0800a124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	4603      	mov	r3, r0
 800a12c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a12e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a132:	2b00      	cmp	r3, #0
 800a134:	db0b      	blt.n	800a14e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	f003 021f 	and.w	r2, r3, #31
 800a13c:	4907      	ldr	r1, [pc, #28]	; (800a15c <__NVIC_EnableIRQ+0x38>)
 800a13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a142:	095b      	lsrs	r3, r3, #5
 800a144:	2001      	movs	r0, #1
 800a146:	fa00 f202 	lsl.w	r2, r0, r2
 800a14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a14e:	bf00      	nop
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	e000e100 	.word	0xe000e100

0800a160 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a16a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	db12      	blt.n	800a198 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	f003 021f 	and.w	r2, r3, #31
 800a178:	490a      	ldr	r1, [pc, #40]	; (800a1a4 <__NVIC_DisableIRQ+0x44>)
 800a17a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a17e:	095b      	lsrs	r3, r3, #5
 800a180:	2001      	movs	r0, #1
 800a182:	fa00 f202 	lsl.w	r2, r0, r2
 800a186:	3320      	adds	r3, #32
 800a188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a18c:	f3bf 8f4f 	dsb	sy
}
 800a190:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a192:	f3bf 8f6f 	isb	sy
}
 800a196:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	e000e100 	.word	0xe000e100

0800a1a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	db0a      	blt.n	800a1d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	490c      	ldr	r1, [pc, #48]	; (800a1f4 <__NVIC_SetPriority+0x4c>)
 800a1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c6:	0112      	lsls	r2, r2, #4
 800a1c8:	b2d2      	uxtb	r2, r2
 800a1ca:	440b      	add	r3, r1
 800a1cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1d0:	e00a      	b.n	800a1e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	4908      	ldr	r1, [pc, #32]	; (800a1f8 <__NVIC_SetPriority+0x50>)
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	f003 030f 	and.w	r3, r3, #15
 800a1de:	3b04      	subs	r3, #4
 800a1e0:	0112      	lsls	r2, r2, #4
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	761a      	strb	r2, [r3, #24]
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	e000e100 	.word	0xe000e100
 800a1f8:	e000ed00 	.word	0xe000ed00

0800a1fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b089      	sub	sp, #36	; 0x24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f003 0307 	and.w	r3, r3, #7
 800a20e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	f1c3 0307 	rsb	r3, r3, #7
 800a216:	2b04      	cmp	r3, #4
 800a218:	bf28      	it	cs
 800a21a:	2304      	movcs	r3, #4
 800a21c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	3304      	adds	r3, #4
 800a222:	2b06      	cmp	r3, #6
 800a224:	d902      	bls.n	800a22c <NVIC_EncodePriority+0x30>
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	3b03      	subs	r3, #3
 800a22a:	e000      	b.n	800a22e <NVIC_EncodePriority+0x32>
 800a22c:	2300      	movs	r3, #0
 800a22e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	fa02 f303 	lsl.w	r3, r2, r3
 800a23a:	43da      	mvns	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	401a      	ands	r2, r3
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a244:	f04f 31ff 	mov.w	r1, #4294967295
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	fa01 f303 	lsl.w	r3, r1, r3
 800a24e:	43d9      	mvns	r1, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a254:	4313      	orrs	r3, r2
         );
}
 800a256:	4618      	mov	r0, r3
 800a258:	3724      	adds	r7, #36	; 0x24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
	...

0800a264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3b01      	subs	r3, #1
 800a270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a274:	d301      	bcc.n	800a27a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a276:	2301      	movs	r3, #1
 800a278:	e00f      	b.n	800a29a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a27a:	4a0a      	ldr	r2, [pc, #40]	; (800a2a4 <SysTick_Config+0x40>)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3b01      	subs	r3, #1
 800a280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a282:	210f      	movs	r1, #15
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	f7ff ff8e 	bl	800a1a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <SysTick_Config+0x40>)
 800a28e:	2200      	movs	r2, #0
 800a290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a292:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <SysTick_Config+0x40>)
 800a294:	2207      	movs	r2, #7
 800a296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	e000e010 	.word	0xe000e010

0800a2a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff ff05 	bl	800a0c0 <__NVIC_SetPriorityGrouping>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b086      	sub	sp, #24
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a2d0:	f7ff ff1a 	bl	800a108 <__NVIC_GetPriorityGrouping>
 800a2d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	68b9      	ldr	r1, [r7, #8]
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	f7ff ff8e 	bl	800a1fc <NVIC_EncodePriority>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff ff5d 	bl	800a1a8 <__NVIC_SetPriority>
}
 800a2ee:	bf00      	nop
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff ff0d 	bl	800a124 <__NVIC_EnableIRQ>
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	4603      	mov	r3, r0
 800a31a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff ff1d 	bl	800a160 <__NVIC_DisableIRQ>
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7ff ff94 	bl	800a264 <SysTick_Config>
 800a33c:	4603      	mov	r3, r0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e075      	b.n	800a446 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7f6 ff4a 	bl	8001208 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a38a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6819      	ldr	r1, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <HAL_DCMI_Init+0x108>)
 800a3a6:	400b      	ands	r3, r1
 800a3a8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6819      	ldr	r1, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800a3be:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800a3ca:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800a3d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800a3e2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800a3ee:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d112      	bne.n	800a426 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	7f1b      	ldrb	r3, [r3, #28]
 800a404:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	7f5b      	ldrb	r3, [r3, #29]
 800a40a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800a40c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7f9b      	ldrb	r3, [r3, #30]
 800a412:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800a414:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7fdb      	ldrb	r3, [r3, #31]
 800a41c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800a422:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800a424:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f042 021f 	orr.w	r2, r2, #31
 800a434:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	ffe0f007 	.word	0xffe0f007

0800a454 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e0ac      	b.n	800a5c0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f8b2 	bl	800a5d4 <DFSDM_GetChannelFromInstance>
 800a470:	4603      	mov	r3, r0
 800a472:	4a55      	ldr	r2, [pc, #340]	; (800a5c8 <HAL_DFSDM_ChannelInit+0x174>)
 800a474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e09f      	b.n	800a5c0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7f6 ffad 	bl	80013e0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800a486:	4b51      	ldr	r3, [pc, #324]	; (800a5cc <HAL_DFSDM_ChannelInit+0x178>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	4a4f      	ldr	r2, [pc, #316]	; (800a5cc <HAL_DFSDM_ChannelInit+0x178>)
 800a48e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800a490:	4b4e      	ldr	r3, [pc, #312]	; (800a5cc <HAL_DFSDM_ChannelInit+0x178>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d125      	bne.n	800a4e4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800a498:	4b4d      	ldr	r3, [pc, #308]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a4c      	ldr	r2, [pc, #304]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a49e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4a2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800a4a4:	4b4a      	ldr	r3, [pc, #296]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	4948      	ldr	r1, [pc, #288]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800a4b2:	4b47      	ldr	r3, [pc, #284]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a46      	ldr	r2, [pc, #280]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800a4bc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	791b      	ldrb	r3, [r3, #4]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d108      	bne.n	800a4d8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800a4c6:	4b42      	ldr	r3, [pc, #264]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	041b      	lsls	r3, r3, #16
 800a4d2:	493f      	ldr	r1, [pc, #252]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800a4d8:	4b3d      	ldr	r3, [pc, #244]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a3c      	ldr	r2, [pc, #240]	; (800a5d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800a4de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4e2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800a4f2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6819      	ldr	r1, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a502:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800a508:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 020f 	bic.w	r2, r2, #15
 800a520:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6819      	ldr	r1, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800a530:	431a      	orrs	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689a      	ldr	r2, [r3, #8]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800a548:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6899      	ldr	r1, [r3, #8]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	3b01      	subs	r3, #1
 800a55a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f002 0207 	and.w	r2, r2, #7
 800a574:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6859      	ldr	r1, [r3, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800a588:	431a      	orrs	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5a0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 f810 	bl	800a5d4 <DFSDM_GetChannelFromInstance>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	4904      	ldr	r1, [pc, #16]	; (800a5c8 <HAL_DFSDM_ChannelInit+0x174>)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	2000c3e4 	.word	0x2000c3e4
 800a5cc:	2000c3e0 	.word	0x2000c3e0
 800a5d0:	40016000 	.word	0x40016000

0800a5d4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a1c      	ldr	r2, [pc, #112]	; (800a650 <DFSDM_GetChannelFromInstance+0x7c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d102      	bne.n	800a5ea <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	e02b      	b.n	800a642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a19      	ldr	r2, [pc, #100]	; (800a654 <DFSDM_GetChannelFromInstance+0x80>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d102      	bne.n	800a5f8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e024      	b.n	800a642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a17      	ldr	r2, [pc, #92]	; (800a658 <DFSDM_GetChannelFromInstance+0x84>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d102      	bne.n	800a606 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800a600:	2302      	movs	r3, #2
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e01d      	b.n	800a642 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a14      	ldr	r2, [pc, #80]	; (800a65c <DFSDM_GetChannelFromInstance+0x88>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d102      	bne.n	800a614 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800a60e:	2304      	movs	r3, #4
 800a610:	60fb      	str	r3, [r7, #12]
 800a612:	e016      	b.n	800a642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a12      	ldr	r2, [pc, #72]	; (800a660 <DFSDM_GetChannelFromInstance+0x8c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d102      	bne.n	800a622 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800a61c:	2305      	movs	r3, #5
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e00f      	b.n	800a642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a0f      	ldr	r2, [pc, #60]	; (800a664 <DFSDM_GetChannelFromInstance+0x90>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d102      	bne.n	800a630 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800a62a:	2306      	movs	r3, #6
 800a62c:	60fb      	str	r3, [r7, #12]
 800a62e:	e008      	b.n	800a642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a0d      	ldr	r2, [pc, #52]	; (800a668 <DFSDM_GetChannelFromInstance+0x94>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d102      	bne.n	800a63e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800a638:	2307      	movs	r3, #7
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e001      	b.n	800a642 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800a63e:	2303      	movs	r3, #3
 800a640:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800a642:	68fb      	ldr	r3, [r7, #12]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	40016000 	.word	0x40016000
 800a654:	40016020 	.word	0x40016020
 800a658:	40016040 	.word	0x40016040
 800a65c:	40016080 	.word	0x40016080
 800a660:	400160a0 	.word	0x400160a0
 800a664:	400160c0 	.word	0x400160c0
 800a668:	400160e0 	.word	0x400160e0

0800a66c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b02      	cmp	r3, #2
 800a682:	d008      	beq.n	800a696 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2204      	movs	r2, #4
 800a688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e022      	b.n	800a6dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 020e 	bic.w	r2, r2, #14
 800a6a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0201 	bic.w	r2, r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ba:	f003 021c 	and.w	r2, r3, #28
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	fa01 f202 	lsl.w	r2, r1, r2
 800a6c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d005      	beq.n	800a70c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2204      	movs	r2, #4
 800a704:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	73fb      	strb	r3, [r7, #15]
 800a70a:	e029      	b.n	800a760 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 020e 	bic.w	r2, r2, #14
 800a71a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a730:	f003 021c 	and.w	r2, r3, #28
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	2101      	movs	r1, #1
 800a73a:	fa01 f202 	lsl.w	r2, r1, r2
 800a73e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	4798      	blx	r3
    }
  }
  return status;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a77a:	e166      	b.n	800aa4a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	2101      	movs	r1, #1
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	fa01 f303 	lsl.w	r3, r1, r3
 800a788:	4013      	ands	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 8158 	beq.w	800aa44 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d00b      	beq.n	800a7b4 <HAL_GPIO_Init+0x48>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d007      	beq.n	800a7b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a7a8:	2b11      	cmp	r3, #17
 800a7aa:	d003      	beq.n	800a7b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	2b12      	cmp	r3, #18
 800a7b2:	d130      	bne.n	800a816 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	2203      	movs	r2, #3
 800a7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c4:	43db      	mvns	r3, r3
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	68da      	ldr	r2, [r3, #12]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f2:	43db      	mvns	r3, r3
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	091b      	lsrs	r3, r3, #4
 800a800:	f003 0201 	and.w	r2, r3, #1
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	fa02 f303 	lsl.w	r3, r2, r3
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	2203      	movs	r2, #3
 800a822:	fa02 f303 	lsl.w	r3, r2, r3
 800a826:	43db      	mvns	r3, r3
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4013      	ands	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	689a      	ldr	r2, [r3, #8]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	fa02 f303 	lsl.w	r3, r2, r3
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d003      	beq.n	800a856 <HAL_GPIO_Init+0xea>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	2b12      	cmp	r3, #18
 800a854:	d123      	bne.n	800a89e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	08da      	lsrs	r2, r3, #3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	3208      	adds	r2, #8
 800a85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	220f      	movs	r2, #15
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	43db      	mvns	r3, r3
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	4013      	ands	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	691a      	ldr	r2, [r3, #16]
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f003 0307 	and.w	r3, r3, #7
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	fa02 f303 	lsl.w	r3, r2, r3
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	08da      	lsrs	r2, r3, #3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3208      	adds	r2, #8
 800a898:	6939      	ldr	r1, [r7, #16]
 800a89a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	2203      	movs	r2, #3
 800a8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f003 0203 	and.w	r2, r3, #3
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 80b2 	beq.w	800aa44 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8e0:	4b61      	ldr	r3, [pc, #388]	; (800aa68 <HAL_GPIO_Init+0x2fc>)
 800a8e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8e4:	4a60      	ldr	r2, [pc, #384]	; (800aa68 <HAL_GPIO_Init+0x2fc>)
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	6613      	str	r3, [r2, #96]	; 0x60
 800a8ec:	4b5e      	ldr	r3, [pc, #376]	; (800aa68 <HAL_GPIO_Init+0x2fc>)
 800a8ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	60bb      	str	r3, [r7, #8]
 800a8f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a8f8:	4a5c      	ldr	r2, [pc, #368]	; (800aa6c <HAL_GPIO_Init+0x300>)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	089b      	lsrs	r3, r3, #2
 800a8fe:	3302      	adds	r3, #2
 800a900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a904:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f003 0303 	and.w	r3, r3, #3
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	220f      	movs	r2, #15
 800a910:	fa02 f303 	lsl.w	r3, r2, r3
 800a914:	43db      	mvns	r3, r3
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	4013      	ands	r3, r2
 800a91a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a922:	d02b      	beq.n	800a97c <HAL_GPIO_Init+0x210>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a52      	ldr	r2, [pc, #328]	; (800aa70 <HAL_GPIO_Init+0x304>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d025      	beq.n	800a978 <HAL_GPIO_Init+0x20c>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a51      	ldr	r2, [pc, #324]	; (800aa74 <HAL_GPIO_Init+0x308>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d01f      	beq.n	800a974 <HAL_GPIO_Init+0x208>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a50      	ldr	r2, [pc, #320]	; (800aa78 <HAL_GPIO_Init+0x30c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d019      	beq.n	800a970 <HAL_GPIO_Init+0x204>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a4f      	ldr	r2, [pc, #316]	; (800aa7c <HAL_GPIO_Init+0x310>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d013      	beq.n	800a96c <HAL_GPIO_Init+0x200>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a4e      	ldr	r2, [pc, #312]	; (800aa80 <HAL_GPIO_Init+0x314>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00d      	beq.n	800a968 <HAL_GPIO_Init+0x1fc>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a4d      	ldr	r2, [pc, #308]	; (800aa84 <HAL_GPIO_Init+0x318>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d007      	beq.n	800a964 <HAL_GPIO_Init+0x1f8>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a4c      	ldr	r2, [pc, #304]	; (800aa88 <HAL_GPIO_Init+0x31c>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d101      	bne.n	800a960 <HAL_GPIO_Init+0x1f4>
 800a95c:	2307      	movs	r3, #7
 800a95e:	e00e      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a960:	2308      	movs	r3, #8
 800a962:	e00c      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a964:	2306      	movs	r3, #6
 800a966:	e00a      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a968:	2305      	movs	r3, #5
 800a96a:	e008      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a96c:	2304      	movs	r3, #4
 800a96e:	e006      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a970:	2303      	movs	r3, #3
 800a972:	e004      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a974:	2302      	movs	r3, #2
 800a976:	e002      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a978:	2301      	movs	r3, #1
 800a97a:	e000      	b.n	800a97e <HAL_GPIO_Init+0x212>
 800a97c:	2300      	movs	r3, #0
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	f002 0203 	and.w	r2, r2, #3
 800a984:	0092      	lsls	r2, r2, #2
 800a986:	4093      	lsls	r3, r2
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a98e:	4937      	ldr	r1, [pc, #220]	; (800aa6c <HAL_GPIO_Init+0x300>)
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	089b      	lsrs	r3, r3, #2
 800a994:	3302      	adds	r3, #2
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a99c:	4b3b      	ldr	r3, [pc, #236]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	43db      	mvns	r3, r3
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a9c0:	4a32      	ldr	r2, [pc, #200]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a9c6:	4b31      	ldr	r3, [pc, #196]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	43db      	mvns	r3, r3
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a9ea:	4a28      	ldr	r2, [pc, #160]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a9f0:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	43db      	mvns	r3, r3
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800aa14:	4a1d      	ldr	r2, [pc, #116]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800aa1a:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	43db      	mvns	r3, r3
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	4013      	ands	r3, r2
 800aa28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800aa3e:	4a13      	ldr	r2, [pc, #76]	; (800aa8c <HAL_GPIO_Init+0x320>)
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	3301      	adds	r3, #1
 800aa48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f47f ae91 	bne.w	800a77c <HAL_GPIO_Init+0x10>
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	371c      	adds	r7, #28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	40021000 	.word	0x40021000
 800aa6c:	40010000 	.word	0x40010000
 800aa70:	48000400 	.word	0x48000400
 800aa74:	48000800 	.word	0x48000800
 800aa78:	48000c00 	.word	0x48000c00
 800aa7c:	48001000 	.word	0x48001000
 800aa80:	48001400 	.word	0x48001400
 800aa84:	48001800 	.word	0x48001800
 800aa88:	48001c00 	.word	0x48001c00
 800aa8c:	40010400 	.word	0x40010400

0800aa90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800aa9e:	e0c9      	b.n	800ac34 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	4013      	ands	r3, r2
 800aaac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 80bc 	beq.w	800ac2e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800aab6:	4a66      	ldr	r2, [pc, #408]	; (800ac50 <HAL_GPIO_DeInit+0x1c0>)
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	089b      	lsrs	r3, r3, #2
 800aabc:	3302      	adds	r3, #2
 800aabe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aac2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	220f      	movs	r2, #15
 800aace:	fa02 f303 	lsl.w	r3, r2, r3
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	4013      	ands	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800aade:	d02b      	beq.n	800ab38 <HAL_GPIO_DeInit+0xa8>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a5c      	ldr	r2, [pc, #368]	; (800ac54 <HAL_GPIO_DeInit+0x1c4>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d025      	beq.n	800ab34 <HAL_GPIO_DeInit+0xa4>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a5b      	ldr	r2, [pc, #364]	; (800ac58 <HAL_GPIO_DeInit+0x1c8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d01f      	beq.n	800ab30 <HAL_GPIO_DeInit+0xa0>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a5a      	ldr	r2, [pc, #360]	; (800ac5c <HAL_GPIO_DeInit+0x1cc>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d019      	beq.n	800ab2c <HAL_GPIO_DeInit+0x9c>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a59      	ldr	r2, [pc, #356]	; (800ac60 <HAL_GPIO_DeInit+0x1d0>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d013      	beq.n	800ab28 <HAL_GPIO_DeInit+0x98>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a58      	ldr	r2, [pc, #352]	; (800ac64 <HAL_GPIO_DeInit+0x1d4>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d00d      	beq.n	800ab24 <HAL_GPIO_DeInit+0x94>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a57      	ldr	r2, [pc, #348]	; (800ac68 <HAL_GPIO_DeInit+0x1d8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d007      	beq.n	800ab20 <HAL_GPIO_DeInit+0x90>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a56      	ldr	r2, [pc, #344]	; (800ac6c <HAL_GPIO_DeInit+0x1dc>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d101      	bne.n	800ab1c <HAL_GPIO_DeInit+0x8c>
 800ab18:	2307      	movs	r3, #7
 800ab1a:	e00e      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab1c:	2308      	movs	r3, #8
 800ab1e:	e00c      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab20:	2306      	movs	r3, #6
 800ab22:	e00a      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab24:	2305      	movs	r3, #5
 800ab26:	e008      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab28:	2304      	movs	r3, #4
 800ab2a:	e006      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e004      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab30:	2302      	movs	r3, #2
 800ab32:	e002      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab34:	2301      	movs	r3, #1
 800ab36:	e000      	b.n	800ab3a <HAL_GPIO_DeInit+0xaa>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	f002 0203 	and.w	r2, r2, #3
 800ab40:	0092      	lsls	r2, r2, #2
 800ab42:	4093      	lsls	r3, r2
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d132      	bne.n	800abb0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800ab4a:	4b49      	ldr	r3, [pc, #292]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	43db      	mvns	r3, r3
 800ab52:	4947      	ldr	r1, [pc, #284]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800ab58:	4b45      	ldr	r3, [pc, #276]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	43db      	mvns	r3, r3
 800ab60:	4943      	ldr	r1, [pc, #268]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab62:	4013      	ands	r3, r2
 800ab64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ab66:	4b42      	ldr	r3, [pc, #264]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab68:	689a      	ldr	r2, [r3, #8]
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	4940      	ldr	r1, [pc, #256]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800ab74:	4b3e      	ldr	r3, [pc, #248]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab76:	68da      	ldr	r2, [r3, #12]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	43db      	mvns	r3, r3
 800ab7c:	493c      	ldr	r1, [pc, #240]	; (800ac70 <HAL_GPIO_DeInit+0x1e0>)
 800ab7e:	4013      	ands	r3, r2
 800ab80:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	220f      	movs	r2, #15
 800ab8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800ab92:	4a2f      	ldr	r2, [pc, #188]	; (800ac50 <HAL_GPIO_DeInit+0x1c0>)
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	089b      	lsrs	r3, r3, #2
 800ab98:	3302      	adds	r3, #2
 800ab9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	43da      	mvns	r2, r3
 800aba2:	482b      	ldr	r0, [pc, #172]	; (800ac50 <HAL_GPIO_DeInit+0x1c0>)
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	089b      	lsrs	r3, r3, #2
 800aba8:	400a      	ands	r2, r1
 800abaa:	3302      	adds	r3, #2
 800abac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	2103      	movs	r1, #3
 800abba:	fa01 f303 	lsl.w	r3, r1, r3
 800abbe:	431a      	orrs	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	08da      	lsrs	r2, r3, #3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3208      	adds	r2, #8
 800abcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	220f      	movs	r2, #15
 800abda:	fa02 f303 	lsl.w	r3, r2, r3
 800abde:	43db      	mvns	r3, r3
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	08d2      	lsrs	r2, r2, #3
 800abe4:	4019      	ands	r1, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3208      	adds	r2, #8
 800abea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	2103      	movs	r1, #3
 800abf8:	fa01 f303 	lsl.w	r3, r1, r3
 800abfc:	43db      	mvns	r3, r3
 800abfe:	401a      	ands	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	2101      	movs	r1, #1
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac10:	43db      	mvns	r3, r3
 800ac12:	401a      	ands	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68da      	ldr	r2, [r3, #12]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	2103      	movs	r1, #3
 800ac22:	fa01 f303 	lsl.w	r3, r1, r3
 800ac26:	43db      	mvns	r3, r3
 800ac28:	401a      	ands	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	3301      	adds	r3, #1
 800ac32:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f47f af2f 	bne.w	800aaa0 <HAL_GPIO_DeInit+0x10>
  }
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	371c      	adds	r7, #28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	40010000 	.word	0x40010000
 800ac54:	48000400 	.word	0x48000400
 800ac58:	48000800 	.word	0x48000800
 800ac5c:	48000c00 	.word	0x48000c00
 800ac60:	48001000 	.word	0x48001000
 800ac64:	48001400 	.word	0x48001400
 800ac68:	48001800 	.word	0x48001800
 800ac6c:	48001c00 	.word	0x48001c00
 800ac70:	40010400 	.word	0x40010400

0800ac74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	807b      	strh	r3, [r7, #2]
 800ac80:	4613      	mov	r3, r2
 800ac82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac84:	787b      	ldrb	r3, [r7, #1]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ac8a:	887a      	ldrh	r2, [r7, #2]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ac90:	e002      	b.n	800ac98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ac92:	887a      	ldrh	r2, [r7, #2]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800acb6:	887a      	ldrh	r2, [r7, #2]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4013      	ands	r3, r2
 800acbc:	041a      	lsls	r2, r3, #16
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	43d9      	mvns	r1, r3
 800acc2:	887b      	ldrh	r3, [r7, #2]
 800acc4:	400b      	ands	r3, r1
 800acc6:	431a      	orrs	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	619a      	str	r2, [r3, #24]
}
 800accc:	bf00      	nop
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ace2:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ace4:	695a      	ldr	r2, [r3, #20]
 800ace6:	88fb      	ldrh	r3, [r7, #6]
 800ace8:	4013      	ands	r3, r2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d006      	beq.n	800acfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800acee:	4a05      	ldr	r2, [pc, #20]	; (800ad04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800acf4:	88fb      	ldrh	r3, [r7, #6]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7f7 f9fe 	bl	80020f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800acfc:	bf00      	nop
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	40010400 	.word	0x40010400

0800ad08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e081      	b.n	800ae1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7f6 ff5a 	bl	8001be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2224      	movs	r2, #36	; 0x24
 800ad38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 0201 	bic.w	r2, r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ad58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689a      	ldr	r2, [r3, #8]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d107      	bne.n	800ad82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	689a      	ldr	r2, [r3, #8]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad7e:	609a      	str	r2, [r3, #8]
 800ad80:	e006      	b.n	800ad90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689a      	ldr	r2, [r3, #8]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ad8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d104      	bne.n	800ada2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ada0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	6812      	ldr	r2, [r2, #0]
 800adac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800adb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68da      	ldr	r2, [r3, #12]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691a      	ldr	r2, [r3, #16]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	ea42 0103 	orr.w	r1, r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	021a      	lsls	r2, r3, #8
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	430a      	orrs	r2, r1
 800adde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	69d9      	ldr	r1, [r3, #28]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1a      	ldr	r2, [r3, #32]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	430a      	orrs	r2, r1
 800adee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f042 0201 	orr.w	r2, r2, #1
 800adfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e021      	b.n	800ae7c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2224      	movs	r2, #36	; 0x24
 800ae3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f022 0201 	bic.w	r2, r2, #1
 800ae4e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7f6 ff8f 	bl	8001d74 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	4611      	mov	r1, r2
 800ae90:	461a      	mov	r2, r3
 800ae92:	4603      	mov	r3, r0
 800ae94:	817b      	strh	r3, [r7, #10]
 800ae96:	460b      	mov	r3, r1
 800ae98:	813b      	strh	r3, [r7, #8]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	f040 80f9 	bne.w	800b09e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <HAL_I2C_Mem_Write+0x34>
 800aeb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d105      	bne.n	800aec4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aebe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e0ed      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d101      	bne.n	800aed2 <HAL_I2C_Mem_Write+0x4e>
 800aece:	2302      	movs	r3, #2
 800aed0:	e0e6      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aeda:	f7fd fa89 	bl	80083f0 <HAL_GetTick>
 800aede:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	2319      	movs	r3, #25
 800aee6:	2201      	movs	r2, #1
 800aee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fbd9 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e0d1      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2221      	movs	r2, #33	; 0x21
 800af00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2240      	movs	r2, #64	; 0x40
 800af08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a3a      	ldr	r2, [r7, #32]
 800af16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800af24:	88f8      	ldrh	r0, [r7, #6]
 800af26:	893a      	ldrh	r2, [r7, #8]
 800af28:	8979      	ldrh	r1, [r7, #10]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	4603      	mov	r3, r0
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 fae9 	bl	800b50c <I2C_RequestMemoryWrite>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d005      	beq.n	800af4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e0a9      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af50:	b29b      	uxth	r3, r3
 800af52:	2bff      	cmp	r3, #255	; 0xff
 800af54:	d90e      	bls.n	800af74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	22ff      	movs	r2, #255	; 0xff
 800af5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af60:	b2da      	uxtb	r2, r3
 800af62:	8979      	ldrh	r1, [r7, #10]
 800af64:	2300      	movs	r3, #0
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 fcbb 	bl	800b8e8 <I2C_TransferConfig>
 800af72:	e00f      	b.n	800af94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af78:	b29a      	uxth	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af82:	b2da      	uxtb	r2, r3
 800af84:	8979      	ldrh	r1, [r7, #10]
 800af86:	2300      	movs	r3, #0
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f000 fcaa 	bl	800b8e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 fbc3 	bl	800b724 <I2C_WaitOnTXISFlagUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e07b      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	781a      	ldrb	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	3b01      	subs	r3, #1
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd0:	3b01      	subs	r3, #1
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afdc:	b29b      	uxth	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d034      	beq.n	800b04c <HAL_I2C_Mem_Write+0x1c8>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d130      	bne.n	800b04c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	2200      	movs	r2, #0
 800aff2:	2180      	movs	r1, #128	; 0x80
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 fb55 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e04d      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b008:	b29b      	uxth	r3, r3
 800b00a:	2bff      	cmp	r3, #255	; 0xff
 800b00c:	d90e      	bls.n	800b02c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	22ff      	movs	r2, #255	; 0xff
 800b012:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	8979      	ldrh	r1, [r7, #10]
 800b01c:	2300      	movs	r3, #0
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 fc5f 	bl	800b8e8 <I2C_TransferConfig>
 800b02a:	e00f      	b.n	800b04c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b030:	b29a      	uxth	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	8979      	ldrh	r1, [r7, #10]
 800b03e:	2300      	movs	r3, #0
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fc4e 	bl	800b8e8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b050:	b29b      	uxth	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d19e      	bne.n	800af94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 fba2 	bl	800b7a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e01a      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2220      	movs	r2, #32
 800b070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6859      	ldr	r1, [r3, #4]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <HAL_I2C_Mem_Write+0x224>)
 800b07e:	400b      	ands	r3, r1
 800b080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2220      	movs	r2, #32
 800b086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	e000      	b.n	800b0a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b09e:	2302      	movs	r3, #2
  }
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	fe00e800 	.word	0xfe00e800

0800b0ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	817b      	strh	r3, [r7, #10]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	813b      	strh	r3, [r7, #8]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	f040 80fd 	bne.w	800b2ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <HAL_I2C_Mem_Read+0x34>
 800b0da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d105      	bne.n	800b0ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e0f1      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <HAL_I2C_Mem_Read+0x4e>
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e0ea      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b102:	f7fd f975 	bl	80083f0 <HAL_GetTick>
 800b106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	2319      	movs	r3, #25
 800b10e:	2201      	movs	r2, #1
 800b110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 fac5 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e0d5      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2222      	movs	r2, #34	; 0x22
 800b128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2240      	movs	r2, #64	; 0x40
 800b130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6a3a      	ldr	r2, [r7, #32]
 800b13e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b14c:	88f8      	ldrh	r0, [r7, #6]
 800b14e:	893a      	ldrh	r2, [r7, #8]
 800b150:	8979      	ldrh	r1, [r7, #10]
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	4603      	mov	r3, r0
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fa29 	bl	800b5b4 <I2C_RequestMemoryRead>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d005      	beq.n	800b174 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e0ad      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b178:	b29b      	uxth	r3, r3
 800b17a:	2bff      	cmp	r3, #255	; 0xff
 800b17c:	d90e      	bls.n	800b19c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	22ff      	movs	r2, #255	; 0xff
 800b182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	8979      	ldrh	r1, [r7, #10]
 800b18c:	4b52      	ldr	r3, [pc, #328]	; (800b2d8 <HAL_I2C_Mem_Read+0x22c>)
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 fba7 	bl	800b8e8 <I2C_TransferConfig>
 800b19a:	e00f      	b.n	800b1bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	8979      	ldrh	r1, [r7, #10]
 800b1ae:	4b4a      	ldr	r3, [pc, #296]	; (800b2d8 <HAL_I2C_Mem_Read+0x22c>)
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fb96 	bl	800b8e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2104      	movs	r1, #4
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 fa6c 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e07c      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	3b01      	subs	r3, #1
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d034      	beq.n	800b27c <HAL_I2C_Mem_Read+0x1d0>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b216:	2b00      	cmp	r3, #0
 800b218:	d130      	bne.n	800b27c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	2200      	movs	r2, #0
 800b222:	2180      	movs	r1, #128	; 0x80
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 fa3d 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e04d      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b238:	b29b      	uxth	r3, r3
 800b23a:	2bff      	cmp	r3, #255	; 0xff
 800b23c:	d90e      	bls.n	800b25c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	22ff      	movs	r2, #255	; 0xff
 800b242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	8979      	ldrh	r1, [r7, #10]
 800b24c:	2300      	movs	r3, #0
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 fb47 	bl	800b8e8 <I2C_TransferConfig>
 800b25a:	e00f      	b.n	800b27c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b260:	b29a      	uxth	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	8979      	ldrh	r1, [r7, #10]
 800b26e:	2300      	movs	r3, #0
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 fb36 	bl	800b8e8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d19a      	bne.n	800b1bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 fa8a 	bl	800b7a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e01a      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2220      	movs	r2, #32
 800b2a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6859      	ldr	r1, [r3, #4]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	4b0b      	ldr	r3, [pc, #44]	; (800b2dc <HAL_I2C_Mem_Read+0x230>)
 800b2ae:	400b      	ands	r3, r1
 800b2b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e000      	b.n	800b2d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b2ce:	2302      	movs	r3, #2
  }
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	80002400 	.word	0x80002400
 800b2dc:	fe00e800 	.word	0xfe00e800

0800b2e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08a      	sub	sp, #40	; 0x28
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	607a      	str	r2, [r7, #4]
 800b2ea:	603b      	str	r3, [r7, #0]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b20      	cmp	r3, #32
 800b2fe:	f040 80f1 	bne.w	800b4e4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b30c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b310:	d101      	bne.n	800b316 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b312:	2302      	movs	r3, #2
 800b314:	e0e7      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d101      	bne.n	800b324 <HAL_I2C_IsDeviceReady+0x44>
 800b320:	2302      	movs	r3, #2
 800b322:	e0e0      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2224      	movs	r2, #36	; 0x24
 800b330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d107      	bne.n	800b352 <HAL_I2C_IsDeviceReady+0x72>
 800b342:	897b      	ldrh	r3, [r7, #10]
 800b344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b348:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b34c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b350:	e004      	b.n	800b35c <HAL_I2C_IsDeviceReady+0x7c>
 800b352:	897b      	ldrh	r3, [r7, #10]
 800b354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b358:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	6812      	ldr	r2, [r2, #0]
 800b360:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b362:	f7fd f845 	bl	80083f0 <HAL_GetTick>
 800b366:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	2b20      	cmp	r3, #32
 800b374:	bf0c      	ite	eq
 800b376:	2301      	moveq	r3, #1
 800b378:	2300      	movne	r3, #0
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	f003 0310 	and.w	r3, r3, #16
 800b388:	2b10      	cmp	r3, #16
 800b38a:	bf0c      	ite	eq
 800b38c:	2301      	moveq	r3, #1
 800b38e:	2300      	movne	r3, #0
 800b390:	b2db      	uxtb	r3, r3
 800b392:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b394:	e034      	b.n	800b400 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39c:	d01a      	beq.n	800b3d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b39e:	f7fd f827 	bl	80083f0 <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d302      	bcc.n	800b3b4 <HAL_I2C_IsDeviceReady+0xd4>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10f      	bne.n	800b3d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2220      	movs	r2, #32
 800b3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c0:	f043 0220 	orr.w	r2, r3, #32
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e088      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b20      	cmp	r3, #32
 800b3e0:	bf0c      	ite	eq
 800b3e2:	2301      	moveq	r3, #1
 800b3e4:	2300      	movne	r3, #0
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	2b10      	cmp	r3, #16
 800b3f6:	bf0c      	ite	eq
 800b3f8:	2301      	moveq	r3, #1
 800b3fa:	2300      	movne	r3, #0
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b400:	7ffb      	ldrb	r3, [r7, #31]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d102      	bne.n	800b40c <HAL_I2C_IsDeviceReady+0x12c>
 800b406:	7fbb      	ldrb	r3, [r7, #30]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0c4      	beq.n	800b396 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	f003 0310 	and.w	r3, r3, #16
 800b416:	2b10      	cmp	r3, #16
 800b418:	d01a      	beq.n	800b450 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2200      	movs	r2, #0
 800b422:	2120      	movs	r1, #32
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f000 f93d 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e058      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2220      	movs	r2, #32
 800b43a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2220      	movs	r2, #32
 800b440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	e04a      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2200      	movs	r2, #0
 800b458:	2120      	movs	r1, #32
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 f922 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e03d      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2210      	movs	r2, #16
 800b470:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2220      	movs	r2, #32
 800b478:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d118      	bne.n	800b4b4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b490:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2200      	movs	r2, #0
 800b49a:	2120      	movs	r1, #32
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 f901 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e01c      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	f63f af3b 	bhi.w	800b33a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d0:	f043 0220 	orr.w	r2, r3, #32
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e000      	b.n	800b4e6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b4e4:	2302      	movs	r3, #2
  }
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3720      	adds	r7, #32
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4fc:	b2db      	uxtb	r3, r3
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
	...

0800b50c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af02      	add	r7, sp, #8
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	4608      	mov	r0, r1
 800b516:	4611      	mov	r1, r2
 800b518:	461a      	mov	r2, r3
 800b51a:	4603      	mov	r3, r0
 800b51c:	817b      	strh	r3, [r7, #10]
 800b51e:	460b      	mov	r3, r1
 800b520:	813b      	strh	r3, [r7, #8]
 800b522:	4613      	mov	r3, r2
 800b524:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	8979      	ldrh	r1, [r7, #10]
 800b52c:	4b20      	ldr	r3, [pc, #128]	; (800b5b0 <I2C_RequestMemoryWrite+0xa4>)
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 f9d7 	bl	800b8e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	69b9      	ldr	r1, [r7, #24]
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f000 f8f0 	bl	800b724 <I2C_WaitOnTXISFlagUntilTimeout>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e02c      	b.n	800b5a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b54e:	88fb      	ldrh	r3, [r7, #6]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d105      	bne.n	800b560 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b554:	893b      	ldrh	r3, [r7, #8]
 800b556:	b2da      	uxtb	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	629a      	str	r2, [r3, #40]	; 0x28
 800b55e:	e015      	b.n	800b58c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b560:	893b      	ldrh	r3, [r7, #8]
 800b562:	0a1b      	lsrs	r3, r3, #8
 800b564:	b29b      	uxth	r3, r3
 800b566:	b2da      	uxtb	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b56e:	69fa      	ldr	r2, [r7, #28]
 800b570:	69b9      	ldr	r1, [r7, #24]
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 f8d6 	bl	800b724 <I2C_WaitOnTXISFlagUntilTimeout>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e012      	b.n	800b5a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b582:	893b      	ldrh	r3, [r7, #8]
 800b584:	b2da      	uxtb	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	2200      	movs	r2, #0
 800b594:	2180      	movs	r1, #128	; 0x80
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 f884 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e000      	b.n	800b5a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	80002000 	.word	0x80002000

0800b5b4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	4608      	mov	r0, r1
 800b5be:	4611      	mov	r1, r2
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	817b      	strh	r3, [r7, #10]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	813b      	strh	r3, [r7, #8]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	8979      	ldrh	r1, [r7, #10]
 800b5d4:	4b20      	ldr	r3, [pc, #128]	; (800b658 <I2C_RequestMemoryRead+0xa4>)
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 f984 	bl	800b8e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5e0:	69fa      	ldr	r2, [r7, #28]
 800b5e2:	69b9      	ldr	r1, [r7, #24]
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f89d 	bl	800b724 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e02c      	b.n	800b64e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d105      	bne.n	800b606 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5fa:	893b      	ldrh	r3, [r7, #8]
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	629a      	str	r2, [r3, #40]	; 0x28
 800b604:	e015      	b.n	800b632 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b606:	893b      	ldrh	r3, [r7, #8]
 800b608:	0a1b      	lsrs	r3, r3, #8
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b614:	69fa      	ldr	r2, [r7, #28]
 800b616:	69b9      	ldr	r1, [r7, #24]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 f883 	bl	800b724 <I2C_WaitOnTXISFlagUntilTimeout>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e012      	b.n	800b64e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b628:	893b      	ldrh	r3, [r7, #8]
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	2200      	movs	r2, #0
 800b63a:	2140      	movs	r1, #64	; 0x40
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 f831 	bl	800b6a4 <I2C_WaitOnFlagUntilTimeout>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	e000      	b.n	800b64e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	80002000 	.word	0x80002000

0800b65c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	f003 0302 	and.w	r3, r3, #2
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d103      	bne.n	800b67a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2200      	movs	r2, #0
 800b678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	699b      	ldr	r3, [r3, #24]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b01      	cmp	r3, #1
 800b686:	d007      	beq.n	800b698 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	699a      	ldr	r2, [r3, #24]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f042 0201 	orr.w	r2, r2, #1
 800b696:	619a      	str	r2, [r3, #24]
  }
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6b4:	e022      	b.n	800b6fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6bc:	d01e      	beq.n	800b6fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6be:	f7fc fe97 	bl	80083f0 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d302      	bcc.n	800b6d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d113      	bne.n	800b6fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d8:	f043 0220 	orr.w	r2, r3, #32
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e00f      	b.n	800b71c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	699a      	ldr	r2, [r3, #24]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4013      	ands	r3, r2
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	429a      	cmp	r2, r3
 800b70a:	bf0c      	ite	eq
 800b70c:	2301      	moveq	r3, #1
 800b70e:	2300      	movne	r3, #0
 800b710:	b2db      	uxtb	r3, r3
 800b712:	461a      	mov	r2, r3
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	429a      	cmp	r2, r3
 800b718:	d0cd      	beq.n	800b6b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b730:	e02c      	b.n	800b78c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	68b9      	ldr	r1, [r7, #8]
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 f870 	bl	800b81c <I2C_IsAcknowledgeFailed>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	e02a      	b.n	800b79c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d01e      	beq.n	800b78c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b74e:	f7fc fe4f 	bl	80083f0 <HAL_GetTick>
 800b752:	4602      	mov	r2, r0
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d302      	bcc.n	800b764 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d113      	bne.n	800b78c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b768:	f043 0220 	orr.w	r2, r3, #32
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2220      	movs	r2, #32
 800b774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	e007      	b.n	800b79c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	699b      	ldr	r3, [r3, #24]
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	2b02      	cmp	r3, #2
 800b798:	d1cb      	bne.n	800b732 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7b0:	e028      	b.n	800b804 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	68b9      	ldr	r1, [r7, #8]
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f000 f830 	bl	800b81c <I2C_IsAcknowledgeFailed>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e026      	b.n	800b814 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7c6:	f7fc fe13 	bl	80083f0 <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d302      	bcc.n	800b7dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d113      	bne.n	800b804 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e0:	f043 0220 	orr.w	r2, r3, #32
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e007      	b.n	800b814 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	f003 0320 	and.w	r3, r3, #32
 800b80e:	2b20      	cmp	r3, #32
 800b810:	d1cf      	bne.n	800b7b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	f003 0310 	and.w	r3, r3, #16
 800b832:	2b10      	cmp	r3, #16
 800b834:	d151      	bne.n	800b8da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b836:	e022      	b.n	800b87e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83e:	d01e      	beq.n	800b87e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b840:	f7fc fdd6 	bl	80083f0 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d302      	bcc.n	800b856 <I2C_IsAcknowledgeFailed+0x3a>
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d113      	bne.n	800b87e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b85a:	f043 0220 	orr.w	r2, r3, #32
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2220      	movs	r2, #32
 800b866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e02e      	b.n	800b8dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	f003 0320 	and.w	r3, r3, #32
 800b888:	2b20      	cmp	r3, #32
 800b88a:	d1d5      	bne.n	800b838 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2210      	movs	r2, #16
 800b892:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2220      	movs	r2, #32
 800b89a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fedd 	bl	800b65c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6859      	ldr	r1, [r3, #4]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	4b0d      	ldr	r3, [pc, #52]	; (800b8e4 <I2C_IsAcknowledgeFailed+0xc8>)
 800b8ae:	400b      	ands	r3, r1
 800b8b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b6:	f043 0204 	orr.w	r2, r3, #4
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e000      	b.n	800b8dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	fe00e800 	.word	0xfe00e800

0800b8e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	607b      	str	r3, [r7, #4]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	817b      	strh	r3, [r7, #10]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	0d5b      	lsrs	r3, r3, #21
 800b904:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b908:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <I2C_TransferConfig+0x58>)
 800b90a:	430b      	orrs	r3, r1
 800b90c:	43db      	mvns	r3, r3
 800b90e:	ea02 0103 	and.w	r1, r2, r3
 800b912:	897b      	ldrh	r3, [r7, #10]
 800b914:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b918:	7a7b      	ldrb	r3, [r7, #9]
 800b91a:	041b      	lsls	r3, r3, #16
 800b91c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b920:	431a      	orrs	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	431a      	orrs	r2, r3
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	431a      	orrs	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	430a      	orrs	r2, r1
 800b930:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b932:	bf00      	nop
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	03ff63ff 	.word	0x03ff63ff

0800b944 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b20      	cmp	r3, #32
 800b958:	d138      	bne.n	800b9cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b960:	2b01      	cmp	r3, #1
 800b962:	d101      	bne.n	800b968 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b964:	2302      	movs	r3, #2
 800b966:	e032      	b.n	800b9ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2224      	movs	r2, #36	; 0x24
 800b974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 0201 	bic.w	r2, r2, #1
 800b986:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b996:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6819      	ldr	r1, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	430a      	orrs	r2, r1
 800b9a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0201 	orr.w	r2, r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e000      	b.n	800b9ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9cc:	2302      	movs	r3, #2
  }
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b085      	sub	sp, #20
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b20      	cmp	r3, #32
 800b9ee:	d139      	bne.n	800ba64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d101      	bne.n	800b9fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	e033      	b.n	800ba66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2224      	movs	r2, #36	; 0x24
 800ba0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f022 0201 	bic.w	r2, r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	021b      	lsls	r3, r3, #8
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0201 	orr.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2220      	movs	r2, #32
 800ba54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	e000      	b.n	800ba66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ba64:	2302      	movs	r3, #2
  }
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
	...

0800ba74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ba74:	b480      	push	{r7}
 800ba76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ba78:	4b04      	ldr	r3, [pc, #16]	; (800ba8c <HAL_PWREx_GetVoltageRange+0x18>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	40007000 	.word	0x40007000

0800ba90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba9e:	d130      	bne.n	800bb02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800baa0:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800baa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baac:	d038      	beq.n	800bb20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800baae:	4b20      	ldr	r3, [pc, #128]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bab6:	4a1e      	ldr	r2, [pc, #120]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800babc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800babe:	4b1d      	ldr	r3, [pc, #116]	; (800bb34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2232      	movs	r2, #50	; 0x32
 800bac4:	fb02 f303 	mul.w	r3, r2, r3
 800bac8:	4a1b      	ldr	r2, [pc, #108]	; (800bb38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800baca:	fba2 2303 	umull	r2, r3, r2, r3
 800bace:	0c9b      	lsrs	r3, r3, #18
 800bad0:	3301      	adds	r3, #1
 800bad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bad4:	e002      	b.n	800badc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3b01      	subs	r3, #1
 800bada:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800badc:	4b14      	ldr	r3, [pc, #80]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bae8:	d102      	bne.n	800baf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1f2      	bne.n	800bad6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800baf0:	4b0f      	ldr	r3, [pc, #60]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bafc:	d110      	bne.n	800bb20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e00f      	b.n	800bb22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bb02:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bb0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb0e:	d007      	beq.n	800bb20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bb10:	4b07      	ldr	r3, [pc, #28]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bb18:	4a05      	ldr	r2, [pc, #20]	; (800bb30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	40007000 	.word	0x40007000
 800bb34:	20000004 	.word	0x20000004
 800bb38:	431bde83 	.word	0x431bde83

0800bb3c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800bb40:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	4a04      	ldr	r2, [pc, #16]	; (800bb58 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bb46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb4a:	6053      	str	r3, [r2, #4]
}
 800bb4c:	bf00      	nop
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	40007000 	.word	0x40007000

0800bb5c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bb64:	f7fc fc44 	bl	80083f0 <HAL_GetTick>
 800bb68:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e069      	b.n	800bc48 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10b      	bne.n	800bb98 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7f6 fcb7 	bl	80024fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800bb8e:	f241 3188 	movw	r1, #5000	; 0x1388
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f85e 	bl	800bc54 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	021a      	lsls	r2, r3, #8
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2120      	movs	r1, #32
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f856 	bl	800bc70 <QSPI_WaitFlagStateUntilTimeout>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d137      	bne.n	800bc3e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bbd8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	6852      	ldr	r2, [r2, #4]
 800bbe0:	0611      	lsls	r1, r2, #24
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	68d2      	ldr	r2, [r2, #12]
 800bbe6:	4311      	orrs	r1, r2
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	69d2      	ldr	r2, [r2, #28]
 800bbec:	4311      	orrs	r1, r2
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	6a12      	ldr	r2, [r2, #32]
 800bbf2:	4311      	orrs	r1, r2
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	430b      	orrs	r3, r1
 800bbfa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	4b13      	ldr	r3, [pc, #76]	; (800bc50 <HAL_QSPI_Init+0xf4>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	6912      	ldr	r2, [r2, #16]
 800bc0a:	0411      	lsls	r1, r2, #16
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	6952      	ldr	r2, [r2, #20]
 800bc10:	4311      	orrs	r1, r2
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	6992      	ldr	r2, [r2, #24]
 800bc16:	4311      	orrs	r1, r2
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	6812      	ldr	r2, [r2, #0]
 800bc1c:	430b      	orrs	r3, r1
 800bc1e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f042 0201 	orr.w	r2, r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bc46:	7afb      	ldrb	r3, [r7, #11]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	ffe0f8fe 	.word	0xffe0f8fe

0800bc54 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	649a      	str	r2, [r3, #72]	; 0x48
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bc80:	e01a      	b.n	800bcb8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc88:	d016      	beq.n	800bcb8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc8a:	f7fc fbb1 	bl	80083f0 <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d302      	bcc.n	800bca0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10b      	bne.n	800bcb8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2204      	movs	r2, #4
 800bca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcac:	f043 0201 	orr.w	r2, r3, #1
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e00e      	b.n	800bcd6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689a      	ldr	r2, [r3, #8]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	bf14      	ite	ne
 800bcc6:	2301      	movne	r3, #1
 800bcc8:	2300      	moveq	r3, #0
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d1d6      	bne.n	800bc82 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d102      	bne.n	800bcf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	f000 bc16 	b.w	800c520 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bcf4:	4ba0      	ldr	r3, [pc, #640]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f003 030c 	and.w	r3, r3, #12
 800bcfc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bcfe:	4b9e      	ldr	r3, [pc, #632]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f003 0303 	and.w	r3, r3, #3
 800bd06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0310 	and.w	r3, r3, #16
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 80e4 	beq.w	800bede <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d007      	beq.n	800bd2c <HAL_RCC_OscConfig+0x4c>
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	2b0c      	cmp	r3, #12
 800bd20:	f040 808b 	bne.w	800be3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	f040 8087 	bne.w	800be3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bd2c:	4b92      	ldr	r3, [pc, #584]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 0302 	and.w	r3, r3, #2
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d005      	beq.n	800bd44 <HAL_RCC_OscConfig+0x64>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e3ed      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a1a      	ldr	r2, [r3, #32]
 800bd48:	4b8b      	ldr	r3, [pc, #556]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0308 	and.w	r3, r3, #8
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d004      	beq.n	800bd5e <HAL_RCC_OscConfig+0x7e>
 800bd54:	4b88      	ldr	r3, [pc, #544]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd5c:	e005      	b.n	800bd6a <HAL_RCC_OscConfig+0x8a>
 800bd5e:	4b86      	ldr	r3, [pc, #536]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd64:	091b      	lsrs	r3, r3, #4
 800bd66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d223      	bcs.n	800bdb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fd80 	bl	800c878 <RCC_SetFlashLatencyFromMSIRange>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e3ce      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bd82:	4b7d      	ldr	r3, [pc, #500]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a7c      	ldr	r2, [pc, #496]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd88:	f043 0308 	orr.w	r3, r3, #8
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	4b7a      	ldr	r3, [pc, #488]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	4977      	ldr	r1, [pc, #476]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bda0:	4b75      	ldr	r3, [pc, #468]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	021b      	lsls	r3, r3, #8
 800bdae:	4972      	ldr	r1, [pc, #456]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	604b      	str	r3, [r1, #4]
 800bdb4:	e025      	b.n	800be02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bdb6:	4b70      	ldr	r3, [pc, #448]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a6f      	ldr	r2, [pc, #444]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bdbc:	f043 0308 	orr.w	r3, r3, #8
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	4b6d      	ldr	r3, [pc, #436]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	496a      	ldr	r1, [pc, #424]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bdd4:	4b68      	ldr	r3, [pc, #416]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	021b      	lsls	r3, r3, #8
 800bde2:	4965      	ldr	r1, [pc, #404]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bde4:	4313      	orrs	r3, r2
 800bde6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d109      	bne.n	800be02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fd40 	bl	800c878 <RCC_SetFlashLatencyFromMSIRange>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e38e      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800be02:	f000 fc75 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800be06:	4602      	mov	r2, r0
 800be08:	4b5b      	ldr	r3, [pc, #364]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	091b      	lsrs	r3, r3, #4
 800be0e:	f003 030f 	and.w	r3, r3, #15
 800be12:	495a      	ldr	r1, [pc, #360]	; (800bf7c <HAL_RCC_OscConfig+0x29c>)
 800be14:	5ccb      	ldrb	r3, [r1, r3]
 800be16:	f003 031f 	and.w	r3, r3, #31
 800be1a:	fa22 f303 	lsr.w	r3, r2, r3
 800be1e:	4a58      	ldr	r2, [pc, #352]	; (800bf80 <HAL_RCC_OscConfig+0x2a0>)
 800be20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800be22:	4b58      	ldr	r3, [pc, #352]	; (800bf84 <HAL_RCC_OscConfig+0x2a4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4618      	mov	r0, r3
 800be28:	f7fc fa92 	bl	8008350 <HAL_InitTick>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d052      	beq.n	800bedc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	e372      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d032      	beq.n	800bea8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800be42:	4b4d      	ldr	r3, [pc, #308]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a4c      	ldr	r2, [pc, #304]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be48:	f043 0301 	orr.w	r3, r3, #1
 800be4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800be4e:	f7fc facf 	bl	80083f0 <HAL_GetTick>
 800be52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be54:	e008      	b.n	800be68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800be56:	f7fc facb 	bl	80083f0 <HAL_GetTick>
 800be5a:	4602      	mov	r2, r0
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	2b02      	cmp	r3, #2
 800be62:	d901      	bls.n	800be68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e35b      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be68:	4b43      	ldr	r3, [pc, #268]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0302 	and.w	r3, r3, #2
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0f0      	beq.n	800be56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be74:	4b40      	ldr	r3, [pc, #256]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a3f      	ldr	r2, [pc, #252]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be7a:	f043 0308 	orr.w	r3, r3, #8
 800be7e:	6013      	str	r3, [r2, #0]
 800be80:	4b3d      	ldr	r3, [pc, #244]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	493a      	ldr	r1, [pc, #232]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be92:	4b39      	ldr	r3, [pc, #228]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	021b      	lsls	r3, r3, #8
 800bea0:	4935      	ldr	r1, [pc, #212]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	604b      	str	r3, [r1, #4]
 800bea6:	e01a      	b.n	800bede <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bea8:	4b33      	ldr	r3, [pc, #204]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a32      	ldr	r2, [pc, #200]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800beae:	f023 0301 	bic.w	r3, r3, #1
 800beb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800beb4:	f7fc fa9c 	bl	80083f0 <HAL_GetTick>
 800beb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800beba:	e008      	b.n	800bece <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bebc:	f7fc fa98 	bl	80083f0 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d901      	bls.n	800bece <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e328      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bece:	4b2a      	ldr	r3, [pc, #168]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1f0      	bne.n	800bebc <HAL_RCC_OscConfig+0x1dc>
 800beda:	e000      	b.n	800bede <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bedc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d073      	beq.n	800bfd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	2b08      	cmp	r3, #8
 800beee:	d005      	beq.n	800befc <HAL_RCC_OscConfig+0x21c>
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	2b0c      	cmp	r3, #12
 800bef4:	d10e      	bne.n	800bf14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d10b      	bne.n	800bf14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800befc:	4b1e      	ldr	r3, [pc, #120]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d063      	beq.n	800bfd0 <HAL_RCC_OscConfig+0x2f0>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d15f      	bne.n	800bfd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e305      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf1c:	d106      	bne.n	800bf2c <HAL_RCC_OscConfig+0x24c>
 800bf1e:	4b16      	ldr	r3, [pc, #88]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a15      	ldr	r2, [pc, #84]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf28:	6013      	str	r3, [r2, #0]
 800bf2a:	e01d      	b.n	800bf68 <HAL_RCC_OscConfig+0x288>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf34:	d10c      	bne.n	800bf50 <HAL_RCC_OscConfig+0x270>
 800bf36:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a0f      	ldr	r2, [pc, #60]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf40:	6013      	str	r3, [r2, #0]
 800bf42:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a0c      	ldr	r2, [pc, #48]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	e00b      	b.n	800bf68 <HAL_RCC_OscConfig+0x288>
 800bf50:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a08      	ldr	r2, [pc, #32]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a05      	ldr	r2, [pc, #20]	; (800bf78 <HAL_RCC_OscConfig+0x298>)
 800bf62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01b      	beq.n	800bfa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf70:	f7fc fa3e 	bl	80083f0 <HAL_GetTick>
 800bf74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf76:	e010      	b.n	800bf9a <HAL_RCC_OscConfig+0x2ba>
 800bf78:	40021000 	.word	0x40021000
 800bf7c:	08013b54 	.word	0x08013b54
 800bf80:	20000004 	.word	0x20000004
 800bf84:	200000d4 	.word	0x200000d4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf88:	f7fc fa32 	bl	80083f0 <HAL_GetTick>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	2b64      	cmp	r3, #100	; 0x64
 800bf94:	d901      	bls.n	800bf9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bf96:	2303      	movs	r3, #3
 800bf98:	e2c2      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf9a:	4baf      	ldr	r3, [pc, #700]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0f0      	beq.n	800bf88 <HAL_RCC_OscConfig+0x2a8>
 800bfa6:	e014      	b.n	800bfd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa8:	f7fc fa22 	bl	80083f0 <HAL_GetTick>
 800bfac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bfae:	e008      	b.n	800bfc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfb0:	f7fc fa1e 	bl	80083f0 <HAL_GetTick>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	2b64      	cmp	r3, #100	; 0x64
 800bfbc:	d901      	bls.n	800bfc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e2ae      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bfc2:	4ba5      	ldr	r3, [pc, #660]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f0      	bne.n	800bfb0 <HAL_RCC_OscConfig+0x2d0>
 800bfce:	e000      	b.n	800bfd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bfd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d060      	beq.n	800c0a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d005      	beq.n	800bff0 <HAL_RCC_OscConfig+0x310>
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	2b0c      	cmp	r3, #12
 800bfe8:	d119      	bne.n	800c01e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d116      	bne.n	800c01e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bff0:	4b99      	ldr	r3, [pc, #612]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <HAL_RCC_OscConfig+0x328>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e28b      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c008:	4b93      	ldr	r3, [pc, #588]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	061b      	lsls	r3, r3, #24
 800c016:	4990      	ldr	r1, [pc, #576]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c018:	4313      	orrs	r3, r2
 800c01a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c01c:	e040      	b.n	800c0a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d023      	beq.n	800c06e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c026:	4b8c      	ldr	r3, [pc, #560]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a8b      	ldr	r2, [pc, #556]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c02c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c032:	f7fc f9dd 	bl	80083f0 <HAL_GetTick>
 800c036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c038:	e008      	b.n	800c04c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c03a:	f7fc f9d9 	bl	80083f0 <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d901      	bls.n	800c04c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e269      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c04c:	4b82      	ldr	r3, [pc, #520]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0f0      	beq.n	800c03a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c058:	4b7f      	ldr	r3, [pc, #508]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	061b      	lsls	r3, r3, #24
 800c066:	497c      	ldr	r1, [pc, #496]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c068:	4313      	orrs	r3, r2
 800c06a:	604b      	str	r3, [r1, #4]
 800c06c:	e018      	b.n	800c0a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c06e:	4b7a      	ldr	r3, [pc, #488]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a79      	ldr	r2, [pc, #484]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c07a:	f7fc f9b9 	bl	80083f0 <HAL_GetTick>
 800c07e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c080:	e008      	b.n	800c094 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c082:	f7fc f9b5 	bl	80083f0 <HAL_GetTick>
 800c086:	4602      	mov	r2, r0
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d901      	bls.n	800c094 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e245      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c094:	4b70      	ldr	r3, [pc, #448]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1f0      	bne.n	800c082 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0308 	and.w	r3, r3, #8
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d03c      	beq.n	800c126 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01c      	beq.n	800c0ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0b4:	4b68      	ldr	r3, [pc, #416]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0ba:	4a67      	ldr	r2, [pc, #412]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c0bc:	f043 0301 	orr.w	r3, r3, #1
 800c0c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0c4:	f7fc f994 	bl	80083f0 <HAL_GetTick>
 800c0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c0ca:	e008      	b.n	800c0de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0cc:	f7fc f990 	bl	80083f0 <HAL_GetTick>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d901      	bls.n	800c0de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e220      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c0de:	4b5e      	ldr	r3, [pc, #376]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c0e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0e4:	f003 0302 	and.w	r3, r3, #2
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d0ef      	beq.n	800c0cc <HAL_RCC_OscConfig+0x3ec>
 800c0ec:	e01b      	b.n	800c126 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c0ee:	4b5a      	ldr	r3, [pc, #360]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0f4:	4a58      	ldr	r2, [pc, #352]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c0f6:	f023 0301 	bic.w	r3, r3, #1
 800c0fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0fe:	f7fc f977 	bl	80083f0 <HAL_GetTick>
 800c102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c104:	e008      	b.n	800c118 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c106:	f7fc f973 	bl	80083f0 <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	2b02      	cmp	r3, #2
 800c112:	d901      	bls.n	800c118 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e203      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c118:	4b4f      	ldr	r3, [pc, #316]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c11a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c11e:	f003 0302 	and.w	r3, r3, #2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1ef      	bne.n	800c106 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 0304 	and.w	r3, r3, #4
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 80a6 	beq.w	800c280 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c134:	2300      	movs	r3, #0
 800c136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c138:	4b47      	ldr	r3, [pc, #284]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c13c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10d      	bne.n	800c160 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c144:	4b44      	ldr	r3, [pc, #272]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c148:	4a43      	ldr	r2, [pc, #268]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c14e:	6593      	str	r3, [r2, #88]	; 0x58
 800c150:	4b41      	ldr	r3, [pc, #260]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c158:	60bb      	str	r3, [r7, #8]
 800c15a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c15c:	2301      	movs	r3, #1
 800c15e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c160:	4b3e      	ldr	r3, [pc, #248]	; (800c25c <HAL_RCC_OscConfig+0x57c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d118      	bne.n	800c19e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c16c:	4b3b      	ldr	r3, [pc, #236]	; (800c25c <HAL_RCC_OscConfig+0x57c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a3a      	ldr	r2, [pc, #232]	; (800c25c <HAL_RCC_OscConfig+0x57c>)
 800c172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c178:	f7fc f93a 	bl	80083f0 <HAL_GetTick>
 800c17c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c17e:	e008      	b.n	800c192 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c180:	f7fc f936 	bl	80083f0 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d901      	bls.n	800c192 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e1c6      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c192:	4b32      	ldr	r3, [pc, #200]	; (800c25c <HAL_RCC_OscConfig+0x57c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d0f0      	beq.n	800c180 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d108      	bne.n	800c1b8 <HAL_RCC_OscConfig+0x4d8>
 800c1a6:	4b2c      	ldr	r3, [pc, #176]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ac:	4a2a      	ldr	r2, [pc, #168]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1ae:	f043 0301 	orr.w	r3, r3, #1
 800c1b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c1b6:	e024      	b.n	800c202 <HAL_RCC_OscConfig+0x522>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	2b05      	cmp	r3, #5
 800c1be:	d110      	bne.n	800c1e2 <HAL_RCC_OscConfig+0x502>
 800c1c0:	4b25      	ldr	r3, [pc, #148]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c6:	4a24      	ldr	r2, [pc, #144]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1c8:	f043 0304 	orr.w	r3, r3, #4
 800c1cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c1d0:	4b21      	ldr	r3, [pc, #132]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1d6:	4a20      	ldr	r2, [pc, #128]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1d8:	f043 0301 	orr.w	r3, r3, #1
 800c1dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c1e0:	e00f      	b.n	800c202 <HAL_RCC_OscConfig+0x522>
 800c1e2:	4b1d      	ldr	r3, [pc, #116]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e8:	4a1b      	ldr	r2, [pc, #108]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1ea:	f023 0301 	bic.w	r3, r3, #1
 800c1ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c1f2:	4b19      	ldr	r3, [pc, #100]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1f8:	4a17      	ldr	r2, [pc, #92]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c1fa:	f023 0304 	bic.w	r3, r3, #4
 800c1fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d016      	beq.n	800c238 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c20a:	f7fc f8f1 	bl	80083f0 <HAL_GetTick>
 800c20e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c210:	e00a      	b.n	800c228 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c212:	f7fc f8ed 	bl	80083f0 <HAL_GetTick>
 800c216:	4602      	mov	r2, r0
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c220:	4293      	cmp	r3, r2
 800c222:	d901      	bls.n	800c228 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e17b      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c228:	4b0b      	ldr	r3, [pc, #44]	; (800c258 <HAL_RCC_OscConfig+0x578>)
 800c22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c22e:	f003 0302 	and.w	r3, r3, #2
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0ed      	beq.n	800c212 <HAL_RCC_OscConfig+0x532>
 800c236:	e01a      	b.n	800c26e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c238:	f7fc f8da 	bl	80083f0 <HAL_GetTick>
 800c23c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c23e:	e00f      	b.n	800c260 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c240:	f7fc f8d6 	bl	80083f0 <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c24e:	4293      	cmp	r3, r2
 800c250:	d906      	bls.n	800c260 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c252:	2303      	movs	r3, #3
 800c254:	e164      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
 800c256:	bf00      	nop
 800c258:	40021000 	.word	0x40021000
 800c25c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c260:	4ba8      	ldr	r3, [pc, #672]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c266:	f003 0302 	and.w	r3, r3, #2
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e8      	bne.n	800c240 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c26e:	7ffb      	ldrb	r3, [r7, #31]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d105      	bne.n	800c280 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c274:	4ba3      	ldr	r3, [pc, #652]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c278:	4aa2      	ldr	r2, [pc, #648]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c27a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c27e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0320 	and.w	r3, r3, #32
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d03c      	beq.n	800c306 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01c      	beq.n	800c2ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c294:	4b9b      	ldr	r3, [pc, #620]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c29a:	4a9a      	ldr	r2, [pc, #616]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c29c:	f043 0301 	orr.w	r3, r3, #1
 800c2a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2a4:	f7fc f8a4 	bl	80083f0 <HAL_GetTick>
 800c2a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c2aa:	e008      	b.n	800c2be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2ac:	f7fc f8a0 	bl	80083f0 <HAL_GetTick>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d901      	bls.n	800c2be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e130      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c2be:	4b91      	ldr	r3, [pc, #580]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c2c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2c4:	f003 0302 	and.w	r3, r3, #2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d0ef      	beq.n	800c2ac <HAL_RCC_OscConfig+0x5cc>
 800c2cc:	e01b      	b.n	800c306 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c2ce:	4b8d      	ldr	r3, [pc, #564]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c2d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2d4:	4a8b      	ldr	r2, [pc, #556]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c2d6:	f023 0301 	bic.w	r3, r3, #1
 800c2da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2de:	f7fc f887 	bl	80083f0 <HAL_GetTick>
 800c2e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c2e4:	e008      	b.n	800c2f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2e6:	f7fc f883 	bl	80083f0 <HAL_GetTick>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d901      	bls.n	800c2f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e113      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c2f8:	4b82      	ldr	r3, [pc, #520]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c2fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2fe:	f003 0302 	and.w	r3, r3, #2
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1ef      	bne.n	800c2e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 8107 	beq.w	800c51e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c314:	2b02      	cmp	r3, #2
 800c316:	f040 80cb 	bne.w	800c4b0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c31a:	4b7a      	ldr	r3, [pc, #488]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f003 0203 	and.w	r2, r3, #3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d12c      	bne.n	800c388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c338:	3b01      	subs	r3, #1
 800c33a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d123      	bne.n	800c388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c34a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d11b      	bne.n	800c388 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d113      	bne.n	800c388 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36a:	085b      	lsrs	r3, r3, #1
 800c36c:	3b01      	subs	r3, #1
 800c36e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c370:	429a      	cmp	r2, r3
 800c372:	d109      	bne.n	800c388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37e:	085b      	lsrs	r3, r3, #1
 800c380:	3b01      	subs	r3, #1
 800c382:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c384:	429a      	cmp	r2, r3
 800c386:	d06d      	beq.n	800c464 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	2b0c      	cmp	r3, #12
 800c38c:	d068      	beq.n	800c460 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c38e:	4b5d      	ldr	r3, [pc, #372]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c396:	2b00      	cmp	r3, #0
 800c398:	d105      	bne.n	800c3a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c39a:	4b5a      	ldr	r3, [pc, #360]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e0ba      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c3aa:	4b56      	ldr	r3, [pc, #344]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a55      	ldr	r2, [pc, #340]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c3b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c3b6:	f7fc f81b 	bl	80083f0 <HAL_GetTick>
 800c3ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3bc:	e008      	b.n	800c3d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3be:	f7fc f817 	bl	80083f0 <HAL_GetTick>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d901      	bls.n	800c3d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800c3cc:	2303      	movs	r3, #3
 800c3ce:	e0a7      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3d0:	4b4c      	ldr	r3, [pc, #304]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1f0      	bne.n	800c3be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c3dc:	4b49      	ldr	r3, [pc, #292]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c3de:	68da      	ldr	r2, [r3, #12]
 800c3e0:	4b49      	ldr	r3, [pc, #292]	; (800c508 <HAL_RCC_OscConfig+0x828>)
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c3ec:	3a01      	subs	r2, #1
 800c3ee:	0112      	lsls	r2, r2, #4
 800c3f0:	4311      	orrs	r1, r2
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c3f6:	0212      	lsls	r2, r2, #8
 800c3f8:	4311      	orrs	r1, r2
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c3fe:	0852      	lsrs	r2, r2, #1
 800c400:	3a01      	subs	r2, #1
 800c402:	0552      	lsls	r2, r2, #21
 800c404:	4311      	orrs	r1, r2
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c40a:	0852      	lsrs	r2, r2, #1
 800c40c:	3a01      	subs	r2, #1
 800c40e:	0652      	lsls	r2, r2, #25
 800c410:	4311      	orrs	r1, r2
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c416:	06d2      	lsls	r2, r2, #27
 800c418:	430a      	orrs	r2, r1
 800c41a:	493a      	ldr	r1, [pc, #232]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c41c:	4313      	orrs	r3, r2
 800c41e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c420:	4b38      	ldr	r3, [pc, #224]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a37      	ldr	r2, [pc, #220]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c42a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c42c:	4b35      	ldr	r3, [pc, #212]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	4a34      	ldr	r2, [pc, #208]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c436:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c438:	f7fb ffda 	bl	80083f0 <HAL_GetTick>
 800c43c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c43e:	e008      	b.n	800c452 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c440:	f7fb ffd6 	bl	80083f0 <HAL_GetTick>
 800c444:	4602      	mov	r2, r0
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d901      	bls.n	800c452 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	e066      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c452:	4b2c      	ldr	r3, [pc, #176]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0f0      	beq.n	800c440 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c45e:	e05e      	b.n	800c51e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e05d      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c464:	4b27      	ldr	r3, [pc, #156]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d156      	bne.n	800c51e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c470:	4b24      	ldr	r3, [pc, #144]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a23      	ldr	r2, [pc, #140]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c47a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c47c:	4b21      	ldr	r3, [pc, #132]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	4a20      	ldr	r2, [pc, #128]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c486:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c488:	f7fb ffb2 	bl	80083f0 <HAL_GetTick>
 800c48c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c48e:	e008      	b.n	800c4a2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c490:	f7fb ffae 	bl	80083f0 <HAL_GetTick>
 800c494:	4602      	mov	r2, r0
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d901      	bls.n	800c4a2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	e03e      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4a2:	4b18      	ldr	r3, [pc, #96]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0f0      	beq.n	800c490 <HAL_RCC_OscConfig+0x7b0>
 800c4ae:	e036      	b.n	800c51e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	2b0c      	cmp	r3, #12
 800c4b4:	d031      	beq.n	800c51a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4b6:	4b13      	ldr	r3, [pc, #76]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a12      	ldr	r2, [pc, #72]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c4c2:	4b10      	ldr	r3, [pc, #64]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d105      	bne.n	800c4da <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c4ce:	4b0d      	ldr	r3, [pc, #52]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	4a0c      	ldr	r2, [pc, #48]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4d4:	f023 0303 	bic.w	r3, r3, #3
 800c4d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c4da:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	4a09      	ldr	r2, [pc, #36]	; (800c504 <HAL_RCC_OscConfig+0x824>)
 800c4e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c4e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4ea:	f7fb ff81 	bl	80083f0 <HAL_GetTick>
 800c4ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c4f0:	e00c      	b.n	800c50c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4f2:	f7fb ff7d 	bl	80083f0 <HAL_GetTick>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d905      	bls.n	800c50c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800c500:	2303      	movs	r3, #3
 800c502:	e00d      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
 800c504:	40021000 	.word	0x40021000
 800c508:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c50c:	4b06      	ldr	r3, [pc, #24]	; (800c528 <HAL_RCC_OscConfig+0x848>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1ec      	bne.n	800c4f2 <HAL_RCC_OscConfig+0x812>
 800c518:	e001      	b.n	800c51e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e000      	b.n	800c520 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3720      	adds	r7, #32
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	40021000 	.word	0x40021000

0800c52c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d101      	bne.n	800c540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	e0c8      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c540:	4b66      	ldr	r3, [pc, #408]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 0307 	and.w	r3, r3, #7
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d910      	bls.n	800c570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c54e:	4b63      	ldr	r3, [pc, #396]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f023 0207 	bic.w	r2, r3, #7
 800c556:	4961      	ldr	r1, [pc, #388]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c55e:	4b5f      	ldr	r3, [pc, #380]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 0307 	and.w	r3, r3, #7
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d001      	beq.n	800c570 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	e0b0      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d04c      	beq.n	800c616 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	2b03      	cmp	r3, #3
 800c582:	d107      	bne.n	800c594 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c584:	4b56      	ldr	r3, [pc, #344]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d121      	bne.n	800c5d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	e09e      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d107      	bne.n	800c5ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c59c:	4b50      	ldr	r3, [pc, #320]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d115      	bne.n	800c5d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e092      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d107      	bne.n	800c5c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c5b4:	4b4a      	ldr	r3, [pc, #296]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d109      	bne.n	800c5d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e086      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c5c4:	4b46      	ldr	r3, [pc, #280]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e07e      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c5d4:	4b42      	ldr	r3, [pc, #264]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	f023 0203 	bic.w	r2, r3, #3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	493f      	ldr	r1, [pc, #252]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5e6:	f7fb ff03 	bl	80083f0 <HAL_GetTick>
 800c5ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5ec:	e00a      	b.n	800c604 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5ee:	f7fb feff 	bl	80083f0 <HAL_GetTick>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d901      	bls.n	800c604 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e066      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c604:	4b36      	ldr	r3, [pc, #216]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f003 020c 	and.w	r2, r3, #12
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	429a      	cmp	r2, r3
 800c614:	d1eb      	bne.n	800c5ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d008      	beq.n	800c634 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c622:	4b2f      	ldr	r3, [pc, #188]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	492c      	ldr	r1, [pc, #176]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c630:	4313      	orrs	r3, r2
 800c632:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c634:	4b29      	ldr	r3, [pc, #164]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 0307 	and.w	r3, r3, #7
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d210      	bcs.n	800c664 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c642:	4b26      	ldr	r3, [pc, #152]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f023 0207 	bic.w	r2, r3, #7
 800c64a:	4924      	ldr	r1, [pc, #144]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	4313      	orrs	r3, r2
 800c650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c652:	4b22      	ldr	r3, [pc, #136]	; (800c6dc <HAL_RCC_ClockConfig+0x1b0>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0307 	and.w	r3, r3, #7
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d001      	beq.n	800c664 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	e036      	b.n	800c6d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d008      	beq.n	800c682 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c670:	4b1b      	ldr	r3, [pc, #108]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	4918      	ldr	r1, [pc, #96]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c67e:	4313      	orrs	r3, r2
 800c680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 0308 	and.w	r3, r3, #8
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d009      	beq.n	800c6a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c68e:	4b14      	ldr	r3, [pc, #80]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	4910      	ldr	r1, [pc, #64]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c6a2:	f000 f825 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	4b0d      	ldr	r3, [pc, #52]	; (800c6e0 <HAL_RCC_ClockConfig+0x1b4>)
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	091b      	lsrs	r3, r3, #4
 800c6ae:	f003 030f 	and.w	r3, r3, #15
 800c6b2:	490c      	ldr	r1, [pc, #48]	; (800c6e4 <HAL_RCC_ClockConfig+0x1b8>)
 800c6b4:	5ccb      	ldrb	r3, [r1, r3]
 800c6b6:	f003 031f 	and.w	r3, r3, #31
 800c6ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c6be:	4a0a      	ldr	r2, [pc, #40]	; (800c6e8 <HAL_RCC_ClockConfig+0x1bc>)
 800c6c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c6c2:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <HAL_RCC_ClockConfig+0x1c0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fb fe42 	bl	8008350 <HAL_InitTick>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	72fb      	strb	r3, [r7, #11]

  return status;
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	40022000 	.word	0x40022000
 800c6e0:	40021000 	.word	0x40021000
 800c6e4:	08013b54 	.word	0x08013b54
 800c6e8:	20000004 	.word	0x20000004
 800c6ec:	200000d4 	.word	0x200000d4

0800c6f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b089      	sub	sp, #36	; 0x24
 800c6f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	61fb      	str	r3, [r7, #28]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6fe:	4b3e      	ldr	r3, [pc, #248]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	f003 030c 	and.w	r3, r3, #12
 800c706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c708:	4b3b      	ldr	r3, [pc, #236]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f003 0303 	and.w	r3, r3, #3
 800c710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <HAL_RCC_GetSysClockFreq+0x34>
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	2b0c      	cmp	r3, #12
 800c71c:	d121      	bne.n	800c762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d11e      	bne.n	800c762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c724:	4b34      	ldr	r3, [pc, #208]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 0308 	and.w	r3, r3, #8
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d107      	bne.n	800c740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c730:	4b31      	ldr	r3, [pc, #196]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c736:	0a1b      	lsrs	r3, r3, #8
 800c738:	f003 030f 	and.w	r3, r3, #15
 800c73c:	61fb      	str	r3, [r7, #28]
 800c73e:	e005      	b.n	800c74c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c740:	4b2d      	ldr	r3, [pc, #180]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	091b      	lsrs	r3, r3, #4
 800c746:	f003 030f 	and.w	r3, r3, #15
 800c74a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c74c:	4a2b      	ldr	r2, [pc, #172]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10d      	bne.n	800c778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c760:	e00a      	b.n	800c778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	2b04      	cmp	r3, #4
 800c766:	d102      	bne.n	800c76e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c768:	4b25      	ldr	r3, [pc, #148]	; (800c800 <HAL_RCC_GetSysClockFreq+0x110>)
 800c76a:	61bb      	str	r3, [r7, #24]
 800c76c:	e004      	b.n	800c778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b08      	cmp	r3, #8
 800c772:	d101      	bne.n	800c778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c774:	4b23      	ldr	r3, [pc, #140]	; (800c804 <HAL_RCC_GetSysClockFreq+0x114>)
 800c776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	2b0c      	cmp	r3, #12
 800c77c:	d134      	bne.n	800c7e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c77e:	4b1e      	ldr	r3, [pc, #120]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	f003 0303 	and.w	r3, r3, #3
 800c786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d003      	beq.n	800c796 <HAL_RCC_GetSysClockFreq+0xa6>
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	2b03      	cmp	r3, #3
 800c792:	d003      	beq.n	800c79c <HAL_RCC_GetSysClockFreq+0xac>
 800c794:	e005      	b.n	800c7a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c796:	4b1a      	ldr	r3, [pc, #104]	; (800c800 <HAL_RCC_GetSysClockFreq+0x110>)
 800c798:	617b      	str	r3, [r7, #20]
      break;
 800c79a:	e005      	b.n	800c7a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c79c:	4b19      	ldr	r3, [pc, #100]	; (800c804 <HAL_RCC_GetSysClockFreq+0x114>)
 800c79e:	617b      	str	r3, [r7, #20]
      break;
 800c7a0:	e002      	b.n	800c7a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	617b      	str	r3, [r7, #20]
      break;
 800c7a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c7a8:	4b13      	ldr	r3, [pc, #76]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	091b      	lsrs	r3, r3, #4
 800c7ae:	f003 0307 	and.w	r3, r3, #7
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c7b6:	4b10      	ldr	r3, [pc, #64]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	0a1b      	lsrs	r3, r3, #8
 800c7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	fb02 f203 	mul.w	r2, r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c7ce:	4b0a      	ldr	r3, [pc, #40]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	0e5b      	lsrs	r3, r3, #25
 800c7d4:	f003 0303 	and.w	r3, r3, #3
 800c7d8:	3301      	adds	r3, #1
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c7e8:	69bb      	ldr	r3, [r7, #24]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3724      	adds	r7, #36	; 0x24
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	40021000 	.word	0x40021000
 800c7fc:	08013b6c 	.word	0x08013b6c
 800c800:	00f42400 	.word	0x00f42400
 800c804:	007a1200 	.word	0x007a1200

0800c808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c80c:	4b03      	ldr	r3, [pc, #12]	; (800c81c <HAL_RCC_GetHCLKFreq+0x14>)
 800c80e:	681b      	ldr	r3, [r3, #0]
}
 800c810:	4618      	mov	r0, r3
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	20000004 	.word	0x20000004

0800c820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c824:	f7ff fff0 	bl	800c808 <HAL_RCC_GetHCLKFreq>
 800c828:	4602      	mov	r2, r0
 800c82a:	4b06      	ldr	r3, [pc, #24]	; (800c844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	0a1b      	lsrs	r3, r3, #8
 800c830:	f003 0307 	and.w	r3, r3, #7
 800c834:	4904      	ldr	r1, [pc, #16]	; (800c848 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c836:	5ccb      	ldrb	r3, [r1, r3]
 800c838:	f003 031f 	and.w	r3, r3, #31
 800c83c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c840:	4618      	mov	r0, r3
 800c842:	bd80      	pop	{r7, pc}
 800c844:	40021000 	.word	0x40021000
 800c848:	08013b64 	.word	0x08013b64

0800c84c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c850:	f7ff ffda 	bl	800c808 <HAL_RCC_GetHCLKFreq>
 800c854:	4602      	mov	r2, r0
 800c856:	4b06      	ldr	r3, [pc, #24]	; (800c870 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	0adb      	lsrs	r3, r3, #11
 800c85c:	f003 0307 	and.w	r3, r3, #7
 800c860:	4904      	ldr	r1, [pc, #16]	; (800c874 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c862:	5ccb      	ldrb	r3, [r1, r3]
 800c864:	f003 031f 	and.w	r3, r3, #31
 800c868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	40021000 	.word	0x40021000
 800c874:	08013b64 	.word	0x08013b64

0800c878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c880:	2300      	movs	r3, #0
 800c882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c884:	4b2a      	ldr	r3, [pc, #168]	; (800c930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d003      	beq.n	800c898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c890:	f7ff f8f0 	bl	800ba74 <HAL_PWREx_GetVoltageRange>
 800c894:	6178      	str	r0, [r7, #20]
 800c896:	e014      	b.n	800c8c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c898:	4b25      	ldr	r3, [pc, #148]	; (800c930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c89c:	4a24      	ldr	r2, [pc, #144]	; (800c930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8a2:	6593      	str	r3, [r2, #88]	; 0x58
 800c8a4:	4b22      	ldr	r3, [pc, #136]	; (800c930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c8b0:	f7ff f8e0 	bl	800ba74 <HAL_PWREx_GetVoltageRange>
 800c8b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c8b6:	4b1e      	ldr	r3, [pc, #120]	; (800c930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ba:	4a1d      	ldr	r2, [pc, #116]	; (800c930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8c8:	d10b      	bne.n	800c8e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b80      	cmp	r3, #128	; 0x80
 800c8ce:	d919      	bls.n	800c904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2ba0      	cmp	r3, #160	; 0xa0
 800c8d4:	d902      	bls.n	800c8dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	613b      	str	r3, [r7, #16]
 800c8da:	e013      	b.n	800c904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c8dc:	2301      	movs	r3, #1
 800c8de:	613b      	str	r3, [r7, #16]
 800c8e0:	e010      	b.n	800c904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b80      	cmp	r3, #128	; 0x80
 800c8e6:	d902      	bls.n	800c8ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	613b      	str	r3, [r7, #16]
 800c8ec:	e00a      	b.n	800c904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b80      	cmp	r3, #128	; 0x80
 800c8f2:	d102      	bne.n	800c8fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	613b      	str	r3, [r7, #16]
 800c8f8:	e004      	b.n	800c904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b70      	cmp	r3, #112	; 0x70
 800c8fe:	d101      	bne.n	800c904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c900:	2301      	movs	r3, #1
 800c902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c904:	4b0b      	ldr	r3, [pc, #44]	; (800c934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f023 0207 	bic.w	r2, r3, #7
 800c90c:	4909      	ldr	r1, [pc, #36]	; (800c934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	4313      	orrs	r3, r2
 800c912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c914:	4b07      	ldr	r3, [pc, #28]	; (800c934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d001      	beq.n	800c926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	e000      	b.n	800c928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3718      	adds	r7, #24
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	40021000 	.word	0x40021000
 800c934:	40022000 	.word	0x40022000

0800c938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c940:	2300      	movs	r3, #0
 800c942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c944:	2300      	movs	r3, #0
 800c946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c950:	2b00      	cmp	r3, #0
 800c952:	d041      	beq.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c95c:	d02a      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c95e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c962:	d824      	bhi.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c968:	d008      	beq.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c96a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c96e:	d81e      	bhi.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00a      	beq.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c978:	d010      	beq.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c97a:	e018      	b.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c97c:	4b86      	ldr	r3, [pc, #536]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	4a85      	ldr	r2, [pc, #532]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c986:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c988:	e015      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	3304      	adds	r3, #4
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f001 f887 	bl	800daa4 <RCCEx_PLLSAI1_Config>
 800c996:	4603      	mov	r3, r0
 800c998:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c99a:	e00c      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3320      	adds	r3, #32
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f001 f970 	bl	800dc88 <RCCEx_PLLSAI2_Config>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c9ac:	e003      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	74fb      	strb	r3, [r7, #19]
      break;
 800c9b2:	e000      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c9b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9b6:	7cfb      	ldrb	r3, [r7, #19]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10b      	bne.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9bc:	4b76      	ldr	r3, [pc, #472]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9ca:	4973      	ldr	r1, [pc, #460]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c9d2:	e001      	b.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9d4:	7cfb      	ldrb	r3, [r7, #19]
 800c9d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d041      	beq.n	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c9ec:	d02a      	beq.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800c9ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c9f2:	d824      	bhi.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c9f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9f8:	d008      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c9fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9fe:	d81e      	bhi.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00a      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800ca04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca08:	d010      	beq.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ca0a:	e018      	b.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ca0c:	4b62      	ldr	r3, [pc, #392]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	4a61      	ldr	r2, [pc, #388]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ca18:	e015      	b.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4618      	mov	r0, r3
 800ca22:	f001 f83f 	bl	800daa4 <RCCEx_PLLSAI1_Config>
 800ca26:	4603      	mov	r3, r0
 800ca28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ca2a:	e00c      	b.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3320      	adds	r3, #32
 800ca30:	2100      	movs	r1, #0
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 f928 	bl	800dc88 <RCCEx_PLLSAI2_Config>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ca3c:	e003      	b.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	74fb      	strb	r3, [r7, #19]
      break;
 800ca42:	e000      	b.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ca44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca46:	7cfb      	ldrb	r3, [r7, #19]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10b      	bne.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ca4c:	4b52      	ldr	r3, [pc, #328]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5a:	494f      	ldr	r1, [pc, #316]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ca62:	e001      	b.n	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca64:	7cfb      	ldrb	r3, [r7, #19]
 800ca66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 80a0 	beq.w	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca76:	2300      	movs	r3, #0
 800ca78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ca7a:	4b47      	ldr	r3, [pc, #284]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00d      	beq.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca90:	4b41      	ldr	r3, [pc, #260]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca94:	4a40      	ldr	r2, [pc, #256]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca9a:	6593      	str	r3, [r2, #88]	; 0x58
 800ca9c:	4b3e      	ldr	r3, [pc, #248]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caa4:	60bb      	str	r3, [r7, #8]
 800caa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800caa8:	2301      	movs	r3, #1
 800caaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800caac:	4b3b      	ldr	r3, [pc, #236]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a3a      	ldr	r2, [pc, #232]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cab8:	f7fb fc9a 	bl	80083f0 <HAL_GetTick>
 800cabc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cabe:	e009      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cac0:	f7fb fc96 	bl	80083f0 <HAL_GetTick>
 800cac4:	4602      	mov	r2, r0
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d902      	bls.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	74fb      	strb	r3, [r7, #19]
        break;
 800cad2:	e005      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cad4:	4b31      	ldr	r3, [pc, #196]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d0ef      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800cae0:	7cfb      	ldrb	r3, [r7, #19]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d15c      	bne.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cae6:	4b2c      	ldr	r3, [pc, #176]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d01f      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d019      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cb04:	4b24      	ldr	r3, [pc, #144]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cb10:	4b21      	ldr	r3, [pc, #132]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb16:	4a20      	ldr	r2, [pc, #128]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cb20:	4b1d      	ldr	r3, [pc, #116]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb26:	4a1c      	ldr	r2, [pc, #112]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cb30:	4a19      	ldr	r2, [pc, #100]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d016      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb42:	f7fb fc55 	bl	80083f0 <HAL_GetTick>
 800cb46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cb48:	e00b      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb4a:	f7fb fc51 	bl	80083f0 <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d902      	bls.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	74fb      	strb	r3, [r7, #19]
            break;
 800cb60:	e006      	b.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cb62:	4b0d      	ldr	r3, [pc, #52]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d0ec      	beq.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800cb70:	7cfb      	ldrb	r3, [r7, #19]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10c      	bne.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb76:	4b08      	ldr	r3, [pc, #32]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb86:	4904      	ldr	r1, [pc, #16]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cb8e:	e009      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb90:	7cfb      	ldrb	r3, [r7, #19]
 800cb92:	74bb      	strb	r3, [r7, #18]
 800cb94:	e006      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800cb96:	bf00      	nop
 800cb98:	40021000 	.word	0x40021000
 800cb9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba0:	7cfb      	ldrb	r3, [r7, #19]
 800cba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cba4:	7c7b      	ldrb	r3, [r7, #17]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d105      	bne.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cbaa:	4ba6      	ldr	r3, [pc, #664]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbae:	4aa5      	ldr	r2, [pc, #660]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cbb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cbb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cbc2:	4ba0      	ldr	r3, [pc, #640]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cbc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbc8:	f023 0203 	bic.w	r2, r3, #3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd0:	499c      	ldr	r1, [pc, #624]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f003 0302 	and.w	r3, r3, #2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00a      	beq.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cbe4:	4b97      	ldr	r3, [pc, #604]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cbe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbea:	f023 020c 	bic.w	r2, r3, #12
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf2:	4994      	ldr	r1, [pc, #592]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 0304 	and.w	r3, r3, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00a      	beq.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cc06:	4b8f      	ldr	r3, [pc, #572]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc14:	498b      	ldr	r1, [pc, #556]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc16:	4313      	orrs	r3, r2
 800cc18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0308 	and.w	r3, r3, #8
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00a      	beq.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cc28:	4b86      	ldr	r3, [pc, #536]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc36:	4983      	ldr	r1, [pc, #524]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0310 	and.w	r3, r3, #16
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00a      	beq.n	800cc60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cc4a:	4b7e      	ldr	r3, [pc, #504]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc58:	497a      	ldr	r1, [pc, #488]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f003 0320 	and.w	r3, r3, #32
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00a      	beq.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cc6c:	4b75      	ldr	r3, [pc, #468]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc7a:	4972      	ldr	r1, [pc, #456]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00a      	beq.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc8e:	4b6d      	ldr	r3, [pc, #436]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc9c:	4969      	ldr	r1, [pc, #420]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00a      	beq.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ccb0:	4b64      	ldr	r3, [pc, #400]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ccb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccbe:	4961      	ldr	r1, [pc, #388]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ccd2:	4b5c      	ldr	r3, [pc, #368]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ccd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cce0:	4958      	ldr	r1, [pc, #352]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cce2:	4313      	orrs	r3, r2
 800cce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ccf4:	4b53      	ldr	r3, [pc, #332]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ccf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd02:	4950      	ldr	r1, [pc, #320]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd04:	4313      	orrs	r3, r2
 800cd06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00a      	beq.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cd16:	4b4b      	ldr	r3, [pc, #300]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd24:	4947      	ldr	r1, [pc, #284]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00a      	beq.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd38:	4b42      	ldr	r3, [pc, #264]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cd3e:	f023 0203 	bic.w	r2, r3, #3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd46:	493f      	ldr	r1, [pc, #252]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d028      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cd5a:	4b3a      	ldr	r3, [pc, #232]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd68:	4936      	ldr	r1, [pc, #216]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd78:	d106      	bne.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cd7a:	4b32      	ldr	r3, [pc, #200]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	4a31      	ldr	r2, [pc, #196]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cd80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd84:	60d3      	str	r3, [r2, #12]
 800cd86:	e011      	b.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd90:	d10c      	bne.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3304      	adds	r3, #4
 800cd96:	2101      	movs	r1, #1
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fe83 	bl	800daa4 <RCCEx_PLLSAI1_Config>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cda2:	7cfb      	ldrb	r3, [r7, #19]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d001      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800cda8:	7cfb      	ldrb	r3, [r7, #19]
 800cdaa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d028      	beq.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cdb8:	4b22      	ldr	r3, [pc, #136]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdc6:	491f      	ldr	r1, [pc, #124]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdd6:	d106      	bne.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cdd8:	4b1a      	ldr	r3, [pc, #104]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cde2:	60d3      	str	r3, [r2, #12]
 800cde4:	e011      	b.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cdee:	d10c      	bne.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fe54 	bl	800daa4 <RCCEx_PLLSAI1_Config>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ce00:	7cfb      	ldrb	r3, [r7, #19]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d001      	beq.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800ce06:	7cfb      	ldrb	r3, [r7, #19]
 800ce08:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d02a      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ce16:	4b0b      	ldr	r3, [pc, #44]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce24:	4907      	ldr	r1, [pc, #28]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce34:	d108      	bne.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ce36:	4b03      	ldr	r3, [pc, #12]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	4a02      	ldr	r2, [pc, #8]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce40:	60d3      	str	r3, [r2, #12]
 800ce42:	e013      	b.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x534>
 800ce44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce50:	d10c      	bne.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3304      	adds	r3, #4
 800ce56:	2101      	movs	r1, #1
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 fe23 	bl	800daa4 <RCCEx_PLLSAI1_Config>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ce62:	7cfb      	ldrb	r3, [r7, #19]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800ce68:	7cfb      	ldrb	r3, [r7, #19]
 800ce6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d02f      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ce78:	4b2c      	ldr	r3, [pc, #176]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800ce7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce86:	4929      	ldr	r1, [pc, #164]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce96:	d10d      	bne.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	3304      	adds	r3, #4
 800ce9c:	2102      	movs	r1, #2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 fe00 	bl	800daa4 <RCCEx_PLLSAI1_Config>
 800cea4:	4603      	mov	r3, r0
 800cea6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cea8:	7cfb      	ldrb	r3, [r7, #19]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d014      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800ceae:	7cfb      	ldrb	r3, [r7, #19]
 800ceb0:	74bb      	strb	r3, [r7, #18]
 800ceb2:	e011      	b.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cebc:	d10c      	bne.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3320      	adds	r3, #32
 800cec2:	2102      	movs	r1, #2
 800cec4:	4618      	mov	r0, r3
 800cec6:	f000 fedf 	bl	800dc88 <RCCEx_PLLSAI2_Config>
 800ceca:	4603      	mov	r3, r0
 800cecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cece:	7cfb      	ldrb	r3, [r7, #19]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800ced4:	7cfb      	ldrb	r3, [r7, #19]
 800ced6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cee4:	4b11      	ldr	r3, [pc, #68]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800cee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cef4:	490d      	ldr	r1, [pc, #52]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00b      	beq.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cf08:	4b08      	ldr	r3, [pc, #32]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800cf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf18:	4904      	ldr	r1, [pc, #16]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cf20:	7cbb      	ldrb	r3, [r7, #18]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	40021000 	.word	0x40021000

0800cf30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b088      	sub	sp, #32
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf42:	d13e      	bne.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800cf44:	4bb8      	ldr	r3, [pc, #736]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800cf46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf4e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf56:	d028      	beq.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf5e:	f200 858e 	bhi.w	800da7e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf68:	d005      	beq.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf70:	d00e      	beq.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800cf72:	f000 bd84 	b.w	800da7e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cf76:	4bac      	ldr	r3, [pc, #688]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800cf78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf7c:	f003 0302 	and.w	r3, r3, #2
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	f040 857e 	bne.w	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
        frequency = LSE_VALUE;
 800cf86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf8a:	61fb      	str	r3, [r7, #28]
      break;
 800cf8c:	f000 bd79 	b.w	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cf90:	4ba5      	ldr	r3, [pc, #660]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800cf92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf96:	f003 0302 	and.w	r3, r3, #2
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	f040 8573 	bne.w	800da86 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = LSI_VALUE;
 800cfa0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cfa4:	61fb      	str	r3, [r7, #28]
      break;
 800cfa6:	f000 bd6e 	b.w	800da86 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cfaa:	4b9f      	ldr	r3, [pc, #636]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfb6:	f040 8568 	bne.w	800da8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
        frequency = HSE_VALUE / 32U;
 800cfba:	4b9c      	ldr	r3, [pc, #624]	; (800d22c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800cfbc:	61fb      	str	r3, [r7, #28]
      break;
 800cfbe:	f000 bd64 	b.w	800da8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cfc2:	4b99      	ldr	r3, [pc, #612]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	f003 0303 	and.w	r3, r3, #3
 800cfca:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d036      	beq.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2b03      	cmp	r3, #3
 800cfd6:	d840      	bhi.n	800d05a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d003      	beq.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d020      	beq.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800cfe4:	e039      	b.n	800d05a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800cfe6:	4b90      	ldr	r3, [pc, #576]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 0302 	and.w	r3, r3, #2
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d116      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800cff2:	4b8d      	ldr	r3, [pc, #564]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0308 	and.w	r3, r3, #8
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d005      	beq.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800cffe:	4b8a      	ldr	r3, [pc, #552]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	091b      	lsrs	r3, r3, #4
 800d004:	f003 030f 	and.w	r3, r3, #15
 800d008:	e005      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800d00a:	4b87      	ldr	r3, [pc, #540]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800d00c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d010:	0a1b      	lsrs	r3, r3, #8
 800d012:	f003 030f 	and.w	r3, r3, #15
 800d016:	4a86      	ldr	r2, [pc, #536]	; (800d230 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800d018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d01c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800d01e:	e01f      	b.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800d020:	2300      	movs	r3, #0
 800d022:	61bb      	str	r3, [r7, #24]
      break;
 800d024:	e01c      	b.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d026:	4b80      	ldr	r3, [pc, #512]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d032:	d102      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800d034:	4b7f      	ldr	r3, [pc, #508]	; (800d234 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800d036:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800d038:	e012      	b.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800d03a:	2300      	movs	r3, #0
 800d03c:	61bb      	str	r3, [r7, #24]
      break;
 800d03e:	e00f      	b.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d040:	4b79      	ldr	r3, [pc, #484]	; (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d04c:	d102      	bne.n	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800d04e:	4b7a      	ldr	r3, [pc, #488]	; (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800d050:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800d052:	e005      	b.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800d054:	2300      	movs	r3, #0
 800d056:	61bb      	str	r3, [r7, #24]
      break;
 800d058:	e002      	b.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800d05a:	2300      	movs	r3, #0
 800d05c:	61bb      	str	r3, [r7, #24]
      break;
 800d05e:	bf00      	nop
    }

    switch(PeriphClk)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d066:	f000 842b 	beq.w	800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d070:	f200 850d 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d07a:	f000 80df 	beq.w	800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d084:	f200 8503 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d08e:	f000 80d5 	beq.w	800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d098:	f200 84f9 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0a2:	f000 8374 	beq.w	800d78e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0ac:	f200 84ef 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0b6:	f000 84c0 	beq.w	800da3a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0c0:	f200 84e5 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0ca:	f000 82e7 	beq.w	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0d4:	f200 84db 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0de:	f000 80ad 	beq.w	800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0e8:	f200 84d1 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0f2:	f000 8091 	beq.w	800d218 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0fc:	f200 84c7 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d106:	d07f      	beq.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d10e:	f200 84be 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d118:	f000 8445 	beq.w	800d9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d122:	f200 84b4 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d12c:	f000 83f1 	beq.w	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d136:	f200 84aa 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d140:	f000 8392 	beq.w	800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d14a:	f200 84a0 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b80      	cmp	r3, #128	; 0x80
 800d152:	f000 835d 	beq.w	800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b80      	cmp	r3, #128	; 0x80
 800d15a:	f200 8498 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b20      	cmp	r3, #32
 800d162:	d84b      	bhi.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 8491 	beq.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	3b01      	subs	r3, #1
 800d170:	2b1f      	cmp	r3, #31
 800d172:	f200 848c 	bhi.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d393 	.word	0x0800d393
 800d180:	0800d403 	.word	0x0800d403
 800d184:	0800da8f 	.word	0x0800da8f
 800d188:	0800d497 	.word	0x0800d497
 800d18c:	0800da8f 	.word	0x0800da8f
 800d190:	0800da8f 	.word	0x0800da8f
 800d194:	0800da8f 	.word	0x0800da8f
 800d198:	0800d521 	.word	0x0800d521
 800d19c:	0800da8f 	.word	0x0800da8f
 800d1a0:	0800da8f 	.word	0x0800da8f
 800d1a4:	0800da8f 	.word	0x0800da8f
 800d1a8:	0800da8f 	.word	0x0800da8f
 800d1ac:	0800da8f 	.word	0x0800da8f
 800d1b0:	0800da8f 	.word	0x0800da8f
 800d1b4:	0800da8f 	.word	0x0800da8f
 800d1b8:	0800d599 	.word	0x0800d599
 800d1bc:	0800da8f 	.word	0x0800da8f
 800d1c0:	0800da8f 	.word	0x0800da8f
 800d1c4:	0800da8f 	.word	0x0800da8f
 800d1c8:	0800da8f 	.word	0x0800da8f
 800d1cc:	0800da8f 	.word	0x0800da8f
 800d1d0:	0800da8f 	.word	0x0800da8f
 800d1d4:	0800da8f 	.word	0x0800da8f
 800d1d8:	0800da8f 	.word	0x0800da8f
 800d1dc:	0800da8f 	.word	0x0800da8f
 800d1e0:	0800da8f 	.word	0x0800da8f
 800d1e4:	0800da8f 	.word	0x0800da8f
 800d1e8:	0800da8f 	.word	0x0800da8f
 800d1ec:	0800da8f 	.word	0x0800da8f
 800d1f0:	0800da8f 	.word	0x0800da8f
 800d1f4:	0800da8f 	.word	0x0800da8f
 800d1f8:	0800d61b 	.word	0x0800d61b
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b40      	cmp	r3, #64	; 0x40
 800d200:	f000 82da 	beq.w	800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800d204:	f000 bc43 	b.w	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800d208:	69b9      	ldr	r1, [r7, #24]
 800d20a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d20e:	f000 fe17 	bl	800de40 <RCCEx_GetSAIxPeriphCLKFreq>
 800d212:	61f8      	str	r0, [r7, #28]
      break;
 800d214:	f000 bc3c 	b.w	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800d218:	69b9      	ldr	r1, [r7, #24]
 800d21a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d21e:	f000 fe0f 	bl	800de40 <RCCEx_GetSAIxPeriphCLKFreq>
 800d222:	61f8      	str	r0, [r7, #28]
      break;
 800d224:	f000 bc34 	b.w	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800d228:	40021000 	.word	0x40021000
 800d22c:	0003d090 	.word	0x0003d090
 800d230:	08013b6c 	.word	0x08013b6c
 800d234:	00f42400 	.word	0x00f42400
 800d238:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800d23c:	4bb2      	ldr	r3, [pc, #712]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d242:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800d246:	613b      	str	r3, [r7, #16]
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d24e:	d015      	beq.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d256:	f200 8092 	bhi.w	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d260:	d029      	beq.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d268:	f200 8089 	bhi.w	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d07b      	beq.n	800d36a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d278:	d04a      	beq.n	800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800d27a:	e080      	b.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800d27c:	4ba2      	ldr	r3, [pc, #648]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 0302 	and.w	r3, r3, #2
 800d284:	2b02      	cmp	r3, #2
 800d286:	d17c      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800d288:	4b9f      	ldr	r3, [pc, #636]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f003 0308 	and.w	r3, r3, #8
 800d290:	2b00      	cmp	r3, #0
 800d292:	d005      	beq.n	800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800d294:	4b9c      	ldr	r3, [pc, #624]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	091b      	lsrs	r3, r3, #4
 800d29a:	f003 030f 	and.w	r3, r3, #15
 800d29e:	e005      	b.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800d2a0:	4b99      	ldr	r3, [pc, #612]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d2a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2a6:	0a1b      	lsrs	r3, r3, #8
 800d2a8:	f003 030f 	and.w	r3, r3, #15
 800d2ac:	4a97      	ldr	r2, [pc, #604]	; (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800d2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2b2:	61fb      	str	r3, [r7, #28]
          break;
 800d2b4:	e065      	b.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800d2b6:	4b94      	ldr	r3, [pc, #592]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2c2:	d160      	bne.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800d2c4:	4b90      	ldr	r3, [pc, #576]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2d0:	d159      	bne.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800d2d2:	4b8d      	ldr	r3, [pc, #564]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	0a1b      	lsrs	r3, r3, #8
 800d2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2dc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	fb02 f203 	mul.w	r2, r2, r3
 800d2e6:	4b88      	ldr	r3, [pc, #544]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	091b      	lsrs	r3, r3, #4
 800d2ec:	f003 0307 	and.w	r3, r3, #7
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800d2f8:	4b83      	ldr	r3, [pc, #524]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	0d5b      	lsrs	r3, r3, #21
 800d2fe:	f003 0303 	and.w	r3, r3, #3
 800d302:	3301      	adds	r3, #1
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	69ba      	ldr	r2, [r7, #24]
 800d308:	fbb2 f3f3 	udiv	r3, r2, r3
 800d30c:	61fb      	str	r3, [r7, #28]
          break;
 800d30e:	e03a      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800d310:	4b7d      	ldr	r3, [pc, #500]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d31c:	d135      	bne.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800d31e:	4b7a      	ldr	r3, [pc, #488]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d32a:	d12e      	bne.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d32c:	4b76      	ldr	r3, [pc, #472]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	0a1b      	lsrs	r3, r3, #8
 800d332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d336:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	fb02 f203 	mul.w	r2, r2, r3
 800d340:	4b71      	ldr	r3, [pc, #452]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	091b      	lsrs	r3, r3, #4
 800d346:	f003 0307 	and.w	r3, r3, #7
 800d34a:	3301      	adds	r3, #1
 800d34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d350:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800d352:	4b6d      	ldr	r3, [pc, #436]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	0d5b      	lsrs	r3, r3, #21
 800d358:	f003 0303 	and.w	r3, r3, #3
 800d35c:	3301      	adds	r3, #1
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	69ba      	ldr	r2, [r7, #24]
 800d362:	fbb2 f3f3 	udiv	r3, r2, r3
 800d366:	61fb      	str	r3, [r7, #28]
          break;
 800d368:	e00f      	b.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800d36a:	4b67      	ldr	r3, [pc, #412]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d36c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d370:	f003 0302 	and.w	r3, r3, #2
 800d374:	2b02      	cmp	r3, #2
 800d376:	d10a      	bne.n	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800d378:	4b65      	ldr	r3, [pc, #404]	; (800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800d37a:	61fb      	str	r3, [r7, #28]
          break;
 800d37c:	e007      	b.n	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800d37e:	bf00      	nop
 800d380:	e386      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d382:	bf00      	nop
 800d384:	e384      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d386:	bf00      	nop
 800d388:	e382      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d38a:	bf00      	nop
 800d38c:	e380      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d38e:	bf00      	nop
        break;
 800d390:	e37e      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d392:	4b5d      	ldr	r3, [pc, #372]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d398:	f003 0303 	and.w	r3, r3, #3
 800d39c:	613b      	str	r3, [r7, #16]
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	d828      	bhi.n	800d3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800d3a4:	a201      	add	r2, pc, #4	; (adr r2, 800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800d3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3aa:	bf00      	nop
 800d3ac:	0800d3bd 	.word	0x0800d3bd
 800d3b0:	0800d3c5 	.word	0x0800d3c5
 800d3b4:	0800d3cd 	.word	0x0800d3cd
 800d3b8:	0800d3e1 	.word	0x0800d3e1
          frequency = HAL_RCC_GetPCLK2Freq();
 800d3bc:	f7ff fa46 	bl	800c84c <HAL_RCC_GetPCLK2Freq>
 800d3c0:	61f8      	str	r0, [r7, #28]
          break;
 800d3c2:	e01d      	b.n	800d400 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800d3c4:	f7ff f994 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d3c8:	61f8      	str	r0, [r7, #28]
          break;
 800d3ca:	e019      	b.n	800d400 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3cc:	4b4e      	ldr	r3, [pc, #312]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3d8:	d10f      	bne.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800d3da:	4b4e      	ldr	r3, [pc, #312]	; (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800d3dc:	61fb      	str	r3, [r7, #28]
          break;
 800d3de:	e00c      	b.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d3e0:	4b49      	ldr	r3, [pc, #292]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d107      	bne.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800d3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3f2:	61fb      	str	r3, [r7, #28]
          break;
 800d3f4:	e003      	b.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800d3f6:	bf00      	nop
 800d3f8:	e34a      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d3fa:	bf00      	nop
 800d3fc:	e348      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d3fe:	bf00      	nop
        break;
 800d400:	e346      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d402:	4b41      	ldr	r3, [pc, #260]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d408:	f003 030c 	and.w	r3, r3, #12
 800d40c:	613b      	str	r3, [r7, #16]
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	2b0c      	cmp	r3, #12
 800d412:	d83a      	bhi.n	800d48a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800d414:	a201      	add	r2, pc, #4	; (adr r2, 800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800d416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41a:	bf00      	nop
 800d41c:	0800d451 	.word	0x0800d451
 800d420:	0800d48b 	.word	0x0800d48b
 800d424:	0800d48b 	.word	0x0800d48b
 800d428:	0800d48b 	.word	0x0800d48b
 800d42c:	0800d459 	.word	0x0800d459
 800d430:	0800d48b 	.word	0x0800d48b
 800d434:	0800d48b 	.word	0x0800d48b
 800d438:	0800d48b 	.word	0x0800d48b
 800d43c:	0800d461 	.word	0x0800d461
 800d440:	0800d48b 	.word	0x0800d48b
 800d444:	0800d48b 	.word	0x0800d48b
 800d448:	0800d48b 	.word	0x0800d48b
 800d44c:	0800d475 	.word	0x0800d475
          frequency = HAL_RCC_GetPCLK1Freq();
 800d450:	f7ff f9e6 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d454:	61f8      	str	r0, [r7, #28]
          break;
 800d456:	e01d      	b.n	800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800d458:	f7ff f94a 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d45c:	61f8      	str	r0, [r7, #28]
          break;
 800d45e:	e019      	b.n	800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d460:	4b29      	ldr	r3, [pc, #164]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d46c:	d10f      	bne.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800d46e:	4b29      	ldr	r3, [pc, #164]	; (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800d470:	61fb      	str	r3, [r7, #28]
          break;
 800d472:	e00c      	b.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d474:	4b24      	ldr	r3, [pc, #144]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d47a:	f003 0302 	and.w	r3, r3, #2
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d107      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800d482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d486:	61fb      	str	r3, [r7, #28]
          break;
 800d488:	e003      	b.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800d48a:	bf00      	nop
 800d48c:	e300      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d48e:	bf00      	nop
 800d490:	e2fe      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d492:	bf00      	nop
        break;
 800d494:	e2fc      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d496:	4b1c      	ldr	r3, [pc, #112]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d49c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d4a0:	613b      	str	r3, [r7, #16]
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	2b30      	cmp	r3, #48	; 0x30
 800d4a6:	d021      	beq.n	800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2b30      	cmp	r3, #48	; 0x30
 800d4ac:	d829      	bhi.n	800d502 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2b20      	cmp	r3, #32
 800d4b2:	d011      	beq.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	2b20      	cmp	r3, #32
 800d4b8:	d823      	bhi.n	800d502 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d003      	beq.n	800d4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	2b10      	cmp	r3, #16
 800d4c4:	d004      	beq.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800d4c6:	e01c      	b.n	800d502 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d4c8:	f7ff f9aa 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d4cc:	61f8      	str	r0, [r7, #28]
          break;
 800d4ce:	e026      	b.n	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = HAL_RCC_GetSysClockFreq();
 800d4d0:	f7ff f90e 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d4d4:	61f8      	str	r0, [r7, #28]
          break;
 800d4d6:	e022      	b.n	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d4d8:	4b0b      	ldr	r3, [pc, #44]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4e4:	d118      	bne.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
            frequency = HSI_VALUE;
 800d4e6:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800d4e8:	61fb      	str	r3, [r7, #28]
          break;
 800d4ea:	e015      	b.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d4ec:	4b06      	ldr	r3, [pc, #24]	; (800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800d4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d110      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
            frequency = LSE_VALUE;
 800d4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4fe:	61fb      	str	r3, [r7, #28]
          break;
 800d500:	e00c      	b.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 800d502:	bf00      	nop
 800d504:	e2c4      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800d506:	bf00      	nop
 800d508:	40021000 	.word	0x40021000
 800d50c:	08013b6c 	.word	0x08013b6c
 800d510:	02dc6c00 	.word	0x02dc6c00
 800d514:	00f42400 	.word	0x00f42400
          break;
 800d518:	bf00      	nop
 800d51a:	e2b9      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d51c:	bf00      	nop
        break;
 800d51e:	e2b7      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d520:	4ba3      	ldr	r3, [pc, #652]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d526:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d52a:	613b      	str	r3, [r7, #16]
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	2bc0      	cmp	r3, #192	; 0xc0
 800d530:	d021      	beq.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	2bc0      	cmp	r3, #192	; 0xc0
 800d536:	d829      	bhi.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	2b80      	cmp	r3, #128	; 0x80
 800d53c:	d011      	beq.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	2b80      	cmp	r3, #128	; 0x80
 800d542:	d823      	bhi.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d003      	beq.n	800d552 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	2b40      	cmp	r3, #64	; 0x40
 800d54e:	d004      	beq.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
          break;
 800d550:	e01c      	b.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d552:	f7ff f965 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d556:	61f8      	str	r0, [r7, #28]
          break;
 800d558:	e01d      	b.n	800d596 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = HAL_RCC_GetSysClockFreq();
 800d55a:	f7ff f8c9 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d55e:	61f8      	str	r0, [r7, #28]
          break;
 800d560:	e019      	b.n	800d596 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d562:	4b93      	ldr	r3, [pc, #588]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d56a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d56e:	d10f      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            frequency = HSI_VALUE;
 800d570:	4b90      	ldr	r3, [pc, #576]	; (800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800d572:	61fb      	str	r3, [r7, #28]
          break;
 800d574:	e00c      	b.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d576:	4b8e      	ldr	r3, [pc, #568]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d57c:	f003 0302 	and.w	r3, r3, #2
 800d580:	2b02      	cmp	r3, #2
 800d582:	d107      	bne.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = LSE_VALUE;
 800d584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d588:	61fb      	str	r3, [r7, #28]
          break;
 800d58a:	e003      	b.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800d58c:	bf00      	nop
 800d58e:	e27f      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d590:	bf00      	nop
 800d592:	e27d      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d594:	bf00      	nop
        break;
 800d596:	e27b      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d598:	4b85      	ldr	r3, [pc, #532]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d59e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5a2:	613b      	str	r3, [r7, #16]
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5aa:	d025      	beq.n	800d5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5b2:	d82c      	bhi.n	800d60e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5ba:	d013      	beq.n	800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5c2:	d824      	bhi.n	800d60e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d004      	beq.n	800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5d0:	d004      	beq.n	800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          break;
 800d5d2:	e01c      	b.n	800d60e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d5d4:	f7ff f924 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d5d8:	61f8      	str	r0, [r7, #28]
          break;
 800d5da:	e01d      	b.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800d5dc:	f7ff f888 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d5e0:	61f8      	str	r0, [r7, #28]
          break;
 800d5e2:	e019      	b.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d5e4:	4b72      	ldr	r3, [pc, #456]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5f0:	d10f      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = HSI_VALUE;
 800d5f2:	4b70      	ldr	r3, [pc, #448]	; (800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800d5f4:	61fb      	str	r3, [r7, #28]
          break;
 800d5f6:	e00c      	b.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d5f8:	4b6d      	ldr	r3, [pc, #436]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5fe:	f003 0302 	and.w	r3, r3, #2
 800d602:	2b02      	cmp	r3, #2
 800d604:	d107      	bne.n	800d616 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = LSE_VALUE;
 800d606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d60a:	61fb      	str	r3, [r7, #28]
          break;
 800d60c:	e003      	b.n	800d616 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800d60e:	bf00      	nop
 800d610:	e23e      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d612:	bf00      	nop
 800d614:	e23c      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d616:	bf00      	nop
        break;
 800d618:	e23a      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d61a:	4b65      	ldr	r3, [pc, #404]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d620:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d624:	613b      	str	r3, [r7, #16]
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d62c:	d025      	beq.n	800d67a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d634:	d82c      	bhi.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d63c:	d013      	beq.n	800d666 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d644:	d824      	bhi.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d004      	beq.n	800d656 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d652:	d004      	beq.n	800d65e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          break;
 800d654:	e01c      	b.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d656:	f7ff f8e3 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d65a:	61f8      	str	r0, [r7, #28]
          break;
 800d65c:	e01d      	b.n	800d69a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          frequency = HAL_RCC_GetSysClockFreq();
 800d65e:	f7ff f847 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d662:	61f8      	str	r0, [r7, #28]
          break;
 800d664:	e019      	b.n	800d69a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d666:	4b52      	ldr	r3, [pc, #328]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d66e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d672:	d10f      	bne.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
            frequency = HSI_VALUE;
 800d674:	4b4f      	ldr	r3, [pc, #316]	; (800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800d676:	61fb      	str	r3, [r7, #28]
          break;
 800d678:	e00c      	b.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d67a:	4b4d      	ldr	r3, [pc, #308]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d680:	f003 0302 	and.w	r3, r3, #2
 800d684:	2b02      	cmp	r3, #2
 800d686:	d107      	bne.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
            frequency = LSE_VALUE;
 800d688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d68c:	61fb      	str	r3, [r7, #28]
          break;
 800d68e:	e003      	b.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 800d690:	bf00      	nop
 800d692:	e1fd      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d694:	bf00      	nop
 800d696:	e1fb      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d698:	bf00      	nop
        break;
 800d69a:	e1f9      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d69c:	4b44      	ldr	r3, [pc, #272]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d6a6:	613b      	str	r3, [r7, #16]
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6ae:	d00c      	beq.n	800d6ca <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6b6:	d864      	bhi.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6be:	d008      	beq.n	800d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6c6:	d030      	beq.n	800d72a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
          break;
 800d6c8:	e05b      	b.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = HAL_RCC_GetSysClockFreq();
 800d6ca:	f7ff f811 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d6ce:	61f8      	str	r0, [r7, #28]
          break;
 800d6d0:	e05c      	b.n	800d78c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800d6d2:	4b37      	ldr	r3, [pc, #220]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6de:	d152      	bne.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800d6e0:	4b33      	ldr	r3, [pc, #204]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d04c      	beq.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d6ec:	4b30      	ldr	r3, [pc, #192]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	0a1b      	lsrs	r3, r3, #8
 800d6f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6f6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	fb02 f203 	mul.w	r2, r2, r3
 800d700:	4b2b      	ldr	r3, [pc, #172]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	091b      	lsrs	r3, r3, #4
 800d706:	f003 0307 	and.w	r3, r3, #7
 800d70a:	3301      	adds	r3, #1
 800d70c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d710:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800d712:	4b27      	ldr	r3, [pc, #156]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	0e5b      	lsrs	r3, r3, #25
 800d718:	f003 0303 	and.w	r3, r3, #3
 800d71c:	3301      	adds	r3, #1
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	69ba      	ldr	r2, [r7, #24]
 800d722:	fbb2 f3f3 	udiv	r3, r2, r3
 800d726:	61fb      	str	r3, [r7, #28]
          break;
 800d728:	e02d      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800d72a:	4b21      	ldr	r3, [pc, #132]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d736:	d128      	bne.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 800d738:	4b1d      	ldr	r3, [pc, #116]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d73a:	695b      	ldr	r3, [r3, #20]
 800d73c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d022      	beq.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d744:	4b1a      	ldr	r3, [pc, #104]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	0a1b      	lsrs	r3, r3, #8
 800d74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d74e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	fb02 f203 	mul.w	r2, r2, r3
 800d758:	4b15      	ldr	r3, [pc, #84]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	091b      	lsrs	r3, r3, #4
 800d75e:	f003 0307 	and.w	r3, r3, #7
 800d762:	3301      	adds	r3, #1
 800d764:	fbb2 f3f3 	udiv	r3, r2, r3
 800d768:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800d76a:	4b11      	ldr	r3, [pc, #68]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d76c:	695b      	ldr	r3, [r3, #20]
 800d76e:	0e5b      	lsrs	r3, r3, #25
 800d770:	f003 0303 	and.w	r3, r3, #3
 800d774:	3301      	adds	r3, #1
 800d776:	005b      	lsls	r3, r3, #1
 800d778:	69ba      	ldr	r2, [r7, #24]
 800d77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d77e:	61fb      	str	r3, [r7, #28]
          break;
 800d780:	e003      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 800d782:	bf00      	nop
 800d784:	e184      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d786:	bf00      	nop
 800d788:	e182      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d78a:	bf00      	nop
        break;
 800d78c:	e180      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800d78e:	4b08      	ldr	r3, [pc, #32]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800d790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d798:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d103      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
          frequency = HAL_RCC_GetPCLK2Freq();
 800d7a0:	f7ff f854 	bl	800c84c <HAL_RCC_GetPCLK2Freq>
 800d7a4:	61f8      	str	r0, [r7, #28]
        break;
 800d7a6:	e173      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetSysClockFreq();
 800d7a8:	f7fe ffa2 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d7ac:	61f8      	str	r0, [r7, #28]
        break;
 800d7ae:	e16f      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800d7b0:	40021000 	.word	0x40021000
 800d7b4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d7b8:	4ba7      	ldr	r3, [pc, #668]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d7c2:	613b      	str	r3, [r7, #16]
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7ca:	d013      	beq.n	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7d2:	d819      	bhi.n	800d808 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d004      	beq.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7e0:	d004      	beq.n	800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
          break;
 800d7e2:	e011      	b.n	800d808 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d7e4:	f7ff f81c 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d7e8:	61f8      	str	r0, [r7, #28]
          break;
 800d7ea:	e010      	b.n	800d80e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800d7ec:	f7fe ff80 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d7f0:	61f8      	str	r0, [r7, #28]
          break;
 800d7f2:	e00c      	b.n	800d80e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7f4:	4b98      	ldr	r3, [pc, #608]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d800:	d104      	bne.n	800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
            frequency = HSI_VALUE;
 800d802:	4b96      	ldr	r3, [pc, #600]	; (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800d804:	61fb      	str	r3, [r7, #28]
          break;
 800d806:	e001      	b.n	800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          break;
 800d808:	bf00      	nop
 800d80a:	e141      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d80c:	bf00      	nop
        break;
 800d80e:	e13f      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d810:	4b91      	ldr	r3, [pc, #580]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d816:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d81a:	613b      	str	r3, [r7, #16]
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d822:	d013      	beq.n	800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d82a:	d819      	bhi.n	800d860 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d004      	beq.n	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d838:	d004      	beq.n	800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 800d83a:	e011      	b.n	800d860 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d83c:	f7fe fff0 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d840:	61f8      	str	r0, [r7, #28]
          break;
 800d842:	e010      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800d844:	f7fe ff54 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d848:	61f8      	str	r0, [r7, #28]
          break;
 800d84a:	e00c      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d84c:	4b82      	ldr	r3, [pc, #520]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d858:	d104      	bne.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            frequency = HSI_VALUE;
 800d85a:	4b80      	ldr	r3, [pc, #512]	; (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800d85c:	61fb      	str	r3, [r7, #28]
          break;
 800d85e:	e001      	b.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          break;
 800d860:	bf00      	nop
 800d862:	e115      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d864:	bf00      	nop
        break;
 800d866:	e113      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d868:	4b7b      	ldr	r3, [pc, #492]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d86e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d872:	613b      	str	r3, [r7, #16]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d87a:	d013      	beq.n	800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d882:	d819      	bhi.n	800d8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d004      	beq.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d890:	d004      	beq.n	800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          break;
 800d892:	e011      	b.n	800d8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d894:	f7fe ffc4 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d898:	61f8      	str	r0, [r7, #28]
          break;
 800d89a:	e010      	b.n	800d8be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          frequency = HAL_RCC_GetSysClockFreq();
 800d89c:	f7fe ff28 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d8a0:	61f8      	str	r0, [r7, #28]
          break;
 800d8a2:	e00c      	b.n	800d8be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8a4:	4b6c      	ldr	r3, [pc, #432]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8b0:	d104      	bne.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency = HSI_VALUE;
 800d8b2:	4b6a      	ldr	r3, [pc, #424]	; (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800d8b4:	61fb      	str	r3, [r7, #28]
          break;
 800d8b6:	e001      	b.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          break;
 800d8b8:	bf00      	nop
 800d8ba:	e0e9      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d8bc:	bf00      	nop
        break;
 800d8be:	e0e7      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d8c0:	4b65      	ldr	r3, [pc, #404]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d8c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8c6:	f003 0303 	and.w	r3, r3, #3
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d011      	beq.n	800d8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d818      	bhi.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d004      	beq.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          break;
 800d8e4:	e011      	b.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d8e6:	f7fe ff9b 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d8ea:	61f8      	str	r0, [r7, #28]
          break;
 800d8ec:	e010      	b.n	800d910 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800d8ee:	f7fe feff 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 800d8f2:	61f8      	str	r0, [r7, #28]
          break;
 800d8f4:	e00c      	b.n	800d910 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8f6:	4b58      	ldr	r3, [pc, #352]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d902:	d104      	bne.n	800d90e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
            frequency = HSI_VALUE;
 800d904:	4b55      	ldr	r3, [pc, #340]	; (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800d906:	61fb      	str	r3, [r7, #28]
          break;
 800d908:	e001      	b.n	800d90e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          break;
 800d90a:	bf00      	nop
 800d90c:	e0c0      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d90e:	bf00      	nop
        break;
 800d910:	e0be      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d912:	4b51      	ldr	r3, [pc, #324]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d918:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800d91c:	613b      	str	r3, [r7, #16]
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d924:	d02c      	beq.n	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d92c:	d833      	bhi.n	800d996 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d934:	d01a      	beq.n	800d96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d93c:	d82b      	bhi.n	800d996 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d004      	beq.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d94a:	d004      	beq.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
          break;
 800d94c:	e023      	b.n	800d996 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d94e:	f7fe ff67 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d952:	61f8      	str	r0, [r7, #28]
          break;
 800d954:	e026      	b.n	800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800d956:	4b40      	ldr	r3, [pc, #256]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d95c:	f003 0302 	and.w	r3, r3, #2
 800d960:	2b02      	cmp	r3, #2
 800d962:	d11a      	bne.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
              frequency = LSI_VALUE;
 800d964:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d968:	61fb      	str	r3, [r7, #28]
          break;
 800d96a:	e016      	b.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d96c:	4b3a      	ldr	r3, [pc, #232]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d978:	d111      	bne.n	800d99e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = HSI_VALUE;
 800d97a:	4b38      	ldr	r3, [pc, #224]	; (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800d97c:	61fb      	str	r3, [r7, #28]
          break;
 800d97e:	e00e      	b.n	800d99e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d980:	4b35      	ldr	r3, [pc, #212]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d986:	f003 0302 	and.w	r3, r3, #2
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d109      	bne.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
            frequency = LSE_VALUE;
 800d98e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d992:	61fb      	str	r3, [r7, #28]
          break;
 800d994:	e005      	b.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          break;
 800d996:	bf00      	nop
 800d998:	e07a      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d99a:	bf00      	nop
 800d99c:	e078      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d99e:	bf00      	nop
 800d9a0:	e076      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800d9a2:	bf00      	nop
        break;
 800d9a4:	e074      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d9a6:	4b2c      	ldr	r3, [pc, #176]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d9b0:	613b      	str	r3, [r7, #16]
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d9b8:	d02c      	beq.n	800da14 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d9c0:	d833      	bhi.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d9c8:	d01a      	beq.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d9d0:	d82b      	bhi.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d004      	beq.n	800d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9de:	d004      	beq.n	800d9ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
          break;
 800d9e0:	e023      	b.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
          frequency = HAL_RCC_GetPCLK1Freq();
 800d9e2:	f7fe ff1d 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800d9e6:	61f8      	str	r0, [r7, #28]
          break;
 800d9e8:	e026      	b.n	800da38 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800d9ea:	4b1b      	ldr	r3, [pc, #108]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800d9ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d9f0:	f003 0302 	and.w	r3, r3, #2
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d11a      	bne.n	800da2e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
              frequency = LSI_VALUE;
 800d9f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d9fc:	61fb      	str	r3, [r7, #28]
          break;
 800d9fe:	e016      	b.n	800da2e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da00:	4b15      	ldr	r3, [pc, #84]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da0c:	d111      	bne.n	800da32 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
            frequency = HSI_VALUE;
 800da0e:	4b13      	ldr	r3, [pc, #76]	; (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800da10:	61fb      	str	r3, [r7, #28]
          break;
 800da12:	e00e      	b.n	800da32 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800da14:	4b10      	ldr	r3, [pc, #64]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800da16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da1a:	f003 0302 	and.w	r3, r3, #2
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d109      	bne.n	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
            frequency = LSE_VALUE;
 800da22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da26:	61fb      	str	r3, [r7, #28]
          break;
 800da28:	e005      	b.n	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
          break;
 800da2a:	bf00      	nop
 800da2c:	e030      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800da2e:	bf00      	nop
 800da30:	e02e      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800da32:	bf00      	nop
 800da34:	e02c      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800da36:	bf00      	nop
        break;
 800da38:	e02a      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800da3a:	4b07      	ldr	r3, [pc, #28]	; (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800da3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da44:	613b      	str	r3, [r7, #16]
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d009      	beq.n	800da60 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da52:	d009      	beq.n	800da68 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 800da54:	e012      	b.n	800da7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800da56:	bf00      	nop
 800da58:	40021000 	.word	0x40021000
 800da5c:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 800da60:	f7fe fede 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 800da64:	61f8      	str	r0, [r7, #28]
          break;
 800da66:	e009      	b.n	800da7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da68:	4b0c      	ldr	r3, [pc, #48]	; (800da9c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da74:	d101      	bne.n	800da7a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
            frequency = HSI_VALUE;
 800da76:	4b0a      	ldr	r3, [pc, #40]	; (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>)
 800da78:	61fb      	str	r3, [r7, #28]
          break;
 800da7a:	bf00      	nop
        break;
 800da7c:	e008      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800da7e:	bf00      	nop
 800da80:	e006      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800da82:	bf00      	nop
 800da84:	e004      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800da86:	bf00      	nop
 800da88:	e002      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800da8a:	bf00      	nop
 800da8c:	e000      	b.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800da8e:	bf00      	nop
    }
  }

  return(frequency);
 800da90:	69fb      	ldr	r3, [r7, #28]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3720      	adds	r7, #32
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	40021000 	.word	0x40021000
 800daa0:	00f42400 	.word	0x00f42400

0800daa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dab2:	4b74      	ldr	r3, [pc, #464]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	f003 0303 	and.w	r3, r3, #3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d018      	beq.n	800daf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800dabe:	4b71      	ldr	r3, [pc, #452]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	f003 0203 	and.w	r2, r3, #3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d10d      	bne.n	800daea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
       ||
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d009      	beq.n	800daea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800dad6:	4b6b      	ldr	r3, [pc, #428]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	091b      	lsrs	r3, r3, #4
 800dadc:	f003 0307 	and.w	r3, r3, #7
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	685b      	ldr	r3, [r3, #4]
       ||
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d047      	beq.n	800db7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	73fb      	strb	r3, [r7, #15]
 800daee:	e044      	b.n	800db7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b03      	cmp	r3, #3
 800daf6:	d018      	beq.n	800db2a <RCCEx_PLLSAI1_Config+0x86>
 800daf8:	2b03      	cmp	r3, #3
 800dafa:	d825      	bhi.n	800db48 <RCCEx_PLLSAI1_Config+0xa4>
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d002      	beq.n	800db06 <RCCEx_PLLSAI1_Config+0x62>
 800db00:	2b02      	cmp	r3, #2
 800db02:	d009      	beq.n	800db18 <RCCEx_PLLSAI1_Config+0x74>
 800db04:	e020      	b.n	800db48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800db06:	4b5f      	ldr	r3, [pc, #380]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f003 0302 	and.w	r3, r3, #2
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d11d      	bne.n	800db4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800db16:	e01a      	b.n	800db4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800db18:	4b5a      	ldr	r3, [pc, #360]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db20:	2b00      	cmp	r3, #0
 800db22:	d116      	bne.n	800db52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800db28:	e013      	b.n	800db52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800db2a:	4b56      	ldr	r3, [pc, #344]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10f      	bne.n	800db56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800db36:	4b53      	ldr	r3, [pc, #332]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d109      	bne.n	800db56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800db42:	2301      	movs	r3, #1
 800db44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800db46:	e006      	b.n	800db56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	73fb      	strb	r3, [r7, #15]
      break;
 800db4c:	e004      	b.n	800db58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800db4e:	bf00      	nop
 800db50:	e002      	b.n	800db58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800db52:	bf00      	nop
 800db54:	e000      	b.n	800db58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800db56:	bf00      	nop
    }

    if(status == HAL_OK)
 800db58:	7bfb      	ldrb	r3, [r7, #15]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10d      	bne.n	800db7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800db5e:	4b49      	ldr	r3, [pc, #292]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6819      	ldr	r1, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	3b01      	subs	r3, #1
 800db70:	011b      	lsls	r3, r3, #4
 800db72:	430b      	orrs	r3, r1
 800db74:	4943      	ldr	r1, [pc, #268]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db76:	4313      	orrs	r3, r2
 800db78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d17c      	bne.n	800dc7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800db80:	4b40      	ldr	r3, [pc, #256]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a3f      	ldr	r2, [pc, #252]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db8c:	f7fa fc30 	bl	80083f0 <HAL_GetTick>
 800db90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800db92:	e009      	b.n	800dba8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800db94:	f7fa fc2c 	bl	80083f0 <HAL_GetTick>
 800db98:	4602      	mov	r2, r0
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d902      	bls.n	800dba8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800dba2:	2303      	movs	r3, #3
 800dba4:	73fb      	strb	r3, [r7, #15]
        break;
 800dba6:	e005      	b.n	800dbb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dba8:	4b36      	ldr	r3, [pc, #216]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1ef      	bne.n	800db94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d15f      	bne.n	800dc7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d110      	bne.n	800dbe2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dbc0:	4b30      	ldr	r3, [pc, #192]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800dbc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	6892      	ldr	r2, [r2, #8]
 800dbd0:	0211      	lsls	r1, r2, #8
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	68d2      	ldr	r2, [r2, #12]
 800dbd6:	06d2      	lsls	r2, r2, #27
 800dbd8:	430a      	orrs	r2, r1
 800dbda:	492a      	ldr	r1, [pc, #168]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	610b      	str	r3, [r1, #16]
 800dbe0:	e027      	b.n	800dc32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d112      	bne.n	800dc0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dbe8:	4b26      	ldr	r3, [pc, #152]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800dbf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	6892      	ldr	r2, [r2, #8]
 800dbf8:	0211      	lsls	r1, r2, #8
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	6912      	ldr	r2, [r2, #16]
 800dbfe:	0852      	lsrs	r2, r2, #1
 800dc00:	3a01      	subs	r2, #1
 800dc02:	0552      	lsls	r2, r2, #21
 800dc04:	430a      	orrs	r2, r1
 800dc06:	491f      	ldr	r1, [pc, #124]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	610b      	str	r3, [r1, #16]
 800dc0c:	e011      	b.n	800dc32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dc0e:	4b1d      	ldr	r3, [pc, #116]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc10:	691b      	ldr	r3, [r3, #16]
 800dc12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800dc16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6892      	ldr	r2, [r2, #8]
 800dc1e:	0211      	lsls	r1, r2, #8
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	6952      	ldr	r2, [r2, #20]
 800dc24:	0852      	lsrs	r2, r2, #1
 800dc26:	3a01      	subs	r2, #1
 800dc28:	0652      	lsls	r2, r2, #25
 800dc2a:	430a      	orrs	r2, r1
 800dc2c:	4915      	ldr	r1, [pc, #84]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800dc32:	4b14      	ldr	r3, [pc, #80]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a13      	ldr	r2, [pc, #76]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc3e:	f7fa fbd7 	bl	80083f0 <HAL_GetTick>
 800dc42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dc44:	e009      	b.n	800dc5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dc46:	f7fa fbd3 	bl	80083f0 <HAL_GetTick>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d902      	bls.n	800dc5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800dc54:	2303      	movs	r3, #3
 800dc56:	73fb      	strb	r3, [r7, #15]
          break;
 800dc58:	e005      	b.n	800dc66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dc5a:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d0ef      	beq.n	800dc46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d106      	bne.n	800dc7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800dc6c:	4b05      	ldr	r3, [pc, #20]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc6e:	691a      	ldr	r2, [r3, #16]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	699b      	ldr	r3, [r3, #24]
 800dc74:	4903      	ldr	r1, [pc, #12]	; (800dc84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc76:	4313      	orrs	r3, r2
 800dc78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	40021000 	.word	0x40021000

0800dc88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dc96:	4b69      	ldr	r3, [pc, #420]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	f003 0303 	and.w	r3, r3, #3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d018      	beq.n	800dcd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800dca2:	4b66      	ldr	r3, [pc, #408]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	f003 0203 	and.w	r2, r3, #3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d10d      	bne.n	800dcce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
       ||
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d009      	beq.n	800dcce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800dcba:	4b60      	ldr	r3, [pc, #384]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	091b      	lsrs	r3, r3, #4
 800dcc0:	f003 0307 	and.w	r3, r3, #7
 800dcc4:	1c5a      	adds	r2, r3, #1
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	685b      	ldr	r3, [r3, #4]
       ||
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d047      	beq.n	800dd5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	73fb      	strb	r3, [r7, #15]
 800dcd2:	e044      	b.n	800dd5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d018      	beq.n	800dd0e <RCCEx_PLLSAI2_Config+0x86>
 800dcdc:	2b03      	cmp	r3, #3
 800dcde:	d825      	bhi.n	800dd2c <RCCEx_PLLSAI2_Config+0xa4>
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d002      	beq.n	800dcea <RCCEx_PLLSAI2_Config+0x62>
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d009      	beq.n	800dcfc <RCCEx_PLLSAI2_Config+0x74>
 800dce8:	e020      	b.n	800dd2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800dcea:	4b54      	ldr	r3, [pc, #336]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f003 0302 	and.w	r3, r3, #2
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d11d      	bne.n	800dd32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dcfa:	e01a      	b.n	800dd32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800dcfc:	4b4f      	ldr	r3, [pc, #316]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d116      	bne.n	800dd36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dd0c:	e013      	b.n	800dd36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800dd0e:	4b4b      	ldr	r3, [pc, #300]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10f      	bne.n	800dd3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800dd1a:	4b48      	ldr	r3, [pc, #288]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d109      	bne.n	800dd3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dd2a:	e006      	b.n	800dd3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	73fb      	strb	r3, [r7, #15]
      break;
 800dd30:	e004      	b.n	800dd3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800dd32:	bf00      	nop
 800dd34:	e002      	b.n	800dd3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800dd36:	bf00      	nop
 800dd38:	e000      	b.n	800dd3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800dd3a:	bf00      	nop
    }

    if(status == HAL_OK)
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10d      	bne.n	800dd5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800dd42:	4b3e      	ldr	r3, [pc, #248]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6819      	ldr	r1, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	011b      	lsls	r3, r3, #4
 800dd56:	430b      	orrs	r3, r1
 800dd58:	4938      	ldr	r1, [pc, #224]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d166      	bne.n	800de32 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800dd64:	4b35      	ldr	r3, [pc, #212]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a34      	ldr	r2, [pc, #208]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dd6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd70:	f7fa fb3e 	bl	80083f0 <HAL_GetTick>
 800dd74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dd76:	e009      	b.n	800dd8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800dd78:	f7fa fb3a 	bl	80083f0 <HAL_GetTick>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	2b02      	cmp	r3, #2
 800dd84:	d902      	bls.n	800dd8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800dd86:	2303      	movs	r3, #3
 800dd88:	73fb      	strb	r3, [r7, #15]
        break;
 800dd8a:	e005      	b.n	800dd98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dd8c:	4b2b      	ldr	r3, [pc, #172]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1ef      	bne.n	800dd78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d149      	bne.n	800de32 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d110      	bne.n	800ddc6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800dda4:	4b25      	ldr	r3, [pc, #148]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dda6:	695b      	ldr	r3, [r3, #20]
 800dda8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ddac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	6892      	ldr	r2, [r2, #8]
 800ddb4:	0211      	lsls	r1, r2, #8
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	68d2      	ldr	r2, [r2, #12]
 800ddba:	06d2      	lsls	r2, r2, #27
 800ddbc:	430a      	orrs	r2, r1
 800ddbe:	491f      	ldr	r1, [pc, #124]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	614b      	str	r3, [r1, #20]
 800ddc4:	e011      	b.n	800ddea <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ddc6:	4b1d      	ldr	r3, [pc, #116]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ddce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	6892      	ldr	r2, [r2, #8]
 800ddd6:	0211      	lsls	r1, r2, #8
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	6912      	ldr	r2, [r2, #16]
 800dddc:	0852      	lsrs	r2, r2, #1
 800ddde:	3a01      	subs	r2, #1
 800dde0:	0652      	lsls	r2, r2, #25
 800dde2:	430a      	orrs	r2, r1
 800dde4:	4915      	ldr	r1, [pc, #84]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800dde6:	4313      	orrs	r3, r2
 800dde8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ddea:	4b14      	ldr	r3, [pc, #80]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a13      	ldr	r2, [pc, #76]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ddf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddf6:	f7fa fafb 	bl	80083f0 <HAL_GetTick>
 800ddfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ddfc:	e009      	b.n	800de12 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ddfe:	f7fa faf7 	bl	80083f0 <HAL_GetTick>
 800de02:	4602      	mov	r2, r0
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	1ad3      	subs	r3, r2, r3
 800de08:	2b02      	cmp	r3, #2
 800de0a:	d902      	bls.n	800de12 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800de0c:	2303      	movs	r3, #3
 800de0e:	73fb      	strb	r3, [r7, #15]
          break;
 800de10:	e005      	b.n	800de1e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800de12:	4b0a      	ldr	r3, [pc, #40]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d0ef      	beq.n	800ddfe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d106      	bne.n	800de32 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800de24:	4b05      	ldr	r3, [pc, #20]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800de26:	695a      	ldr	r2, [r3, #20]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	695b      	ldr	r3, [r3, #20]
 800de2c:	4903      	ldr	r1, [pc, #12]	; (800de3c <RCCEx_PLLSAI2_Config+0x1b4>)
 800de2e:	4313      	orrs	r3, r2
 800de30:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800de32:	7bfb      	ldrb	r3, [r7, #15]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	40021000 	.word	0x40021000

0800de40 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800de40:	b480      	push	{r7}
 800de42:	b089      	sub	sp, #36	; 0x24
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800de4a:	2300      	movs	r3, #0
 800de4c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800de4e:	2300      	movs	r3, #0
 800de50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de5c:	d10c      	bne.n	800de78 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800de5e:	4b77      	ldr	r3, [pc, #476]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800de60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800de68:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800de70:	d112      	bne.n	800de98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800de72:	4b73      	ldr	r3, [pc, #460]	; (800e040 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800de74:	61fb      	str	r3, [r7, #28]
 800de76:	e00f      	b.n	800de98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de7e:	d10b      	bne.n	800de98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800de80:	4b6e      	ldr	r3, [pc, #440]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800de82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de86:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800de8a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de92:	d101      	bne.n	800de98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800de94:	4b6a      	ldr	r3, [pc, #424]	; (800e040 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800de96:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f040 80c6 	bne.w	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800deaa:	d003      	beq.n	800deb4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800deb2:	d13b      	bne.n	800df2c <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800deb4:	4b61      	ldr	r3, [pc, #388]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800debc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dec0:	f040 80b3 	bne.w	800e02a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800dec4:	4b5d      	ldr	r3, [pc, #372]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800decc:	2b00      	cmp	r3, #0
 800dece:	f000 80ac 	beq.w	800e02a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ded2:	4b5a      	ldr	r3, [pc, #360]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	091b      	lsrs	r3, r3, #4
 800ded8:	f003 0307 	and.w	r3, r3, #7
 800dedc:	3301      	adds	r3, #1
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dee4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800dee6:	4b55      	ldr	r3, [pc, #340]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	0a1b      	lsrs	r3, r3, #8
 800deec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800def0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800def2:	4b52      	ldr	r3, [pc, #328]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	0edb      	lsrs	r3, r3, #27
 800def8:	f003 031f 	and.w	r3, r3, #31
 800defc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800df04:	4b4d      	ldr	r3, [pc, #308]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800df10:	2311      	movs	r3, #17
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e001      	b.n	800df1a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800df16:	2307      	movs	r3, #7
 800df18:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	fb02 f203 	mul.w	r2, r2, r3
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	fbb2 f3f3 	udiv	r3, r2, r3
 800df28:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800df2a:	e07e      	b.n	800e02a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d139      	bne.n	800dfa6 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800df32:	4b42      	ldr	r3, [pc, #264]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df3e:	d175      	bne.n	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800df40:	4b3e      	ldr	r3, [pc, #248]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d06f      	beq.n	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800df4c:	4b3b      	ldr	r3, [pc, #236]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	091b      	lsrs	r3, r3, #4
 800df52:	f003 0307 	and.w	r3, r3, #7
 800df56:	3301      	adds	r3, #1
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df5e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800df60:	4b36      	ldr	r3, [pc, #216]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	0a1b      	lsrs	r3, r3, #8
 800df66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df6a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800df6c:	4b33      	ldr	r3, [pc, #204]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	0edb      	lsrs	r3, r3, #27
 800df72:	f003 031f 	and.w	r3, r3, #31
 800df76:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10a      	bne.n	800df94 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800df7e:	4b2f      	ldr	r3, [pc, #188]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800df8a:	2311      	movs	r3, #17
 800df8c:	617b      	str	r3, [r7, #20]
 800df8e:	e001      	b.n	800df94 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800df90:	2307      	movs	r3, #7
 800df92:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	fb02 f203 	mul.w	r2, r2, r3
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa2:	61fb      	str	r3, [r7, #28]
 800dfa4:	e042      	b.n	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfac:	d003      	beq.n	800dfb6 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dfb4:	d13a      	bne.n	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800dfb6:	4b21      	ldr	r3, [pc, #132]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfc2:	d133      	bne.n	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800dfc4:	4b1d      	ldr	r3, [pc, #116]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800dfc6:	695b      	ldr	r3, [r3, #20]
 800dfc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d02d      	beq.n	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800dfd0:	4b1a      	ldr	r3, [pc, #104]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	091b      	lsrs	r3, r3, #4
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	3301      	adds	r3, #1
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfe2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800dfe4:	4b15      	ldr	r3, [pc, #84]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800dfe6:	695b      	ldr	r3, [r3, #20]
 800dfe8:	0a1b      	lsrs	r3, r3, #8
 800dfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfee:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800dff0:	4b12      	ldr	r3, [pc, #72]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800dff2:	695b      	ldr	r3, [r3, #20]
 800dff4:	0edb      	lsrs	r3, r3, #27
 800dff6:	f003 031f 	and.w	r3, r3, #31
 800dffa:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10a      	bne.n	800e018 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800e002:	4b0e      	ldr	r3, [pc, #56]	; (800e03c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800e004:	695b      	ldr	r3, [r3, #20]
 800e006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800e00e:	2311      	movs	r3, #17
 800e010:	617b      	str	r3, [r7, #20]
 800e012:	e001      	b.n	800e018 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800e014:	2307      	movs	r3, #7
 800e016:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	fb02 f203 	mul.w	r2, r2, r3
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	fbb2 f3f3 	udiv	r3, r2, r3
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	e000      	b.n	800e02c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800e02a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800e02c:	69fb      	ldr	r3, [r7, #28]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3724      	adds	r7, #36	; 0x24
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	40021000 	.word	0x40021000
 800e040:	001fff68 	.word	0x001fff68

0800e044 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e155      	b.n	800e302 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d106      	bne.n	800e070 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7f4 fb50 	bl	8002710 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f959 	bl	800e328 <SAI_Disable>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e140      	b.n	800e302 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2202      	movs	r2, #2
 800e084:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	d00c      	beq.n	800e0aa <HAL_SAI_Init+0x66>
 800e090:	2b02      	cmp	r3, #2
 800e092:	d80d      	bhi.n	800e0b0 <HAL_SAI_Init+0x6c>
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <HAL_SAI_Init+0x5a>
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d003      	beq.n	800e0a4 <HAL_SAI_Init+0x60>
 800e09c:	e008      	b.n	800e0b0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	61fb      	str	r3, [r7, #28]
      break;
 800e0a2:	e008      	b.n	800e0b6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e0a4:	2310      	movs	r3, #16
 800e0a6:	61fb      	str	r3, [r7, #28]
      break;
 800e0a8:	e005      	b.n	800e0b6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e0aa:	2320      	movs	r3, #32
 800e0ac:	61fb      	str	r3, [r7, #28]
      break;
 800e0ae:	e002      	b.n	800e0b6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61fb      	str	r3, [r7, #28]
      break;
 800e0b4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d81d      	bhi.n	800e0fa <HAL_SAI_Init+0xb6>
 800e0be:	a201      	add	r2, pc, #4	; (adr r2, 800e0c4 <HAL_SAI_Init+0x80>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e0d5 	.word	0x0800e0d5
 800e0c8:	0800e0db 	.word	0x0800e0db
 800e0cc:	0800e0e3 	.word	0x0800e0e3
 800e0d0:	0800e0eb 	.word	0x0800e0eb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	617b      	str	r3, [r7, #20]
      break;
 800e0d8:	e012      	b.n	800e100 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0de:	617b      	str	r3, [r7, #20]
      break;
 800e0e0:	e00e      	b.n	800e100 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e0e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0e6:	617b      	str	r3, [r7, #20]
      break;
 800e0e8:	e00a      	b.n	800e100 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e0ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0ee:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	f043 0301 	orr.w	r3, r3, #1
 800e0f6:	61fb      	str	r3, [r7, #28]
      break;
 800e0f8:	e002      	b.n	800e100 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	617b      	str	r3, [r7, #20]
      break;
 800e0fe:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a81      	ldr	r2, [pc, #516]	; (800e30c <HAL_SAI_Init+0x2c8>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d004      	beq.n	800e114 <HAL_SAI_Init+0xd0>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a80      	ldr	r2, [pc, #512]	; (800e310 <HAL_SAI_Init+0x2cc>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d103      	bne.n	800e11c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800e114:	4a7f      	ldr	r2, [pc, #508]	; (800e314 <HAL_SAI_Init+0x2d0>)
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	6013      	str	r3, [r2, #0]
 800e11a:	e002      	b.n	800e122 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e11c:	4a7e      	ldr	r2, [pc, #504]	; (800e318 <HAL_SAI_Init+0x2d4>)
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d041      	beq.n	800e1ae <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a77      	ldr	r2, [pc, #476]	; (800e30c <HAL_SAI_Init+0x2c8>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d004      	beq.n	800e13e <HAL_SAI_Init+0xfa>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a75      	ldr	r2, [pc, #468]	; (800e310 <HAL_SAI_Init+0x2cc>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d105      	bne.n	800e14a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e13e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e142:	f7fe fef5 	bl	800cf30 <HAL_RCCEx_GetPeriphCLKFreq>
 800e146:	6138      	str	r0, [r7, #16]
 800e148:	e004      	b.n	800e154 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e14a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e14e:	f7fe feef 	bl	800cf30 <HAL_RCCEx_GetPeriphCLKFreq>
 800e152:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800e154:	693a      	ldr	r2, [r7, #16]
 800e156:	4613      	mov	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4413      	add	r3, r2
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	461a      	mov	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	69db      	ldr	r3, [r3, #28]
 800e164:	025b      	lsls	r3, r3, #9
 800e166:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4a6b      	ldr	r2, [pc, #428]	; (800e31c <HAL_SAI_Init+0x2d8>)
 800e170:	fba2 2303 	umull	r2, r3, r2, r3
 800e174:	08da      	lsrs	r2, r3, #3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e17a:	68f9      	ldr	r1, [r7, #12]
 800e17c:	4b67      	ldr	r3, [pc, #412]	; (800e31c <HAL_SAI_Init+0x2d8>)
 800e17e:	fba3 2301 	umull	r2, r3, r3, r1
 800e182:	08da      	lsrs	r2, r3, #3
 800e184:	4613      	mov	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4413      	add	r3, r2
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	1aca      	subs	r2, r1, r3
 800e18e:	2a08      	cmp	r2, #8
 800e190:	d904      	bls.n	800e19c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a0:	2b04      	cmp	r3, #4
 800e1a2:	d104      	bne.n	800e1ae <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a1b      	ldr	r3, [r3, #32]
 800e1a8:	085a      	lsrs	r2, r3, #1
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <HAL_SAI_Init+0x17a>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d109      	bne.n	800e1d2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d101      	bne.n	800e1ca <HAL_SAI_Init+0x186>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	e001      	b.n	800e1ce <HAL_SAI_Init+0x18a>
 800e1ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1ce:	61bb      	str	r3, [r7, #24]
 800e1d0:	e008      	b.n	800e1e4 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d102      	bne.n	800e1e0 <HAL_SAI_Init+0x19c>
 800e1da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1de:	e000      	b.n	800e1e2 <HAL_SAI_Init+0x19e>
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6819      	ldr	r1, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	4b4c      	ldr	r3, [pc, #304]	; (800e320 <HAL_SAI_Init+0x2dc>)
 800e1f0:	400b      	ands	r3, r1
 800e1f2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6819      	ldr	r1, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e202:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e208:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20e:	431a      	orrs	r2, r3
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800e21c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e228:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	051b      	lsls	r3, r3, #20
 800e230:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	430a      	orrs	r2, r1
 800e238:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	6812      	ldr	r2, [r2, #0]
 800e244:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e248:	f023 030f 	bic.w	r3, r3, #15
 800e24c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6859      	ldr	r1, [r3, #4]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	699a      	ldr	r2, [r3, #24]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e25c:	431a      	orrs	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e262:	431a      	orrs	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	430a      	orrs	r2, r1
 800e26a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6899      	ldr	r1, [r3, #8]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	4b2b      	ldr	r3, [pc, #172]	; (800e324 <HAL_SAI_Init+0x2e0>)
 800e278:	400b      	ands	r3, r1
 800e27a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6899      	ldr	r1, [r3, #8]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e286:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e28c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800e292:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800e298:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e2a2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	430a      	orrs	r2, r1
 800e2aa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68d9      	ldr	r1, [r3, #12]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e2ba:	400b      	ands	r3, r1
 800e2bc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68d9      	ldr	r1, [r3, #12]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2cc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2d2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e2d4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	021b      	lsls	r3, r3, #8
 800e2de:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	430a      	orrs	r2, r1
 800e2e6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3720      	adds	r7, #32
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	40015404 	.word	0x40015404
 800e310:	40015424 	.word	0x40015424
 800e314:	40015400 	.word	0x40015400
 800e318:	40015800 	.word	0x40015800
 800e31c:	cccccccd 	.word	0xcccccccd
 800e320:	ff05c010 	.word	0xff05c010
 800e324:	fff88000 	.word	0xfff88000

0800e328 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e330:	4b18      	ldr	r3, [pc, #96]	; (800e394 <SAI_Disable+0x6c>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a18      	ldr	r2, [pc, #96]	; (800e398 <SAI_Disable+0x70>)
 800e336:	fba2 2303 	umull	r2, r3, r2, r3
 800e33a:	0b1b      	lsrs	r3, r3, #12
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e352:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e360:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800e36a:	2303      	movs	r3, #3
 800e36c:	72fb      	strb	r3, [r7, #11]
      break;
 800e36e:	e009      	b.n	800e384 <SAI_Disable+0x5c>
    }
    count--;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3b01      	subs	r3, #1
 800e374:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1e7      	bne.n	800e354 <SAI_Disable+0x2c>

  return status;
 800e384:	7afb      	ldrb	r3, [r7, #11]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	20000004 	.word	0x20000004
 800e398:	95cbec1b 	.word	0x95cbec1b

0800e39c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d101      	bne.n	800e3ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e095      	b.n	800e4da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d108      	bne.n	800e3c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3be:	d009      	beq.n	800e3d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	61da      	str	r2, [r3, #28]
 800e3c6:	e005      	b.n	800e3d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7f4 fa84 	bl	80028fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2202      	movs	r2, #2
 800e3f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e40a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e414:	d902      	bls.n	800e41c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e416:	2300      	movs	r3, #0
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	e002      	b.n	800e422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e41c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e42a:	d007      	beq.n	800e43c <HAL_SPI_Init+0xa0>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e434:	d002      	beq.n	800e43c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e44c:	431a      	orrs	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	691b      	ldr	r3, [r3, #16]
 800e452:	f003 0302 	and.w	r3, r3, #2
 800e456:	431a      	orrs	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	f003 0301 	and.w	r3, r3, #1
 800e460:	431a      	orrs	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e46a:	431a      	orrs	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	69db      	ldr	r3, [r3, #28]
 800e470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e474:	431a      	orrs	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e47e:	ea42 0103 	orr.w	r1, r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e486:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	430a      	orrs	r2, r1
 800e490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	0c1b      	lsrs	r3, r3, #16
 800e498:	f003 0204 	and.w	r2, r3, #4
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a0:	f003 0310 	and.w	r3, r3, #16
 800e4a4:	431a      	orrs	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4aa:	f003 0308 	and.w	r3, r3, #8
 800e4ae:	431a      	orrs	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e4b8:	ea42 0103 	orr.w	r1, r2, r3
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	430a      	orrs	r2, r1
 800e4c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b084      	sub	sp, #16
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	60f8      	str	r0, [r7, #12]
 800e4ea:	60b9      	str	r1, [r7, #8]
 800e4ec:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e038      	b.n	800e56a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	d106      	bne.n	800e512 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7f3 f90b 	bl	8001728 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	3308      	adds	r3, #8
 800e51a:	4619      	mov	r1, r3
 800e51c:	4610      	mov	r0, r2
 800e51e:	f002 fab3 	bl	8010a88 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6818      	ldr	r0, [r3, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	461a      	mov	r2, r3
 800e52c:	68b9      	ldr	r1, [r7, #8]
 800e52e:	f002 fb3b 	bl	8010ba8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6858      	ldr	r0, [r3, #4]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	689a      	ldr	r2, [r3, #8]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53e:	6879      	ldr	r1, [r7, #4]
 800e540:	f002 fb82 	bl	8010c48 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	6892      	ldr	r2, [r2, #8]
 800e54c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	6892      	ldr	r2, [r2, #8]
 800e558:	f041 0101 	orr.w	r1, r1, #1
 800e55c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2201      	movs	r2, #1
 800e564:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b082      	sub	sp, #8
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e580:	2301      	movs	r3, #1
 800e582:	e049      	b.n	800e618 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d106      	bne.n	800e59e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7f4 fcdd 	bl	8002f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2202      	movs	r2, #2
 800e5a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	3304      	adds	r3, #4
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	f000 fd77 	bl	800f0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2201      	movs	r2, #1
 800e5da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6a1a      	ldr	r2, [r3, #32]
 800e62e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e632:	4013      	ands	r3, r2
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10f      	bne.n	800e658 <HAL_TIM_Base_Stop+0x38>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	6a1a      	ldr	r2, [r3, #32]
 800e63e:	f240 4344 	movw	r3, #1092	; 0x444
 800e642:	4013      	ands	r3, r2
 800e644:	2b00      	cmp	r3, #0
 800e646:	d107      	bne.n	800e658 <HAL_TIM_Base_Stop+0x38>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f022 0201 	bic.w	r2, r2, #1
 800e656:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	370c      	adds	r7, #12
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
	...

0800e670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	2b01      	cmp	r3, #1
 800e682:	d001      	beq.n	800e688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	e04f      	b.n	800e728 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2202      	movs	r2, #2
 800e68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68da      	ldr	r2, [r3, #12]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f042 0201 	orr.w	r2, r2, #1
 800e69e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a23      	ldr	r2, [pc, #140]	; (800e734 <HAL_TIM_Base_Start_IT+0xc4>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d01d      	beq.n	800e6e6 <HAL_TIM_Base_Start_IT+0x76>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6b2:	d018      	beq.n	800e6e6 <HAL_TIM_Base_Start_IT+0x76>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a1f      	ldr	r2, [pc, #124]	; (800e738 <HAL_TIM_Base_Start_IT+0xc8>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d013      	beq.n	800e6e6 <HAL_TIM_Base_Start_IT+0x76>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a1e      	ldr	r2, [pc, #120]	; (800e73c <HAL_TIM_Base_Start_IT+0xcc>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d00e      	beq.n	800e6e6 <HAL_TIM_Base_Start_IT+0x76>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a1c      	ldr	r2, [pc, #112]	; (800e740 <HAL_TIM_Base_Start_IT+0xd0>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d009      	beq.n	800e6e6 <HAL_TIM_Base_Start_IT+0x76>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a1b      	ldr	r2, [pc, #108]	; (800e744 <HAL_TIM_Base_Start_IT+0xd4>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d004      	beq.n	800e6e6 <HAL_TIM_Base_Start_IT+0x76>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a19      	ldr	r2, [pc, #100]	; (800e748 <HAL_TIM_Base_Start_IT+0xd8>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d115      	bne.n	800e712 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	689a      	ldr	r2, [r3, #8]
 800e6ec:	4b17      	ldr	r3, [pc, #92]	; (800e74c <HAL_TIM_Base_Start_IT+0xdc>)
 800e6ee:	4013      	ands	r3, r2
 800e6f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2b06      	cmp	r3, #6
 800e6f6:	d015      	beq.n	800e724 <HAL_TIM_Base_Start_IT+0xb4>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6fe:	d011      	beq.n	800e724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0201 	orr.w	r2, r2, #1
 800e70e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e710:	e008      	b.n	800e724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f042 0201 	orr.w	r2, r2, #1
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	e000      	b.n	800e726 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e724:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	40012c00 	.word	0x40012c00
 800e738:	40000400 	.word	0x40000400
 800e73c:	40000800 	.word	0x40000800
 800e740:	40000c00 	.word	0x40000c00
 800e744:	40013400 	.word	0x40013400
 800e748:	40014000 	.word	0x40014000
 800e74c:	00010007 	.word	0x00010007

0800e750 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	68da      	ldr	r2, [r3, #12]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f022 0201 	bic.w	r2, r2, #1
 800e766:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6a1a      	ldr	r2, [r3, #32]
 800e76e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e772:	4013      	ands	r3, r2
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10f      	bne.n	800e798 <HAL_TIM_Base_Stop_IT+0x48>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	6a1a      	ldr	r2, [r3, #32]
 800e77e:	f240 4344 	movw	r3, #1092	; 0x444
 800e782:	4013      	ands	r3, r2
 800e784:	2b00      	cmp	r3, #0
 800e786:	d107      	bne.n	800e798 <HAL_TIM_Base_Stop_IT+0x48>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f022 0201 	bic.w	r2, r2, #1
 800e796:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b082      	sub	sp, #8
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d101      	bne.n	800e7c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e049      	b.n	800e854 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d106      	bne.n	800e7da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7f7 f9ff 	bl	8005bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2202      	movs	r2, #2
 800e7de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f000 fc59 	bl	800f0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2201      	movs	r2, #1
 800e806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2201      	movs	r2, #1
 800e816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2201      	movs	r2, #1
 800e826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2201      	movs	r2, #1
 800e846:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d109      	bne.n	800e880 <HAL_TIM_PWM_Start+0x24>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b01      	cmp	r3, #1
 800e876:	bf14      	ite	ne
 800e878:	2301      	movne	r3, #1
 800e87a:	2300      	moveq	r3, #0
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	e03c      	b.n	800e8fa <HAL_TIM_PWM_Start+0x9e>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b04      	cmp	r3, #4
 800e884:	d109      	bne.n	800e89a <HAL_TIM_PWM_Start+0x3e>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b01      	cmp	r3, #1
 800e890:	bf14      	ite	ne
 800e892:	2301      	movne	r3, #1
 800e894:	2300      	moveq	r3, #0
 800e896:	b2db      	uxtb	r3, r3
 800e898:	e02f      	b.n	800e8fa <HAL_TIM_PWM_Start+0x9e>
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b08      	cmp	r3, #8
 800e89e:	d109      	bne.n	800e8b4 <HAL_TIM_PWM_Start+0x58>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	bf14      	ite	ne
 800e8ac:	2301      	movne	r3, #1
 800e8ae:	2300      	moveq	r3, #0
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	e022      	b.n	800e8fa <HAL_TIM_PWM_Start+0x9e>
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2b0c      	cmp	r3, #12
 800e8b8:	d109      	bne.n	800e8ce <HAL_TIM_PWM_Start+0x72>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	bf14      	ite	ne
 800e8c6:	2301      	movne	r3, #1
 800e8c8:	2300      	moveq	r3, #0
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	e015      	b.n	800e8fa <HAL_TIM_PWM_Start+0x9e>
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	2b10      	cmp	r3, #16
 800e8d2:	d109      	bne.n	800e8e8 <HAL_TIM_PWM_Start+0x8c>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	bf14      	ite	ne
 800e8e0:	2301      	movne	r3, #1
 800e8e2:	2300      	moveq	r3, #0
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	e008      	b.n	800e8fa <HAL_TIM_PWM_Start+0x9e>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	bf14      	ite	ne
 800e8f4:	2301      	movne	r3, #1
 800e8f6:	2300      	moveq	r3, #0
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d001      	beq.n	800e902 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e09c      	b.n	800ea3c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d104      	bne.n	800e912 <HAL_TIM_PWM_Start+0xb6>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2202      	movs	r2, #2
 800e90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e910:	e023      	b.n	800e95a <HAL_TIM_PWM_Start+0xfe>
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	2b04      	cmp	r3, #4
 800e916:	d104      	bne.n	800e922 <HAL_TIM_PWM_Start+0xc6>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2202      	movs	r2, #2
 800e91c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e920:	e01b      	b.n	800e95a <HAL_TIM_PWM_Start+0xfe>
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b08      	cmp	r3, #8
 800e926:	d104      	bne.n	800e932 <HAL_TIM_PWM_Start+0xd6>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2202      	movs	r2, #2
 800e92c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e930:	e013      	b.n	800e95a <HAL_TIM_PWM_Start+0xfe>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	2b0c      	cmp	r3, #12
 800e936:	d104      	bne.n	800e942 <HAL_TIM_PWM_Start+0xe6>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2202      	movs	r2, #2
 800e93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e940:	e00b      	b.n	800e95a <HAL_TIM_PWM_Start+0xfe>
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b10      	cmp	r3, #16
 800e946:	d104      	bne.n	800e952 <HAL_TIM_PWM_Start+0xf6>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2202      	movs	r2, #2
 800e94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e950:	e003      	b.n	800e95a <HAL_TIM_PWM_Start+0xfe>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2202      	movs	r2, #2
 800e956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2201      	movs	r2, #1
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 ffa8 	bl	800f8b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a35      	ldr	r2, [pc, #212]	; (800ea44 <HAL_TIM_PWM_Start+0x1e8>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d013      	beq.n	800e99a <HAL_TIM_PWM_Start+0x13e>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a34      	ldr	r2, [pc, #208]	; (800ea48 <HAL_TIM_PWM_Start+0x1ec>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d00e      	beq.n	800e99a <HAL_TIM_PWM_Start+0x13e>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a32      	ldr	r2, [pc, #200]	; (800ea4c <HAL_TIM_PWM_Start+0x1f0>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d009      	beq.n	800e99a <HAL_TIM_PWM_Start+0x13e>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a31      	ldr	r2, [pc, #196]	; (800ea50 <HAL_TIM_PWM_Start+0x1f4>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d004      	beq.n	800e99a <HAL_TIM_PWM_Start+0x13e>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a2f      	ldr	r2, [pc, #188]	; (800ea54 <HAL_TIM_PWM_Start+0x1f8>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d101      	bne.n	800e99e <HAL_TIM_PWM_Start+0x142>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e000      	b.n	800e9a0 <HAL_TIM_PWM_Start+0x144>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d007      	beq.n	800e9b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a22      	ldr	r2, [pc, #136]	; (800ea44 <HAL_TIM_PWM_Start+0x1e8>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d01d      	beq.n	800e9fa <HAL_TIM_PWM_Start+0x19e>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9c6:	d018      	beq.n	800e9fa <HAL_TIM_PWM_Start+0x19e>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a22      	ldr	r2, [pc, #136]	; (800ea58 <HAL_TIM_PWM_Start+0x1fc>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d013      	beq.n	800e9fa <HAL_TIM_PWM_Start+0x19e>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a21      	ldr	r2, [pc, #132]	; (800ea5c <HAL_TIM_PWM_Start+0x200>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d00e      	beq.n	800e9fa <HAL_TIM_PWM_Start+0x19e>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a1f      	ldr	r2, [pc, #124]	; (800ea60 <HAL_TIM_PWM_Start+0x204>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d009      	beq.n	800e9fa <HAL_TIM_PWM_Start+0x19e>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a17      	ldr	r2, [pc, #92]	; (800ea48 <HAL_TIM_PWM_Start+0x1ec>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d004      	beq.n	800e9fa <HAL_TIM_PWM_Start+0x19e>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a15      	ldr	r2, [pc, #84]	; (800ea4c <HAL_TIM_PWM_Start+0x1f0>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d115      	bne.n	800ea26 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689a      	ldr	r2, [r3, #8]
 800ea00:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <HAL_TIM_PWM_Start+0x208>)
 800ea02:	4013      	ands	r3, r2
 800ea04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2b06      	cmp	r3, #6
 800ea0a:	d015      	beq.n	800ea38 <HAL_TIM_PWM_Start+0x1dc>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea12:	d011      	beq.n	800ea38 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f042 0201 	orr.w	r2, r2, #1
 800ea22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea24:	e008      	b.n	800ea38 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f042 0201 	orr.w	r2, r2, #1
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	e000      	b.n	800ea3a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	40012c00 	.word	0x40012c00
 800ea48:	40013400 	.word	0x40013400
 800ea4c:	40014000 	.word	0x40014000
 800ea50:	40014400 	.word	0x40014400
 800ea54:	40014800 	.word	0x40014800
 800ea58:	40000400 	.word	0x40000400
 800ea5c:	40000800 	.word	0x40000800
 800ea60:	40000c00 	.word	0x40000c00
 800ea64:	00010007 	.word	0x00010007

0800ea68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	f003 0302 	and.w	r3, r3, #2
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d122      	bne.n	800eac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	f003 0302 	and.w	r3, r3, #2
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d11b      	bne.n	800eac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f06f 0202 	mvn.w	r2, #2
 800ea94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	699b      	ldr	r3, [r3, #24]
 800eaa2:	f003 0303 	and.w	r3, r3, #3
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d003      	beq.n	800eab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fadc 	bl	800f068 <HAL_TIM_IC_CaptureCallback>
 800eab0:	e005      	b.n	800eabe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 face 	bl	800f054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 fadf 	bl	800f07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	f003 0304 	and.w	r3, r3, #4
 800eace:	2b04      	cmp	r3, #4
 800ead0:	d122      	bne.n	800eb18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	f003 0304 	and.w	r3, r3, #4
 800eadc:	2b04      	cmp	r3, #4
 800eade:	d11b      	bne.n	800eb18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f06f 0204 	mvn.w	r2, #4
 800eae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2202      	movs	r2, #2
 800eaee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	699b      	ldr	r3, [r3, #24]
 800eaf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d003      	beq.n	800eb06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 fab2 	bl	800f068 <HAL_TIM_IC_CaptureCallback>
 800eb04:	e005      	b.n	800eb12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 faa4 	bl	800f054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fab5 	bl	800f07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	f003 0308 	and.w	r3, r3, #8
 800eb22:	2b08      	cmp	r3, #8
 800eb24:	d122      	bne.n	800eb6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	f003 0308 	and.w	r3, r3, #8
 800eb30:	2b08      	cmp	r3, #8
 800eb32:	d11b      	bne.n	800eb6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f06f 0208 	mvn.w	r2, #8
 800eb3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2204      	movs	r2, #4
 800eb42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	69db      	ldr	r3, [r3, #28]
 800eb4a:	f003 0303 	and.w	r3, r3, #3
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d003      	beq.n	800eb5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa88 	bl	800f068 <HAL_TIM_IC_CaptureCallback>
 800eb58:	e005      	b.n	800eb66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 fa7a 	bl	800f054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 fa8b 	bl	800f07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	f003 0310 	and.w	r3, r3, #16
 800eb76:	2b10      	cmp	r3, #16
 800eb78:	d122      	bne.n	800ebc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	f003 0310 	and.w	r3, r3, #16
 800eb84:	2b10      	cmp	r3, #16
 800eb86:	d11b      	bne.n	800ebc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f06f 0210 	mvn.w	r2, #16
 800eb90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2208      	movs	r2, #8
 800eb96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d003      	beq.n	800ebae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 fa5e 	bl	800f068 <HAL_TIM_IC_CaptureCallback>
 800ebac:	e005      	b.n	800ebba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 fa50 	bl	800f054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 fa61 	bl	800f07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	691b      	ldr	r3, [r3, #16]
 800ebc6:	f003 0301 	and.w	r3, r3, #1
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d10e      	bne.n	800ebec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d107      	bne.n	800ebec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f06f 0201 	mvn.w	r2, #1
 800ebe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7f3 f900 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebf6:	2b80      	cmp	r3, #128	; 0x80
 800ebf8:	d10e      	bne.n	800ec18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec04:	2b80      	cmp	r3, #128	; 0x80
 800ec06:	d107      	bne.n	800ec18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 ff86 	bl	800fb24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec26:	d10e      	bne.n	800ec46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec32:	2b80      	cmp	r3, #128	; 0x80
 800ec34:	d107      	bne.n	800ec46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 ff79 	bl	800fb38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec50:	2b40      	cmp	r3, #64	; 0x40
 800ec52:	d10e      	bne.n	800ec72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec5e:	2b40      	cmp	r3, #64	; 0x40
 800ec60:	d107      	bne.n	800ec72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fa0f 	bl	800f090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	f003 0320 	and.w	r3, r3, #32
 800ec7c:	2b20      	cmp	r3, #32
 800ec7e:	d10e      	bne.n	800ec9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	f003 0320 	and.w	r3, r3, #32
 800ec8a:	2b20      	cmp	r3, #32
 800ec8c:	d107      	bne.n	800ec9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f06f 0220 	mvn.w	r2, #32
 800ec96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f000 ff39 	bl	800fb10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec9e:	bf00      	nop
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
	...

0800eca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d101      	bne.n	800ecc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ecbe:	2302      	movs	r3, #2
 800ecc0:	e0fd      	b.n	800eebe <HAL_TIM_PWM_ConfigChannel+0x216>
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b14      	cmp	r3, #20
 800ecce:	f200 80f0 	bhi.w	800eeb2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ecd2:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd8:	0800ed2d 	.word	0x0800ed2d
 800ecdc:	0800eeb3 	.word	0x0800eeb3
 800ece0:	0800eeb3 	.word	0x0800eeb3
 800ece4:	0800eeb3 	.word	0x0800eeb3
 800ece8:	0800ed6d 	.word	0x0800ed6d
 800ecec:	0800eeb3 	.word	0x0800eeb3
 800ecf0:	0800eeb3 	.word	0x0800eeb3
 800ecf4:	0800eeb3 	.word	0x0800eeb3
 800ecf8:	0800edaf 	.word	0x0800edaf
 800ecfc:	0800eeb3 	.word	0x0800eeb3
 800ed00:	0800eeb3 	.word	0x0800eeb3
 800ed04:	0800eeb3 	.word	0x0800eeb3
 800ed08:	0800edef 	.word	0x0800edef
 800ed0c:	0800eeb3 	.word	0x0800eeb3
 800ed10:	0800eeb3 	.word	0x0800eeb3
 800ed14:	0800eeb3 	.word	0x0800eeb3
 800ed18:	0800ee31 	.word	0x0800ee31
 800ed1c:	0800eeb3 	.word	0x0800eeb3
 800ed20:	0800eeb3 	.word	0x0800eeb3
 800ed24:	0800eeb3 	.word	0x0800eeb3
 800ed28:	0800ee71 	.word	0x0800ee71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	68b9      	ldr	r1, [r7, #8]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 fa50 	bl	800f1d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	699a      	ldr	r2, [r3, #24]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f042 0208 	orr.w	r2, r2, #8
 800ed46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	699a      	ldr	r2, [r3, #24]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f022 0204 	bic.w	r2, r2, #4
 800ed56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	6999      	ldr	r1, [r3, #24]
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	691a      	ldr	r2, [r3, #16]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	430a      	orrs	r2, r1
 800ed68:	619a      	str	r2, [r3, #24]
      break;
 800ed6a:	e0a3      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	68b9      	ldr	r1, [r7, #8]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f000 fac0 	bl	800f2f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	699a      	ldr	r2, [r3, #24]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	699a      	ldr	r2, [r3, #24]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	6999      	ldr	r1, [r3, #24]
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	021a      	lsls	r2, r3, #8
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	430a      	orrs	r2, r1
 800edaa:	619a      	str	r2, [r3, #24]
      break;
 800edac:	e082      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68b9      	ldr	r1, [r7, #8]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f000 fb29 	bl	800f40c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	69da      	ldr	r2, [r3, #28]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f042 0208 	orr.w	r2, r2, #8
 800edc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69da      	ldr	r2, [r3, #28]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f022 0204 	bic.w	r2, r2, #4
 800edd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	69d9      	ldr	r1, [r3, #28]
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	691a      	ldr	r2, [r3, #16]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	430a      	orrs	r2, r1
 800edea:	61da      	str	r2, [r3, #28]
      break;
 800edec:	e062      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68b9      	ldr	r1, [r7, #8]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f000 fb91 	bl	800f51c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	69da      	ldr	r2, [r3, #28]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	69da      	ldr	r2, [r3, #28]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	69d9      	ldr	r1, [r3, #28]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	691b      	ldr	r3, [r3, #16]
 800ee24:	021a      	lsls	r2, r3, #8
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	430a      	orrs	r2, r1
 800ee2c:	61da      	str	r2, [r3, #28]
      break;
 800ee2e:	e041      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68b9      	ldr	r1, [r7, #8]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f000 fbda 	bl	800f5f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f042 0208 	orr.w	r2, r2, #8
 800ee4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f022 0204 	bic.w	r2, r2, #4
 800ee5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	691a      	ldr	r2, [r3, #16]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	430a      	orrs	r2, r1
 800ee6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee6e:	e021      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	68b9      	ldr	r1, [r7, #8]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f000 fc1e 	bl	800f6b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	021a      	lsls	r2, r3, #8
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	430a      	orrs	r2, r1
 800eeae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eeb0:	e000      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800eeb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop

0800eec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d101      	bne.n	800eee0 <HAL_TIM_ConfigClockSource+0x18>
 800eedc:	2302      	movs	r3, #2
 800eede:	e0b5      	b.n	800f04c <HAL_TIM_ConfigClockSource+0x184>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2202      	movs	r2, #2
 800eeec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eefe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ef02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ef0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef1c:	d03e      	beq.n	800ef9c <HAL_TIM_ConfigClockSource+0xd4>
 800ef1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef22:	f200 8087 	bhi.w	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef2a:	f000 8085 	beq.w	800f038 <HAL_TIM_ConfigClockSource+0x170>
 800ef2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef32:	d87f      	bhi.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef34:	2b70      	cmp	r3, #112	; 0x70
 800ef36:	d01a      	beq.n	800ef6e <HAL_TIM_ConfigClockSource+0xa6>
 800ef38:	2b70      	cmp	r3, #112	; 0x70
 800ef3a:	d87b      	bhi.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef3c:	2b60      	cmp	r3, #96	; 0x60
 800ef3e:	d050      	beq.n	800efe2 <HAL_TIM_ConfigClockSource+0x11a>
 800ef40:	2b60      	cmp	r3, #96	; 0x60
 800ef42:	d877      	bhi.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef44:	2b50      	cmp	r3, #80	; 0x50
 800ef46:	d03c      	beq.n	800efc2 <HAL_TIM_ConfigClockSource+0xfa>
 800ef48:	2b50      	cmp	r3, #80	; 0x50
 800ef4a:	d873      	bhi.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef4c:	2b40      	cmp	r3, #64	; 0x40
 800ef4e:	d058      	beq.n	800f002 <HAL_TIM_ConfigClockSource+0x13a>
 800ef50:	2b40      	cmp	r3, #64	; 0x40
 800ef52:	d86f      	bhi.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef54:	2b30      	cmp	r3, #48	; 0x30
 800ef56:	d064      	beq.n	800f022 <HAL_TIM_ConfigClockSource+0x15a>
 800ef58:	2b30      	cmp	r3, #48	; 0x30
 800ef5a:	d86b      	bhi.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef5c:	2b20      	cmp	r3, #32
 800ef5e:	d060      	beq.n	800f022 <HAL_TIM_ConfigClockSource+0x15a>
 800ef60:	2b20      	cmp	r3, #32
 800ef62:	d867      	bhi.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d05c      	beq.n	800f022 <HAL_TIM_ConfigClockSource+0x15a>
 800ef68:	2b10      	cmp	r3, #16
 800ef6a:	d05a      	beq.n	800f022 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ef6c:	e062      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	6899      	ldr	r1, [r3, #8]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	685a      	ldr	r2, [r3, #4]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	f000 fc7b 	bl	800f878 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ef90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	609a      	str	r2, [r3, #8]
      break;
 800ef9a:	e04e      	b.n	800f03a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	6899      	ldr	r1, [r3, #8]
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	f000 fc64 	bl	800f878 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	689a      	ldr	r2, [r3, #8]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800efbe:	609a      	str	r2, [r3, #8]
      break;
 800efc0:	e03b      	b.n	800f03a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6818      	ldr	r0, [r3, #0]
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	6859      	ldr	r1, [r3, #4]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	461a      	mov	r2, r3
 800efd0:	f000 fbd8 	bl	800f784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2150      	movs	r1, #80	; 0x50
 800efda:	4618      	mov	r0, r3
 800efdc:	f000 fc31 	bl	800f842 <TIM_ITRx_SetConfig>
      break;
 800efe0:	e02b      	b.n	800f03a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6818      	ldr	r0, [r3, #0]
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	6859      	ldr	r1, [r3, #4]
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	461a      	mov	r2, r3
 800eff0:	f000 fbf7 	bl	800f7e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2160      	movs	r1, #96	; 0x60
 800effa:	4618      	mov	r0, r3
 800effc:	f000 fc21 	bl	800f842 <TIM_ITRx_SetConfig>
      break;
 800f000:	e01b      	b.n	800f03a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6818      	ldr	r0, [r3, #0]
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	6859      	ldr	r1, [r3, #4]
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	461a      	mov	r2, r3
 800f010:	f000 fbb8 	bl	800f784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2140      	movs	r1, #64	; 0x40
 800f01a:	4618      	mov	r0, r3
 800f01c:	f000 fc11 	bl	800f842 <TIM_ITRx_SetConfig>
      break;
 800f020:	e00b      	b.n	800f03a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4619      	mov	r1, r3
 800f02c:	4610      	mov	r0, r2
 800f02e:	f000 fc08 	bl	800f842 <TIM_ITRx_SetConfig>
        break;
 800f032:	e002      	b.n	800f03a <HAL_TIM_ConfigClockSource+0x172>
      break;
 800f034:	bf00      	nop
 800f036:	e000      	b.n	800f03a <HAL_TIM_ConfigClockSource+0x172>
      break;
 800f038:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f05c:	bf00      	nop
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f084:	bf00      	nop
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f098:	bf00      	nop
 800f09a:	370c      	adds	r7, #12
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a40      	ldr	r2, [pc, #256]	; (800f1b8 <TIM_Base_SetConfig+0x114>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d013      	beq.n	800f0e4 <TIM_Base_SetConfig+0x40>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0c2:	d00f      	beq.n	800f0e4 <TIM_Base_SetConfig+0x40>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4a3d      	ldr	r2, [pc, #244]	; (800f1bc <TIM_Base_SetConfig+0x118>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d00b      	beq.n	800f0e4 <TIM_Base_SetConfig+0x40>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a3c      	ldr	r2, [pc, #240]	; (800f1c0 <TIM_Base_SetConfig+0x11c>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d007      	beq.n	800f0e4 <TIM_Base_SetConfig+0x40>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a3b      	ldr	r2, [pc, #236]	; (800f1c4 <TIM_Base_SetConfig+0x120>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d003      	beq.n	800f0e4 <TIM_Base_SetConfig+0x40>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a3a      	ldr	r2, [pc, #232]	; (800f1c8 <TIM_Base_SetConfig+0x124>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d108      	bne.n	800f0f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a2f      	ldr	r2, [pc, #188]	; (800f1b8 <TIM_Base_SetConfig+0x114>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d01f      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f104:	d01b      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4a2c      	ldr	r2, [pc, #176]	; (800f1bc <TIM_Base_SetConfig+0x118>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d017      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a2b      	ldr	r2, [pc, #172]	; (800f1c0 <TIM_Base_SetConfig+0x11c>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d013      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4a2a      	ldr	r2, [pc, #168]	; (800f1c4 <TIM_Base_SetConfig+0x120>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d00f      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	4a29      	ldr	r2, [pc, #164]	; (800f1c8 <TIM_Base_SetConfig+0x124>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d00b      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4a28      	ldr	r2, [pc, #160]	; (800f1cc <TIM_Base_SetConfig+0x128>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d007      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4a27      	ldr	r2, [pc, #156]	; (800f1d0 <TIM_Base_SetConfig+0x12c>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d003      	beq.n	800f13e <TIM_Base_SetConfig+0x9a>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4a26      	ldr	r2, [pc, #152]	; (800f1d4 <TIM_Base_SetConfig+0x130>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d108      	bne.n	800f150 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	4313      	orrs	r3, r2
 800f14e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	695b      	ldr	r3, [r3, #20]
 800f15a:	4313      	orrs	r3, r2
 800f15c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	689a      	ldr	r2, [r3, #8]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a10      	ldr	r2, [pc, #64]	; (800f1b8 <TIM_Base_SetConfig+0x114>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d00f      	beq.n	800f19c <TIM_Base_SetConfig+0xf8>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4a12      	ldr	r2, [pc, #72]	; (800f1c8 <TIM_Base_SetConfig+0x124>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d00b      	beq.n	800f19c <TIM_Base_SetConfig+0xf8>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a11      	ldr	r2, [pc, #68]	; (800f1cc <TIM_Base_SetConfig+0x128>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d007      	beq.n	800f19c <TIM_Base_SetConfig+0xf8>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a10      	ldr	r2, [pc, #64]	; (800f1d0 <TIM_Base_SetConfig+0x12c>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d003      	beq.n	800f19c <TIM_Base_SetConfig+0xf8>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a0f      	ldr	r2, [pc, #60]	; (800f1d4 <TIM_Base_SetConfig+0x130>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d103      	bne.n	800f1a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	691a      	ldr	r2, [r3, #16]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	615a      	str	r2, [r3, #20]
}
 800f1aa:	bf00      	nop
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	40012c00 	.word	0x40012c00
 800f1bc:	40000400 	.word	0x40000400
 800f1c0:	40000800 	.word	0x40000800
 800f1c4:	40000c00 	.word	0x40000c00
 800f1c8:	40013400 	.word	0x40013400
 800f1cc:	40014000 	.word	0x40014000
 800f1d0:	40014400 	.word	0x40014400
 800f1d4:	40014800 	.word	0x40014800

0800f1d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b087      	sub	sp, #28
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6a1b      	ldr	r3, [r3, #32]
 800f1e6:	f023 0201 	bic.w	r2, r3, #1
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	699b      	ldr	r3, [r3, #24]
 800f1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f023 0303 	bic.w	r3, r3, #3
 800f212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	4313      	orrs	r3, r2
 800f21c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	f023 0302 	bic.w	r3, r3, #2
 800f224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	697a      	ldr	r2, [r7, #20]
 800f22c:	4313      	orrs	r3, r2
 800f22e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4a2c      	ldr	r2, [pc, #176]	; (800f2e4 <TIM_OC1_SetConfig+0x10c>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d00f      	beq.n	800f258 <TIM_OC1_SetConfig+0x80>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4a2b      	ldr	r2, [pc, #172]	; (800f2e8 <TIM_OC1_SetConfig+0x110>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d00b      	beq.n	800f258 <TIM_OC1_SetConfig+0x80>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a2a      	ldr	r2, [pc, #168]	; (800f2ec <TIM_OC1_SetConfig+0x114>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d007      	beq.n	800f258 <TIM_OC1_SetConfig+0x80>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	4a29      	ldr	r2, [pc, #164]	; (800f2f0 <TIM_OC1_SetConfig+0x118>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d003      	beq.n	800f258 <TIM_OC1_SetConfig+0x80>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	4a28      	ldr	r2, [pc, #160]	; (800f2f4 <TIM_OC1_SetConfig+0x11c>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d10c      	bne.n	800f272 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	f023 0308 	bic.w	r3, r3, #8
 800f25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	697a      	ldr	r2, [r7, #20]
 800f266:	4313      	orrs	r3, r2
 800f268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	f023 0304 	bic.w	r3, r3, #4
 800f270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4a1b      	ldr	r2, [pc, #108]	; (800f2e4 <TIM_OC1_SetConfig+0x10c>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d00f      	beq.n	800f29a <TIM_OC1_SetConfig+0xc2>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4a1a      	ldr	r2, [pc, #104]	; (800f2e8 <TIM_OC1_SetConfig+0x110>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d00b      	beq.n	800f29a <TIM_OC1_SetConfig+0xc2>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4a19      	ldr	r2, [pc, #100]	; (800f2ec <TIM_OC1_SetConfig+0x114>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d007      	beq.n	800f29a <TIM_OC1_SetConfig+0xc2>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4a18      	ldr	r2, [pc, #96]	; (800f2f0 <TIM_OC1_SetConfig+0x118>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d003      	beq.n	800f29a <TIM_OC1_SetConfig+0xc2>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4a17      	ldr	r2, [pc, #92]	; (800f2f4 <TIM_OC1_SetConfig+0x11c>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d111      	bne.n	800f2be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	695b      	ldr	r3, [r3, #20]
 800f2ae:	693a      	ldr	r2, [r7, #16]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	699b      	ldr	r3, [r3, #24]
 800f2b8:	693a      	ldr	r2, [r7, #16]
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	685a      	ldr	r2, [r3, #4]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	621a      	str	r2, [r3, #32]
}
 800f2d8:	bf00      	nop
 800f2da:	371c      	adds	r7, #28
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	40012c00 	.word	0x40012c00
 800f2e8:	40013400 	.word	0x40013400
 800f2ec:	40014000 	.word	0x40014000
 800f2f0:	40014400 	.word	0x40014400
 800f2f4:	40014800 	.word	0x40014800

0800f2f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b087      	sub	sp, #28
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a1b      	ldr	r3, [r3, #32]
 800f306:	f023 0210 	bic.w	r2, r3, #16
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a1b      	ldr	r3, [r3, #32]
 800f312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	699b      	ldr	r3, [r3, #24]
 800f31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	021b      	lsls	r3, r3, #8
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	4313      	orrs	r3, r2
 800f33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	f023 0320 	bic.w	r3, r3, #32
 800f346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	011b      	lsls	r3, r3, #4
 800f34e:	697a      	ldr	r2, [r7, #20]
 800f350:	4313      	orrs	r3, r2
 800f352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a28      	ldr	r2, [pc, #160]	; (800f3f8 <TIM_OC2_SetConfig+0x100>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d003      	beq.n	800f364 <TIM_OC2_SetConfig+0x6c>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a27      	ldr	r2, [pc, #156]	; (800f3fc <TIM_OC2_SetConfig+0x104>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d10d      	bne.n	800f380 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f36a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	011b      	lsls	r3, r3, #4
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	4313      	orrs	r3, r2
 800f376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f37e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a1d      	ldr	r2, [pc, #116]	; (800f3f8 <TIM_OC2_SetConfig+0x100>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d00f      	beq.n	800f3a8 <TIM_OC2_SetConfig+0xb0>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4a1c      	ldr	r2, [pc, #112]	; (800f3fc <TIM_OC2_SetConfig+0x104>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d00b      	beq.n	800f3a8 <TIM_OC2_SetConfig+0xb0>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a1b      	ldr	r2, [pc, #108]	; (800f400 <TIM_OC2_SetConfig+0x108>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d007      	beq.n	800f3a8 <TIM_OC2_SetConfig+0xb0>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	4a1a      	ldr	r2, [pc, #104]	; (800f404 <TIM_OC2_SetConfig+0x10c>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d003      	beq.n	800f3a8 <TIM_OC2_SetConfig+0xb0>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a19      	ldr	r2, [pc, #100]	; (800f408 <TIM_OC2_SetConfig+0x110>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d113      	bne.n	800f3d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	699b      	ldr	r3, [r3, #24]
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	693a      	ldr	r2, [r7, #16]
 800f3d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	685a      	ldr	r2, [r3, #4]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	621a      	str	r2, [r3, #32]
}
 800f3ea:	bf00      	nop
 800f3ec:	371c      	adds	r7, #28
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	40012c00 	.word	0x40012c00
 800f3fc:	40013400 	.word	0x40013400
 800f400:	40014000 	.word	0x40014000
 800f404:	40014400 	.word	0x40014400
 800f408:	40014800 	.word	0x40014800

0800f40c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b087      	sub	sp, #28
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6a1b      	ldr	r3, [r3, #32]
 800f41a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a1b      	ldr	r3, [r3, #32]
 800f426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	69db      	ldr	r3, [r3, #28]
 800f432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f43e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f023 0303 	bic.w	r3, r3, #3
 800f446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	4313      	orrs	r3, r2
 800f450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	021b      	lsls	r3, r3, #8
 800f460:	697a      	ldr	r2, [r7, #20]
 800f462:	4313      	orrs	r3, r2
 800f464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a27      	ldr	r2, [pc, #156]	; (800f508 <TIM_OC3_SetConfig+0xfc>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d003      	beq.n	800f476 <TIM_OC3_SetConfig+0x6a>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a26      	ldr	r2, [pc, #152]	; (800f50c <TIM_OC3_SetConfig+0x100>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d10d      	bne.n	800f492 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f47c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	021b      	lsls	r3, r3, #8
 800f484:	697a      	ldr	r2, [r7, #20]
 800f486:	4313      	orrs	r3, r2
 800f488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a1c      	ldr	r2, [pc, #112]	; (800f508 <TIM_OC3_SetConfig+0xfc>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d00f      	beq.n	800f4ba <TIM_OC3_SetConfig+0xae>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a1b      	ldr	r2, [pc, #108]	; (800f50c <TIM_OC3_SetConfig+0x100>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d00b      	beq.n	800f4ba <TIM_OC3_SetConfig+0xae>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a1a      	ldr	r2, [pc, #104]	; (800f510 <TIM_OC3_SetConfig+0x104>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d007      	beq.n	800f4ba <TIM_OC3_SetConfig+0xae>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a19      	ldr	r2, [pc, #100]	; (800f514 <TIM_OC3_SetConfig+0x108>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d003      	beq.n	800f4ba <TIM_OC3_SetConfig+0xae>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a18      	ldr	r2, [pc, #96]	; (800f518 <TIM_OC3_SetConfig+0x10c>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d113      	bne.n	800f4e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	011b      	lsls	r3, r3, #4
 800f4d0:	693a      	ldr	r2, [r7, #16]
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	699b      	ldr	r3, [r3, #24]
 800f4da:	011b      	lsls	r3, r3, #4
 800f4dc:	693a      	ldr	r2, [r7, #16]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	693a      	ldr	r2, [r7, #16]
 800f4e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	685a      	ldr	r2, [r3, #4]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	621a      	str	r2, [r3, #32]
}
 800f4fc:	bf00      	nop
 800f4fe:	371c      	adds	r7, #28
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr
 800f508:	40012c00 	.word	0x40012c00
 800f50c:	40013400 	.word	0x40013400
 800f510:	40014000 	.word	0x40014000
 800f514:	40014400 	.word	0x40014400
 800f518:	40014800 	.word	0x40014800

0800f51c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b087      	sub	sp, #28
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	69db      	ldr	r3, [r3, #28]
 800f542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f54a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f54e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	021b      	lsls	r3, r3, #8
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	4313      	orrs	r3, r2
 800f562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f56a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	031b      	lsls	r3, r3, #12
 800f572:	693a      	ldr	r2, [r7, #16]
 800f574:	4313      	orrs	r3, r2
 800f576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a18      	ldr	r2, [pc, #96]	; (800f5dc <TIM_OC4_SetConfig+0xc0>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d00f      	beq.n	800f5a0 <TIM_OC4_SetConfig+0x84>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a17      	ldr	r2, [pc, #92]	; (800f5e0 <TIM_OC4_SetConfig+0xc4>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d00b      	beq.n	800f5a0 <TIM_OC4_SetConfig+0x84>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a16      	ldr	r2, [pc, #88]	; (800f5e4 <TIM_OC4_SetConfig+0xc8>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d007      	beq.n	800f5a0 <TIM_OC4_SetConfig+0x84>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a15      	ldr	r2, [pc, #84]	; (800f5e8 <TIM_OC4_SetConfig+0xcc>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d003      	beq.n	800f5a0 <TIM_OC4_SetConfig+0x84>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a14      	ldr	r2, [pc, #80]	; (800f5ec <TIM_OC4_SetConfig+0xd0>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d109      	bne.n	800f5b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	695b      	ldr	r3, [r3, #20]
 800f5ac:	019b      	lsls	r3, r3, #6
 800f5ae:	697a      	ldr	r2, [r7, #20]
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	693a      	ldr	r2, [r7, #16]
 800f5cc:	621a      	str	r2, [r3, #32]
}
 800f5ce:	bf00      	nop
 800f5d0:	371c      	adds	r7, #28
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	40012c00 	.word	0x40012c00
 800f5e0:	40013400 	.word	0x40013400
 800f5e4:	40014000 	.word	0x40014000
 800f5e8:	40014400 	.word	0x40014400
 800f5ec:	40014800 	.word	0x40014800

0800f5f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b087      	sub	sp, #28
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a1b      	ldr	r3, [r3, #32]
 800f60a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	041b      	lsls	r3, r3, #16
 800f63c:	693a      	ldr	r2, [r7, #16]
 800f63e:	4313      	orrs	r3, r2
 800f640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a17      	ldr	r2, [pc, #92]	; (800f6a4 <TIM_OC5_SetConfig+0xb4>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d00f      	beq.n	800f66a <TIM_OC5_SetConfig+0x7a>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a16      	ldr	r2, [pc, #88]	; (800f6a8 <TIM_OC5_SetConfig+0xb8>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d00b      	beq.n	800f66a <TIM_OC5_SetConfig+0x7a>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4a15      	ldr	r2, [pc, #84]	; (800f6ac <TIM_OC5_SetConfig+0xbc>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d007      	beq.n	800f66a <TIM_OC5_SetConfig+0x7a>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4a14      	ldr	r2, [pc, #80]	; (800f6b0 <TIM_OC5_SetConfig+0xc0>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d003      	beq.n	800f66a <TIM_OC5_SetConfig+0x7a>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4a13      	ldr	r2, [pc, #76]	; (800f6b4 <TIM_OC5_SetConfig+0xc4>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d109      	bne.n	800f67e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	695b      	ldr	r3, [r3, #20]
 800f676:	021b      	lsls	r3, r3, #8
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	685a      	ldr	r2, [r3, #4]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	693a      	ldr	r2, [r7, #16]
 800f696:	621a      	str	r2, [r3, #32]
}
 800f698:	bf00      	nop
 800f69a:	371c      	adds	r7, #28
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr
 800f6a4:	40012c00 	.word	0x40012c00
 800f6a8:	40013400 	.word	0x40013400
 800f6ac:	40014000 	.word	0x40014000
 800f6b0:	40014400 	.word	0x40014400
 800f6b4:	40014800 	.word	0x40014800

0800f6b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a1b      	ldr	r3, [r3, #32]
 800f6c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f6e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	021b      	lsls	r3, r3, #8
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f6fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	051b      	lsls	r3, r3, #20
 800f706:	693a      	ldr	r2, [r7, #16]
 800f708:	4313      	orrs	r3, r2
 800f70a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a18      	ldr	r2, [pc, #96]	; (800f770 <TIM_OC6_SetConfig+0xb8>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d00f      	beq.n	800f734 <TIM_OC6_SetConfig+0x7c>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a17      	ldr	r2, [pc, #92]	; (800f774 <TIM_OC6_SetConfig+0xbc>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d00b      	beq.n	800f734 <TIM_OC6_SetConfig+0x7c>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a16      	ldr	r2, [pc, #88]	; (800f778 <TIM_OC6_SetConfig+0xc0>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d007      	beq.n	800f734 <TIM_OC6_SetConfig+0x7c>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a15      	ldr	r2, [pc, #84]	; (800f77c <TIM_OC6_SetConfig+0xc4>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d003      	beq.n	800f734 <TIM_OC6_SetConfig+0x7c>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a14      	ldr	r2, [pc, #80]	; (800f780 <TIM_OC6_SetConfig+0xc8>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d109      	bne.n	800f748 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f73a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	695b      	ldr	r3, [r3, #20]
 800f740:	029b      	lsls	r3, r3, #10
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	4313      	orrs	r3, r2
 800f746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	685a      	ldr	r2, [r3, #4]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	621a      	str	r2, [r3, #32]
}
 800f762:	bf00      	nop
 800f764:	371c      	adds	r7, #28
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	40012c00 	.word	0x40012c00
 800f774:	40013400 	.word	0x40013400
 800f778:	40014000 	.word	0x40014000
 800f77c:	40014400 	.word	0x40014400
 800f780:	40014800 	.word	0x40014800

0800f784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f784:	b480      	push	{r7}
 800f786:	b087      	sub	sp, #28
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6a1b      	ldr	r3, [r3, #32]
 800f794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6a1b      	ldr	r3, [r3, #32]
 800f79a:	f023 0201 	bic.w	r2, r3, #1
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	699b      	ldr	r3, [r3, #24]
 800f7a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f7ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	011b      	lsls	r3, r3, #4
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	f023 030a 	bic.w	r3, r3, #10
 800f7c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f7c2:	697a      	ldr	r2, [r7, #20]
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	693a      	ldr	r2, [r7, #16]
 800f7ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	621a      	str	r2, [r3, #32]
}
 800f7d6:	bf00      	nop
 800f7d8:	371c      	adds	r7, #28
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b087      	sub	sp, #28
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	60f8      	str	r0, [r7, #12]
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6a1b      	ldr	r3, [r3, #32]
 800f7f2:	f023 0210 	bic.w	r2, r3, #16
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	699b      	ldr	r3, [r3, #24]
 800f7fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6a1b      	ldr	r3, [r3, #32]
 800f804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f80c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	031b      	lsls	r3, r3, #12
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	4313      	orrs	r3, r2
 800f816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f81e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	011b      	lsls	r3, r3, #4
 800f824:	693a      	ldr	r2, [r7, #16]
 800f826:	4313      	orrs	r3, r2
 800f828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	697a      	ldr	r2, [r7, #20]
 800f82e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	621a      	str	r2, [r3, #32]
}
 800f836:	bf00      	nop
 800f838:	371c      	adds	r7, #28
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f842:	b480      	push	{r7}
 800f844:	b085      	sub	sp, #20
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f85a:	683a      	ldr	r2, [r7, #0]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	4313      	orrs	r3, r2
 800f860:	f043 0307 	orr.w	r3, r3, #7
 800f864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	609a      	str	r2, [r3, #8]
}
 800f86c:	bf00      	nop
 800f86e:	3714      	adds	r7, #20
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	607a      	str	r2, [r7, #4]
 800f884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	021a      	lsls	r2, r3, #8
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	431a      	orrs	r2, r3
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	697a      	ldr	r2, [r7, #20]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	609a      	str	r2, [r3, #8]
}
 800f8ac:	bf00      	nop
 800f8ae:	371c      	adds	r7, #28
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b087      	sub	sp, #28
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	f003 031f 	and.w	r3, r3, #31
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6a1a      	ldr	r2, [r3, #32]
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	43db      	mvns	r3, r3
 800f8da:	401a      	ands	r2, r3
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6a1a      	ldr	r2, [r3, #32]
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	f003 031f 	and.w	r3, r3, #31
 800f8ea:	6879      	ldr	r1, [r7, #4]
 800f8ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f8f0:	431a      	orrs	r2, r3
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	621a      	str	r2, [r3, #32]
}
 800f8f6:	bf00      	nop
 800f8f8:	371c      	adds	r7, #28
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr
	...

0800f904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f904:	b480      	push	{r7}
 800f906:	b085      	sub	sp, #20
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f914:	2b01      	cmp	r3, #1
 800f916:	d101      	bne.n	800f91c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f918:	2302      	movs	r3, #2
 800f91a:	e068      	b.n	800f9ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2202      	movs	r2, #2
 800f928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	689b      	ldr	r3, [r3, #8]
 800f93a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a2e      	ldr	r2, [pc, #184]	; (800f9fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d004      	beq.n	800f950 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	4a2d      	ldr	r2, [pc, #180]	; (800fa00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d108      	bne.n	800f962 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f956:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	4313      	orrs	r3, r2
 800f960:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f968:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	4313      	orrs	r3, r2
 800f972:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a1e      	ldr	r2, [pc, #120]	; (800f9fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d01d      	beq.n	800f9c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f98e:	d018      	beq.n	800f9c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a1b      	ldr	r2, [pc, #108]	; (800fa04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d013      	beq.n	800f9c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4a1a      	ldr	r2, [pc, #104]	; (800fa08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d00e      	beq.n	800f9c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a18      	ldr	r2, [pc, #96]	; (800fa0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d009      	beq.n	800f9c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	4a13      	ldr	r2, [pc, #76]	; (800fa00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d004      	beq.n	800f9c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4a14      	ldr	r2, [pc, #80]	; (800fa10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d10c      	bne.n	800f9dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3714      	adds	r7, #20
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop
 800f9fc:	40012c00 	.word	0x40012c00
 800fa00:	40013400 	.word	0x40013400
 800fa04:	40000400 	.word	0x40000400
 800fa08:	40000800 	.word	0x40000800
 800fa0c:	40000c00 	.word	0x40000c00
 800fa10:	40014000 	.word	0x40014000

0800fa14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d101      	bne.n	800fa30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fa2c:	2302      	movs	r3, #2
 800fa2e:	e065      	b.n	800fafc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2201      	movs	r2, #1
 800fa34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	691b      	ldr	r3, [r3, #16]
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	695b      	ldr	r3, [r3, #20]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa96:	4313      	orrs	r3, r2
 800fa98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	041b      	lsls	r3, r3, #16
 800faa6:	4313      	orrs	r3, r2
 800faa8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a16      	ldr	r2, [pc, #88]	; (800fb08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d004      	beq.n	800fabe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4a14      	ldr	r2, [pc, #80]	; (800fb0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d115      	bne.n	800faea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	051b      	lsls	r3, r3, #20
 800faca:	4313      	orrs	r3, r2
 800facc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	69db      	ldr	r3, [r3, #28]
 800fad8:	4313      	orrs	r3, r2
 800fada:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	4313      	orrs	r3, r2
 800fae8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3714      	adds	r7, #20
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr
 800fb08:	40012c00 	.word	0x40012c00
 800fb0c:	40013400 	.word	0x40013400

0800fb10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fb18:	bf00      	nop
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fb2c:	bf00      	nop
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fb40:	bf00      	nop
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e040      	b.n	800fbe0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d106      	bne.n	800fb74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7f3 fb10 	bl	8003194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2224      	movs	r2, #36	; 0x24
 800fb78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f022 0201 	bic.w	r2, r2, #1
 800fb88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 faaa 	bl	80100e4 <UART_SetConfig>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d101      	bne.n	800fb9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fb96:	2301      	movs	r3, #1
 800fb98:	e022      	b.n	800fbe0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d002      	beq.n	800fba8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 fd28 	bl	80105f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fbb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	689a      	ldr	r2, [r3, #8]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fbc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f042 0201 	orr.w	r2, r2, #1
 800fbd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fdaf 	bl	801073c <UART_CheckIdleState>
 800fbde:	4603      	mov	r3, r0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbfa:	2b20      	cmp	r3, #32
 800fbfc:	d145      	bne.n	800fc8a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d002      	beq.n	800fc0a <HAL_UART_Transmit_IT+0x22>
 800fc04:	88fb      	ldrh	r3, [r7, #6]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d101      	bne.n	800fc0e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e03e      	b.n	800fc8c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d101      	bne.n	800fc1c <HAL_UART_Transmit_IT+0x34>
 800fc18:	2302      	movs	r3, #2
 800fc1a:	e037      	b.n	800fc8c <HAL_UART_Transmit_IT+0xa4>
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	68ba      	ldr	r2, [r7, #8]
 800fc28:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	88fa      	ldrh	r2, [r7, #6]
 800fc2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	88fa      	ldrh	r2, [r7, #6]
 800fc36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2221      	movs	r2, #33	; 0x21
 800fc4c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc56:	d107      	bne.n	800fc68 <HAL_UART_Transmit_IT+0x80>
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d103      	bne.n	800fc68 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	4a0d      	ldr	r2, [pc, #52]	; (800fc98 <HAL_UART_Transmit_IT+0xb0>)
 800fc64:	669a      	str	r2, [r3, #104]	; 0x68
 800fc66:	e002      	b.n	800fc6e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	4a0c      	ldr	r2, [pc, #48]	; (800fc9c <HAL_UART_Transmit_IT+0xb4>)
 800fc6c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fc84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800fc86:	2300      	movs	r3, #0
 800fc88:	e000      	b.n	800fc8c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800fc8a:	2302      	movs	r3, #2
  }
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	080109c5 	.word	0x080109c5
 800fc9c:	08010951 	.word	0x08010951

0800fca0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b088      	sub	sp, #32
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	69db      	ldr	r3, [r3, #28]
 800fcae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fcc0:	69fa      	ldr	r2, [r7, #28]
 800fcc2:	f640 030f 	movw	r3, #2063	; 0x80f
 800fcc6:	4013      	ands	r3, r2
 800fcc8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d113      	bne.n	800fcf8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	f003 0320 	and.w	r3, r3, #32
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00e      	beq.n	800fcf8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	f003 0320 	and.w	r3, r3, #32
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d009      	beq.n	800fcf8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f000 81ce 	beq.w	801008a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	4798      	blx	r3
      }
      return;
 800fcf6:	e1c8      	b.n	801008a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	f000 80e3 	beq.w	800fec6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d105      	bne.n	800fd16 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800fd0a:	69ba      	ldr	r2, [r7, #24]
 800fd0c:	4ba6      	ldr	r3, [pc, #664]	; (800ffa8 <HAL_UART_IRQHandler+0x308>)
 800fd0e:	4013      	ands	r3, r2
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 80d8 	beq.w	800fec6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	f003 0301 	and.w	r3, r3, #1
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d010      	beq.n	800fd42 <HAL_UART_IRQHandler+0xa2>
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00b      	beq.n	800fd42 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd38:	f043 0201 	orr.w	r2, r3, #1
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	f003 0302 	and.w	r3, r3, #2
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d010      	beq.n	800fd6e <HAL_UART_IRQHandler+0xce>
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00b      	beq.n	800fd6e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2202      	movs	r2, #2
 800fd5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd64:	f043 0204 	orr.w	r2, r3, #4
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	f003 0304 	and.w	r3, r3, #4
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d010      	beq.n	800fd9a <HAL_UART_IRQHandler+0xfa>
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	f003 0301 	and.w	r3, r3, #1
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2204      	movs	r2, #4
 800fd88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd90:	f043 0202 	orr.w	r2, r3, #2
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	f003 0308 	and.w	r3, r3, #8
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d015      	beq.n	800fdd0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	f003 0320 	and.w	r3, r3, #32
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d104      	bne.n	800fdb8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00b      	beq.n	800fdd0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2208      	movs	r2, #8
 800fdbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdc6:	f043 0208 	orr.w	r2, r3, #8
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d011      	beq.n	800fdfe <HAL_UART_IRQHandler+0x15e>
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d00c      	beq.n	800fdfe <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fdec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdf4:	f043 0220 	orr.w	r2, r3, #32
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 8142 	beq.w	801008e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	f003 0320 	and.w	r3, r3, #32
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00c      	beq.n	800fe2e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	f003 0320 	and.w	r3, r3, #32
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d007      	beq.n	800fe2e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d003      	beq.n	800fe2e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe40:	2b40      	cmp	r3, #64	; 0x40
 800fe42:	d004      	beq.n	800fe4e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d031      	beq.n	800feb2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 fd39 	bl	80108c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe5e:	2b40      	cmp	r3, #64	; 0x40
 800fe60:	d123      	bne.n	800feaa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	689a      	ldr	r2, [r3, #8]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d013      	beq.n	800fea2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe7e:	4a4b      	ldr	r2, [pc, #300]	; (800ffac <HAL_UART_IRQHandler+0x30c>)
 800fe80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fa fc2e 	bl	800a6e8 <HAL_DMA_Abort_IT>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d017      	beq.n	800fec2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800fe9c:	4610      	mov	r0, r2
 800fe9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fea0:	e00f      	b.n	800fec2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 f908 	bl	80100b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fea8:	e00b      	b.n	800fec2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 f904 	bl	80100b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800feb0:	e007      	b.n	800fec2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f000 f900 	bl	80100b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800fec0:	e0e5      	b.n	801008e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fec2:	bf00      	nop
    return;
 800fec4:	e0e3      	b.n	801008e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800feca:	2b01      	cmp	r3, #1
 800fecc:	f040 80a9 	bne.w	8010022 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	f003 0310 	and.w	r3, r3, #16
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 80a3 	beq.w	8010022 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	f003 0310 	and.w	r3, r3, #16
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 809d 	beq.w	8010022 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2210      	movs	r2, #16
 800feee:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fefa:	2b40      	cmp	r3, #64	; 0x40
 800fefc:	d158      	bne.n	800ffb0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800ff08:	893b      	ldrh	r3, [r7, #8]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	f000 80c1 	beq.w	8010092 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ff16:	893a      	ldrh	r2, [r7, #8]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	f080 80ba 	bcs.w	8010092 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	893a      	ldrh	r2, [r7, #8]
 800ff22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f003 0320 	and.w	r3, r3, #32
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d12a      	bne.n	800ff8c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ff44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	689a      	ldr	r2, [r3, #8]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f022 0201 	bic.w	r2, r2, #1
 800ff54:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	689a      	ldr	r2, [r3, #8]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff64:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f022 0210 	bic.w	r2, r2, #16
 800ff80:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fa fb70 	bl	800a66c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 f893 	bl	80100cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ffa6:	e074      	b.n	8010092 <HAL_UART_IRQHandler+0x3f2>
 800ffa8:	04000120 	.word	0x04000120
 800ffac:	08010925 	.word	0x08010925
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d063      	beq.n	8010096 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800ffce:	897b      	ldrh	r3, [r7, #10]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d060      	beq.n	8010096 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ffe2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	689a      	ldr	r2, [r3, #8]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f022 0201 	bic.w	r2, r2, #1
 800fff2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2220      	movs	r2, #32
 800fff8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f022 0210 	bic.w	r2, r2, #16
 8010014:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010016:	897b      	ldrh	r3, [r7, #10]
 8010018:	4619      	mov	r1, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f856 	bl	80100cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010020:	e039      	b.n	8010096 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00d      	beq.n	8010048 <HAL_UART_IRQHandler+0x3a8>
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010032:	2b00      	cmp	r3, #0
 8010034:	d008      	beq.n	8010048 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801003e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fd16 	bl	8010a72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010046:	e029      	b.n	801009c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00d      	beq.n	801006e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010058:	2b00      	cmp	r3, #0
 801005a:	d008      	beq.n	801006e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010060:	2b00      	cmp	r3, #0
 8010062:	d01a      	beq.n	801009a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	4798      	blx	r3
    }
    return;
 801006c:	e015      	b.n	801009a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010074:	2b00      	cmp	r3, #0
 8010076:	d011      	beq.n	801009c <HAL_UART_IRQHandler+0x3fc>
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00c      	beq.n	801009c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 fcdc 	bl	8010a40 <UART_EndTransmit_IT>
    return;
 8010088:	e008      	b.n	801009c <HAL_UART_IRQHandler+0x3fc>
      return;
 801008a:	bf00      	nop
 801008c:	e006      	b.n	801009c <HAL_UART_IRQHandler+0x3fc>
    return;
 801008e:	bf00      	nop
 8010090:	e004      	b.n	801009c <HAL_UART_IRQHandler+0x3fc>
      return;
 8010092:	bf00      	nop
 8010094:	e002      	b.n	801009c <HAL_UART_IRQHandler+0x3fc>
      return;
 8010096:	bf00      	nop
 8010098:	e000      	b.n	801009c <HAL_UART_IRQHandler+0x3fc>
    return;
 801009a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801009c:	3720      	adds	r7, #32
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop

080100a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80100ac:	bf00      	nop
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	460b      	mov	r3, r1
 80100d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80100d8:	bf00      	nop
 80100da:	370c      	adds	r7, #12
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr

080100e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100e4:	b5b0      	push	{r4, r5, r7, lr}
 80100e6:	b088      	sub	sp, #32
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	689a      	ldr	r2, [r3, #8]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	691b      	ldr	r3, [r3, #16]
 80100f8:	431a      	orrs	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	695b      	ldr	r3, [r3, #20]
 80100fe:	431a      	orrs	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	69db      	ldr	r3, [r3, #28]
 8010104:	4313      	orrs	r3, r2
 8010106:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	4bad      	ldr	r3, [pc, #692]	; (80103c4 <UART_SetConfig+0x2e0>)
 8010110:	4013      	ands	r3, r2
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	6812      	ldr	r2, [r2, #0]
 8010116:	69f9      	ldr	r1, [r7, #28]
 8010118:	430b      	orrs	r3, r1
 801011a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68da      	ldr	r2, [r3, #12]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	430a      	orrs	r2, r1
 8010130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	699b      	ldr	r3, [r3, #24]
 8010136:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4aa2      	ldr	r2, [pc, #648]	; (80103c8 <UART_SetConfig+0x2e4>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d004      	beq.n	801014c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6a1b      	ldr	r3, [r3, #32]
 8010146:	69fa      	ldr	r2, [r7, #28]
 8010148:	4313      	orrs	r3, r2
 801014a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	689b      	ldr	r3, [r3, #8]
 8010152:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	69fa      	ldr	r2, [r7, #28]
 801015c:	430a      	orrs	r2, r1
 801015e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a99      	ldr	r2, [pc, #612]	; (80103cc <UART_SetConfig+0x2e8>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d121      	bne.n	80101ae <UART_SetConfig+0xca>
 801016a:	4b99      	ldr	r3, [pc, #612]	; (80103d0 <UART_SetConfig+0x2ec>)
 801016c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010170:	f003 0303 	and.w	r3, r3, #3
 8010174:	2b03      	cmp	r3, #3
 8010176:	d817      	bhi.n	80101a8 <UART_SetConfig+0xc4>
 8010178:	a201      	add	r2, pc, #4	; (adr r2, 8010180 <UART_SetConfig+0x9c>)
 801017a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017e:	bf00      	nop
 8010180:	08010191 	.word	0x08010191
 8010184:	0801019d 	.word	0x0801019d
 8010188:	08010197 	.word	0x08010197
 801018c:	080101a3 	.word	0x080101a3
 8010190:	2301      	movs	r3, #1
 8010192:	76fb      	strb	r3, [r7, #27]
 8010194:	e0e7      	b.n	8010366 <UART_SetConfig+0x282>
 8010196:	2302      	movs	r3, #2
 8010198:	76fb      	strb	r3, [r7, #27]
 801019a:	e0e4      	b.n	8010366 <UART_SetConfig+0x282>
 801019c:	2304      	movs	r3, #4
 801019e:	76fb      	strb	r3, [r7, #27]
 80101a0:	e0e1      	b.n	8010366 <UART_SetConfig+0x282>
 80101a2:	2308      	movs	r3, #8
 80101a4:	76fb      	strb	r3, [r7, #27]
 80101a6:	e0de      	b.n	8010366 <UART_SetConfig+0x282>
 80101a8:	2310      	movs	r3, #16
 80101aa:	76fb      	strb	r3, [r7, #27]
 80101ac:	e0db      	b.n	8010366 <UART_SetConfig+0x282>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4a88      	ldr	r2, [pc, #544]	; (80103d4 <UART_SetConfig+0x2f0>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d132      	bne.n	801021e <UART_SetConfig+0x13a>
 80101b8:	4b85      	ldr	r3, [pc, #532]	; (80103d0 <UART_SetConfig+0x2ec>)
 80101ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101be:	f003 030c 	and.w	r3, r3, #12
 80101c2:	2b0c      	cmp	r3, #12
 80101c4:	d828      	bhi.n	8010218 <UART_SetConfig+0x134>
 80101c6:	a201      	add	r2, pc, #4	; (adr r2, 80101cc <UART_SetConfig+0xe8>)
 80101c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101cc:	08010201 	.word	0x08010201
 80101d0:	08010219 	.word	0x08010219
 80101d4:	08010219 	.word	0x08010219
 80101d8:	08010219 	.word	0x08010219
 80101dc:	0801020d 	.word	0x0801020d
 80101e0:	08010219 	.word	0x08010219
 80101e4:	08010219 	.word	0x08010219
 80101e8:	08010219 	.word	0x08010219
 80101ec:	08010207 	.word	0x08010207
 80101f0:	08010219 	.word	0x08010219
 80101f4:	08010219 	.word	0x08010219
 80101f8:	08010219 	.word	0x08010219
 80101fc:	08010213 	.word	0x08010213
 8010200:	2300      	movs	r3, #0
 8010202:	76fb      	strb	r3, [r7, #27]
 8010204:	e0af      	b.n	8010366 <UART_SetConfig+0x282>
 8010206:	2302      	movs	r3, #2
 8010208:	76fb      	strb	r3, [r7, #27]
 801020a:	e0ac      	b.n	8010366 <UART_SetConfig+0x282>
 801020c:	2304      	movs	r3, #4
 801020e:	76fb      	strb	r3, [r7, #27]
 8010210:	e0a9      	b.n	8010366 <UART_SetConfig+0x282>
 8010212:	2308      	movs	r3, #8
 8010214:	76fb      	strb	r3, [r7, #27]
 8010216:	e0a6      	b.n	8010366 <UART_SetConfig+0x282>
 8010218:	2310      	movs	r3, #16
 801021a:	76fb      	strb	r3, [r7, #27]
 801021c:	e0a3      	b.n	8010366 <UART_SetConfig+0x282>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	4a6d      	ldr	r2, [pc, #436]	; (80103d8 <UART_SetConfig+0x2f4>)
 8010224:	4293      	cmp	r3, r2
 8010226:	d120      	bne.n	801026a <UART_SetConfig+0x186>
 8010228:	4b69      	ldr	r3, [pc, #420]	; (80103d0 <UART_SetConfig+0x2ec>)
 801022a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801022e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010232:	2b30      	cmp	r3, #48	; 0x30
 8010234:	d013      	beq.n	801025e <UART_SetConfig+0x17a>
 8010236:	2b30      	cmp	r3, #48	; 0x30
 8010238:	d814      	bhi.n	8010264 <UART_SetConfig+0x180>
 801023a:	2b20      	cmp	r3, #32
 801023c:	d009      	beq.n	8010252 <UART_SetConfig+0x16e>
 801023e:	2b20      	cmp	r3, #32
 8010240:	d810      	bhi.n	8010264 <UART_SetConfig+0x180>
 8010242:	2b00      	cmp	r3, #0
 8010244:	d002      	beq.n	801024c <UART_SetConfig+0x168>
 8010246:	2b10      	cmp	r3, #16
 8010248:	d006      	beq.n	8010258 <UART_SetConfig+0x174>
 801024a:	e00b      	b.n	8010264 <UART_SetConfig+0x180>
 801024c:	2300      	movs	r3, #0
 801024e:	76fb      	strb	r3, [r7, #27]
 8010250:	e089      	b.n	8010366 <UART_SetConfig+0x282>
 8010252:	2302      	movs	r3, #2
 8010254:	76fb      	strb	r3, [r7, #27]
 8010256:	e086      	b.n	8010366 <UART_SetConfig+0x282>
 8010258:	2304      	movs	r3, #4
 801025a:	76fb      	strb	r3, [r7, #27]
 801025c:	e083      	b.n	8010366 <UART_SetConfig+0x282>
 801025e:	2308      	movs	r3, #8
 8010260:	76fb      	strb	r3, [r7, #27]
 8010262:	e080      	b.n	8010366 <UART_SetConfig+0x282>
 8010264:	2310      	movs	r3, #16
 8010266:	76fb      	strb	r3, [r7, #27]
 8010268:	e07d      	b.n	8010366 <UART_SetConfig+0x282>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4a5b      	ldr	r2, [pc, #364]	; (80103dc <UART_SetConfig+0x2f8>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d120      	bne.n	80102b6 <UART_SetConfig+0x1d2>
 8010274:	4b56      	ldr	r3, [pc, #344]	; (80103d0 <UART_SetConfig+0x2ec>)
 8010276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801027a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801027e:	2bc0      	cmp	r3, #192	; 0xc0
 8010280:	d013      	beq.n	80102aa <UART_SetConfig+0x1c6>
 8010282:	2bc0      	cmp	r3, #192	; 0xc0
 8010284:	d814      	bhi.n	80102b0 <UART_SetConfig+0x1cc>
 8010286:	2b80      	cmp	r3, #128	; 0x80
 8010288:	d009      	beq.n	801029e <UART_SetConfig+0x1ba>
 801028a:	2b80      	cmp	r3, #128	; 0x80
 801028c:	d810      	bhi.n	80102b0 <UART_SetConfig+0x1cc>
 801028e:	2b00      	cmp	r3, #0
 8010290:	d002      	beq.n	8010298 <UART_SetConfig+0x1b4>
 8010292:	2b40      	cmp	r3, #64	; 0x40
 8010294:	d006      	beq.n	80102a4 <UART_SetConfig+0x1c0>
 8010296:	e00b      	b.n	80102b0 <UART_SetConfig+0x1cc>
 8010298:	2300      	movs	r3, #0
 801029a:	76fb      	strb	r3, [r7, #27]
 801029c:	e063      	b.n	8010366 <UART_SetConfig+0x282>
 801029e:	2302      	movs	r3, #2
 80102a0:	76fb      	strb	r3, [r7, #27]
 80102a2:	e060      	b.n	8010366 <UART_SetConfig+0x282>
 80102a4:	2304      	movs	r3, #4
 80102a6:	76fb      	strb	r3, [r7, #27]
 80102a8:	e05d      	b.n	8010366 <UART_SetConfig+0x282>
 80102aa:	2308      	movs	r3, #8
 80102ac:	76fb      	strb	r3, [r7, #27]
 80102ae:	e05a      	b.n	8010366 <UART_SetConfig+0x282>
 80102b0:	2310      	movs	r3, #16
 80102b2:	76fb      	strb	r3, [r7, #27]
 80102b4:	e057      	b.n	8010366 <UART_SetConfig+0x282>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a49      	ldr	r2, [pc, #292]	; (80103e0 <UART_SetConfig+0x2fc>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d125      	bne.n	801030c <UART_SetConfig+0x228>
 80102c0:	4b43      	ldr	r3, [pc, #268]	; (80103d0 <UART_SetConfig+0x2ec>)
 80102c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80102ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102ce:	d017      	beq.n	8010300 <UART_SetConfig+0x21c>
 80102d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102d4:	d817      	bhi.n	8010306 <UART_SetConfig+0x222>
 80102d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102da:	d00b      	beq.n	80102f4 <UART_SetConfig+0x210>
 80102dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102e0:	d811      	bhi.n	8010306 <UART_SetConfig+0x222>
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d003      	beq.n	80102ee <UART_SetConfig+0x20a>
 80102e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ea:	d006      	beq.n	80102fa <UART_SetConfig+0x216>
 80102ec:	e00b      	b.n	8010306 <UART_SetConfig+0x222>
 80102ee:	2300      	movs	r3, #0
 80102f0:	76fb      	strb	r3, [r7, #27]
 80102f2:	e038      	b.n	8010366 <UART_SetConfig+0x282>
 80102f4:	2302      	movs	r3, #2
 80102f6:	76fb      	strb	r3, [r7, #27]
 80102f8:	e035      	b.n	8010366 <UART_SetConfig+0x282>
 80102fa:	2304      	movs	r3, #4
 80102fc:	76fb      	strb	r3, [r7, #27]
 80102fe:	e032      	b.n	8010366 <UART_SetConfig+0x282>
 8010300:	2308      	movs	r3, #8
 8010302:	76fb      	strb	r3, [r7, #27]
 8010304:	e02f      	b.n	8010366 <UART_SetConfig+0x282>
 8010306:	2310      	movs	r3, #16
 8010308:	76fb      	strb	r3, [r7, #27]
 801030a:	e02c      	b.n	8010366 <UART_SetConfig+0x282>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a2d      	ldr	r2, [pc, #180]	; (80103c8 <UART_SetConfig+0x2e4>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d125      	bne.n	8010362 <UART_SetConfig+0x27e>
 8010316:	4b2e      	ldr	r3, [pc, #184]	; (80103d0 <UART_SetConfig+0x2ec>)
 8010318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801031c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010324:	d017      	beq.n	8010356 <UART_SetConfig+0x272>
 8010326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801032a:	d817      	bhi.n	801035c <UART_SetConfig+0x278>
 801032c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010330:	d00b      	beq.n	801034a <UART_SetConfig+0x266>
 8010332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010336:	d811      	bhi.n	801035c <UART_SetConfig+0x278>
 8010338:	2b00      	cmp	r3, #0
 801033a:	d003      	beq.n	8010344 <UART_SetConfig+0x260>
 801033c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010340:	d006      	beq.n	8010350 <UART_SetConfig+0x26c>
 8010342:	e00b      	b.n	801035c <UART_SetConfig+0x278>
 8010344:	2300      	movs	r3, #0
 8010346:	76fb      	strb	r3, [r7, #27]
 8010348:	e00d      	b.n	8010366 <UART_SetConfig+0x282>
 801034a:	2302      	movs	r3, #2
 801034c:	76fb      	strb	r3, [r7, #27]
 801034e:	e00a      	b.n	8010366 <UART_SetConfig+0x282>
 8010350:	2304      	movs	r3, #4
 8010352:	76fb      	strb	r3, [r7, #27]
 8010354:	e007      	b.n	8010366 <UART_SetConfig+0x282>
 8010356:	2308      	movs	r3, #8
 8010358:	76fb      	strb	r3, [r7, #27]
 801035a:	e004      	b.n	8010366 <UART_SetConfig+0x282>
 801035c:	2310      	movs	r3, #16
 801035e:	76fb      	strb	r3, [r7, #27]
 8010360:	e001      	b.n	8010366 <UART_SetConfig+0x282>
 8010362:	2310      	movs	r3, #16
 8010364:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a17      	ldr	r2, [pc, #92]	; (80103c8 <UART_SetConfig+0x2e4>)
 801036c:	4293      	cmp	r3, r2
 801036e:	f040 8087 	bne.w	8010480 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010372:	7efb      	ldrb	r3, [r7, #27]
 8010374:	2b08      	cmp	r3, #8
 8010376:	d837      	bhi.n	80103e8 <UART_SetConfig+0x304>
 8010378:	a201      	add	r2, pc, #4	; (adr r2, 8010380 <UART_SetConfig+0x29c>)
 801037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801037e:	bf00      	nop
 8010380:	080103a5 	.word	0x080103a5
 8010384:	080103e9 	.word	0x080103e9
 8010388:	080103ad 	.word	0x080103ad
 801038c:	080103e9 	.word	0x080103e9
 8010390:	080103b3 	.word	0x080103b3
 8010394:	080103e9 	.word	0x080103e9
 8010398:	080103e9 	.word	0x080103e9
 801039c:	080103e9 	.word	0x080103e9
 80103a0:	080103bb 	.word	0x080103bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103a4:	f7fc fa3c 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 80103a8:	6178      	str	r0, [r7, #20]
        break;
 80103aa:	e022      	b.n	80103f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80103ac:	4b0d      	ldr	r3, [pc, #52]	; (80103e4 <UART_SetConfig+0x300>)
 80103ae:	617b      	str	r3, [r7, #20]
        break;
 80103b0:	e01f      	b.n	80103f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80103b2:	f7fc f99d 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 80103b6:	6178      	str	r0, [r7, #20]
        break;
 80103b8:	e01b      	b.n	80103f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80103be:	617b      	str	r3, [r7, #20]
        break;
 80103c0:	e017      	b.n	80103f2 <UART_SetConfig+0x30e>
 80103c2:	bf00      	nop
 80103c4:	efff69f3 	.word	0xefff69f3
 80103c8:	40008000 	.word	0x40008000
 80103cc:	40013800 	.word	0x40013800
 80103d0:	40021000 	.word	0x40021000
 80103d4:	40004400 	.word	0x40004400
 80103d8:	40004800 	.word	0x40004800
 80103dc:	40004c00 	.word	0x40004c00
 80103e0:	40005000 	.word	0x40005000
 80103e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80103e8:	2300      	movs	r3, #0
 80103ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80103ec:	2301      	movs	r3, #1
 80103ee:	76bb      	strb	r3, [r7, #26]
        break;
 80103f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 80f1 	beq.w	80105dc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	685a      	ldr	r2, [r3, #4]
 80103fe:	4613      	mov	r3, r2
 8010400:	005b      	lsls	r3, r3, #1
 8010402:	4413      	add	r3, r2
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	429a      	cmp	r2, r3
 8010408:	d305      	bcc.n	8010416 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	429a      	cmp	r2, r3
 8010414:	d902      	bls.n	801041c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8010416:	2301      	movs	r3, #1
 8010418:	76bb      	strb	r3, [r7, #26]
 801041a:	e0df      	b.n	80105dc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	4618      	mov	r0, r3
 8010420:	f04f 0100 	mov.w	r1, #0
 8010424:	f04f 0200 	mov.w	r2, #0
 8010428:	f04f 0300 	mov.w	r3, #0
 801042c:	020b      	lsls	r3, r1, #8
 801042e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010432:	0202      	lsls	r2, r0, #8
 8010434:	6879      	ldr	r1, [r7, #4]
 8010436:	6849      	ldr	r1, [r1, #4]
 8010438:	0849      	lsrs	r1, r1, #1
 801043a:	4608      	mov	r0, r1
 801043c:	f04f 0100 	mov.w	r1, #0
 8010440:	1814      	adds	r4, r2, r0
 8010442:	eb43 0501 	adc.w	r5, r3, r1
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	461a      	mov	r2, r3
 801044c:	f04f 0300 	mov.w	r3, #0
 8010450:	4620      	mov	r0, r4
 8010452:	4629      	mov	r1, r5
 8010454:	f7f0 fc68 	bl	8000d28 <__aeabi_uldivmod>
 8010458:	4602      	mov	r2, r0
 801045a:	460b      	mov	r3, r1
 801045c:	4613      	mov	r3, r2
 801045e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010466:	d308      	bcc.n	801047a <UART_SetConfig+0x396>
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801046e:	d204      	bcs.n	801047a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	693a      	ldr	r2, [r7, #16]
 8010476:	60da      	str	r2, [r3, #12]
 8010478:	e0b0      	b.n	80105dc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 801047a:	2301      	movs	r3, #1
 801047c:	76bb      	strb	r3, [r7, #26]
 801047e:	e0ad      	b.n	80105dc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	69db      	ldr	r3, [r3, #28]
 8010484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010488:	d15c      	bne.n	8010544 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 801048a:	7efb      	ldrb	r3, [r7, #27]
 801048c:	2b08      	cmp	r3, #8
 801048e:	d828      	bhi.n	80104e2 <UART_SetConfig+0x3fe>
 8010490:	a201      	add	r2, pc, #4	; (adr r2, 8010498 <UART_SetConfig+0x3b4>)
 8010492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010496:	bf00      	nop
 8010498:	080104bd 	.word	0x080104bd
 801049c:	080104c5 	.word	0x080104c5
 80104a0:	080104cd 	.word	0x080104cd
 80104a4:	080104e3 	.word	0x080104e3
 80104a8:	080104d3 	.word	0x080104d3
 80104ac:	080104e3 	.word	0x080104e3
 80104b0:	080104e3 	.word	0x080104e3
 80104b4:	080104e3 	.word	0x080104e3
 80104b8:	080104db 	.word	0x080104db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104bc:	f7fc f9b0 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 80104c0:	6178      	str	r0, [r7, #20]
        break;
 80104c2:	e013      	b.n	80104ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104c4:	f7fc f9c2 	bl	800c84c <HAL_RCC_GetPCLK2Freq>
 80104c8:	6178      	str	r0, [r7, #20]
        break;
 80104ca:	e00f      	b.n	80104ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80104cc:	4b49      	ldr	r3, [pc, #292]	; (80105f4 <UART_SetConfig+0x510>)
 80104ce:	617b      	str	r3, [r7, #20]
        break;
 80104d0:	e00c      	b.n	80104ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80104d2:	f7fc f90d 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 80104d6:	6178      	str	r0, [r7, #20]
        break;
 80104d8:	e008      	b.n	80104ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104de:	617b      	str	r3, [r7, #20]
        break;
 80104e0:	e004      	b.n	80104ec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80104e2:	2300      	movs	r3, #0
 80104e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	76bb      	strb	r3, [r7, #26]
        break;
 80104ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d074      	beq.n	80105dc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	005a      	lsls	r2, r3, #1
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	085b      	lsrs	r3, r3, #1
 80104fc:	441a      	add	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	fbb2 f3f3 	udiv	r3, r2, r3
 8010506:	b29b      	uxth	r3, r3
 8010508:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	2b0f      	cmp	r3, #15
 801050e:	d916      	bls.n	801053e <UART_SetConfig+0x45a>
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010516:	d212      	bcs.n	801053e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	b29b      	uxth	r3, r3
 801051c:	f023 030f 	bic.w	r3, r3, #15
 8010520:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	085b      	lsrs	r3, r3, #1
 8010526:	b29b      	uxth	r3, r3
 8010528:	f003 0307 	and.w	r3, r3, #7
 801052c:	b29a      	uxth	r2, r3
 801052e:	89fb      	ldrh	r3, [r7, #14]
 8010530:	4313      	orrs	r3, r2
 8010532:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	89fa      	ldrh	r2, [r7, #14]
 801053a:	60da      	str	r2, [r3, #12]
 801053c:	e04e      	b.n	80105dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801053e:	2301      	movs	r3, #1
 8010540:	76bb      	strb	r3, [r7, #26]
 8010542:	e04b      	b.n	80105dc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010544:	7efb      	ldrb	r3, [r7, #27]
 8010546:	2b08      	cmp	r3, #8
 8010548:	d827      	bhi.n	801059a <UART_SetConfig+0x4b6>
 801054a:	a201      	add	r2, pc, #4	; (adr r2, 8010550 <UART_SetConfig+0x46c>)
 801054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010550:	08010575 	.word	0x08010575
 8010554:	0801057d 	.word	0x0801057d
 8010558:	08010585 	.word	0x08010585
 801055c:	0801059b 	.word	0x0801059b
 8010560:	0801058b 	.word	0x0801058b
 8010564:	0801059b 	.word	0x0801059b
 8010568:	0801059b 	.word	0x0801059b
 801056c:	0801059b 	.word	0x0801059b
 8010570:	08010593 	.word	0x08010593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010574:	f7fc f954 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 8010578:	6178      	str	r0, [r7, #20]
        break;
 801057a:	e013      	b.n	80105a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801057c:	f7fc f966 	bl	800c84c <HAL_RCC_GetPCLK2Freq>
 8010580:	6178      	str	r0, [r7, #20]
        break;
 8010582:	e00f      	b.n	80105a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010584:	4b1b      	ldr	r3, [pc, #108]	; (80105f4 <UART_SetConfig+0x510>)
 8010586:	617b      	str	r3, [r7, #20]
        break;
 8010588:	e00c      	b.n	80105a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801058a:	f7fc f8b1 	bl	800c6f0 <HAL_RCC_GetSysClockFreq>
 801058e:	6178      	str	r0, [r7, #20]
        break;
 8010590:	e008      	b.n	80105a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010596:	617b      	str	r3, [r7, #20]
        break;
 8010598:	e004      	b.n	80105a4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801059a:	2300      	movs	r3, #0
 801059c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801059e:	2301      	movs	r3, #1
 80105a0:	76bb      	strb	r3, [r7, #26]
        break;
 80105a2:	bf00      	nop
    }

    if (pclk != 0U)
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d018      	beq.n	80105dc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	085a      	lsrs	r2, r3, #1
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	441a      	add	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80105bc:	b29b      	uxth	r3, r3
 80105be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	2b0f      	cmp	r3, #15
 80105c4:	d908      	bls.n	80105d8 <UART_SetConfig+0x4f4>
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105cc:	d204      	bcs.n	80105d8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	693a      	ldr	r2, [r7, #16]
 80105d4:	60da      	str	r2, [r3, #12]
 80105d6:	e001      	b.n	80105dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80105d8:	2301      	movs	r3, #1
 80105da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80105e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3720      	adds	r7, #32
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bdb0      	pop	{r4, r5, r7, pc}
 80105f2:	bf00      	nop
 80105f4:	00f42400 	.word	0x00f42400

080105f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00a      	beq.n	8010622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	430a      	orrs	r2, r1
 8010620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010626:	f003 0302 	and.w	r3, r3, #2
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00a      	beq.n	8010644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	430a      	orrs	r2, r1
 8010642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010648:	f003 0304 	and.w	r3, r3, #4
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00a      	beq.n	8010666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	430a      	orrs	r2, r1
 8010664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066a:	f003 0308 	and.w	r3, r3, #8
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00a      	beq.n	8010688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	430a      	orrs	r2, r1
 8010686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068c:	f003 0310 	and.w	r3, r3, #16
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00a      	beq.n	80106aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	430a      	orrs	r2, r1
 80106a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ae:	f003 0320 	and.w	r3, r3, #32
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00a      	beq.n	80106cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	430a      	orrs	r2, r1
 80106ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d01a      	beq.n	801070e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	430a      	orrs	r2, r1
 80106ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106f6:	d10a      	bne.n	801070e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	430a      	orrs	r2, r1
 801070c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00a      	beq.n	8010730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	430a      	orrs	r2, r1
 801072e:	605a      	str	r2, [r3, #4]
  }
}
 8010730:	bf00      	nop
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b086      	sub	sp, #24
 8010740:	af02      	add	r7, sp, #8
 8010742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801074c:	f7f7 fe50 	bl	80083f0 <HAL_GetTick>
 8010750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f003 0308 	and.w	r3, r3, #8
 801075c:	2b08      	cmp	r3, #8
 801075e:	d10e      	bne.n	801077e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2200      	movs	r2, #0
 801076a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f82d 	bl	80107ce <UART_WaitOnFlagUntilTimeout>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d001      	beq.n	801077e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801077a:	2303      	movs	r3, #3
 801077c:	e023      	b.n	80107c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f003 0304 	and.w	r3, r3, #4
 8010788:	2b04      	cmp	r3, #4
 801078a:	d10e      	bne.n	80107aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801078c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010790:	9300      	str	r3, [sp, #0]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2200      	movs	r2, #0
 8010796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f817 	bl	80107ce <UART_WaitOnFlagUntilTimeout>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d001      	beq.n	80107aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107a6:	2303      	movs	r3, #3
 80107a8:	e00d      	b.n	80107c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2220      	movs	r2, #32
 80107ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2220      	movs	r2, #32
 80107b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80107c4:	2300      	movs	r3, #0
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b084      	sub	sp, #16
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	60f8      	str	r0, [r7, #12]
 80107d6:	60b9      	str	r1, [r7, #8]
 80107d8:	603b      	str	r3, [r7, #0]
 80107da:	4613      	mov	r3, r2
 80107dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107de:	e05e      	b.n	801089e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80107e0:	69bb      	ldr	r3, [r7, #24]
 80107e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e6:	d05a      	beq.n	801089e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80107e8:	f7f7 fe02 	bl	80083f0 <HAL_GetTick>
 80107ec:	4602      	mov	r2, r0
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	1ad3      	subs	r3, r2, r3
 80107f2:	69ba      	ldr	r2, [r7, #24]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d302      	bcc.n	80107fe <UART_WaitOnFlagUntilTimeout+0x30>
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d11b      	bne.n	8010836 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801080c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	689a      	ldr	r2, [r3, #8]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f022 0201 	bic.w	r2, r2, #1
 801081c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2220      	movs	r2, #32
 8010822:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2220      	movs	r2, #32
 8010828:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2200      	movs	r2, #0
 801082e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010832:	2303      	movs	r3, #3
 8010834:	e043      	b.n	80108be <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f003 0304 	and.w	r3, r3, #4
 8010840:	2b00      	cmp	r3, #0
 8010842:	d02c      	beq.n	801089e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801084e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010852:	d124      	bne.n	801089e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801085c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801086c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	689a      	ldr	r2, [r3, #8]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f022 0201 	bic.w	r2, r2, #1
 801087c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2220      	movs	r2, #32
 8010882:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2220      	movs	r2, #32
 8010888:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2220      	movs	r2, #32
 801088e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2200      	movs	r2, #0
 8010896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801089a:	2303      	movs	r3, #3
 801089c:	e00f      	b.n	80108be <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	69da      	ldr	r2, [r3, #28]
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	4013      	ands	r3, r2
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	bf0c      	ite	eq
 80108ae:	2301      	moveq	r3, #1
 80108b0:	2300      	movne	r3, #0
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	461a      	mov	r2, r3
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d091      	beq.n	80107e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108c6:	b480      	push	{r7}
 80108c8:	b083      	sub	sp, #12
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80108dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	689a      	ldr	r2, [r3, #8]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f022 0201 	bic.w	r2, r2, #1
 80108ec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d107      	bne.n	8010906 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f022 0210 	bic.w	r2, r2, #16
 8010904:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2220      	movs	r2, #32
 801090a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010918:	bf00      	nop
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2200      	movs	r2, #0
 8010936:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2200      	movs	r2, #0
 801093e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	f7ff fbb8 	bl	80100b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010948:	bf00      	nop
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801095c:	2b21      	cmp	r3, #33	; 0x21
 801095e:	d12b      	bne.n	80109b8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010966:	b29b      	uxth	r3, r3
 8010968:	2b00      	cmp	r3, #0
 801096a:	d110      	bne.n	801098e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	681a      	ldr	r2, [r3, #0]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801097a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801098a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801098c:	e014      	b.n	80109b8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010992:	781a      	ldrb	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	b292      	uxth	r2, r2
 801099a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109a0:	1c5a      	adds	r2, r3, #1
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	3b01      	subs	r3, #1
 80109b0:	b29a      	uxth	r2, r3
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80109b8:	bf00      	nop
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b085      	sub	sp, #20
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109d0:	2b21      	cmp	r3, #33	; 0x21
 80109d2:	d12f      	bne.n	8010a34 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80109da:	b29b      	uxth	r3, r3
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d110      	bne.n	8010a02 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109ee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109fe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010a00:	e018      	b.n	8010a34 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a06:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	881a      	ldrh	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a14:	b292      	uxth	r2, r2
 8010a16:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a1c:	1c9a      	adds	r2, r3, #2
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8010a34:	bf00      	nop
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2220      	movs	r2, #32
 8010a5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2200      	movs	r2, #0
 8010a62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f7ff fb1d 	bl	80100a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a6a:	bf00      	nop
 8010a6c:	3708      	adds	r7, #8
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a72:	b480      	push	{r7}
 8010a74:	b083      	sub	sp, #12
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a7a:	bf00      	nop
 8010a7c:	370c      	adds	r7, #12
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr
	...

08010a88 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a9c:	683a      	ldr	r2, [r7, #0]
 8010a9e:	6812      	ldr	r2, [r2, #0]
 8010aa0:	f023 0101 	bic.w	r1, r3, #1
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	2b08      	cmp	r3, #8
 8010ab0:	d102      	bne.n	8010ab8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8010ab2:	2340      	movs	r3, #64	; 0x40
 8010ab4:	617b      	str	r3, [r7, #20]
 8010ab6:	e001      	b.n	8010abc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8010ac8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8010ace:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8010ad4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8010ada:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8010ae0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8010ae6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8010aec:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8010af2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8010af8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8010afe:	4313      	orrs	r3, r2
 8010b00:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b06:	693a      	ldr	r2, [r7, #16]
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b10:	693a      	ldr	r2, [r7, #16]
 8010b12:	4313      	orrs	r3, r2
 8010b14:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b1a:	693a      	ldr	r2, [r7, #16]
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8010b20:	4b20      	ldr	r3, [pc, #128]	; (8010ba4 <FMC_NORSRAM_Init+0x11c>)
 8010b22:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b2a:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b32:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8010b3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	681a      	ldr	r2, [r3, #0]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	43db      	mvns	r3, r3
 8010b4a:	ea02 0103 	and.w	r1, r2, r3
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	4319      	orrs	r1, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b64:	d10c      	bne.n	8010b80 <FMC_NORSRAM_Init+0xf8>
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d008      	beq.n	8010b80 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b7a:	431a      	orrs	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d006      	beq.n	8010b96 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b90:	431a      	orrs	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8010b96:	2300      	movs	r3, #0
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	371c      	adds	r7, #28
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr
 8010ba4:	0008fb7f 	.word	0x0008fb7f

08010ba8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b087      	sub	sp, #28
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	1c5a      	adds	r2, r3, #1
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bbe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	431a      	orrs	r2, r3
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	689b      	ldr	r3, [r3, #8]
 8010bd2:	021b      	lsls	r3, r3, #8
 8010bd4:	431a      	orrs	r2, r3
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	691b      	ldr	r3, [r3, #16]
 8010bda:	041b      	lsls	r3, r3, #16
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	695b      	ldr	r3, [r3, #20]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	051b      	lsls	r3, r3, #20
 8010be6:	431a      	orrs	r2, r3
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	699b      	ldr	r3, [r3, #24]
 8010bec:	3b02      	subs	r3, #2
 8010bee:	061b      	lsls	r3, r3, #24
 8010bf0:	431a      	orrs	r2, r3
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	69db      	ldr	r3, [r3, #28]
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	3201      	adds	r2, #1
 8010bfc:	4319      	orrs	r1, r3
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c10:	d113      	bne.n	8010c3a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010c1a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	695b      	ldr	r3, [r3, #20]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	051b      	lsls	r3, r3, #20
 8010c24:	697a      	ldr	r2, [r7, #20]
 8010c26:	4313      	orrs	r3, r2
 8010c28:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	431a      	orrs	r2, r3
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	371c      	adds	r7, #28
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	60b9      	str	r1, [r7, #8]
 8010c52:	607a      	str	r2, [r7, #4]
 8010c54:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c5c:	d11d      	bne.n	8010c9a <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010c66:	4b13      	ldr	r3, [pc, #76]	; (8010cb4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8010c68:	4013      	ands	r3, r2
 8010c6a:	68ba      	ldr	r2, [r7, #8]
 8010c6c:	6811      	ldr	r1, [r2, #0]
 8010c6e:	68ba      	ldr	r2, [r7, #8]
 8010c70:	6852      	ldr	r2, [r2, #4]
 8010c72:	0112      	lsls	r2, r2, #4
 8010c74:	4311      	orrs	r1, r2
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	6892      	ldr	r2, [r2, #8]
 8010c7a:	0212      	lsls	r2, r2, #8
 8010c7c:	4311      	orrs	r1, r2
 8010c7e:	68ba      	ldr	r2, [r7, #8]
 8010c80:	69d2      	ldr	r2, [r2, #28]
 8010c82:	4311      	orrs	r1, r2
 8010c84:	68ba      	ldr	r2, [r7, #8]
 8010c86:	6912      	ldr	r2, [r2, #16]
 8010c88:	0412      	lsls	r2, r2, #16
 8010c8a:	430a      	orrs	r2, r1
 8010c8c:	ea43 0102 	orr.w	r1, r3, r2
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010c98:	e005      	b.n	8010ca6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8010ca6:	2300      	movs	r3, #0
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3714      	adds	r7, #20
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr
 8010cb4:	cff00000 	.word	0xcff00000

08010cb8 <__errno>:
 8010cb8:	4b01      	ldr	r3, [pc, #4]	; (8010cc0 <__errno+0x8>)
 8010cba:	6818      	ldr	r0, [r3, #0]
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	200000dc 	.word	0x200000dc

08010cc4 <__libc_init_array>:
 8010cc4:	b570      	push	{r4, r5, r6, lr}
 8010cc6:	4d0d      	ldr	r5, [pc, #52]	; (8010cfc <__libc_init_array+0x38>)
 8010cc8:	4c0d      	ldr	r4, [pc, #52]	; (8010d00 <__libc_init_array+0x3c>)
 8010cca:	1b64      	subs	r4, r4, r5
 8010ccc:	10a4      	asrs	r4, r4, #2
 8010cce:	2600      	movs	r6, #0
 8010cd0:	42a6      	cmp	r6, r4
 8010cd2:	d109      	bne.n	8010ce8 <__libc_init_array+0x24>
 8010cd4:	4d0b      	ldr	r5, [pc, #44]	; (8010d04 <__libc_init_array+0x40>)
 8010cd6:	4c0c      	ldr	r4, [pc, #48]	; (8010d08 <__libc_init_array+0x44>)
 8010cd8:	f002 fee0 	bl	8013a9c <_init>
 8010cdc:	1b64      	subs	r4, r4, r5
 8010cde:	10a4      	asrs	r4, r4, #2
 8010ce0:	2600      	movs	r6, #0
 8010ce2:	42a6      	cmp	r6, r4
 8010ce4:	d105      	bne.n	8010cf2 <__libc_init_array+0x2e>
 8010ce6:	bd70      	pop	{r4, r5, r6, pc}
 8010ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cec:	4798      	blx	r3
 8010cee:	3601      	adds	r6, #1
 8010cf0:	e7ee      	b.n	8010cd0 <__libc_init_array+0xc>
 8010cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cf6:	4798      	blx	r3
 8010cf8:	3601      	adds	r6, #1
 8010cfa:	e7f2      	b.n	8010ce2 <__libc_init_array+0x1e>
 8010cfc:	0801fe44 	.word	0x0801fe44
 8010d00:	0801fe44 	.word	0x0801fe44
 8010d04:	0801fe44 	.word	0x0801fe44
 8010d08:	0801fe48 	.word	0x0801fe48

08010d0c <memcpy>:
 8010d0c:	440a      	add	r2, r1
 8010d0e:	4291      	cmp	r1, r2
 8010d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d14:	d100      	bne.n	8010d18 <memcpy+0xc>
 8010d16:	4770      	bx	lr
 8010d18:	b510      	push	{r4, lr}
 8010d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d22:	4291      	cmp	r1, r2
 8010d24:	d1f9      	bne.n	8010d1a <memcpy+0xe>
 8010d26:	bd10      	pop	{r4, pc}

08010d28 <memset>:
 8010d28:	4402      	add	r2, r0
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d100      	bne.n	8010d32 <memset+0xa>
 8010d30:	4770      	bx	lr
 8010d32:	f803 1b01 	strb.w	r1, [r3], #1
 8010d36:	e7f9      	b.n	8010d2c <memset+0x4>

08010d38 <__cvt>:
 8010d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d3c:	ec55 4b10 	vmov	r4, r5, d0
 8010d40:	2d00      	cmp	r5, #0
 8010d42:	460e      	mov	r6, r1
 8010d44:	4619      	mov	r1, r3
 8010d46:	462b      	mov	r3, r5
 8010d48:	bfbb      	ittet	lt
 8010d4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010d4e:	461d      	movlt	r5, r3
 8010d50:	2300      	movge	r3, #0
 8010d52:	232d      	movlt	r3, #45	; 0x2d
 8010d54:	700b      	strb	r3, [r1, #0]
 8010d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010d5c:	4691      	mov	r9, r2
 8010d5e:	f023 0820 	bic.w	r8, r3, #32
 8010d62:	bfbc      	itt	lt
 8010d64:	4622      	movlt	r2, r4
 8010d66:	4614      	movlt	r4, r2
 8010d68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d6c:	d005      	beq.n	8010d7a <__cvt+0x42>
 8010d6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010d72:	d100      	bne.n	8010d76 <__cvt+0x3e>
 8010d74:	3601      	adds	r6, #1
 8010d76:	2102      	movs	r1, #2
 8010d78:	e000      	b.n	8010d7c <__cvt+0x44>
 8010d7a:	2103      	movs	r1, #3
 8010d7c:	ab03      	add	r3, sp, #12
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	ab02      	add	r3, sp, #8
 8010d82:	9300      	str	r3, [sp, #0]
 8010d84:	ec45 4b10 	vmov	d0, r4, r5
 8010d88:	4653      	mov	r3, sl
 8010d8a:	4632      	mov	r2, r6
 8010d8c:	f000 fcec 	bl	8011768 <_dtoa_r>
 8010d90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d94:	4607      	mov	r7, r0
 8010d96:	d102      	bne.n	8010d9e <__cvt+0x66>
 8010d98:	f019 0f01 	tst.w	r9, #1
 8010d9c:	d022      	beq.n	8010de4 <__cvt+0xac>
 8010d9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010da2:	eb07 0906 	add.w	r9, r7, r6
 8010da6:	d110      	bne.n	8010dca <__cvt+0x92>
 8010da8:	783b      	ldrb	r3, [r7, #0]
 8010daa:	2b30      	cmp	r3, #48	; 0x30
 8010dac:	d10a      	bne.n	8010dc4 <__cvt+0x8c>
 8010dae:	2200      	movs	r2, #0
 8010db0:	2300      	movs	r3, #0
 8010db2:	4620      	mov	r0, r4
 8010db4:	4629      	mov	r1, r5
 8010db6:	f7ef fef7 	bl	8000ba8 <__aeabi_dcmpeq>
 8010dba:	b918      	cbnz	r0, 8010dc4 <__cvt+0x8c>
 8010dbc:	f1c6 0601 	rsb	r6, r6, #1
 8010dc0:	f8ca 6000 	str.w	r6, [sl]
 8010dc4:	f8da 3000 	ldr.w	r3, [sl]
 8010dc8:	4499      	add	r9, r3
 8010dca:	2200      	movs	r2, #0
 8010dcc:	2300      	movs	r3, #0
 8010dce:	4620      	mov	r0, r4
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	f7ef fee9 	bl	8000ba8 <__aeabi_dcmpeq>
 8010dd6:	b108      	cbz	r0, 8010ddc <__cvt+0xa4>
 8010dd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ddc:	2230      	movs	r2, #48	; 0x30
 8010dde:	9b03      	ldr	r3, [sp, #12]
 8010de0:	454b      	cmp	r3, r9
 8010de2:	d307      	bcc.n	8010df4 <__cvt+0xbc>
 8010de4:	9b03      	ldr	r3, [sp, #12]
 8010de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010de8:	1bdb      	subs	r3, r3, r7
 8010dea:	4638      	mov	r0, r7
 8010dec:	6013      	str	r3, [r2, #0]
 8010dee:	b004      	add	sp, #16
 8010df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010df4:	1c59      	adds	r1, r3, #1
 8010df6:	9103      	str	r1, [sp, #12]
 8010df8:	701a      	strb	r2, [r3, #0]
 8010dfa:	e7f0      	b.n	8010dde <__cvt+0xa6>

08010dfc <__exponent>:
 8010dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2900      	cmp	r1, #0
 8010e02:	bfb8      	it	lt
 8010e04:	4249      	neglt	r1, r1
 8010e06:	f803 2b02 	strb.w	r2, [r3], #2
 8010e0a:	bfb4      	ite	lt
 8010e0c:	222d      	movlt	r2, #45	; 0x2d
 8010e0e:	222b      	movge	r2, #43	; 0x2b
 8010e10:	2909      	cmp	r1, #9
 8010e12:	7042      	strb	r2, [r0, #1]
 8010e14:	dd2a      	ble.n	8010e6c <__exponent+0x70>
 8010e16:	f10d 0407 	add.w	r4, sp, #7
 8010e1a:	46a4      	mov	ip, r4
 8010e1c:	270a      	movs	r7, #10
 8010e1e:	46a6      	mov	lr, r4
 8010e20:	460a      	mov	r2, r1
 8010e22:	fb91 f6f7 	sdiv	r6, r1, r7
 8010e26:	fb07 1516 	mls	r5, r7, r6, r1
 8010e2a:	3530      	adds	r5, #48	; 0x30
 8010e2c:	2a63      	cmp	r2, #99	; 0x63
 8010e2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010e32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010e36:	4631      	mov	r1, r6
 8010e38:	dcf1      	bgt.n	8010e1e <__exponent+0x22>
 8010e3a:	3130      	adds	r1, #48	; 0x30
 8010e3c:	f1ae 0502 	sub.w	r5, lr, #2
 8010e40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010e44:	1c44      	adds	r4, r0, #1
 8010e46:	4629      	mov	r1, r5
 8010e48:	4561      	cmp	r1, ip
 8010e4a:	d30a      	bcc.n	8010e62 <__exponent+0x66>
 8010e4c:	f10d 0209 	add.w	r2, sp, #9
 8010e50:	eba2 020e 	sub.w	r2, r2, lr
 8010e54:	4565      	cmp	r5, ip
 8010e56:	bf88      	it	hi
 8010e58:	2200      	movhi	r2, #0
 8010e5a:	4413      	add	r3, r2
 8010e5c:	1a18      	subs	r0, r3, r0
 8010e5e:	b003      	add	sp, #12
 8010e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e6a:	e7ed      	b.n	8010e48 <__exponent+0x4c>
 8010e6c:	2330      	movs	r3, #48	; 0x30
 8010e6e:	3130      	adds	r1, #48	; 0x30
 8010e70:	7083      	strb	r3, [r0, #2]
 8010e72:	70c1      	strb	r1, [r0, #3]
 8010e74:	1d03      	adds	r3, r0, #4
 8010e76:	e7f1      	b.n	8010e5c <__exponent+0x60>

08010e78 <_printf_float>:
 8010e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7c:	ed2d 8b02 	vpush	{d8}
 8010e80:	b08d      	sub	sp, #52	; 0x34
 8010e82:	460c      	mov	r4, r1
 8010e84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010e88:	4616      	mov	r6, r2
 8010e8a:	461f      	mov	r7, r3
 8010e8c:	4605      	mov	r5, r0
 8010e8e:	f001 fa57 	bl	8012340 <_localeconv_r>
 8010e92:	f8d0 a000 	ldr.w	sl, [r0]
 8010e96:	4650      	mov	r0, sl
 8010e98:	f7ef fa0a 	bl	80002b0 <strlen>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8010ea0:	6823      	ldr	r3, [r4, #0]
 8010ea2:	9305      	str	r3, [sp, #20]
 8010ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ea8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010eac:	3307      	adds	r3, #7
 8010eae:	f023 0307 	bic.w	r3, r3, #7
 8010eb2:	f103 0208 	add.w	r2, r3, #8
 8010eb6:	f8c8 2000 	str.w	r2, [r8]
 8010eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010ec2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010eca:	9307      	str	r3, [sp, #28]
 8010ecc:	f8cd 8018 	str.w	r8, [sp, #24]
 8010ed0:	ee08 0a10 	vmov	s16, r0
 8010ed4:	4b9f      	ldr	r3, [pc, #636]	; (8011154 <_printf_float+0x2dc>)
 8010ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eda:	f04f 32ff 	mov.w	r2, #4294967295
 8010ede:	f7ef fe95 	bl	8000c0c <__aeabi_dcmpun>
 8010ee2:	bb88      	cbnz	r0, 8010f48 <_printf_float+0xd0>
 8010ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ee8:	4b9a      	ldr	r3, [pc, #616]	; (8011154 <_printf_float+0x2dc>)
 8010eea:	f04f 32ff 	mov.w	r2, #4294967295
 8010eee:	f7ef fe6f 	bl	8000bd0 <__aeabi_dcmple>
 8010ef2:	bb48      	cbnz	r0, 8010f48 <_printf_float+0xd0>
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	4640      	mov	r0, r8
 8010efa:	4649      	mov	r1, r9
 8010efc:	f7ef fe5e 	bl	8000bbc <__aeabi_dcmplt>
 8010f00:	b110      	cbz	r0, 8010f08 <_printf_float+0x90>
 8010f02:	232d      	movs	r3, #45	; 0x2d
 8010f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f08:	4b93      	ldr	r3, [pc, #588]	; (8011158 <_printf_float+0x2e0>)
 8010f0a:	4894      	ldr	r0, [pc, #592]	; (801115c <_printf_float+0x2e4>)
 8010f0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010f10:	bf94      	ite	ls
 8010f12:	4698      	movls	r8, r3
 8010f14:	4680      	movhi	r8, r0
 8010f16:	2303      	movs	r3, #3
 8010f18:	6123      	str	r3, [r4, #16]
 8010f1a:	9b05      	ldr	r3, [sp, #20]
 8010f1c:	f023 0204 	bic.w	r2, r3, #4
 8010f20:	6022      	str	r2, [r4, #0]
 8010f22:	f04f 0900 	mov.w	r9, #0
 8010f26:	9700      	str	r7, [sp, #0]
 8010f28:	4633      	mov	r3, r6
 8010f2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f000 f9d8 	bl	80112e4 <_printf_common>
 8010f34:	3001      	adds	r0, #1
 8010f36:	f040 8090 	bne.w	801105a <_printf_float+0x1e2>
 8010f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3e:	b00d      	add	sp, #52	; 0x34
 8010f40:	ecbd 8b02 	vpop	{d8}
 8010f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f48:	4642      	mov	r2, r8
 8010f4a:	464b      	mov	r3, r9
 8010f4c:	4640      	mov	r0, r8
 8010f4e:	4649      	mov	r1, r9
 8010f50:	f7ef fe5c 	bl	8000c0c <__aeabi_dcmpun>
 8010f54:	b140      	cbz	r0, 8010f68 <_printf_float+0xf0>
 8010f56:	464b      	mov	r3, r9
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	bfbc      	itt	lt
 8010f5c:	232d      	movlt	r3, #45	; 0x2d
 8010f5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010f62:	487f      	ldr	r0, [pc, #508]	; (8011160 <_printf_float+0x2e8>)
 8010f64:	4b7f      	ldr	r3, [pc, #508]	; (8011164 <_printf_float+0x2ec>)
 8010f66:	e7d1      	b.n	8010f0c <_printf_float+0x94>
 8010f68:	6863      	ldr	r3, [r4, #4]
 8010f6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010f6e:	9206      	str	r2, [sp, #24]
 8010f70:	1c5a      	adds	r2, r3, #1
 8010f72:	d13f      	bne.n	8010ff4 <_printf_float+0x17c>
 8010f74:	2306      	movs	r3, #6
 8010f76:	6063      	str	r3, [r4, #4]
 8010f78:	9b05      	ldr	r3, [sp, #20]
 8010f7a:	6861      	ldr	r1, [r4, #4]
 8010f7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010f80:	2300      	movs	r3, #0
 8010f82:	9303      	str	r3, [sp, #12]
 8010f84:	ab0a      	add	r3, sp, #40	; 0x28
 8010f86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010f8a:	ab09      	add	r3, sp, #36	; 0x24
 8010f8c:	ec49 8b10 	vmov	d0, r8, r9
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	6022      	str	r2, [r4, #0]
 8010f94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f7ff fecd 	bl	8010d38 <__cvt>
 8010f9e:	9b06      	ldr	r3, [sp, #24]
 8010fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010fa2:	2b47      	cmp	r3, #71	; 0x47
 8010fa4:	4680      	mov	r8, r0
 8010fa6:	d108      	bne.n	8010fba <_printf_float+0x142>
 8010fa8:	1cc8      	adds	r0, r1, #3
 8010faa:	db02      	blt.n	8010fb2 <_printf_float+0x13a>
 8010fac:	6863      	ldr	r3, [r4, #4]
 8010fae:	4299      	cmp	r1, r3
 8010fb0:	dd41      	ble.n	8011036 <_printf_float+0x1be>
 8010fb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8010fb6:	fa5f fb8b 	uxtb.w	fp, fp
 8010fba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fbe:	d820      	bhi.n	8011002 <_printf_float+0x18a>
 8010fc0:	3901      	subs	r1, #1
 8010fc2:	465a      	mov	r2, fp
 8010fc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010fc8:	9109      	str	r1, [sp, #36]	; 0x24
 8010fca:	f7ff ff17 	bl	8010dfc <__exponent>
 8010fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fd0:	1813      	adds	r3, r2, r0
 8010fd2:	2a01      	cmp	r2, #1
 8010fd4:	4681      	mov	r9, r0
 8010fd6:	6123      	str	r3, [r4, #16]
 8010fd8:	dc02      	bgt.n	8010fe0 <_printf_float+0x168>
 8010fda:	6822      	ldr	r2, [r4, #0]
 8010fdc:	07d2      	lsls	r2, r2, #31
 8010fde:	d501      	bpl.n	8010fe4 <_printf_float+0x16c>
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	6123      	str	r3, [r4, #16]
 8010fe4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d09c      	beq.n	8010f26 <_printf_float+0xae>
 8010fec:	232d      	movs	r3, #45	; 0x2d
 8010fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ff2:	e798      	b.n	8010f26 <_printf_float+0xae>
 8010ff4:	9a06      	ldr	r2, [sp, #24]
 8010ff6:	2a47      	cmp	r2, #71	; 0x47
 8010ff8:	d1be      	bne.n	8010f78 <_printf_float+0x100>
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1bc      	bne.n	8010f78 <_printf_float+0x100>
 8010ffe:	2301      	movs	r3, #1
 8011000:	e7b9      	b.n	8010f76 <_printf_float+0xfe>
 8011002:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011006:	d118      	bne.n	801103a <_printf_float+0x1c2>
 8011008:	2900      	cmp	r1, #0
 801100a:	6863      	ldr	r3, [r4, #4]
 801100c:	dd0b      	ble.n	8011026 <_printf_float+0x1ae>
 801100e:	6121      	str	r1, [r4, #16]
 8011010:	b913      	cbnz	r3, 8011018 <_printf_float+0x1a0>
 8011012:	6822      	ldr	r2, [r4, #0]
 8011014:	07d0      	lsls	r0, r2, #31
 8011016:	d502      	bpl.n	801101e <_printf_float+0x1a6>
 8011018:	3301      	adds	r3, #1
 801101a:	440b      	add	r3, r1
 801101c:	6123      	str	r3, [r4, #16]
 801101e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011020:	f04f 0900 	mov.w	r9, #0
 8011024:	e7de      	b.n	8010fe4 <_printf_float+0x16c>
 8011026:	b913      	cbnz	r3, 801102e <_printf_float+0x1b6>
 8011028:	6822      	ldr	r2, [r4, #0]
 801102a:	07d2      	lsls	r2, r2, #31
 801102c:	d501      	bpl.n	8011032 <_printf_float+0x1ba>
 801102e:	3302      	adds	r3, #2
 8011030:	e7f4      	b.n	801101c <_printf_float+0x1a4>
 8011032:	2301      	movs	r3, #1
 8011034:	e7f2      	b.n	801101c <_printf_float+0x1a4>
 8011036:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801103a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801103c:	4299      	cmp	r1, r3
 801103e:	db05      	blt.n	801104c <_printf_float+0x1d4>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	6121      	str	r1, [r4, #16]
 8011044:	07d8      	lsls	r0, r3, #31
 8011046:	d5ea      	bpl.n	801101e <_printf_float+0x1a6>
 8011048:	1c4b      	adds	r3, r1, #1
 801104a:	e7e7      	b.n	801101c <_printf_float+0x1a4>
 801104c:	2900      	cmp	r1, #0
 801104e:	bfd4      	ite	le
 8011050:	f1c1 0202 	rsble	r2, r1, #2
 8011054:	2201      	movgt	r2, #1
 8011056:	4413      	add	r3, r2
 8011058:	e7e0      	b.n	801101c <_printf_float+0x1a4>
 801105a:	6823      	ldr	r3, [r4, #0]
 801105c:	055a      	lsls	r2, r3, #21
 801105e:	d407      	bmi.n	8011070 <_printf_float+0x1f8>
 8011060:	6923      	ldr	r3, [r4, #16]
 8011062:	4642      	mov	r2, r8
 8011064:	4631      	mov	r1, r6
 8011066:	4628      	mov	r0, r5
 8011068:	47b8      	blx	r7
 801106a:	3001      	adds	r0, #1
 801106c:	d12c      	bne.n	80110c8 <_printf_float+0x250>
 801106e:	e764      	b.n	8010f3a <_printf_float+0xc2>
 8011070:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011074:	f240 80e0 	bls.w	8011238 <_printf_float+0x3c0>
 8011078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801107c:	2200      	movs	r2, #0
 801107e:	2300      	movs	r3, #0
 8011080:	f7ef fd92 	bl	8000ba8 <__aeabi_dcmpeq>
 8011084:	2800      	cmp	r0, #0
 8011086:	d034      	beq.n	80110f2 <_printf_float+0x27a>
 8011088:	4a37      	ldr	r2, [pc, #220]	; (8011168 <_printf_float+0x2f0>)
 801108a:	2301      	movs	r3, #1
 801108c:	4631      	mov	r1, r6
 801108e:	4628      	mov	r0, r5
 8011090:	47b8      	blx	r7
 8011092:	3001      	adds	r0, #1
 8011094:	f43f af51 	beq.w	8010f3a <_printf_float+0xc2>
 8011098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801109c:	429a      	cmp	r2, r3
 801109e:	db02      	blt.n	80110a6 <_printf_float+0x22e>
 80110a0:	6823      	ldr	r3, [r4, #0]
 80110a2:	07d8      	lsls	r0, r3, #31
 80110a4:	d510      	bpl.n	80110c8 <_printf_float+0x250>
 80110a6:	ee18 3a10 	vmov	r3, s16
 80110aa:	4652      	mov	r2, sl
 80110ac:	4631      	mov	r1, r6
 80110ae:	4628      	mov	r0, r5
 80110b0:	47b8      	blx	r7
 80110b2:	3001      	adds	r0, #1
 80110b4:	f43f af41 	beq.w	8010f3a <_printf_float+0xc2>
 80110b8:	f04f 0800 	mov.w	r8, #0
 80110bc:	f104 091a 	add.w	r9, r4, #26
 80110c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110c2:	3b01      	subs	r3, #1
 80110c4:	4543      	cmp	r3, r8
 80110c6:	dc09      	bgt.n	80110dc <_printf_float+0x264>
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	079b      	lsls	r3, r3, #30
 80110cc:	f100 8105 	bmi.w	80112da <_printf_float+0x462>
 80110d0:	68e0      	ldr	r0, [r4, #12]
 80110d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110d4:	4298      	cmp	r0, r3
 80110d6:	bfb8      	it	lt
 80110d8:	4618      	movlt	r0, r3
 80110da:	e730      	b.n	8010f3e <_printf_float+0xc6>
 80110dc:	2301      	movs	r3, #1
 80110de:	464a      	mov	r2, r9
 80110e0:	4631      	mov	r1, r6
 80110e2:	4628      	mov	r0, r5
 80110e4:	47b8      	blx	r7
 80110e6:	3001      	adds	r0, #1
 80110e8:	f43f af27 	beq.w	8010f3a <_printf_float+0xc2>
 80110ec:	f108 0801 	add.w	r8, r8, #1
 80110f0:	e7e6      	b.n	80110c0 <_printf_float+0x248>
 80110f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	dc39      	bgt.n	801116c <_printf_float+0x2f4>
 80110f8:	4a1b      	ldr	r2, [pc, #108]	; (8011168 <_printf_float+0x2f0>)
 80110fa:	2301      	movs	r3, #1
 80110fc:	4631      	mov	r1, r6
 80110fe:	4628      	mov	r0, r5
 8011100:	47b8      	blx	r7
 8011102:	3001      	adds	r0, #1
 8011104:	f43f af19 	beq.w	8010f3a <_printf_float+0xc2>
 8011108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801110c:	4313      	orrs	r3, r2
 801110e:	d102      	bne.n	8011116 <_printf_float+0x29e>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	07d9      	lsls	r1, r3, #31
 8011114:	d5d8      	bpl.n	80110c8 <_printf_float+0x250>
 8011116:	ee18 3a10 	vmov	r3, s16
 801111a:	4652      	mov	r2, sl
 801111c:	4631      	mov	r1, r6
 801111e:	4628      	mov	r0, r5
 8011120:	47b8      	blx	r7
 8011122:	3001      	adds	r0, #1
 8011124:	f43f af09 	beq.w	8010f3a <_printf_float+0xc2>
 8011128:	f04f 0900 	mov.w	r9, #0
 801112c:	f104 0a1a 	add.w	sl, r4, #26
 8011130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011132:	425b      	negs	r3, r3
 8011134:	454b      	cmp	r3, r9
 8011136:	dc01      	bgt.n	801113c <_printf_float+0x2c4>
 8011138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801113a:	e792      	b.n	8011062 <_printf_float+0x1ea>
 801113c:	2301      	movs	r3, #1
 801113e:	4652      	mov	r2, sl
 8011140:	4631      	mov	r1, r6
 8011142:	4628      	mov	r0, r5
 8011144:	47b8      	blx	r7
 8011146:	3001      	adds	r0, #1
 8011148:	f43f aef7 	beq.w	8010f3a <_printf_float+0xc2>
 801114c:	f109 0901 	add.w	r9, r9, #1
 8011150:	e7ee      	b.n	8011130 <_printf_float+0x2b8>
 8011152:	bf00      	nop
 8011154:	7fefffff 	.word	0x7fefffff
 8011158:	0801fa5c 	.word	0x0801fa5c
 801115c:	0801fa60 	.word	0x0801fa60
 8011160:	0801fa68 	.word	0x0801fa68
 8011164:	0801fa64 	.word	0x0801fa64
 8011168:	0801fa6c 	.word	0x0801fa6c
 801116c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801116e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011170:	429a      	cmp	r2, r3
 8011172:	bfa8      	it	ge
 8011174:	461a      	movge	r2, r3
 8011176:	2a00      	cmp	r2, #0
 8011178:	4691      	mov	r9, r2
 801117a:	dc37      	bgt.n	80111ec <_printf_float+0x374>
 801117c:	f04f 0b00 	mov.w	fp, #0
 8011180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011184:	f104 021a 	add.w	r2, r4, #26
 8011188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801118a:	9305      	str	r3, [sp, #20]
 801118c:	eba3 0309 	sub.w	r3, r3, r9
 8011190:	455b      	cmp	r3, fp
 8011192:	dc33      	bgt.n	80111fc <_printf_float+0x384>
 8011194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011198:	429a      	cmp	r2, r3
 801119a:	db3b      	blt.n	8011214 <_printf_float+0x39c>
 801119c:	6823      	ldr	r3, [r4, #0]
 801119e:	07da      	lsls	r2, r3, #31
 80111a0:	d438      	bmi.n	8011214 <_printf_float+0x39c>
 80111a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111a4:	9b05      	ldr	r3, [sp, #20]
 80111a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	eba2 0901 	sub.w	r9, r2, r1
 80111ae:	4599      	cmp	r9, r3
 80111b0:	bfa8      	it	ge
 80111b2:	4699      	movge	r9, r3
 80111b4:	f1b9 0f00 	cmp.w	r9, #0
 80111b8:	dc35      	bgt.n	8011226 <_printf_float+0x3ae>
 80111ba:	f04f 0800 	mov.w	r8, #0
 80111be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111c2:	f104 0a1a 	add.w	sl, r4, #26
 80111c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111ca:	1a9b      	subs	r3, r3, r2
 80111cc:	eba3 0309 	sub.w	r3, r3, r9
 80111d0:	4543      	cmp	r3, r8
 80111d2:	f77f af79 	ble.w	80110c8 <_printf_float+0x250>
 80111d6:	2301      	movs	r3, #1
 80111d8:	4652      	mov	r2, sl
 80111da:	4631      	mov	r1, r6
 80111dc:	4628      	mov	r0, r5
 80111de:	47b8      	blx	r7
 80111e0:	3001      	adds	r0, #1
 80111e2:	f43f aeaa 	beq.w	8010f3a <_printf_float+0xc2>
 80111e6:	f108 0801 	add.w	r8, r8, #1
 80111ea:	e7ec      	b.n	80111c6 <_printf_float+0x34e>
 80111ec:	4613      	mov	r3, r2
 80111ee:	4631      	mov	r1, r6
 80111f0:	4642      	mov	r2, r8
 80111f2:	4628      	mov	r0, r5
 80111f4:	47b8      	blx	r7
 80111f6:	3001      	adds	r0, #1
 80111f8:	d1c0      	bne.n	801117c <_printf_float+0x304>
 80111fa:	e69e      	b.n	8010f3a <_printf_float+0xc2>
 80111fc:	2301      	movs	r3, #1
 80111fe:	4631      	mov	r1, r6
 8011200:	4628      	mov	r0, r5
 8011202:	9205      	str	r2, [sp, #20]
 8011204:	47b8      	blx	r7
 8011206:	3001      	adds	r0, #1
 8011208:	f43f ae97 	beq.w	8010f3a <_printf_float+0xc2>
 801120c:	9a05      	ldr	r2, [sp, #20]
 801120e:	f10b 0b01 	add.w	fp, fp, #1
 8011212:	e7b9      	b.n	8011188 <_printf_float+0x310>
 8011214:	ee18 3a10 	vmov	r3, s16
 8011218:	4652      	mov	r2, sl
 801121a:	4631      	mov	r1, r6
 801121c:	4628      	mov	r0, r5
 801121e:	47b8      	blx	r7
 8011220:	3001      	adds	r0, #1
 8011222:	d1be      	bne.n	80111a2 <_printf_float+0x32a>
 8011224:	e689      	b.n	8010f3a <_printf_float+0xc2>
 8011226:	9a05      	ldr	r2, [sp, #20]
 8011228:	464b      	mov	r3, r9
 801122a:	4442      	add	r2, r8
 801122c:	4631      	mov	r1, r6
 801122e:	4628      	mov	r0, r5
 8011230:	47b8      	blx	r7
 8011232:	3001      	adds	r0, #1
 8011234:	d1c1      	bne.n	80111ba <_printf_float+0x342>
 8011236:	e680      	b.n	8010f3a <_printf_float+0xc2>
 8011238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801123a:	2a01      	cmp	r2, #1
 801123c:	dc01      	bgt.n	8011242 <_printf_float+0x3ca>
 801123e:	07db      	lsls	r3, r3, #31
 8011240:	d538      	bpl.n	80112b4 <_printf_float+0x43c>
 8011242:	2301      	movs	r3, #1
 8011244:	4642      	mov	r2, r8
 8011246:	4631      	mov	r1, r6
 8011248:	4628      	mov	r0, r5
 801124a:	47b8      	blx	r7
 801124c:	3001      	adds	r0, #1
 801124e:	f43f ae74 	beq.w	8010f3a <_printf_float+0xc2>
 8011252:	ee18 3a10 	vmov	r3, s16
 8011256:	4652      	mov	r2, sl
 8011258:	4631      	mov	r1, r6
 801125a:	4628      	mov	r0, r5
 801125c:	47b8      	blx	r7
 801125e:	3001      	adds	r0, #1
 8011260:	f43f ae6b 	beq.w	8010f3a <_printf_float+0xc2>
 8011264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011268:	2200      	movs	r2, #0
 801126a:	2300      	movs	r3, #0
 801126c:	f7ef fc9c 	bl	8000ba8 <__aeabi_dcmpeq>
 8011270:	b9d8      	cbnz	r0, 80112aa <_printf_float+0x432>
 8011272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011274:	f108 0201 	add.w	r2, r8, #1
 8011278:	3b01      	subs	r3, #1
 801127a:	4631      	mov	r1, r6
 801127c:	4628      	mov	r0, r5
 801127e:	47b8      	blx	r7
 8011280:	3001      	adds	r0, #1
 8011282:	d10e      	bne.n	80112a2 <_printf_float+0x42a>
 8011284:	e659      	b.n	8010f3a <_printf_float+0xc2>
 8011286:	2301      	movs	r3, #1
 8011288:	4652      	mov	r2, sl
 801128a:	4631      	mov	r1, r6
 801128c:	4628      	mov	r0, r5
 801128e:	47b8      	blx	r7
 8011290:	3001      	adds	r0, #1
 8011292:	f43f ae52 	beq.w	8010f3a <_printf_float+0xc2>
 8011296:	f108 0801 	add.w	r8, r8, #1
 801129a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801129c:	3b01      	subs	r3, #1
 801129e:	4543      	cmp	r3, r8
 80112a0:	dcf1      	bgt.n	8011286 <_printf_float+0x40e>
 80112a2:	464b      	mov	r3, r9
 80112a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80112a8:	e6dc      	b.n	8011064 <_printf_float+0x1ec>
 80112aa:	f04f 0800 	mov.w	r8, #0
 80112ae:	f104 0a1a 	add.w	sl, r4, #26
 80112b2:	e7f2      	b.n	801129a <_printf_float+0x422>
 80112b4:	2301      	movs	r3, #1
 80112b6:	4642      	mov	r2, r8
 80112b8:	e7df      	b.n	801127a <_printf_float+0x402>
 80112ba:	2301      	movs	r3, #1
 80112bc:	464a      	mov	r2, r9
 80112be:	4631      	mov	r1, r6
 80112c0:	4628      	mov	r0, r5
 80112c2:	47b8      	blx	r7
 80112c4:	3001      	adds	r0, #1
 80112c6:	f43f ae38 	beq.w	8010f3a <_printf_float+0xc2>
 80112ca:	f108 0801 	add.w	r8, r8, #1
 80112ce:	68e3      	ldr	r3, [r4, #12]
 80112d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112d2:	1a5b      	subs	r3, r3, r1
 80112d4:	4543      	cmp	r3, r8
 80112d6:	dcf0      	bgt.n	80112ba <_printf_float+0x442>
 80112d8:	e6fa      	b.n	80110d0 <_printf_float+0x258>
 80112da:	f04f 0800 	mov.w	r8, #0
 80112de:	f104 0919 	add.w	r9, r4, #25
 80112e2:	e7f4      	b.n	80112ce <_printf_float+0x456>

080112e4 <_printf_common>:
 80112e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112e8:	4616      	mov	r6, r2
 80112ea:	4699      	mov	r9, r3
 80112ec:	688a      	ldr	r2, [r1, #8]
 80112ee:	690b      	ldr	r3, [r1, #16]
 80112f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112f4:	4293      	cmp	r3, r2
 80112f6:	bfb8      	it	lt
 80112f8:	4613      	movlt	r3, r2
 80112fa:	6033      	str	r3, [r6, #0]
 80112fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011300:	4607      	mov	r7, r0
 8011302:	460c      	mov	r4, r1
 8011304:	b10a      	cbz	r2, 801130a <_printf_common+0x26>
 8011306:	3301      	adds	r3, #1
 8011308:	6033      	str	r3, [r6, #0]
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	0699      	lsls	r1, r3, #26
 801130e:	bf42      	ittt	mi
 8011310:	6833      	ldrmi	r3, [r6, #0]
 8011312:	3302      	addmi	r3, #2
 8011314:	6033      	strmi	r3, [r6, #0]
 8011316:	6825      	ldr	r5, [r4, #0]
 8011318:	f015 0506 	ands.w	r5, r5, #6
 801131c:	d106      	bne.n	801132c <_printf_common+0x48>
 801131e:	f104 0a19 	add.w	sl, r4, #25
 8011322:	68e3      	ldr	r3, [r4, #12]
 8011324:	6832      	ldr	r2, [r6, #0]
 8011326:	1a9b      	subs	r3, r3, r2
 8011328:	42ab      	cmp	r3, r5
 801132a:	dc26      	bgt.n	801137a <_printf_common+0x96>
 801132c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011330:	1e13      	subs	r3, r2, #0
 8011332:	6822      	ldr	r2, [r4, #0]
 8011334:	bf18      	it	ne
 8011336:	2301      	movne	r3, #1
 8011338:	0692      	lsls	r2, r2, #26
 801133a:	d42b      	bmi.n	8011394 <_printf_common+0xb0>
 801133c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011340:	4649      	mov	r1, r9
 8011342:	4638      	mov	r0, r7
 8011344:	47c0      	blx	r8
 8011346:	3001      	adds	r0, #1
 8011348:	d01e      	beq.n	8011388 <_printf_common+0xa4>
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	68e5      	ldr	r5, [r4, #12]
 801134e:	6832      	ldr	r2, [r6, #0]
 8011350:	f003 0306 	and.w	r3, r3, #6
 8011354:	2b04      	cmp	r3, #4
 8011356:	bf08      	it	eq
 8011358:	1aad      	subeq	r5, r5, r2
 801135a:	68a3      	ldr	r3, [r4, #8]
 801135c:	6922      	ldr	r2, [r4, #16]
 801135e:	bf0c      	ite	eq
 8011360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011364:	2500      	movne	r5, #0
 8011366:	4293      	cmp	r3, r2
 8011368:	bfc4      	itt	gt
 801136a:	1a9b      	subgt	r3, r3, r2
 801136c:	18ed      	addgt	r5, r5, r3
 801136e:	2600      	movs	r6, #0
 8011370:	341a      	adds	r4, #26
 8011372:	42b5      	cmp	r5, r6
 8011374:	d11a      	bne.n	80113ac <_printf_common+0xc8>
 8011376:	2000      	movs	r0, #0
 8011378:	e008      	b.n	801138c <_printf_common+0xa8>
 801137a:	2301      	movs	r3, #1
 801137c:	4652      	mov	r2, sl
 801137e:	4649      	mov	r1, r9
 8011380:	4638      	mov	r0, r7
 8011382:	47c0      	blx	r8
 8011384:	3001      	adds	r0, #1
 8011386:	d103      	bne.n	8011390 <_printf_common+0xac>
 8011388:	f04f 30ff 	mov.w	r0, #4294967295
 801138c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011390:	3501      	adds	r5, #1
 8011392:	e7c6      	b.n	8011322 <_printf_common+0x3e>
 8011394:	18e1      	adds	r1, r4, r3
 8011396:	1c5a      	adds	r2, r3, #1
 8011398:	2030      	movs	r0, #48	; 0x30
 801139a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801139e:	4422      	add	r2, r4
 80113a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113a8:	3302      	adds	r3, #2
 80113aa:	e7c7      	b.n	801133c <_printf_common+0x58>
 80113ac:	2301      	movs	r3, #1
 80113ae:	4622      	mov	r2, r4
 80113b0:	4649      	mov	r1, r9
 80113b2:	4638      	mov	r0, r7
 80113b4:	47c0      	blx	r8
 80113b6:	3001      	adds	r0, #1
 80113b8:	d0e6      	beq.n	8011388 <_printf_common+0xa4>
 80113ba:	3601      	adds	r6, #1
 80113bc:	e7d9      	b.n	8011372 <_printf_common+0x8e>
	...

080113c0 <_printf_i>:
 80113c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113c4:	460c      	mov	r4, r1
 80113c6:	4691      	mov	r9, r2
 80113c8:	7e27      	ldrb	r7, [r4, #24]
 80113ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80113cc:	2f78      	cmp	r7, #120	; 0x78
 80113ce:	4680      	mov	r8, r0
 80113d0:	469a      	mov	sl, r3
 80113d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113d6:	d807      	bhi.n	80113e8 <_printf_i+0x28>
 80113d8:	2f62      	cmp	r7, #98	; 0x62
 80113da:	d80a      	bhi.n	80113f2 <_printf_i+0x32>
 80113dc:	2f00      	cmp	r7, #0
 80113de:	f000 80d8 	beq.w	8011592 <_printf_i+0x1d2>
 80113e2:	2f58      	cmp	r7, #88	; 0x58
 80113e4:	f000 80a3 	beq.w	801152e <_printf_i+0x16e>
 80113e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80113ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80113f0:	e03a      	b.n	8011468 <_printf_i+0xa8>
 80113f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80113f6:	2b15      	cmp	r3, #21
 80113f8:	d8f6      	bhi.n	80113e8 <_printf_i+0x28>
 80113fa:	a001      	add	r0, pc, #4	; (adr r0, 8011400 <_printf_i+0x40>)
 80113fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011400:	08011459 	.word	0x08011459
 8011404:	0801146d 	.word	0x0801146d
 8011408:	080113e9 	.word	0x080113e9
 801140c:	080113e9 	.word	0x080113e9
 8011410:	080113e9 	.word	0x080113e9
 8011414:	080113e9 	.word	0x080113e9
 8011418:	0801146d 	.word	0x0801146d
 801141c:	080113e9 	.word	0x080113e9
 8011420:	080113e9 	.word	0x080113e9
 8011424:	080113e9 	.word	0x080113e9
 8011428:	080113e9 	.word	0x080113e9
 801142c:	08011579 	.word	0x08011579
 8011430:	0801149d 	.word	0x0801149d
 8011434:	0801155b 	.word	0x0801155b
 8011438:	080113e9 	.word	0x080113e9
 801143c:	080113e9 	.word	0x080113e9
 8011440:	0801159b 	.word	0x0801159b
 8011444:	080113e9 	.word	0x080113e9
 8011448:	0801149d 	.word	0x0801149d
 801144c:	080113e9 	.word	0x080113e9
 8011450:	080113e9 	.word	0x080113e9
 8011454:	08011563 	.word	0x08011563
 8011458:	680b      	ldr	r3, [r1, #0]
 801145a:	1d1a      	adds	r2, r3, #4
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	600a      	str	r2, [r1, #0]
 8011460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011468:	2301      	movs	r3, #1
 801146a:	e0a3      	b.n	80115b4 <_printf_i+0x1f4>
 801146c:	6825      	ldr	r5, [r4, #0]
 801146e:	6808      	ldr	r0, [r1, #0]
 8011470:	062e      	lsls	r6, r5, #24
 8011472:	f100 0304 	add.w	r3, r0, #4
 8011476:	d50a      	bpl.n	801148e <_printf_i+0xce>
 8011478:	6805      	ldr	r5, [r0, #0]
 801147a:	600b      	str	r3, [r1, #0]
 801147c:	2d00      	cmp	r5, #0
 801147e:	da03      	bge.n	8011488 <_printf_i+0xc8>
 8011480:	232d      	movs	r3, #45	; 0x2d
 8011482:	426d      	negs	r5, r5
 8011484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011488:	485e      	ldr	r0, [pc, #376]	; (8011604 <_printf_i+0x244>)
 801148a:	230a      	movs	r3, #10
 801148c:	e019      	b.n	80114c2 <_printf_i+0x102>
 801148e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011492:	6805      	ldr	r5, [r0, #0]
 8011494:	600b      	str	r3, [r1, #0]
 8011496:	bf18      	it	ne
 8011498:	b22d      	sxthne	r5, r5
 801149a:	e7ef      	b.n	801147c <_printf_i+0xbc>
 801149c:	680b      	ldr	r3, [r1, #0]
 801149e:	6825      	ldr	r5, [r4, #0]
 80114a0:	1d18      	adds	r0, r3, #4
 80114a2:	6008      	str	r0, [r1, #0]
 80114a4:	0628      	lsls	r0, r5, #24
 80114a6:	d501      	bpl.n	80114ac <_printf_i+0xec>
 80114a8:	681d      	ldr	r5, [r3, #0]
 80114aa:	e002      	b.n	80114b2 <_printf_i+0xf2>
 80114ac:	0669      	lsls	r1, r5, #25
 80114ae:	d5fb      	bpl.n	80114a8 <_printf_i+0xe8>
 80114b0:	881d      	ldrh	r5, [r3, #0]
 80114b2:	4854      	ldr	r0, [pc, #336]	; (8011604 <_printf_i+0x244>)
 80114b4:	2f6f      	cmp	r7, #111	; 0x6f
 80114b6:	bf0c      	ite	eq
 80114b8:	2308      	moveq	r3, #8
 80114ba:	230a      	movne	r3, #10
 80114bc:	2100      	movs	r1, #0
 80114be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114c2:	6866      	ldr	r6, [r4, #4]
 80114c4:	60a6      	str	r6, [r4, #8]
 80114c6:	2e00      	cmp	r6, #0
 80114c8:	bfa2      	ittt	ge
 80114ca:	6821      	ldrge	r1, [r4, #0]
 80114cc:	f021 0104 	bicge.w	r1, r1, #4
 80114d0:	6021      	strge	r1, [r4, #0]
 80114d2:	b90d      	cbnz	r5, 80114d8 <_printf_i+0x118>
 80114d4:	2e00      	cmp	r6, #0
 80114d6:	d04d      	beq.n	8011574 <_printf_i+0x1b4>
 80114d8:	4616      	mov	r6, r2
 80114da:	fbb5 f1f3 	udiv	r1, r5, r3
 80114de:	fb03 5711 	mls	r7, r3, r1, r5
 80114e2:	5dc7      	ldrb	r7, [r0, r7]
 80114e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80114e8:	462f      	mov	r7, r5
 80114ea:	42bb      	cmp	r3, r7
 80114ec:	460d      	mov	r5, r1
 80114ee:	d9f4      	bls.n	80114da <_printf_i+0x11a>
 80114f0:	2b08      	cmp	r3, #8
 80114f2:	d10b      	bne.n	801150c <_printf_i+0x14c>
 80114f4:	6823      	ldr	r3, [r4, #0]
 80114f6:	07df      	lsls	r7, r3, #31
 80114f8:	d508      	bpl.n	801150c <_printf_i+0x14c>
 80114fa:	6923      	ldr	r3, [r4, #16]
 80114fc:	6861      	ldr	r1, [r4, #4]
 80114fe:	4299      	cmp	r1, r3
 8011500:	bfde      	ittt	le
 8011502:	2330      	movle	r3, #48	; 0x30
 8011504:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011508:	f106 36ff 	addle.w	r6, r6, #4294967295
 801150c:	1b92      	subs	r2, r2, r6
 801150e:	6122      	str	r2, [r4, #16]
 8011510:	f8cd a000 	str.w	sl, [sp]
 8011514:	464b      	mov	r3, r9
 8011516:	aa03      	add	r2, sp, #12
 8011518:	4621      	mov	r1, r4
 801151a:	4640      	mov	r0, r8
 801151c:	f7ff fee2 	bl	80112e4 <_printf_common>
 8011520:	3001      	adds	r0, #1
 8011522:	d14c      	bne.n	80115be <_printf_i+0x1fe>
 8011524:	f04f 30ff 	mov.w	r0, #4294967295
 8011528:	b004      	add	sp, #16
 801152a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801152e:	4835      	ldr	r0, [pc, #212]	; (8011604 <_printf_i+0x244>)
 8011530:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011534:	6823      	ldr	r3, [r4, #0]
 8011536:	680e      	ldr	r6, [r1, #0]
 8011538:	061f      	lsls	r7, r3, #24
 801153a:	f856 5b04 	ldr.w	r5, [r6], #4
 801153e:	600e      	str	r6, [r1, #0]
 8011540:	d514      	bpl.n	801156c <_printf_i+0x1ac>
 8011542:	07d9      	lsls	r1, r3, #31
 8011544:	bf44      	itt	mi
 8011546:	f043 0320 	orrmi.w	r3, r3, #32
 801154a:	6023      	strmi	r3, [r4, #0]
 801154c:	b91d      	cbnz	r5, 8011556 <_printf_i+0x196>
 801154e:	6823      	ldr	r3, [r4, #0]
 8011550:	f023 0320 	bic.w	r3, r3, #32
 8011554:	6023      	str	r3, [r4, #0]
 8011556:	2310      	movs	r3, #16
 8011558:	e7b0      	b.n	80114bc <_printf_i+0xfc>
 801155a:	6823      	ldr	r3, [r4, #0]
 801155c:	f043 0320 	orr.w	r3, r3, #32
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	2378      	movs	r3, #120	; 0x78
 8011564:	4828      	ldr	r0, [pc, #160]	; (8011608 <_printf_i+0x248>)
 8011566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801156a:	e7e3      	b.n	8011534 <_printf_i+0x174>
 801156c:	065e      	lsls	r6, r3, #25
 801156e:	bf48      	it	mi
 8011570:	b2ad      	uxthmi	r5, r5
 8011572:	e7e6      	b.n	8011542 <_printf_i+0x182>
 8011574:	4616      	mov	r6, r2
 8011576:	e7bb      	b.n	80114f0 <_printf_i+0x130>
 8011578:	680b      	ldr	r3, [r1, #0]
 801157a:	6826      	ldr	r6, [r4, #0]
 801157c:	6960      	ldr	r0, [r4, #20]
 801157e:	1d1d      	adds	r5, r3, #4
 8011580:	600d      	str	r5, [r1, #0]
 8011582:	0635      	lsls	r5, r6, #24
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	d501      	bpl.n	801158c <_printf_i+0x1cc>
 8011588:	6018      	str	r0, [r3, #0]
 801158a:	e002      	b.n	8011592 <_printf_i+0x1d2>
 801158c:	0671      	lsls	r1, r6, #25
 801158e:	d5fb      	bpl.n	8011588 <_printf_i+0x1c8>
 8011590:	8018      	strh	r0, [r3, #0]
 8011592:	2300      	movs	r3, #0
 8011594:	6123      	str	r3, [r4, #16]
 8011596:	4616      	mov	r6, r2
 8011598:	e7ba      	b.n	8011510 <_printf_i+0x150>
 801159a:	680b      	ldr	r3, [r1, #0]
 801159c:	1d1a      	adds	r2, r3, #4
 801159e:	600a      	str	r2, [r1, #0]
 80115a0:	681e      	ldr	r6, [r3, #0]
 80115a2:	6862      	ldr	r2, [r4, #4]
 80115a4:	2100      	movs	r1, #0
 80115a6:	4630      	mov	r0, r6
 80115a8:	f7ee fe8a 	bl	80002c0 <memchr>
 80115ac:	b108      	cbz	r0, 80115b2 <_printf_i+0x1f2>
 80115ae:	1b80      	subs	r0, r0, r6
 80115b0:	6060      	str	r0, [r4, #4]
 80115b2:	6863      	ldr	r3, [r4, #4]
 80115b4:	6123      	str	r3, [r4, #16]
 80115b6:	2300      	movs	r3, #0
 80115b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115bc:	e7a8      	b.n	8011510 <_printf_i+0x150>
 80115be:	6923      	ldr	r3, [r4, #16]
 80115c0:	4632      	mov	r2, r6
 80115c2:	4649      	mov	r1, r9
 80115c4:	4640      	mov	r0, r8
 80115c6:	47d0      	blx	sl
 80115c8:	3001      	adds	r0, #1
 80115ca:	d0ab      	beq.n	8011524 <_printf_i+0x164>
 80115cc:	6823      	ldr	r3, [r4, #0]
 80115ce:	079b      	lsls	r3, r3, #30
 80115d0:	d413      	bmi.n	80115fa <_printf_i+0x23a>
 80115d2:	68e0      	ldr	r0, [r4, #12]
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	4298      	cmp	r0, r3
 80115d8:	bfb8      	it	lt
 80115da:	4618      	movlt	r0, r3
 80115dc:	e7a4      	b.n	8011528 <_printf_i+0x168>
 80115de:	2301      	movs	r3, #1
 80115e0:	4632      	mov	r2, r6
 80115e2:	4649      	mov	r1, r9
 80115e4:	4640      	mov	r0, r8
 80115e6:	47d0      	blx	sl
 80115e8:	3001      	adds	r0, #1
 80115ea:	d09b      	beq.n	8011524 <_printf_i+0x164>
 80115ec:	3501      	adds	r5, #1
 80115ee:	68e3      	ldr	r3, [r4, #12]
 80115f0:	9903      	ldr	r1, [sp, #12]
 80115f2:	1a5b      	subs	r3, r3, r1
 80115f4:	42ab      	cmp	r3, r5
 80115f6:	dcf2      	bgt.n	80115de <_printf_i+0x21e>
 80115f8:	e7eb      	b.n	80115d2 <_printf_i+0x212>
 80115fa:	2500      	movs	r5, #0
 80115fc:	f104 0619 	add.w	r6, r4, #25
 8011600:	e7f5      	b.n	80115ee <_printf_i+0x22e>
 8011602:	bf00      	nop
 8011604:	0801fa6e 	.word	0x0801fa6e
 8011608:	0801fa7f 	.word	0x0801fa7f

0801160c <siprintf>:
 801160c:	b40e      	push	{r1, r2, r3}
 801160e:	b500      	push	{lr}
 8011610:	b09c      	sub	sp, #112	; 0x70
 8011612:	ab1d      	add	r3, sp, #116	; 0x74
 8011614:	9002      	str	r0, [sp, #8]
 8011616:	9006      	str	r0, [sp, #24]
 8011618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801161c:	4809      	ldr	r0, [pc, #36]	; (8011644 <siprintf+0x38>)
 801161e:	9107      	str	r1, [sp, #28]
 8011620:	9104      	str	r1, [sp, #16]
 8011622:	4909      	ldr	r1, [pc, #36]	; (8011648 <siprintf+0x3c>)
 8011624:	f853 2b04 	ldr.w	r2, [r3], #4
 8011628:	9105      	str	r1, [sp, #20]
 801162a:	6800      	ldr	r0, [r0, #0]
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	a902      	add	r1, sp, #8
 8011630:	f001 fb26 	bl	8012c80 <_svfiprintf_r>
 8011634:	9b02      	ldr	r3, [sp, #8]
 8011636:	2200      	movs	r2, #0
 8011638:	701a      	strb	r2, [r3, #0]
 801163a:	b01c      	add	sp, #112	; 0x70
 801163c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011640:	b003      	add	sp, #12
 8011642:	4770      	bx	lr
 8011644:	200000dc 	.word	0x200000dc
 8011648:	ffff0208 	.word	0xffff0208

0801164c <quorem>:
 801164c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011650:	6903      	ldr	r3, [r0, #16]
 8011652:	690c      	ldr	r4, [r1, #16]
 8011654:	42a3      	cmp	r3, r4
 8011656:	4607      	mov	r7, r0
 8011658:	f2c0 8081 	blt.w	801175e <quorem+0x112>
 801165c:	3c01      	subs	r4, #1
 801165e:	f101 0814 	add.w	r8, r1, #20
 8011662:	f100 0514 	add.w	r5, r0, #20
 8011666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801166a:	9301      	str	r3, [sp, #4]
 801166c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011674:	3301      	adds	r3, #1
 8011676:	429a      	cmp	r2, r3
 8011678:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801167c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011680:	fbb2 f6f3 	udiv	r6, r2, r3
 8011684:	d331      	bcc.n	80116ea <quorem+0x9e>
 8011686:	f04f 0e00 	mov.w	lr, #0
 801168a:	4640      	mov	r0, r8
 801168c:	46ac      	mov	ip, r5
 801168e:	46f2      	mov	sl, lr
 8011690:	f850 2b04 	ldr.w	r2, [r0], #4
 8011694:	b293      	uxth	r3, r2
 8011696:	fb06 e303 	mla	r3, r6, r3, lr
 801169a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801169e:	b29b      	uxth	r3, r3
 80116a0:	ebaa 0303 	sub.w	r3, sl, r3
 80116a4:	0c12      	lsrs	r2, r2, #16
 80116a6:	f8dc a000 	ldr.w	sl, [ip]
 80116aa:	fb06 e202 	mla	r2, r6, r2, lr
 80116ae:	fa13 f38a 	uxtah	r3, r3, sl
 80116b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80116b6:	fa1f fa82 	uxth.w	sl, r2
 80116ba:	f8dc 2000 	ldr.w	r2, [ip]
 80116be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80116c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116cc:	4581      	cmp	r9, r0
 80116ce:	f84c 3b04 	str.w	r3, [ip], #4
 80116d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80116d6:	d2db      	bcs.n	8011690 <quorem+0x44>
 80116d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80116dc:	b92b      	cbnz	r3, 80116ea <quorem+0x9e>
 80116de:	9b01      	ldr	r3, [sp, #4]
 80116e0:	3b04      	subs	r3, #4
 80116e2:	429d      	cmp	r5, r3
 80116e4:	461a      	mov	r2, r3
 80116e6:	d32e      	bcc.n	8011746 <quorem+0xfa>
 80116e8:	613c      	str	r4, [r7, #16]
 80116ea:	4638      	mov	r0, r7
 80116ec:	f001 f8b2 	bl	8012854 <__mcmp>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	db24      	blt.n	801173e <quorem+0xf2>
 80116f4:	3601      	adds	r6, #1
 80116f6:	4628      	mov	r0, r5
 80116f8:	f04f 0c00 	mov.w	ip, #0
 80116fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8011700:	f8d0 e000 	ldr.w	lr, [r0]
 8011704:	b293      	uxth	r3, r2
 8011706:	ebac 0303 	sub.w	r3, ip, r3
 801170a:	0c12      	lsrs	r2, r2, #16
 801170c:	fa13 f38e 	uxtah	r3, r3, lr
 8011710:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011718:	b29b      	uxth	r3, r3
 801171a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801171e:	45c1      	cmp	r9, r8
 8011720:	f840 3b04 	str.w	r3, [r0], #4
 8011724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011728:	d2e8      	bcs.n	80116fc <quorem+0xb0>
 801172a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801172e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011732:	b922      	cbnz	r2, 801173e <quorem+0xf2>
 8011734:	3b04      	subs	r3, #4
 8011736:	429d      	cmp	r5, r3
 8011738:	461a      	mov	r2, r3
 801173a:	d30a      	bcc.n	8011752 <quorem+0x106>
 801173c:	613c      	str	r4, [r7, #16]
 801173e:	4630      	mov	r0, r6
 8011740:	b003      	add	sp, #12
 8011742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011746:	6812      	ldr	r2, [r2, #0]
 8011748:	3b04      	subs	r3, #4
 801174a:	2a00      	cmp	r2, #0
 801174c:	d1cc      	bne.n	80116e8 <quorem+0x9c>
 801174e:	3c01      	subs	r4, #1
 8011750:	e7c7      	b.n	80116e2 <quorem+0x96>
 8011752:	6812      	ldr	r2, [r2, #0]
 8011754:	3b04      	subs	r3, #4
 8011756:	2a00      	cmp	r2, #0
 8011758:	d1f0      	bne.n	801173c <quorem+0xf0>
 801175a:	3c01      	subs	r4, #1
 801175c:	e7eb      	b.n	8011736 <quorem+0xea>
 801175e:	2000      	movs	r0, #0
 8011760:	e7ee      	b.n	8011740 <quorem+0xf4>
 8011762:	0000      	movs	r0, r0
 8011764:	0000      	movs	r0, r0
	...

08011768 <_dtoa_r>:
 8011768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	ed2d 8b02 	vpush	{d8}
 8011770:	ec57 6b10 	vmov	r6, r7, d0
 8011774:	b095      	sub	sp, #84	; 0x54
 8011776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801177c:	9105      	str	r1, [sp, #20]
 801177e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011782:	4604      	mov	r4, r0
 8011784:	9209      	str	r2, [sp, #36]	; 0x24
 8011786:	930f      	str	r3, [sp, #60]	; 0x3c
 8011788:	b975      	cbnz	r5, 80117a8 <_dtoa_r+0x40>
 801178a:	2010      	movs	r0, #16
 801178c:	f000 fddc 	bl	8012348 <malloc>
 8011790:	4602      	mov	r2, r0
 8011792:	6260      	str	r0, [r4, #36]	; 0x24
 8011794:	b920      	cbnz	r0, 80117a0 <_dtoa_r+0x38>
 8011796:	4bb2      	ldr	r3, [pc, #712]	; (8011a60 <_dtoa_r+0x2f8>)
 8011798:	21ea      	movs	r1, #234	; 0xea
 801179a:	48b2      	ldr	r0, [pc, #712]	; (8011a64 <_dtoa_r+0x2fc>)
 801179c:	f001 fb80 	bl	8012ea0 <__assert_func>
 80117a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117a4:	6005      	str	r5, [r0, #0]
 80117a6:	60c5      	str	r5, [r0, #12]
 80117a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117aa:	6819      	ldr	r1, [r3, #0]
 80117ac:	b151      	cbz	r1, 80117c4 <_dtoa_r+0x5c>
 80117ae:	685a      	ldr	r2, [r3, #4]
 80117b0:	604a      	str	r2, [r1, #4]
 80117b2:	2301      	movs	r3, #1
 80117b4:	4093      	lsls	r3, r2
 80117b6:	608b      	str	r3, [r1, #8]
 80117b8:	4620      	mov	r0, r4
 80117ba:	f000 fe0d 	bl	80123d8 <_Bfree>
 80117be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117c0:	2200      	movs	r2, #0
 80117c2:	601a      	str	r2, [r3, #0]
 80117c4:	1e3b      	subs	r3, r7, #0
 80117c6:	bfb9      	ittee	lt
 80117c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80117cc:	9303      	strlt	r3, [sp, #12]
 80117ce:	2300      	movge	r3, #0
 80117d0:	f8c8 3000 	strge.w	r3, [r8]
 80117d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80117d8:	4ba3      	ldr	r3, [pc, #652]	; (8011a68 <_dtoa_r+0x300>)
 80117da:	bfbc      	itt	lt
 80117dc:	2201      	movlt	r2, #1
 80117de:	f8c8 2000 	strlt.w	r2, [r8]
 80117e2:	ea33 0309 	bics.w	r3, r3, r9
 80117e6:	d11b      	bne.n	8011820 <_dtoa_r+0xb8>
 80117e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80117ee:	6013      	str	r3, [r2, #0]
 80117f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117f4:	4333      	orrs	r3, r6
 80117f6:	f000 857a 	beq.w	80122ee <_dtoa_r+0xb86>
 80117fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117fc:	b963      	cbnz	r3, 8011818 <_dtoa_r+0xb0>
 80117fe:	4b9b      	ldr	r3, [pc, #620]	; (8011a6c <_dtoa_r+0x304>)
 8011800:	e024      	b.n	801184c <_dtoa_r+0xe4>
 8011802:	4b9b      	ldr	r3, [pc, #620]	; (8011a70 <_dtoa_r+0x308>)
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	3308      	adds	r3, #8
 8011808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801180a:	6013      	str	r3, [r2, #0]
 801180c:	9800      	ldr	r0, [sp, #0]
 801180e:	b015      	add	sp, #84	; 0x54
 8011810:	ecbd 8b02 	vpop	{d8}
 8011814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011818:	4b94      	ldr	r3, [pc, #592]	; (8011a6c <_dtoa_r+0x304>)
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	3303      	adds	r3, #3
 801181e:	e7f3      	b.n	8011808 <_dtoa_r+0xa0>
 8011820:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011824:	2200      	movs	r2, #0
 8011826:	ec51 0b17 	vmov	r0, r1, d7
 801182a:	2300      	movs	r3, #0
 801182c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011830:	f7ef f9ba 	bl	8000ba8 <__aeabi_dcmpeq>
 8011834:	4680      	mov	r8, r0
 8011836:	b158      	cbz	r0, 8011850 <_dtoa_r+0xe8>
 8011838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801183a:	2301      	movs	r3, #1
 801183c:	6013      	str	r3, [r2, #0]
 801183e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011840:	2b00      	cmp	r3, #0
 8011842:	f000 8551 	beq.w	80122e8 <_dtoa_r+0xb80>
 8011846:	488b      	ldr	r0, [pc, #556]	; (8011a74 <_dtoa_r+0x30c>)
 8011848:	6018      	str	r0, [r3, #0]
 801184a:	1e43      	subs	r3, r0, #1
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	e7dd      	b.n	801180c <_dtoa_r+0xa4>
 8011850:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011854:	aa12      	add	r2, sp, #72	; 0x48
 8011856:	a913      	add	r1, sp, #76	; 0x4c
 8011858:	4620      	mov	r0, r4
 801185a:	f001 f89f 	bl	801299c <__d2b>
 801185e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011862:	4683      	mov	fp, r0
 8011864:	2d00      	cmp	r5, #0
 8011866:	d07c      	beq.n	8011962 <_dtoa_r+0x1fa>
 8011868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801186a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801186e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011872:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011876:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801187a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801187e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011882:	4b7d      	ldr	r3, [pc, #500]	; (8011a78 <_dtoa_r+0x310>)
 8011884:	2200      	movs	r2, #0
 8011886:	4630      	mov	r0, r6
 8011888:	4639      	mov	r1, r7
 801188a:	f7ee fd6d 	bl	8000368 <__aeabi_dsub>
 801188e:	a36e      	add	r3, pc, #440	; (adr r3, 8011a48 <_dtoa_r+0x2e0>)
 8011890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011894:	f7ee ff20 	bl	80006d8 <__aeabi_dmul>
 8011898:	a36d      	add	r3, pc, #436	; (adr r3, 8011a50 <_dtoa_r+0x2e8>)
 801189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189e:	f7ee fd65 	bl	800036c <__adddf3>
 80118a2:	4606      	mov	r6, r0
 80118a4:	4628      	mov	r0, r5
 80118a6:	460f      	mov	r7, r1
 80118a8:	f7ee feac 	bl	8000604 <__aeabi_i2d>
 80118ac:	a36a      	add	r3, pc, #424	; (adr r3, 8011a58 <_dtoa_r+0x2f0>)
 80118ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b2:	f7ee ff11 	bl	80006d8 <__aeabi_dmul>
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	4630      	mov	r0, r6
 80118bc:	4639      	mov	r1, r7
 80118be:	f7ee fd55 	bl	800036c <__adddf3>
 80118c2:	4606      	mov	r6, r0
 80118c4:	460f      	mov	r7, r1
 80118c6:	f7ef f9b7 	bl	8000c38 <__aeabi_d2iz>
 80118ca:	2200      	movs	r2, #0
 80118cc:	4682      	mov	sl, r0
 80118ce:	2300      	movs	r3, #0
 80118d0:	4630      	mov	r0, r6
 80118d2:	4639      	mov	r1, r7
 80118d4:	f7ef f972 	bl	8000bbc <__aeabi_dcmplt>
 80118d8:	b148      	cbz	r0, 80118ee <_dtoa_r+0x186>
 80118da:	4650      	mov	r0, sl
 80118dc:	f7ee fe92 	bl	8000604 <__aeabi_i2d>
 80118e0:	4632      	mov	r2, r6
 80118e2:	463b      	mov	r3, r7
 80118e4:	f7ef f960 	bl	8000ba8 <__aeabi_dcmpeq>
 80118e8:	b908      	cbnz	r0, 80118ee <_dtoa_r+0x186>
 80118ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118ee:	f1ba 0f16 	cmp.w	sl, #22
 80118f2:	d854      	bhi.n	801199e <_dtoa_r+0x236>
 80118f4:	4b61      	ldr	r3, [pc, #388]	; (8011a7c <_dtoa_r+0x314>)
 80118f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80118fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011902:	f7ef f95b 	bl	8000bbc <__aeabi_dcmplt>
 8011906:	2800      	cmp	r0, #0
 8011908:	d04b      	beq.n	80119a2 <_dtoa_r+0x23a>
 801190a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801190e:	2300      	movs	r3, #0
 8011910:	930e      	str	r3, [sp, #56]	; 0x38
 8011912:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011914:	1b5d      	subs	r5, r3, r5
 8011916:	1e6b      	subs	r3, r5, #1
 8011918:	9304      	str	r3, [sp, #16]
 801191a:	bf43      	ittte	mi
 801191c:	2300      	movmi	r3, #0
 801191e:	f1c5 0801 	rsbmi	r8, r5, #1
 8011922:	9304      	strmi	r3, [sp, #16]
 8011924:	f04f 0800 	movpl.w	r8, #0
 8011928:	f1ba 0f00 	cmp.w	sl, #0
 801192c:	db3b      	blt.n	80119a6 <_dtoa_r+0x23e>
 801192e:	9b04      	ldr	r3, [sp, #16]
 8011930:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011934:	4453      	add	r3, sl
 8011936:	9304      	str	r3, [sp, #16]
 8011938:	2300      	movs	r3, #0
 801193a:	9306      	str	r3, [sp, #24]
 801193c:	9b05      	ldr	r3, [sp, #20]
 801193e:	2b09      	cmp	r3, #9
 8011940:	d869      	bhi.n	8011a16 <_dtoa_r+0x2ae>
 8011942:	2b05      	cmp	r3, #5
 8011944:	bfc4      	itt	gt
 8011946:	3b04      	subgt	r3, #4
 8011948:	9305      	strgt	r3, [sp, #20]
 801194a:	9b05      	ldr	r3, [sp, #20]
 801194c:	f1a3 0302 	sub.w	r3, r3, #2
 8011950:	bfcc      	ite	gt
 8011952:	2500      	movgt	r5, #0
 8011954:	2501      	movle	r5, #1
 8011956:	2b03      	cmp	r3, #3
 8011958:	d869      	bhi.n	8011a2e <_dtoa_r+0x2c6>
 801195a:	e8df f003 	tbb	[pc, r3]
 801195e:	4e2c      	.short	0x4e2c
 8011960:	5a4c      	.short	0x5a4c
 8011962:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011966:	441d      	add	r5, r3
 8011968:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801196c:	2b20      	cmp	r3, #32
 801196e:	bfc1      	itttt	gt
 8011970:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011974:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011978:	fa09 f303 	lslgt.w	r3, r9, r3
 801197c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011980:	bfda      	itte	le
 8011982:	f1c3 0320 	rsble	r3, r3, #32
 8011986:	fa06 f003 	lslle.w	r0, r6, r3
 801198a:	4318      	orrgt	r0, r3
 801198c:	f7ee fe2a 	bl	80005e4 <__aeabi_ui2d>
 8011990:	2301      	movs	r3, #1
 8011992:	4606      	mov	r6, r0
 8011994:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011998:	3d01      	subs	r5, #1
 801199a:	9310      	str	r3, [sp, #64]	; 0x40
 801199c:	e771      	b.n	8011882 <_dtoa_r+0x11a>
 801199e:	2301      	movs	r3, #1
 80119a0:	e7b6      	b.n	8011910 <_dtoa_r+0x1a8>
 80119a2:	900e      	str	r0, [sp, #56]	; 0x38
 80119a4:	e7b5      	b.n	8011912 <_dtoa_r+0x1aa>
 80119a6:	f1ca 0300 	rsb	r3, sl, #0
 80119aa:	9306      	str	r3, [sp, #24]
 80119ac:	2300      	movs	r3, #0
 80119ae:	eba8 080a 	sub.w	r8, r8, sl
 80119b2:	930d      	str	r3, [sp, #52]	; 0x34
 80119b4:	e7c2      	b.n	801193c <_dtoa_r+0x1d4>
 80119b6:	2300      	movs	r3, #0
 80119b8:	9308      	str	r3, [sp, #32]
 80119ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119bc:	2b00      	cmp	r3, #0
 80119be:	dc39      	bgt.n	8011a34 <_dtoa_r+0x2cc>
 80119c0:	f04f 0901 	mov.w	r9, #1
 80119c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80119c8:	464b      	mov	r3, r9
 80119ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80119ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80119d0:	2200      	movs	r2, #0
 80119d2:	6042      	str	r2, [r0, #4]
 80119d4:	2204      	movs	r2, #4
 80119d6:	f102 0614 	add.w	r6, r2, #20
 80119da:	429e      	cmp	r6, r3
 80119dc:	6841      	ldr	r1, [r0, #4]
 80119de:	d92f      	bls.n	8011a40 <_dtoa_r+0x2d8>
 80119e0:	4620      	mov	r0, r4
 80119e2:	f000 fcb9 	bl	8012358 <_Balloc>
 80119e6:	9000      	str	r0, [sp, #0]
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d14b      	bne.n	8011a84 <_dtoa_r+0x31c>
 80119ec:	4b24      	ldr	r3, [pc, #144]	; (8011a80 <_dtoa_r+0x318>)
 80119ee:	4602      	mov	r2, r0
 80119f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80119f4:	e6d1      	b.n	801179a <_dtoa_r+0x32>
 80119f6:	2301      	movs	r3, #1
 80119f8:	e7de      	b.n	80119b8 <_dtoa_r+0x250>
 80119fa:	2300      	movs	r3, #0
 80119fc:	9308      	str	r3, [sp, #32]
 80119fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a00:	eb0a 0903 	add.w	r9, sl, r3
 8011a04:	f109 0301 	add.w	r3, r9, #1
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	9301      	str	r3, [sp, #4]
 8011a0c:	bfb8      	it	lt
 8011a0e:	2301      	movlt	r3, #1
 8011a10:	e7dd      	b.n	80119ce <_dtoa_r+0x266>
 8011a12:	2301      	movs	r3, #1
 8011a14:	e7f2      	b.n	80119fc <_dtoa_r+0x294>
 8011a16:	2501      	movs	r5, #1
 8011a18:	2300      	movs	r3, #0
 8011a1a:	9305      	str	r3, [sp, #20]
 8011a1c:	9508      	str	r5, [sp, #32]
 8011a1e:	f04f 39ff 	mov.w	r9, #4294967295
 8011a22:	2200      	movs	r2, #0
 8011a24:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a28:	2312      	movs	r3, #18
 8011a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a2c:	e7cf      	b.n	80119ce <_dtoa_r+0x266>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	9308      	str	r3, [sp, #32]
 8011a32:	e7f4      	b.n	8011a1e <_dtoa_r+0x2b6>
 8011a34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011a38:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a3c:	464b      	mov	r3, r9
 8011a3e:	e7c6      	b.n	80119ce <_dtoa_r+0x266>
 8011a40:	3101      	adds	r1, #1
 8011a42:	6041      	str	r1, [r0, #4]
 8011a44:	0052      	lsls	r2, r2, #1
 8011a46:	e7c6      	b.n	80119d6 <_dtoa_r+0x26e>
 8011a48:	636f4361 	.word	0x636f4361
 8011a4c:	3fd287a7 	.word	0x3fd287a7
 8011a50:	8b60c8b3 	.word	0x8b60c8b3
 8011a54:	3fc68a28 	.word	0x3fc68a28
 8011a58:	509f79fb 	.word	0x509f79fb
 8011a5c:	3fd34413 	.word	0x3fd34413
 8011a60:	0801fa9d 	.word	0x0801fa9d
 8011a64:	0801fab4 	.word	0x0801fab4
 8011a68:	7ff00000 	.word	0x7ff00000
 8011a6c:	0801fa99 	.word	0x0801fa99
 8011a70:	0801fa90 	.word	0x0801fa90
 8011a74:	0801fa6d 	.word	0x0801fa6d
 8011a78:	3ff80000 	.word	0x3ff80000
 8011a7c:	0801fbb0 	.word	0x0801fbb0
 8011a80:	0801fb13 	.word	0x0801fb13
 8011a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a86:	9a00      	ldr	r2, [sp, #0]
 8011a88:	601a      	str	r2, [r3, #0]
 8011a8a:	9b01      	ldr	r3, [sp, #4]
 8011a8c:	2b0e      	cmp	r3, #14
 8011a8e:	f200 80ad 	bhi.w	8011bec <_dtoa_r+0x484>
 8011a92:	2d00      	cmp	r5, #0
 8011a94:	f000 80aa 	beq.w	8011bec <_dtoa_r+0x484>
 8011a98:	f1ba 0f00 	cmp.w	sl, #0
 8011a9c:	dd36      	ble.n	8011b0c <_dtoa_r+0x3a4>
 8011a9e:	4ac3      	ldr	r2, [pc, #780]	; (8011dac <_dtoa_r+0x644>)
 8011aa0:	f00a 030f 	and.w	r3, sl, #15
 8011aa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011aa8:	ed93 7b00 	vldr	d7, [r3]
 8011aac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011ab0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011ab4:	eeb0 8a47 	vmov.f32	s16, s14
 8011ab8:	eef0 8a67 	vmov.f32	s17, s15
 8011abc:	d016      	beq.n	8011aec <_dtoa_r+0x384>
 8011abe:	4bbc      	ldr	r3, [pc, #752]	; (8011db0 <_dtoa_r+0x648>)
 8011ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011ac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011ac8:	f7ee ff30 	bl	800092c <__aeabi_ddiv>
 8011acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ad0:	f007 070f 	and.w	r7, r7, #15
 8011ad4:	2503      	movs	r5, #3
 8011ad6:	4eb6      	ldr	r6, [pc, #728]	; (8011db0 <_dtoa_r+0x648>)
 8011ad8:	b957      	cbnz	r7, 8011af0 <_dtoa_r+0x388>
 8011ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ade:	ec53 2b18 	vmov	r2, r3, d8
 8011ae2:	f7ee ff23 	bl	800092c <__aeabi_ddiv>
 8011ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011aea:	e029      	b.n	8011b40 <_dtoa_r+0x3d8>
 8011aec:	2502      	movs	r5, #2
 8011aee:	e7f2      	b.n	8011ad6 <_dtoa_r+0x36e>
 8011af0:	07f9      	lsls	r1, r7, #31
 8011af2:	d508      	bpl.n	8011b06 <_dtoa_r+0x39e>
 8011af4:	ec51 0b18 	vmov	r0, r1, d8
 8011af8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011afc:	f7ee fdec 	bl	80006d8 <__aeabi_dmul>
 8011b00:	ec41 0b18 	vmov	d8, r0, r1
 8011b04:	3501      	adds	r5, #1
 8011b06:	107f      	asrs	r7, r7, #1
 8011b08:	3608      	adds	r6, #8
 8011b0a:	e7e5      	b.n	8011ad8 <_dtoa_r+0x370>
 8011b0c:	f000 80a6 	beq.w	8011c5c <_dtoa_r+0x4f4>
 8011b10:	f1ca 0600 	rsb	r6, sl, #0
 8011b14:	4ba5      	ldr	r3, [pc, #660]	; (8011dac <_dtoa_r+0x644>)
 8011b16:	4fa6      	ldr	r7, [pc, #664]	; (8011db0 <_dtoa_r+0x648>)
 8011b18:	f006 020f 	and.w	r2, r6, #15
 8011b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b28:	f7ee fdd6 	bl	80006d8 <__aeabi_dmul>
 8011b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b30:	1136      	asrs	r6, r6, #4
 8011b32:	2300      	movs	r3, #0
 8011b34:	2502      	movs	r5, #2
 8011b36:	2e00      	cmp	r6, #0
 8011b38:	f040 8085 	bne.w	8011c46 <_dtoa_r+0x4de>
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1d2      	bne.n	8011ae6 <_dtoa_r+0x37e>
 8011b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	f000 808c 	beq.w	8011c60 <_dtoa_r+0x4f8>
 8011b48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b4c:	4b99      	ldr	r3, [pc, #612]	; (8011db4 <_dtoa_r+0x64c>)
 8011b4e:	2200      	movs	r2, #0
 8011b50:	4630      	mov	r0, r6
 8011b52:	4639      	mov	r1, r7
 8011b54:	f7ef f832 	bl	8000bbc <__aeabi_dcmplt>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	f000 8081 	beq.w	8011c60 <_dtoa_r+0x4f8>
 8011b5e:	9b01      	ldr	r3, [sp, #4]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d07d      	beq.n	8011c60 <_dtoa_r+0x4f8>
 8011b64:	f1b9 0f00 	cmp.w	r9, #0
 8011b68:	dd3c      	ble.n	8011be4 <_dtoa_r+0x47c>
 8011b6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011b6e:	9307      	str	r3, [sp, #28]
 8011b70:	2200      	movs	r2, #0
 8011b72:	4b91      	ldr	r3, [pc, #580]	; (8011db8 <_dtoa_r+0x650>)
 8011b74:	4630      	mov	r0, r6
 8011b76:	4639      	mov	r1, r7
 8011b78:	f7ee fdae 	bl	80006d8 <__aeabi_dmul>
 8011b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b80:	3501      	adds	r5, #1
 8011b82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011b86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f7ee fd3a 	bl	8000604 <__aeabi_i2d>
 8011b90:	4632      	mov	r2, r6
 8011b92:	463b      	mov	r3, r7
 8011b94:	f7ee fda0 	bl	80006d8 <__aeabi_dmul>
 8011b98:	4b88      	ldr	r3, [pc, #544]	; (8011dbc <_dtoa_r+0x654>)
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f7ee fbe6 	bl	800036c <__adddf3>
 8011ba0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ba8:	9303      	str	r3, [sp, #12]
 8011baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d15c      	bne.n	8011c6a <_dtoa_r+0x502>
 8011bb0:	4b83      	ldr	r3, [pc, #524]	; (8011dc0 <_dtoa_r+0x658>)
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	4639      	mov	r1, r7
 8011bb8:	f7ee fbd6 	bl	8000368 <__aeabi_dsub>
 8011bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011bc0:	4606      	mov	r6, r0
 8011bc2:	460f      	mov	r7, r1
 8011bc4:	f7ef f818 	bl	8000bf8 <__aeabi_dcmpgt>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	f040 8296 	bne.w	80120fa <_dtoa_r+0x992>
 8011bce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bd8:	4639      	mov	r1, r7
 8011bda:	f7ee ffef 	bl	8000bbc <__aeabi_dcmplt>
 8011bde:	2800      	cmp	r0, #0
 8011be0:	f040 8288 	bne.w	80120f4 <_dtoa_r+0x98c>
 8011be4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011be8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011bec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f2c0 8158 	blt.w	8011ea4 <_dtoa_r+0x73c>
 8011bf4:	f1ba 0f0e 	cmp.w	sl, #14
 8011bf8:	f300 8154 	bgt.w	8011ea4 <_dtoa_r+0x73c>
 8011bfc:	4b6b      	ldr	r3, [pc, #428]	; (8011dac <_dtoa_r+0x644>)
 8011bfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011c02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f280 80e3 	bge.w	8011dd4 <_dtoa_r+0x66c>
 8011c0e:	9b01      	ldr	r3, [sp, #4]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f300 80df 	bgt.w	8011dd4 <_dtoa_r+0x66c>
 8011c16:	f040 826d 	bne.w	80120f4 <_dtoa_r+0x98c>
 8011c1a:	4b69      	ldr	r3, [pc, #420]	; (8011dc0 <_dtoa_r+0x658>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	4640      	mov	r0, r8
 8011c20:	4649      	mov	r1, r9
 8011c22:	f7ee fd59 	bl	80006d8 <__aeabi_dmul>
 8011c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c2a:	f7ee ffdb 	bl	8000be4 <__aeabi_dcmpge>
 8011c2e:	9e01      	ldr	r6, [sp, #4]
 8011c30:	4637      	mov	r7, r6
 8011c32:	2800      	cmp	r0, #0
 8011c34:	f040 8243 	bne.w	80120be <_dtoa_r+0x956>
 8011c38:	9d00      	ldr	r5, [sp, #0]
 8011c3a:	2331      	movs	r3, #49	; 0x31
 8011c3c:	f805 3b01 	strb.w	r3, [r5], #1
 8011c40:	f10a 0a01 	add.w	sl, sl, #1
 8011c44:	e23f      	b.n	80120c6 <_dtoa_r+0x95e>
 8011c46:	07f2      	lsls	r2, r6, #31
 8011c48:	d505      	bpl.n	8011c56 <_dtoa_r+0x4ee>
 8011c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c4e:	f7ee fd43 	bl	80006d8 <__aeabi_dmul>
 8011c52:	3501      	adds	r5, #1
 8011c54:	2301      	movs	r3, #1
 8011c56:	1076      	asrs	r6, r6, #1
 8011c58:	3708      	adds	r7, #8
 8011c5a:	e76c      	b.n	8011b36 <_dtoa_r+0x3ce>
 8011c5c:	2502      	movs	r5, #2
 8011c5e:	e76f      	b.n	8011b40 <_dtoa_r+0x3d8>
 8011c60:	9b01      	ldr	r3, [sp, #4]
 8011c62:	f8cd a01c 	str.w	sl, [sp, #28]
 8011c66:	930c      	str	r3, [sp, #48]	; 0x30
 8011c68:	e78d      	b.n	8011b86 <_dtoa_r+0x41e>
 8011c6a:	9900      	ldr	r1, [sp, #0]
 8011c6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c70:	4b4e      	ldr	r3, [pc, #312]	; (8011dac <_dtoa_r+0x644>)
 8011c72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c76:	4401      	add	r1, r0
 8011c78:	9102      	str	r1, [sp, #8]
 8011c7a:	9908      	ldr	r1, [sp, #32]
 8011c7c:	eeb0 8a47 	vmov.f32	s16, s14
 8011c80:	eef0 8a67 	vmov.f32	s17, s15
 8011c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c8c:	2900      	cmp	r1, #0
 8011c8e:	d045      	beq.n	8011d1c <_dtoa_r+0x5b4>
 8011c90:	494c      	ldr	r1, [pc, #304]	; (8011dc4 <_dtoa_r+0x65c>)
 8011c92:	2000      	movs	r0, #0
 8011c94:	f7ee fe4a 	bl	800092c <__aeabi_ddiv>
 8011c98:	ec53 2b18 	vmov	r2, r3, d8
 8011c9c:	f7ee fb64 	bl	8000368 <__aeabi_dsub>
 8011ca0:	9d00      	ldr	r5, [sp, #0]
 8011ca2:	ec41 0b18 	vmov	d8, r0, r1
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	4630      	mov	r0, r6
 8011caa:	f7ee ffc5 	bl	8000c38 <__aeabi_d2iz>
 8011cae:	900c      	str	r0, [sp, #48]	; 0x30
 8011cb0:	f7ee fca8 	bl	8000604 <__aeabi_i2d>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	4630      	mov	r0, r6
 8011cba:	4639      	mov	r1, r7
 8011cbc:	f7ee fb54 	bl	8000368 <__aeabi_dsub>
 8011cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cc2:	3330      	adds	r3, #48	; 0x30
 8011cc4:	f805 3b01 	strb.w	r3, [r5], #1
 8011cc8:	ec53 2b18 	vmov	r2, r3, d8
 8011ccc:	4606      	mov	r6, r0
 8011cce:	460f      	mov	r7, r1
 8011cd0:	f7ee ff74 	bl	8000bbc <__aeabi_dcmplt>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d165      	bne.n	8011da4 <_dtoa_r+0x63c>
 8011cd8:	4632      	mov	r2, r6
 8011cda:	463b      	mov	r3, r7
 8011cdc:	4935      	ldr	r1, [pc, #212]	; (8011db4 <_dtoa_r+0x64c>)
 8011cde:	2000      	movs	r0, #0
 8011ce0:	f7ee fb42 	bl	8000368 <__aeabi_dsub>
 8011ce4:	ec53 2b18 	vmov	r2, r3, d8
 8011ce8:	f7ee ff68 	bl	8000bbc <__aeabi_dcmplt>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	f040 80b9 	bne.w	8011e64 <_dtoa_r+0x6fc>
 8011cf2:	9b02      	ldr	r3, [sp, #8]
 8011cf4:	429d      	cmp	r5, r3
 8011cf6:	f43f af75 	beq.w	8011be4 <_dtoa_r+0x47c>
 8011cfa:	4b2f      	ldr	r3, [pc, #188]	; (8011db8 <_dtoa_r+0x650>)
 8011cfc:	ec51 0b18 	vmov	r0, r1, d8
 8011d00:	2200      	movs	r2, #0
 8011d02:	f7ee fce9 	bl	80006d8 <__aeabi_dmul>
 8011d06:	4b2c      	ldr	r3, [pc, #176]	; (8011db8 <_dtoa_r+0x650>)
 8011d08:	ec41 0b18 	vmov	d8, r0, r1
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	4630      	mov	r0, r6
 8011d10:	4639      	mov	r1, r7
 8011d12:	f7ee fce1 	bl	80006d8 <__aeabi_dmul>
 8011d16:	4606      	mov	r6, r0
 8011d18:	460f      	mov	r7, r1
 8011d1a:	e7c4      	b.n	8011ca6 <_dtoa_r+0x53e>
 8011d1c:	ec51 0b17 	vmov	r0, r1, d7
 8011d20:	f7ee fcda 	bl	80006d8 <__aeabi_dmul>
 8011d24:	9b02      	ldr	r3, [sp, #8]
 8011d26:	9d00      	ldr	r5, [sp, #0]
 8011d28:	930c      	str	r3, [sp, #48]	; 0x30
 8011d2a:	ec41 0b18 	vmov	d8, r0, r1
 8011d2e:	4639      	mov	r1, r7
 8011d30:	4630      	mov	r0, r6
 8011d32:	f7ee ff81 	bl	8000c38 <__aeabi_d2iz>
 8011d36:	9011      	str	r0, [sp, #68]	; 0x44
 8011d38:	f7ee fc64 	bl	8000604 <__aeabi_i2d>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	460b      	mov	r3, r1
 8011d40:	4630      	mov	r0, r6
 8011d42:	4639      	mov	r1, r7
 8011d44:	f7ee fb10 	bl	8000368 <__aeabi_dsub>
 8011d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d4a:	3330      	adds	r3, #48	; 0x30
 8011d4c:	f805 3b01 	strb.w	r3, [r5], #1
 8011d50:	9b02      	ldr	r3, [sp, #8]
 8011d52:	429d      	cmp	r5, r3
 8011d54:	4606      	mov	r6, r0
 8011d56:	460f      	mov	r7, r1
 8011d58:	f04f 0200 	mov.w	r2, #0
 8011d5c:	d134      	bne.n	8011dc8 <_dtoa_r+0x660>
 8011d5e:	4b19      	ldr	r3, [pc, #100]	; (8011dc4 <_dtoa_r+0x65c>)
 8011d60:	ec51 0b18 	vmov	r0, r1, d8
 8011d64:	f7ee fb02 	bl	800036c <__adddf3>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	4630      	mov	r0, r6
 8011d6e:	4639      	mov	r1, r7
 8011d70:	f7ee ff42 	bl	8000bf8 <__aeabi_dcmpgt>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d175      	bne.n	8011e64 <_dtoa_r+0x6fc>
 8011d78:	ec53 2b18 	vmov	r2, r3, d8
 8011d7c:	4911      	ldr	r1, [pc, #68]	; (8011dc4 <_dtoa_r+0x65c>)
 8011d7e:	2000      	movs	r0, #0
 8011d80:	f7ee faf2 	bl	8000368 <__aeabi_dsub>
 8011d84:	4602      	mov	r2, r0
 8011d86:	460b      	mov	r3, r1
 8011d88:	4630      	mov	r0, r6
 8011d8a:	4639      	mov	r1, r7
 8011d8c:	f7ee ff16 	bl	8000bbc <__aeabi_dcmplt>
 8011d90:	2800      	cmp	r0, #0
 8011d92:	f43f af27 	beq.w	8011be4 <_dtoa_r+0x47c>
 8011d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d98:	1e6b      	subs	r3, r5, #1
 8011d9a:	930c      	str	r3, [sp, #48]	; 0x30
 8011d9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011da0:	2b30      	cmp	r3, #48	; 0x30
 8011da2:	d0f8      	beq.n	8011d96 <_dtoa_r+0x62e>
 8011da4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011da8:	e04a      	b.n	8011e40 <_dtoa_r+0x6d8>
 8011daa:	bf00      	nop
 8011dac:	0801fbb0 	.word	0x0801fbb0
 8011db0:	0801fb88 	.word	0x0801fb88
 8011db4:	3ff00000 	.word	0x3ff00000
 8011db8:	40240000 	.word	0x40240000
 8011dbc:	401c0000 	.word	0x401c0000
 8011dc0:	40140000 	.word	0x40140000
 8011dc4:	3fe00000 	.word	0x3fe00000
 8011dc8:	4baf      	ldr	r3, [pc, #700]	; (8012088 <_dtoa_r+0x920>)
 8011dca:	f7ee fc85 	bl	80006d8 <__aeabi_dmul>
 8011dce:	4606      	mov	r6, r0
 8011dd0:	460f      	mov	r7, r1
 8011dd2:	e7ac      	b.n	8011d2e <_dtoa_r+0x5c6>
 8011dd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011dd8:	9d00      	ldr	r5, [sp, #0]
 8011dda:	4642      	mov	r2, r8
 8011ddc:	464b      	mov	r3, r9
 8011dde:	4630      	mov	r0, r6
 8011de0:	4639      	mov	r1, r7
 8011de2:	f7ee fda3 	bl	800092c <__aeabi_ddiv>
 8011de6:	f7ee ff27 	bl	8000c38 <__aeabi_d2iz>
 8011dea:	9002      	str	r0, [sp, #8]
 8011dec:	f7ee fc0a 	bl	8000604 <__aeabi_i2d>
 8011df0:	4642      	mov	r2, r8
 8011df2:	464b      	mov	r3, r9
 8011df4:	f7ee fc70 	bl	80006d8 <__aeabi_dmul>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	4639      	mov	r1, r7
 8011e00:	f7ee fab2 	bl	8000368 <__aeabi_dsub>
 8011e04:	9e02      	ldr	r6, [sp, #8]
 8011e06:	9f01      	ldr	r7, [sp, #4]
 8011e08:	3630      	adds	r6, #48	; 0x30
 8011e0a:	f805 6b01 	strb.w	r6, [r5], #1
 8011e0e:	9e00      	ldr	r6, [sp, #0]
 8011e10:	1bae      	subs	r6, r5, r6
 8011e12:	42b7      	cmp	r7, r6
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	d137      	bne.n	8011e8a <_dtoa_r+0x722>
 8011e1a:	f7ee faa7 	bl	800036c <__adddf3>
 8011e1e:	4642      	mov	r2, r8
 8011e20:	464b      	mov	r3, r9
 8011e22:	4606      	mov	r6, r0
 8011e24:	460f      	mov	r7, r1
 8011e26:	f7ee fee7 	bl	8000bf8 <__aeabi_dcmpgt>
 8011e2a:	b9c8      	cbnz	r0, 8011e60 <_dtoa_r+0x6f8>
 8011e2c:	4642      	mov	r2, r8
 8011e2e:	464b      	mov	r3, r9
 8011e30:	4630      	mov	r0, r6
 8011e32:	4639      	mov	r1, r7
 8011e34:	f7ee feb8 	bl	8000ba8 <__aeabi_dcmpeq>
 8011e38:	b110      	cbz	r0, 8011e40 <_dtoa_r+0x6d8>
 8011e3a:	9b02      	ldr	r3, [sp, #8]
 8011e3c:	07d9      	lsls	r1, r3, #31
 8011e3e:	d40f      	bmi.n	8011e60 <_dtoa_r+0x6f8>
 8011e40:	4620      	mov	r0, r4
 8011e42:	4659      	mov	r1, fp
 8011e44:	f000 fac8 	bl	80123d8 <_Bfree>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	702b      	strb	r3, [r5, #0]
 8011e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e4e:	f10a 0001 	add.w	r0, sl, #1
 8011e52:	6018      	str	r0, [r3, #0]
 8011e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f43f acd8 	beq.w	801180c <_dtoa_r+0xa4>
 8011e5c:	601d      	str	r5, [r3, #0]
 8011e5e:	e4d5      	b.n	801180c <_dtoa_r+0xa4>
 8011e60:	f8cd a01c 	str.w	sl, [sp, #28]
 8011e64:	462b      	mov	r3, r5
 8011e66:	461d      	mov	r5, r3
 8011e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e6c:	2a39      	cmp	r2, #57	; 0x39
 8011e6e:	d108      	bne.n	8011e82 <_dtoa_r+0x71a>
 8011e70:	9a00      	ldr	r2, [sp, #0]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d1f7      	bne.n	8011e66 <_dtoa_r+0x6fe>
 8011e76:	9a07      	ldr	r2, [sp, #28]
 8011e78:	9900      	ldr	r1, [sp, #0]
 8011e7a:	3201      	adds	r2, #1
 8011e7c:	9207      	str	r2, [sp, #28]
 8011e7e:	2230      	movs	r2, #48	; 0x30
 8011e80:	700a      	strb	r2, [r1, #0]
 8011e82:	781a      	ldrb	r2, [r3, #0]
 8011e84:	3201      	adds	r2, #1
 8011e86:	701a      	strb	r2, [r3, #0]
 8011e88:	e78c      	b.n	8011da4 <_dtoa_r+0x63c>
 8011e8a:	4b7f      	ldr	r3, [pc, #508]	; (8012088 <_dtoa_r+0x920>)
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f7ee fc23 	bl	80006d8 <__aeabi_dmul>
 8011e92:	2200      	movs	r2, #0
 8011e94:	2300      	movs	r3, #0
 8011e96:	4606      	mov	r6, r0
 8011e98:	460f      	mov	r7, r1
 8011e9a:	f7ee fe85 	bl	8000ba8 <__aeabi_dcmpeq>
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d09b      	beq.n	8011dda <_dtoa_r+0x672>
 8011ea2:	e7cd      	b.n	8011e40 <_dtoa_r+0x6d8>
 8011ea4:	9a08      	ldr	r2, [sp, #32]
 8011ea6:	2a00      	cmp	r2, #0
 8011ea8:	f000 80c4 	beq.w	8012034 <_dtoa_r+0x8cc>
 8011eac:	9a05      	ldr	r2, [sp, #20]
 8011eae:	2a01      	cmp	r2, #1
 8011eb0:	f300 80a8 	bgt.w	8012004 <_dtoa_r+0x89c>
 8011eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	f000 80a0 	beq.w	8011ffc <_dtoa_r+0x894>
 8011ebc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011ec0:	9e06      	ldr	r6, [sp, #24]
 8011ec2:	4645      	mov	r5, r8
 8011ec4:	9a04      	ldr	r2, [sp, #16]
 8011ec6:	2101      	movs	r1, #1
 8011ec8:	441a      	add	r2, r3
 8011eca:	4620      	mov	r0, r4
 8011ecc:	4498      	add	r8, r3
 8011ece:	9204      	str	r2, [sp, #16]
 8011ed0:	f000 fb3e 	bl	8012550 <__i2b>
 8011ed4:	4607      	mov	r7, r0
 8011ed6:	2d00      	cmp	r5, #0
 8011ed8:	dd0b      	ble.n	8011ef2 <_dtoa_r+0x78a>
 8011eda:	9b04      	ldr	r3, [sp, #16]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	dd08      	ble.n	8011ef2 <_dtoa_r+0x78a>
 8011ee0:	42ab      	cmp	r3, r5
 8011ee2:	9a04      	ldr	r2, [sp, #16]
 8011ee4:	bfa8      	it	ge
 8011ee6:	462b      	movge	r3, r5
 8011ee8:	eba8 0803 	sub.w	r8, r8, r3
 8011eec:	1aed      	subs	r5, r5, r3
 8011eee:	1ad3      	subs	r3, r2, r3
 8011ef0:	9304      	str	r3, [sp, #16]
 8011ef2:	9b06      	ldr	r3, [sp, #24]
 8011ef4:	b1fb      	cbz	r3, 8011f36 <_dtoa_r+0x7ce>
 8011ef6:	9b08      	ldr	r3, [sp, #32]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	f000 809f 	beq.w	801203c <_dtoa_r+0x8d4>
 8011efe:	2e00      	cmp	r6, #0
 8011f00:	dd11      	ble.n	8011f26 <_dtoa_r+0x7be>
 8011f02:	4639      	mov	r1, r7
 8011f04:	4632      	mov	r2, r6
 8011f06:	4620      	mov	r0, r4
 8011f08:	f000 fbde 	bl	80126c8 <__pow5mult>
 8011f0c:	465a      	mov	r2, fp
 8011f0e:	4601      	mov	r1, r0
 8011f10:	4607      	mov	r7, r0
 8011f12:	4620      	mov	r0, r4
 8011f14:	f000 fb32 	bl	801257c <__multiply>
 8011f18:	4659      	mov	r1, fp
 8011f1a:	9007      	str	r0, [sp, #28]
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f000 fa5b 	bl	80123d8 <_Bfree>
 8011f22:	9b07      	ldr	r3, [sp, #28]
 8011f24:	469b      	mov	fp, r3
 8011f26:	9b06      	ldr	r3, [sp, #24]
 8011f28:	1b9a      	subs	r2, r3, r6
 8011f2a:	d004      	beq.n	8011f36 <_dtoa_r+0x7ce>
 8011f2c:	4659      	mov	r1, fp
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f000 fbca 	bl	80126c8 <__pow5mult>
 8011f34:	4683      	mov	fp, r0
 8011f36:	2101      	movs	r1, #1
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 fb09 	bl	8012550 <__i2b>
 8011f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	4606      	mov	r6, r0
 8011f44:	dd7c      	ble.n	8012040 <_dtoa_r+0x8d8>
 8011f46:	461a      	mov	r2, r3
 8011f48:	4601      	mov	r1, r0
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f000 fbbc 	bl	80126c8 <__pow5mult>
 8011f50:	9b05      	ldr	r3, [sp, #20]
 8011f52:	2b01      	cmp	r3, #1
 8011f54:	4606      	mov	r6, r0
 8011f56:	dd76      	ble.n	8012046 <_dtoa_r+0x8de>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	9306      	str	r3, [sp, #24]
 8011f5c:	6933      	ldr	r3, [r6, #16]
 8011f5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f62:	6918      	ldr	r0, [r3, #16]
 8011f64:	f000 faa4 	bl	80124b0 <__hi0bits>
 8011f68:	f1c0 0020 	rsb	r0, r0, #32
 8011f6c:	9b04      	ldr	r3, [sp, #16]
 8011f6e:	4418      	add	r0, r3
 8011f70:	f010 001f 	ands.w	r0, r0, #31
 8011f74:	f000 8086 	beq.w	8012084 <_dtoa_r+0x91c>
 8011f78:	f1c0 0320 	rsb	r3, r0, #32
 8011f7c:	2b04      	cmp	r3, #4
 8011f7e:	dd7f      	ble.n	8012080 <_dtoa_r+0x918>
 8011f80:	f1c0 001c 	rsb	r0, r0, #28
 8011f84:	9b04      	ldr	r3, [sp, #16]
 8011f86:	4403      	add	r3, r0
 8011f88:	4480      	add	r8, r0
 8011f8a:	4405      	add	r5, r0
 8011f8c:	9304      	str	r3, [sp, #16]
 8011f8e:	f1b8 0f00 	cmp.w	r8, #0
 8011f92:	dd05      	ble.n	8011fa0 <_dtoa_r+0x838>
 8011f94:	4659      	mov	r1, fp
 8011f96:	4642      	mov	r2, r8
 8011f98:	4620      	mov	r0, r4
 8011f9a:	f000 fbef 	bl	801277c <__lshift>
 8011f9e:	4683      	mov	fp, r0
 8011fa0:	9b04      	ldr	r3, [sp, #16]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	dd05      	ble.n	8011fb2 <_dtoa_r+0x84a>
 8011fa6:	4631      	mov	r1, r6
 8011fa8:	461a      	mov	r2, r3
 8011faa:	4620      	mov	r0, r4
 8011fac:	f000 fbe6 	bl	801277c <__lshift>
 8011fb0:	4606      	mov	r6, r0
 8011fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d069      	beq.n	801208c <_dtoa_r+0x924>
 8011fb8:	4631      	mov	r1, r6
 8011fba:	4658      	mov	r0, fp
 8011fbc:	f000 fc4a 	bl	8012854 <__mcmp>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	da63      	bge.n	801208c <_dtoa_r+0x924>
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	4659      	mov	r1, fp
 8011fc8:	220a      	movs	r2, #10
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f000 fa26 	bl	801241c <__multadd>
 8011fd0:	9b08      	ldr	r3, [sp, #32]
 8011fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fd6:	4683      	mov	fp, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f000 818f 	beq.w	80122fc <_dtoa_r+0xb94>
 8011fde:	4639      	mov	r1, r7
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	220a      	movs	r2, #10
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f000 fa19 	bl	801241c <__multadd>
 8011fea:	f1b9 0f00 	cmp.w	r9, #0
 8011fee:	4607      	mov	r7, r0
 8011ff0:	f300 808e 	bgt.w	8012110 <_dtoa_r+0x9a8>
 8011ff4:	9b05      	ldr	r3, [sp, #20]
 8011ff6:	2b02      	cmp	r3, #2
 8011ff8:	dc50      	bgt.n	801209c <_dtoa_r+0x934>
 8011ffa:	e089      	b.n	8012110 <_dtoa_r+0x9a8>
 8011ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012002:	e75d      	b.n	8011ec0 <_dtoa_r+0x758>
 8012004:	9b01      	ldr	r3, [sp, #4]
 8012006:	1e5e      	subs	r6, r3, #1
 8012008:	9b06      	ldr	r3, [sp, #24]
 801200a:	42b3      	cmp	r3, r6
 801200c:	bfbf      	itttt	lt
 801200e:	9b06      	ldrlt	r3, [sp, #24]
 8012010:	9606      	strlt	r6, [sp, #24]
 8012012:	1af2      	sublt	r2, r6, r3
 8012014:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012016:	bfb6      	itet	lt
 8012018:	189b      	addlt	r3, r3, r2
 801201a:	1b9e      	subge	r6, r3, r6
 801201c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801201e:	9b01      	ldr	r3, [sp, #4]
 8012020:	bfb8      	it	lt
 8012022:	2600      	movlt	r6, #0
 8012024:	2b00      	cmp	r3, #0
 8012026:	bfb5      	itete	lt
 8012028:	eba8 0503 	sublt.w	r5, r8, r3
 801202c:	9b01      	ldrge	r3, [sp, #4]
 801202e:	2300      	movlt	r3, #0
 8012030:	4645      	movge	r5, r8
 8012032:	e747      	b.n	8011ec4 <_dtoa_r+0x75c>
 8012034:	9e06      	ldr	r6, [sp, #24]
 8012036:	9f08      	ldr	r7, [sp, #32]
 8012038:	4645      	mov	r5, r8
 801203a:	e74c      	b.n	8011ed6 <_dtoa_r+0x76e>
 801203c:	9a06      	ldr	r2, [sp, #24]
 801203e:	e775      	b.n	8011f2c <_dtoa_r+0x7c4>
 8012040:	9b05      	ldr	r3, [sp, #20]
 8012042:	2b01      	cmp	r3, #1
 8012044:	dc18      	bgt.n	8012078 <_dtoa_r+0x910>
 8012046:	9b02      	ldr	r3, [sp, #8]
 8012048:	b9b3      	cbnz	r3, 8012078 <_dtoa_r+0x910>
 801204a:	9b03      	ldr	r3, [sp, #12]
 801204c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012050:	b9a3      	cbnz	r3, 801207c <_dtoa_r+0x914>
 8012052:	9b03      	ldr	r3, [sp, #12]
 8012054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012058:	0d1b      	lsrs	r3, r3, #20
 801205a:	051b      	lsls	r3, r3, #20
 801205c:	b12b      	cbz	r3, 801206a <_dtoa_r+0x902>
 801205e:	9b04      	ldr	r3, [sp, #16]
 8012060:	3301      	adds	r3, #1
 8012062:	9304      	str	r3, [sp, #16]
 8012064:	f108 0801 	add.w	r8, r8, #1
 8012068:	2301      	movs	r3, #1
 801206a:	9306      	str	r3, [sp, #24]
 801206c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801206e:	2b00      	cmp	r3, #0
 8012070:	f47f af74 	bne.w	8011f5c <_dtoa_r+0x7f4>
 8012074:	2001      	movs	r0, #1
 8012076:	e779      	b.n	8011f6c <_dtoa_r+0x804>
 8012078:	2300      	movs	r3, #0
 801207a:	e7f6      	b.n	801206a <_dtoa_r+0x902>
 801207c:	9b02      	ldr	r3, [sp, #8]
 801207e:	e7f4      	b.n	801206a <_dtoa_r+0x902>
 8012080:	d085      	beq.n	8011f8e <_dtoa_r+0x826>
 8012082:	4618      	mov	r0, r3
 8012084:	301c      	adds	r0, #28
 8012086:	e77d      	b.n	8011f84 <_dtoa_r+0x81c>
 8012088:	40240000 	.word	0x40240000
 801208c:	9b01      	ldr	r3, [sp, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	dc38      	bgt.n	8012104 <_dtoa_r+0x99c>
 8012092:	9b05      	ldr	r3, [sp, #20]
 8012094:	2b02      	cmp	r3, #2
 8012096:	dd35      	ble.n	8012104 <_dtoa_r+0x99c>
 8012098:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801209c:	f1b9 0f00 	cmp.w	r9, #0
 80120a0:	d10d      	bne.n	80120be <_dtoa_r+0x956>
 80120a2:	4631      	mov	r1, r6
 80120a4:	464b      	mov	r3, r9
 80120a6:	2205      	movs	r2, #5
 80120a8:	4620      	mov	r0, r4
 80120aa:	f000 f9b7 	bl	801241c <__multadd>
 80120ae:	4601      	mov	r1, r0
 80120b0:	4606      	mov	r6, r0
 80120b2:	4658      	mov	r0, fp
 80120b4:	f000 fbce 	bl	8012854 <__mcmp>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	f73f adbd 	bgt.w	8011c38 <_dtoa_r+0x4d0>
 80120be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c0:	9d00      	ldr	r5, [sp, #0]
 80120c2:	ea6f 0a03 	mvn.w	sl, r3
 80120c6:	f04f 0800 	mov.w	r8, #0
 80120ca:	4631      	mov	r1, r6
 80120cc:	4620      	mov	r0, r4
 80120ce:	f000 f983 	bl	80123d8 <_Bfree>
 80120d2:	2f00      	cmp	r7, #0
 80120d4:	f43f aeb4 	beq.w	8011e40 <_dtoa_r+0x6d8>
 80120d8:	f1b8 0f00 	cmp.w	r8, #0
 80120dc:	d005      	beq.n	80120ea <_dtoa_r+0x982>
 80120de:	45b8      	cmp	r8, r7
 80120e0:	d003      	beq.n	80120ea <_dtoa_r+0x982>
 80120e2:	4641      	mov	r1, r8
 80120e4:	4620      	mov	r0, r4
 80120e6:	f000 f977 	bl	80123d8 <_Bfree>
 80120ea:	4639      	mov	r1, r7
 80120ec:	4620      	mov	r0, r4
 80120ee:	f000 f973 	bl	80123d8 <_Bfree>
 80120f2:	e6a5      	b.n	8011e40 <_dtoa_r+0x6d8>
 80120f4:	2600      	movs	r6, #0
 80120f6:	4637      	mov	r7, r6
 80120f8:	e7e1      	b.n	80120be <_dtoa_r+0x956>
 80120fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80120fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012100:	4637      	mov	r7, r6
 8012102:	e599      	b.n	8011c38 <_dtoa_r+0x4d0>
 8012104:	9b08      	ldr	r3, [sp, #32]
 8012106:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801210a:	2b00      	cmp	r3, #0
 801210c:	f000 80fd 	beq.w	801230a <_dtoa_r+0xba2>
 8012110:	2d00      	cmp	r5, #0
 8012112:	dd05      	ble.n	8012120 <_dtoa_r+0x9b8>
 8012114:	4639      	mov	r1, r7
 8012116:	462a      	mov	r2, r5
 8012118:	4620      	mov	r0, r4
 801211a:	f000 fb2f 	bl	801277c <__lshift>
 801211e:	4607      	mov	r7, r0
 8012120:	9b06      	ldr	r3, [sp, #24]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d05c      	beq.n	80121e0 <_dtoa_r+0xa78>
 8012126:	6879      	ldr	r1, [r7, #4]
 8012128:	4620      	mov	r0, r4
 801212a:	f000 f915 	bl	8012358 <_Balloc>
 801212e:	4605      	mov	r5, r0
 8012130:	b928      	cbnz	r0, 801213e <_dtoa_r+0x9d6>
 8012132:	4b80      	ldr	r3, [pc, #512]	; (8012334 <_dtoa_r+0xbcc>)
 8012134:	4602      	mov	r2, r0
 8012136:	f240 21ea 	movw	r1, #746	; 0x2ea
 801213a:	f7ff bb2e 	b.w	801179a <_dtoa_r+0x32>
 801213e:	693a      	ldr	r2, [r7, #16]
 8012140:	3202      	adds	r2, #2
 8012142:	0092      	lsls	r2, r2, #2
 8012144:	f107 010c 	add.w	r1, r7, #12
 8012148:	300c      	adds	r0, #12
 801214a:	f7fe fddf 	bl	8010d0c <memcpy>
 801214e:	2201      	movs	r2, #1
 8012150:	4629      	mov	r1, r5
 8012152:	4620      	mov	r0, r4
 8012154:	f000 fb12 	bl	801277c <__lshift>
 8012158:	9b00      	ldr	r3, [sp, #0]
 801215a:	3301      	adds	r3, #1
 801215c:	9301      	str	r3, [sp, #4]
 801215e:	9b00      	ldr	r3, [sp, #0]
 8012160:	444b      	add	r3, r9
 8012162:	9307      	str	r3, [sp, #28]
 8012164:	9b02      	ldr	r3, [sp, #8]
 8012166:	f003 0301 	and.w	r3, r3, #1
 801216a:	46b8      	mov	r8, r7
 801216c:	9306      	str	r3, [sp, #24]
 801216e:	4607      	mov	r7, r0
 8012170:	9b01      	ldr	r3, [sp, #4]
 8012172:	4631      	mov	r1, r6
 8012174:	3b01      	subs	r3, #1
 8012176:	4658      	mov	r0, fp
 8012178:	9302      	str	r3, [sp, #8]
 801217a:	f7ff fa67 	bl	801164c <quorem>
 801217e:	4603      	mov	r3, r0
 8012180:	3330      	adds	r3, #48	; 0x30
 8012182:	9004      	str	r0, [sp, #16]
 8012184:	4641      	mov	r1, r8
 8012186:	4658      	mov	r0, fp
 8012188:	9308      	str	r3, [sp, #32]
 801218a:	f000 fb63 	bl	8012854 <__mcmp>
 801218e:	463a      	mov	r2, r7
 8012190:	4681      	mov	r9, r0
 8012192:	4631      	mov	r1, r6
 8012194:	4620      	mov	r0, r4
 8012196:	f000 fb79 	bl	801288c <__mdiff>
 801219a:	68c2      	ldr	r2, [r0, #12]
 801219c:	9b08      	ldr	r3, [sp, #32]
 801219e:	4605      	mov	r5, r0
 80121a0:	bb02      	cbnz	r2, 80121e4 <_dtoa_r+0xa7c>
 80121a2:	4601      	mov	r1, r0
 80121a4:	4658      	mov	r0, fp
 80121a6:	f000 fb55 	bl	8012854 <__mcmp>
 80121aa:	9b08      	ldr	r3, [sp, #32]
 80121ac:	4602      	mov	r2, r0
 80121ae:	4629      	mov	r1, r5
 80121b0:	4620      	mov	r0, r4
 80121b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80121b6:	f000 f90f 	bl	80123d8 <_Bfree>
 80121ba:	9b05      	ldr	r3, [sp, #20]
 80121bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121be:	9d01      	ldr	r5, [sp, #4]
 80121c0:	ea43 0102 	orr.w	r1, r3, r2
 80121c4:	9b06      	ldr	r3, [sp, #24]
 80121c6:	430b      	orrs	r3, r1
 80121c8:	9b08      	ldr	r3, [sp, #32]
 80121ca:	d10d      	bne.n	80121e8 <_dtoa_r+0xa80>
 80121cc:	2b39      	cmp	r3, #57	; 0x39
 80121ce:	d029      	beq.n	8012224 <_dtoa_r+0xabc>
 80121d0:	f1b9 0f00 	cmp.w	r9, #0
 80121d4:	dd01      	ble.n	80121da <_dtoa_r+0xa72>
 80121d6:	9b04      	ldr	r3, [sp, #16]
 80121d8:	3331      	adds	r3, #49	; 0x31
 80121da:	9a02      	ldr	r2, [sp, #8]
 80121dc:	7013      	strb	r3, [r2, #0]
 80121de:	e774      	b.n	80120ca <_dtoa_r+0x962>
 80121e0:	4638      	mov	r0, r7
 80121e2:	e7b9      	b.n	8012158 <_dtoa_r+0x9f0>
 80121e4:	2201      	movs	r2, #1
 80121e6:	e7e2      	b.n	80121ae <_dtoa_r+0xa46>
 80121e8:	f1b9 0f00 	cmp.w	r9, #0
 80121ec:	db06      	blt.n	80121fc <_dtoa_r+0xa94>
 80121ee:	9905      	ldr	r1, [sp, #20]
 80121f0:	ea41 0909 	orr.w	r9, r1, r9
 80121f4:	9906      	ldr	r1, [sp, #24]
 80121f6:	ea59 0101 	orrs.w	r1, r9, r1
 80121fa:	d120      	bne.n	801223e <_dtoa_r+0xad6>
 80121fc:	2a00      	cmp	r2, #0
 80121fe:	ddec      	ble.n	80121da <_dtoa_r+0xa72>
 8012200:	4659      	mov	r1, fp
 8012202:	2201      	movs	r2, #1
 8012204:	4620      	mov	r0, r4
 8012206:	9301      	str	r3, [sp, #4]
 8012208:	f000 fab8 	bl	801277c <__lshift>
 801220c:	4631      	mov	r1, r6
 801220e:	4683      	mov	fp, r0
 8012210:	f000 fb20 	bl	8012854 <__mcmp>
 8012214:	2800      	cmp	r0, #0
 8012216:	9b01      	ldr	r3, [sp, #4]
 8012218:	dc02      	bgt.n	8012220 <_dtoa_r+0xab8>
 801221a:	d1de      	bne.n	80121da <_dtoa_r+0xa72>
 801221c:	07da      	lsls	r2, r3, #31
 801221e:	d5dc      	bpl.n	80121da <_dtoa_r+0xa72>
 8012220:	2b39      	cmp	r3, #57	; 0x39
 8012222:	d1d8      	bne.n	80121d6 <_dtoa_r+0xa6e>
 8012224:	9a02      	ldr	r2, [sp, #8]
 8012226:	2339      	movs	r3, #57	; 0x39
 8012228:	7013      	strb	r3, [r2, #0]
 801222a:	462b      	mov	r3, r5
 801222c:	461d      	mov	r5, r3
 801222e:	3b01      	subs	r3, #1
 8012230:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012234:	2a39      	cmp	r2, #57	; 0x39
 8012236:	d050      	beq.n	80122da <_dtoa_r+0xb72>
 8012238:	3201      	adds	r2, #1
 801223a:	701a      	strb	r2, [r3, #0]
 801223c:	e745      	b.n	80120ca <_dtoa_r+0x962>
 801223e:	2a00      	cmp	r2, #0
 8012240:	dd03      	ble.n	801224a <_dtoa_r+0xae2>
 8012242:	2b39      	cmp	r3, #57	; 0x39
 8012244:	d0ee      	beq.n	8012224 <_dtoa_r+0xabc>
 8012246:	3301      	adds	r3, #1
 8012248:	e7c7      	b.n	80121da <_dtoa_r+0xa72>
 801224a:	9a01      	ldr	r2, [sp, #4]
 801224c:	9907      	ldr	r1, [sp, #28]
 801224e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012252:	428a      	cmp	r2, r1
 8012254:	d02a      	beq.n	80122ac <_dtoa_r+0xb44>
 8012256:	4659      	mov	r1, fp
 8012258:	2300      	movs	r3, #0
 801225a:	220a      	movs	r2, #10
 801225c:	4620      	mov	r0, r4
 801225e:	f000 f8dd 	bl	801241c <__multadd>
 8012262:	45b8      	cmp	r8, r7
 8012264:	4683      	mov	fp, r0
 8012266:	f04f 0300 	mov.w	r3, #0
 801226a:	f04f 020a 	mov.w	r2, #10
 801226e:	4641      	mov	r1, r8
 8012270:	4620      	mov	r0, r4
 8012272:	d107      	bne.n	8012284 <_dtoa_r+0xb1c>
 8012274:	f000 f8d2 	bl	801241c <__multadd>
 8012278:	4680      	mov	r8, r0
 801227a:	4607      	mov	r7, r0
 801227c:	9b01      	ldr	r3, [sp, #4]
 801227e:	3301      	adds	r3, #1
 8012280:	9301      	str	r3, [sp, #4]
 8012282:	e775      	b.n	8012170 <_dtoa_r+0xa08>
 8012284:	f000 f8ca 	bl	801241c <__multadd>
 8012288:	4639      	mov	r1, r7
 801228a:	4680      	mov	r8, r0
 801228c:	2300      	movs	r3, #0
 801228e:	220a      	movs	r2, #10
 8012290:	4620      	mov	r0, r4
 8012292:	f000 f8c3 	bl	801241c <__multadd>
 8012296:	4607      	mov	r7, r0
 8012298:	e7f0      	b.n	801227c <_dtoa_r+0xb14>
 801229a:	f1b9 0f00 	cmp.w	r9, #0
 801229e:	9a00      	ldr	r2, [sp, #0]
 80122a0:	bfcc      	ite	gt
 80122a2:	464d      	movgt	r5, r9
 80122a4:	2501      	movle	r5, #1
 80122a6:	4415      	add	r5, r2
 80122a8:	f04f 0800 	mov.w	r8, #0
 80122ac:	4659      	mov	r1, fp
 80122ae:	2201      	movs	r2, #1
 80122b0:	4620      	mov	r0, r4
 80122b2:	9301      	str	r3, [sp, #4]
 80122b4:	f000 fa62 	bl	801277c <__lshift>
 80122b8:	4631      	mov	r1, r6
 80122ba:	4683      	mov	fp, r0
 80122bc:	f000 faca 	bl	8012854 <__mcmp>
 80122c0:	2800      	cmp	r0, #0
 80122c2:	dcb2      	bgt.n	801222a <_dtoa_r+0xac2>
 80122c4:	d102      	bne.n	80122cc <_dtoa_r+0xb64>
 80122c6:	9b01      	ldr	r3, [sp, #4]
 80122c8:	07db      	lsls	r3, r3, #31
 80122ca:	d4ae      	bmi.n	801222a <_dtoa_r+0xac2>
 80122cc:	462b      	mov	r3, r5
 80122ce:	461d      	mov	r5, r3
 80122d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122d4:	2a30      	cmp	r2, #48	; 0x30
 80122d6:	d0fa      	beq.n	80122ce <_dtoa_r+0xb66>
 80122d8:	e6f7      	b.n	80120ca <_dtoa_r+0x962>
 80122da:	9a00      	ldr	r2, [sp, #0]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d1a5      	bne.n	801222c <_dtoa_r+0xac4>
 80122e0:	f10a 0a01 	add.w	sl, sl, #1
 80122e4:	2331      	movs	r3, #49	; 0x31
 80122e6:	e779      	b.n	80121dc <_dtoa_r+0xa74>
 80122e8:	4b13      	ldr	r3, [pc, #76]	; (8012338 <_dtoa_r+0xbd0>)
 80122ea:	f7ff baaf 	b.w	801184c <_dtoa_r+0xe4>
 80122ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f47f aa86 	bne.w	8011802 <_dtoa_r+0x9a>
 80122f6:	4b11      	ldr	r3, [pc, #68]	; (801233c <_dtoa_r+0xbd4>)
 80122f8:	f7ff baa8 	b.w	801184c <_dtoa_r+0xe4>
 80122fc:	f1b9 0f00 	cmp.w	r9, #0
 8012300:	dc03      	bgt.n	801230a <_dtoa_r+0xba2>
 8012302:	9b05      	ldr	r3, [sp, #20]
 8012304:	2b02      	cmp	r3, #2
 8012306:	f73f aec9 	bgt.w	801209c <_dtoa_r+0x934>
 801230a:	9d00      	ldr	r5, [sp, #0]
 801230c:	4631      	mov	r1, r6
 801230e:	4658      	mov	r0, fp
 8012310:	f7ff f99c 	bl	801164c <quorem>
 8012314:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012318:	f805 3b01 	strb.w	r3, [r5], #1
 801231c:	9a00      	ldr	r2, [sp, #0]
 801231e:	1aaa      	subs	r2, r5, r2
 8012320:	4591      	cmp	r9, r2
 8012322:	ddba      	ble.n	801229a <_dtoa_r+0xb32>
 8012324:	4659      	mov	r1, fp
 8012326:	2300      	movs	r3, #0
 8012328:	220a      	movs	r2, #10
 801232a:	4620      	mov	r0, r4
 801232c:	f000 f876 	bl	801241c <__multadd>
 8012330:	4683      	mov	fp, r0
 8012332:	e7eb      	b.n	801230c <_dtoa_r+0xba4>
 8012334:	0801fb13 	.word	0x0801fb13
 8012338:	0801fa6c 	.word	0x0801fa6c
 801233c:	0801fa90 	.word	0x0801fa90

08012340 <_localeconv_r>:
 8012340:	4800      	ldr	r0, [pc, #0]	; (8012344 <_localeconv_r+0x4>)
 8012342:	4770      	bx	lr
 8012344:	20000230 	.word	0x20000230

08012348 <malloc>:
 8012348:	4b02      	ldr	r3, [pc, #8]	; (8012354 <malloc+0xc>)
 801234a:	4601      	mov	r1, r0
 801234c:	6818      	ldr	r0, [r3, #0]
 801234e:	f000 bbe1 	b.w	8012b14 <_malloc_r>
 8012352:	bf00      	nop
 8012354:	200000dc 	.word	0x200000dc

08012358 <_Balloc>:
 8012358:	b570      	push	{r4, r5, r6, lr}
 801235a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801235c:	4604      	mov	r4, r0
 801235e:	460d      	mov	r5, r1
 8012360:	b976      	cbnz	r6, 8012380 <_Balloc+0x28>
 8012362:	2010      	movs	r0, #16
 8012364:	f7ff fff0 	bl	8012348 <malloc>
 8012368:	4602      	mov	r2, r0
 801236a:	6260      	str	r0, [r4, #36]	; 0x24
 801236c:	b920      	cbnz	r0, 8012378 <_Balloc+0x20>
 801236e:	4b18      	ldr	r3, [pc, #96]	; (80123d0 <_Balloc+0x78>)
 8012370:	4818      	ldr	r0, [pc, #96]	; (80123d4 <_Balloc+0x7c>)
 8012372:	2166      	movs	r1, #102	; 0x66
 8012374:	f000 fd94 	bl	8012ea0 <__assert_func>
 8012378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801237c:	6006      	str	r6, [r0, #0]
 801237e:	60c6      	str	r6, [r0, #12]
 8012380:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012382:	68f3      	ldr	r3, [r6, #12]
 8012384:	b183      	cbz	r3, 80123a8 <_Balloc+0x50>
 8012386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012388:	68db      	ldr	r3, [r3, #12]
 801238a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801238e:	b9b8      	cbnz	r0, 80123c0 <_Balloc+0x68>
 8012390:	2101      	movs	r1, #1
 8012392:	fa01 f605 	lsl.w	r6, r1, r5
 8012396:	1d72      	adds	r2, r6, #5
 8012398:	0092      	lsls	r2, r2, #2
 801239a:	4620      	mov	r0, r4
 801239c:	f000 fb5a 	bl	8012a54 <_calloc_r>
 80123a0:	b160      	cbz	r0, 80123bc <_Balloc+0x64>
 80123a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80123a6:	e00e      	b.n	80123c6 <_Balloc+0x6e>
 80123a8:	2221      	movs	r2, #33	; 0x21
 80123aa:	2104      	movs	r1, #4
 80123ac:	4620      	mov	r0, r4
 80123ae:	f000 fb51 	bl	8012a54 <_calloc_r>
 80123b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123b4:	60f0      	str	r0, [r6, #12]
 80123b6:	68db      	ldr	r3, [r3, #12]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d1e4      	bne.n	8012386 <_Balloc+0x2e>
 80123bc:	2000      	movs	r0, #0
 80123be:	bd70      	pop	{r4, r5, r6, pc}
 80123c0:	6802      	ldr	r2, [r0, #0]
 80123c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80123c6:	2300      	movs	r3, #0
 80123c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80123cc:	e7f7      	b.n	80123be <_Balloc+0x66>
 80123ce:	bf00      	nop
 80123d0:	0801fa9d 	.word	0x0801fa9d
 80123d4:	0801fb24 	.word	0x0801fb24

080123d8 <_Bfree>:
 80123d8:	b570      	push	{r4, r5, r6, lr}
 80123da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80123dc:	4605      	mov	r5, r0
 80123de:	460c      	mov	r4, r1
 80123e0:	b976      	cbnz	r6, 8012400 <_Bfree+0x28>
 80123e2:	2010      	movs	r0, #16
 80123e4:	f7ff ffb0 	bl	8012348 <malloc>
 80123e8:	4602      	mov	r2, r0
 80123ea:	6268      	str	r0, [r5, #36]	; 0x24
 80123ec:	b920      	cbnz	r0, 80123f8 <_Bfree+0x20>
 80123ee:	4b09      	ldr	r3, [pc, #36]	; (8012414 <_Bfree+0x3c>)
 80123f0:	4809      	ldr	r0, [pc, #36]	; (8012418 <_Bfree+0x40>)
 80123f2:	218a      	movs	r1, #138	; 0x8a
 80123f4:	f000 fd54 	bl	8012ea0 <__assert_func>
 80123f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80123fc:	6006      	str	r6, [r0, #0]
 80123fe:	60c6      	str	r6, [r0, #12]
 8012400:	b13c      	cbz	r4, 8012412 <_Bfree+0x3a>
 8012402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012404:	6862      	ldr	r2, [r4, #4]
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801240c:	6021      	str	r1, [r4, #0]
 801240e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012412:	bd70      	pop	{r4, r5, r6, pc}
 8012414:	0801fa9d 	.word	0x0801fa9d
 8012418:	0801fb24 	.word	0x0801fb24

0801241c <__multadd>:
 801241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012420:	690e      	ldr	r6, [r1, #16]
 8012422:	4607      	mov	r7, r0
 8012424:	4698      	mov	r8, r3
 8012426:	460c      	mov	r4, r1
 8012428:	f101 0014 	add.w	r0, r1, #20
 801242c:	2300      	movs	r3, #0
 801242e:	6805      	ldr	r5, [r0, #0]
 8012430:	b2a9      	uxth	r1, r5
 8012432:	fb02 8101 	mla	r1, r2, r1, r8
 8012436:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801243a:	0c2d      	lsrs	r5, r5, #16
 801243c:	fb02 c505 	mla	r5, r2, r5, ip
 8012440:	b289      	uxth	r1, r1
 8012442:	3301      	adds	r3, #1
 8012444:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012448:	429e      	cmp	r6, r3
 801244a:	f840 1b04 	str.w	r1, [r0], #4
 801244e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012452:	dcec      	bgt.n	801242e <__multadd+0x12>
 8012454:	f1b8 0f00 	cmp.w	r8, #0
 8012458:	d022      	beq.n	80124a0 <__multadd+0x84>
 801245a:	68a3      	ldr	r3, [r4, #8]
 801245c:	42b3      	cmp	r3, r6
 801245e:	dc19      	bgt.n	8012494 <__multadd+0x78>
 8012460:	6861      	ldr	r1, [r4, #4]
 8012462:	4638      	mov	r0, r7
 8012464:	3101      	adds	r1, #1
 8012466:	f7ff ff77 	bl	8012358 <_Balloc>
 801246a:	4605      	mov	r5, r0
 801246c:	b928      	cbnz	r0, 801247a <__multadd+0x5e>
 801246e:	4602      	mov	r2, r0
 8012470:	4b0d      	ldr	r3, [pc, #52]	; (80124a8 <__multadd+0x8c>)
 8012472:	480e      	ldr	r0, [pc, #56]	; (80124ac <__multadd+0x90>)
 8012474:	21b5      	movs	r1, #181	; 0xb5
 8012476:	f000 fd13 	bl	8012ea0 <__assert_func>
 801247a:	6922      	ldr	r2, [r4, #16]
 801247c:	3202      	adds	r2, #2
 801247e:	f104 010c 	add.w	r1, r4, #12
 8012482:	0092      	lsls	r2, r2, #2
 8012484:	300c      	adds	r0, #12
 8012486:	f7fe fc41 	bl	8010d0c <memcpy>
 801248a:	4621      	mov	r1, r4
 801248c:	4638      	mov	r0, r7
 801248e:	f7ff ffa3 	bl	80123d8 <_Bfree>
 8012492:	462c      	mov	r4, r5
 8012494:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012498:	3601      	adds	r6, #1
 801249a:	f8c3 8014 	str.w	r8, [r3, #20]
 801249e:	6126      	str	r6, [r4, #16]
 80124a0:	4620      	mov	r0, r4
 80124a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124a6:	bf00      	nop
 80124a8:	0801fb13 	.word	0x0801fb13
 80124ac:	0801fb24 	.word	0x0801fb24

080124b0 <__hi0bits>:
 80124b0:	0c03      	lsrs	r3, r0, #16
 80124b2:	041b      	lsls	r3, r3, #16
 80124b4:	b9d3      	cbnz	r3, 80124ec <__hi0bits+0x3c>
 80124b6:	0400      	lsls	r0, r0, #16
 80124b8:	2310      	movs	r3, #16
 80124ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80124be:	bf04      	itt	eq
 80124c0:	0200      	lsleq	r0, r0, #8
 80124c2:	3308      	addeq	r3, #8
 80124c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80124c8:	bf04      	itt	eq
 80124ca:	0100      	lsleq	r0, r0, #4
 80124cc:	3304      	addeq	r3, #4
 80124ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80124d2:	bf04      	itt	eq
 80124d4:	0080      	lsleq	r0, r0, #2
 80124d6:	3302      	addeq	r3, #2
 80124d8:	2800      	cmp	r0, #0
 80124da:	db05      	blt.n	80124e8 <__hi0bits+0x38>
 80124dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80124e0:	f103 0301 	add.w	r3, r3, #1
 80124e4:	bf08      	it	eq
 80124e6:	2320      	moveq	r3, #32
 80124e8:	4618      	mov	r0, r3
 80124ea:	4770      	bx	lr
 80124ec:	2300      	movs	r3, #0
 80124ee:	e7e4      	b.n	80124ba <__hi0bits+0xa>

080124f0 <__lo0bits>:
 80124f0:	6803      	ldr	r3, [r0, #0]
 80124f2:	f013 0207 	ands.w	r2, r3, #7
 80124f6:	4601      	mov	r1, r0
 80124f8:	d00b      	beq.n	8012512 <__lo0bits+0x22>
 80124fa:	07da      	lsls	r2, r3, #31
 80124fc:	d424      	bmi.n	8012548 <__lo0bits+0x58>
 80124fe:	0798      	lsls	r0, r3, #30
 8012500:	bf49      	itett	mi
 8012502:	085b      	lsrmi	r3, r3, #1
 8012504:	089b      	lsrpl	r3, r3, #2
 8012506:	2001      	movmi	r0, #1
 8012508:	600b      	strmi	r3, [r1, #0]
 801250a:	bf5c      	itt	pl
 801250c:	600b      	strpl	r3, [r1, #0]
 801250e:	2002      	movpl	r0, #2
 8012510:	4770      	bx	lr
 8012512:	b298      	uxth	r0, r3
 8012514:	b9b0      	cbnz	r0, 8012544 <__lo0bits+0x54>
 8012516:	0c1b      	lsrs	r3, r3, #16
 8012518:	2010      	movs	r0, #16
 801251a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801251e:	bf04      	itt	eq
 8012520:	0a1b      	lsreq	r3, r3, #8
 8012522:	3008      	addeq	r0, #8
 8012524:	071a      	lsls	r2, r3, #28
 8012526:	bf04      	itt	eq
 8012528:	091b      	lsreq	r3, r3, #4
 801252a:	3004      	addeq	r0, #4
 801252c:	079a      	lsls	r2, r3, #30
 801252e:	bf04      	itt	eq
 8012530:	089b      	lsreq	r3, r3, #2
 8012532:	3002      	addeq	r0, #2
 8012534:	07da      	lsls	r2, r3, #31
 8012536:	d403      	bmi.n	8012540 <__lo0bits+0x50>
 8012538:	085b      	lsrs	r3, r3, #1
 801253a:	f100 0001 	add.w	r0, r0, #1
 801253e:	d005      	beq.n	801254c <__lo0bits+0x5c>
 8012540:	600b      	str	r3, [r1, #0]
 8012542:	4770      	bx	lr
 8012544:	4610      	mov	r0, r2
 8012546:	e7e8      	b.n	801251a <__lo0bits+0x2a>
 8012548:	2000      	movs	r0, #0
 801254a:	4770      	bx	lr
 801254c:	2020      	movs	r0, #32
 801254e:	4770      	bx	lr

08012550 <__i2b>:
 8012550:	b510      	push	{r4, lr}
 8012552:	460c      	mov	r4, r1
 8012554:	2101      	movs	r1, #1
 8012556:	f7ff feff 	bl	8012358 <_Balloc>
 801255a:	4602      	mov	r2, r0
 801255c:	b928      	cbnz	r0, 801256a <__i2b+0x1a>
 801255e:	4b05      	ldr	r3, [pc, #20]	; (8012574 <__i2b+0x24>)
 8012560:	4805      	ldr	r0, [pc, #20]	; (8012578 <__i2b+0x28>)
 8012562:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012566:	f000 fc9b 	bl	8012ea0 <__assert_func>
 801256a:	2301      	movs	r3, #1
 801256c:	6144      	str	r4, [r0, #20]
 801256e:	6103      	str	r3, [r0, #16]
 8012570:	bd10      	pop	{r4, pc}
 8012572:	bf00      	nop
 8012574:	0801fb13 	.word	0x0801fb13
 8012578:	0801fb24 	.word	0x0801fb24

0801257c <__multiply>:
 801257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012580:	4614      	mov	r4, r2
 8012582:	690a      	ldr	r2, [r1, #16]
 8012584:	6923      	ldr	r3, [r4, #16]
 8012586:	429a      	cmp	r2, r3
 8012588:	bfb8      	it	lt
 801258a:	460b      	movlt	r3, r1
 801258c:	460d      	mov	r5, r1
 801258e:	bfbc      	itt	lt
 8012590:	4625      	movlt	r5, r4
 8012592:	461c      	movlt	r4, r3
 8012594:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012598:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801259c:	68ab      	ldr	r3, [r5, #8]
 801259e:	6869      	ldr	r1, [r5, #4]
 80125a0:	eb0a 0709 	add.w	r7, sl, r9
 80125a4:	42bb      	cmp	r3, r7
 80125a6:	b085      	sub	sp, #20
 80125a8:	bfb8      	it	lt
 80125aa:	3101      	addlt	r1, #1
 80125ac:	f7ff fed4 	bl	8012358 <_Balloc>
 80125b0:	b930      	cbnz	r0, 80125c0 <__multiply+0x44>
 80125b2:	4602      	mov	r2, r0
 80125b4:	4b42      	ldr	r3, [pc, #264]	; (80126c0 <__multiply+0x144>)
 80125b6:	4843      	ldr	r0, [pc, #268]	; (80126c4 <__multiply+0x148>)
 80125b8:	f240 115d 	movw	r1, #349	; 0x15d
 80125bc:	f000 fc70 	bl	8012ea0 <__assert_func>
 80125c0:	f100 0614 	add.w	r6, r0, #20
 80125c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80125c8:	4633      	mov	r3, r6
 80125ca:	2200      	movs	r2, #0
 80125cc:	4543      	cmp	r3, r8
 80125ce:	d31e      	bcc.n	801260e <__multiply+0x92>
 80125d0:	f105 0c14 	add.w	ip, r5, #20
 80125d4:	f104 0314 	add.w	r3, r4, #20
 80125d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80125dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80125e0:	9202      	str	r2, [sp, #8]
 80125e2:	ebac 0205 	sub.w	r2, ip, r5
 80125e6:	3a15      	subs	r2, #21
 80125e8:	f022 0203 	bic.w	r2, r2, #3
 80125ec:	3204      	adds	r2, #4
 80125ee:	f105 0115 	add.w	r1, r5, #21
 80125f2:	458c      	cmp	ip, r1
 80125f4:	bf38      	it	cc
 80125f6:	2204      	movcc	r2, #4
 80125f8:	9201      	str	r2, [sp, #4]
 80125fa:	9a02      	ldr	r2, [sp, #8]
 80125fc:	9303      	str	r3, [sp, #12]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d808      	bhi.n	8012614 <__multiply+0x98>
 8012602:	2f00      	cmp	r7, #0
 8012604:	dc55      	bgt.n	80126b2 <__multiply+0x136>
 8012606:	6107      	str	r7, [r0, #16]
 8012608:	b005      	add	sp, #20
 801260a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801260e:	f843 2b04 	str.w	r2, [r3], #4
 8012612:	e7db      	b.n	80125cc <__multiply+0x50>
 8012614:	f8b3 a000 	ldrh.w	sl, [r3]
 8012618:	f1ba 0f00 	cmp.w	sl, #0
 801261c:	d020      	beq.n	8012660 <__multiply+0xe4>
 801261e:	f105 0e14 	add.w	lr, r5, #20
 8012622:	46b1      	mov	r9, r6
 8012624:	2200      	movs	r2, #0
 8012626:	f85e 4b04 	ldr.w	r4, [lr], #4
 801262a:	f8d9 b000 	ldr.w	fp, [r9]
 801262e:	b2a1      	uxth	r1, r4
 8012630:	fa1f fb8b 	uxth.w	fp, fp
 8012634:	fb0a b101 	mla	r1, sl, r1, fp
 8012638:	4411      	add	r1, r2
 801263a:	f8d9 2000 	ldr.w	r2, [r9]
 801263e:	0c24      	lsrs	r4, r4, #16
 8012640:	0c12      	lsrs	r2, r2, #16
 8012642:	fb0a 2404 	mla	r4, sl, r4, r2
 8012646:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801264a:	b289      	uxth	r1, r1
 801264c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012650:	45f4      	cmp	ip, lr
 8012652:	f849 1b04 	str.w	r1, [r9], #4
 8012656:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801265a:	d8e4      	bhi.n	8012626 <__multiply+0xaa>
 801265c:	9901      	ldr	r1, [sp, #4]
 801265e:	5072      	str	r2, [r6, r1]
 8012660:	9a03      	ldr	r2, [sp, #12]
 8012662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012666:	3304      	adds	r3, #4
 8012668:	f1b9 0f00 	cmp.w	r9, #0
 801266c:	d01f      	beq.n	80126ae <__multiply+0x132>
 801266e:	6834      	ldr	r4, [r6, #0]
 8012670:	f105 0114 	add.w	r1, r5, #20
 8012674:	46b6      	mov	lr, r6
 8012676:	f04f 0a00 	mov.w	sl, #0
 801267a:	880a      	ldrh	r2, [r1, #0]
 801267c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012680:	fb09 b202 	mla	r2, r9, r2, fp
 8012684:	4492      	add	sl, r2
 8012686:	b2a4      	uxth	r4, r4
 8012688:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801268c:	f84e 4b04 	str.w	r4, [lr], #4
 8012690:	f851 4b04 	ldr.w	r4, [r1], #4
 8012694:	f8be 2000 	ldrh.w	r2, [lr]
 8012698:	0c24      	lsrs	r4, r4, #16
 801269a:	fb09 2404 	mla	r4, r9, r4, r2
 801269e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80126a2:	458c      	cmp	ip, r1
 80126a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80126a8:	d8e7      	bhi.n	801267a <__multiply+0xfe>
 80126aa:	9a01      	ldr	r2, [sp, #4]
 80126ac:	50b4      	str	r4, [r6, r2]
 80126ae:	3604      	adds	r6, #4
 80126b0:	e7a3      	b.n	80125fa <__multiply+0x7e>
 80126b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1a5      	bne.n	8012606 <__multiply+0x8a>
 80126ba:	3f01      	subs	r7, #1
 80126bc:	e7a1      	b.n	8012602 <__multiply+0x86>
 80126be:	bf00      	nop
 80126c0:	0801fb13 	.word	0x0801fb13
 80126c4:	0801fb24 	.word	0x0801fb24

080126c8 <__pow5mult>:
 80126c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126cc:	4615      	mov	r5, r2
 80126ce:	f012 0203 	ands.w	r2, r2, #3
 80126d2:	4606      	mov	r6, r0
 80126d4:	460f      	mov	r7, r1
 80126d6:	d007      	beq.n	80126e8 <__pow5mult+0x20>
 80126d8:	4c25      	ldr	r4, [pc, #148]	; (8012770 <__pow5mult+0xa8>)
 80126da:	3a01      	subs	r2, #1
 80126dc:	2300      	movs	r3, #0
 80126de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80126e2:	f7ff fe9b 	bl	801241c <__multadd>
 80126e6:	4607      	mov	r7, r0
 80126e8:	10ad      	asrs	r5, r5, #2
 80126ea:	d03d      	beq.n	8012768 <__pow5mult+0xa0>
 80126ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80126ee:	b97c      	cbnz	r4, 8012710 <__pow5mult+0x48>
 80126f0:	2010      	movs	r0, #16
 80126f2:	f7ff fe29 	bl	8012348 <malloc>
 80126f6:	4602      	mov	r2, r0
 80126f8:	6270      	str	r0, [r6, #36]	; 0x24
 80126fa:	b928      	cbnz	r0, 8012708 <__pow5mult+0x40>
 80126fc:	4b1d      	ldr	r3, [pc, #116]	; (8012774 <__pow5mult+0xac>)
 80126fe:	481e      	ldr	r0, [pc, #120]	; (8012778 <__pow5mult+0xb0>)
 8012700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012704:	f000 fbcc 	bl	8012ea0 <__assert_func>
 8012708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801270c:	6004      	str	r4, [r0, #0]
 801270e:	60c4      	str	r4, [r0, #12]
 8012710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012718:	b94c      	cbnz	r4, 801272e <__pow5mult+0x66>
 801271a:	f240 2171 	movw	r1, #625	; 0x271
 801271e:	4630      	mov	r0, r6
 8012720:	f7ff ff16 	bl	8012550 <__i2b>
 8012724:	2300      	movs	r3, #0
 8012726:	f8c8 0008 	str.w	r0, [r8, #8]
 801272a:	4604      	mov	r4, r0
 801272c:	6003      	str	r3, [r0, #0]
 801272e:	f04f 0900 	mov.w	r9, #0
 8012732:	07eb      	lsls	r3, r5, #31
 8012734:	d50a      	bpl.n	801274c <__pow5mult+0x84>
 8012736:	4639      	mov	r1, r7
 8012738:	4622      	mov	r2, r4
 801273a:	4630      	mov	r0, r6
 801273c:	f7ff ff1e 	bl	801257c <__multiply>
 8012740:	4639      	mov	r1, r7
 8012742:	4680      	mov	r8, r0
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff fe47 	bl	80123d8 <_Bfree>
 801274a:	4647      	mov	r7, r8
 801274c:	106d      	asrs	r5, r5, #1
 801274e:	d00b      	beq.n	8012768 <__pow5mult+0xa0>
 8012750:	6820      	ldr	r0, [r4, #0]
 8012752:	b938      	cbnz	r0, 8012764 <__pow5mult+0x9c>
 8012754:	4622      	mov	r2, r4
 8012756:	4621      	mov	r1, r4
 8012758:	4630      	mov	r0, r6
 801275a:	f7ff ff0f 	bl	801257c <__multiply>
 801275e:	6020      	str	r0, [r4, #0]
 8012760:	f8c0 9000 	str.w	r9, [r0]
 8012764:	4604      	mov	r4, r0
 8012766:	e7e4      	b.n	8012732 <__pow5mult+0x6a>
 8012768:	4638      	mov	r0, r7
 801276a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276e:	bf00      	nop
 8012770:	0801fc78 	.word	0x0801fc78
 8012774:	0801fa9d 	.word	0x0801fa9d
 8012778:	0801fb24 	.word	0x0801fb24

0801277c <__lshift>:
 801277c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012780:	460c      	mov	r4, r1
 8012782:	6849      	ldr	r1, [r1, #4]
 8012784:	6923      	ldr	r3, [r4, #16]
 8012786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801278a:	68a3      	ldr	r3, [r4, #8]
 801278c:	4607      	mov	r7, r0
 801278e:	4691      	mov	r9, r2
 8012790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012794:	f108 0601 	add.w	r6, r8, #1
 8012798:	42b3      	cmp	r3, r6
 801279a:	db0b      	blt.n	80127b4 <__lshift+0x38>
 801279c:	4638      	mov	r0, r7
 801279e:	f7ff fddb 	bl	8012358 <_Balloc>
 80127a2:	4605      	mov	r5, r0
 80127a4:	b948      	cbnz	r0, 80127ba <__lshift+0x3e>
 80127a6:	4602      	mov	r2, r0
 80127a8:	4b28      	ldr	r3, [pc, #160]	; (801284c <__lshift+0xd0>)
 80127aa:	4829      	ldr	r0, [pc, #164]	; (8012850 <__lshift+0xd4>)
 80127ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80127b0:	f000 fb76 	bl	8012ea0 <__assert_func>
 80127b4:	3101      	adds	r1, #1
 80127b6:	005b      	lsls	r3, r3, #1
 80127b8:	e7ee      	b.n	8012798 <__lshift+0x1c>
 80127ba:	2300      	movs	r3, #0
 80127bc:	f100 0114 	add.w	r1, r0, #20
 80127c0:	f100 0210 	add.w	r2, r0, #16
 80127c4:	4618      	mov	r0, r3
 80127c6:	4553      	cmp	r3, sl
 80127c8:	db33      	blt.n	8012832 <__lshift+0xb6>
 80127ca:	6920      	ldr	r0, [r4, #16]
 80127cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80127d0:	f104 0314 	add.w	r3, r4, #20
 80127d4:	f019 091f 	ands.w	r9, r9, #31
 80127d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80127dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80127e0:	d02b      	beq.n	801283a <__lshift+0xbe>
 80127e2:	f1c9 0e20 	rsb	lr, r9, #32
 80127e6:	468a      	mov	sl, r1
 80127e8:	2200      	movs	r2, #0
 80127ea:	6818      	ldr	r0, [r3, #0]
 80127ec:	fa00 f009 	lsl.w	r0, r0, r9
 80127f0:	4302      	orrs	r2, r0
 80127f2:	f84a 2b04 	str.w	r2, [sl], #4
 80127f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80127fa:	459c      	cmp	ip, r3
 80127fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8012800:	d8f3      	bhi.n	80127ea <__lshift+0x6e>
 8012802:	ebac 0304 	sub.w	r3, ip, r4
 8012806:	3b15      	subs	r3, #21
 8012808:	f023 0303 	bic.w	r3, r3, #3
 801280c:	3304      	adds	r3, #4
 801280e:	f104 0015 	add.w	r0, r4, #21
 8012812:	4584      	cmp	ip, r0
 8012814:	bf38      	it	cc
 8012816:	2304      	movcc	r3, #4
 8012818:	50ca      	str	r2, [r1, r3]
 801281a:	b10a      	cbz	r2, 8012820 <__lshift+0xa4>
 801281c:	f108 0602 	add.w	r6, r8, #2
 8012820:	3e01      	subs	r6, #1
 8012822:	4638      	mov	r0, r7
 8012824:	612e      	str	r6, [r5, #16]
 8012826:	4621      	mov	r1, r4
 8012828:	f7ff fdd6 	bl	80123d8 <_Bfree>
 801282c:	4628      	mov	r0, r5
 801282e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012832:	f842 0f04 	str.w	r0, [r2, #4]!
 8012836:	3301      	adds	r3, #1
 8012838:	e7c5      	b.n	80127c6 <__lshift+0x4a>
 801283a:	3904      	subs	r1, #4
 801283c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012840:	f841 2f04 	str.w	r2, [r1, #4]!
 8012844:	459c      	cmp	ip, r3
 8012846:	d8f9      	bhi.n	801283c <__lshift+0xc0>
 8012848:	e7ea      	b.n	8012820 <__lshift+0xa4>
 801284a:	bf00      	nop
 801284c:	0801fb13 	.word	0x0801fb13
 8012850:	0801fb24 	.word	0x0801fb24

08012854 <__mcmp>:
 8012854:	b530      	push	{r4, r5, lr}
 8012856:	6902      	ldr	r2, [r0, #16]
 8012858:	690c      	ldr	r4, [r1, #16]
 801285a:	1b12      	subs	r2, r2, r4
 801285c:	d10e      	bne.n	801287c <__mcmp+0x28>
 801285e:	f100 0314 	add.w	r3, r0, #20
 8012862:	3114      	adds	r1, #20
 8012864:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012868:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801286c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012870:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012874:	42a5      	cmp	r5, r4
 8012876:	d003      	beq.n	8012880 <__mcmp+0x2c>
 8012878:	d305      	bcc.n	8012886 <__mcmp+0x32>
 801287a:	2201      	movs	r2, #1
 801287c:	4610      	mov	r0, r2
 801287e:	bd30      	pop	{r4, r5, pc}
 8012880:	4283      	cmp	r3, r0
 8012882:	d3f3      	bcc.n	801286c <__mcmp+0x18>
 8012884:	e7fa      	b.n	801287c <__mcmp+0x28>
 8012886:	f04f 32ff 	mov.w	r2, #4294967295
 801288a:	e7f7      	b.n	801287c <__mcmp+0x28>

0801288c <__mdiff>:
 801288c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012890:	460c      	mov	r4, r1
 8012892:	4606      	mov	r6, r0
 8012894:	4611      	mov	r1, r2
 8012896:	4620      	mov	r0, r4
 8012898:	4617      	mov	r7, r2
 801289a:	f7ff ffdb 	bl	8012854 <__mcmp>
 801289e:	1e05      	subs	r5, r0, #0
 80128a0:	d110      	bne.n	80128c4 <__mdiff+0x38>
 80128a2:	4629      	mov	r1, r5
 80128a4:	4630      	mov	r0, r6
 80128a6:	f7ff fd57 	bl	8012358 <_Balloc>
 80128aa:	b930      	cbnz	r0, 80128ba <__mdiff+0x2e>
 80128ac:	4b39      	ldr	r3, [pc, #228]	; (8012994 <__mdiff+0x108>)
 80128ae:	4602      	mov	r2, r0
 80128b0:	f240 2132 	movw	r1, #562	; 0x232
 80128b4:	4838      	ldr	r0, [pc, #224]	; (8012998 <__mdiff+0x10c>)
 80128b6:	f000 faf3 	bl	8012ea0 <__assert_func>
 80128ba:	2301      	movs	r3, #1
 80128bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80128c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c4:	bfa4      	itt	ge
 80128c6:	463b      	movge	r3, r7
 80128c8:	4627      	movge	r7, r4
 80128ca:	4630      	mov	r0, r6
 80128cc:	6879      	ldr	r1, [r7, #4]
 80128ce:	bfa6      	itte	ge
 80128d0:	461c      	movge	r4, r3
 80128d2:	2500      	movge	r5, #0
 80128d4:	2501      	movlt	r5, #1
 80128d6:	f7ff fd3f 	bl	8012358 <_Balloc>
 80128da:	b920      	cbnz	r0, 80128e6 <__mdiff+0x5a>
 80128dc:	4b2d      	ldr	r3, [pc, #180]	; (8012994 <__mdiff+0x108>)
 80128de:	4602      	mov	r2, r0
 80128e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80128e4:	e7e6      	b.n	80128b4 <__mdiff+0x28>
 80128e6:	693e      	ldr	r6, [r7, #16]
 80128e8:	60c5      	str	r5, [r0, #12]
 80128ea:	6925      	ldr	r5, [r4, #16]
 80128ec:	f107 0114 	add.w	r1, r7, #20
 80128f0:	f104 0914 	add.w	r9, r4, #20
 80128f4:	f100 0e14 	add.w	lr, r0, #20
 80128f8:	f107 0210 	add.w	r2, r7, #16
 80128fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012900:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012904:	46f2      	mov	sl, lr
 8012906:	2700      	movs	r7, #0
 8012908:	f859 3b04 	ldr.w	r3, [r9], #4
 801290c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012910:	fa1f f883 	uxth.w	r8, r3
 8012914:	fa17 f78b 	uxtah	r7, r7, fp
 8012918:	0c1b      	lsrs	r3, r3, #16
 801291a:	eba7 0808 	sub.w	r8, r7, r8
 801291e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012922:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012926:	fa1f f888 	uxth.w	r8, r8
 801292a:	141f      	asrs	r7, r3, #16
 801292c:	454d      	cmp	r5, r9
 801292e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012932:	f84a 3b04 	str.w	r3, [sl], #4
 8012936:	d8e7      	bhi.n	8012908 <__mdiff+0x7c>
 8012938:	1b2b      	subs	r3, r5, r4
 801293a:	3b15      	subs	r3, #21
 801293c:	f023 0303 	bic.w	r3, r3, #3
 8012940:	3304      	adds	r3, #4
 8012942:	3415      	adds	r4, #21
 8012944:	42a5      	cmp	r5, r4
 8012946:	bf38      	it	cc
 8012948:	2304      	movcc	r3, #4
 801294a:	4419      	add	r1, r3
 801294c:	4473      	add	r3, lr
 801294e:	469e      	mov	lr, r3
 8012950:	460d      	mov	r5, r1
 8012952:	4565      	cmp	r5, ip
 8012954:	d30e      	bcc.n	8012974 <__mdiff+0xe8>
 8012956:	f10c 0203 	add.w	r2, ip, #3
 801295a:	1a52      	subs	r2, r2, r1
 801295c:	f022 0203 	bic.w	r2, r2, #3
 8012960:	3903      	subs	r1, #3
 8012962:	458c      	cmp	ip, r1
 8012964:	bf38      	it	cc
 8012966:	2200      	movcc	r2, #0
 8012968:	441a      	add	r2, r3
 801296a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801296e:	b17b      	cbz	r3, 8012990 <__mdiff+0x104>
 8012970:	6106      	str	r6, [r0, #16]
 8012972:	e7a5      	b.n	80128c0 <__mdiff+0x34>
 8012974:	f855 8b04 	ldr.w	r8, [r5], #4
 8012978:	fa17 f488 	uxtah	r4, r7, r8
 801297c:	1422      	asrs	r2, r4, #16
 801297e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012982:	b2a4      	uxth	r4, r4
 8012984:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012988:	f84e 4b04 	str.w	r4, [lr], #4
 801298c:	1417      	asrs	r7, r2, #16
 801298e:	e7e0      	b.n	8012952 <__mdiff+0xc6>
 8012990:	3e01      	subs	r6, #1
 8012992:	e7ea      	b.n	801296a <__mdiff+0xde>
 8012994:	0801fb13 	.word	0x0801fb13
 8012998:	0801fb24 	.word	0x0801fb24

0801299c <__d2b>:
 801299c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129a0:	4689      	mov	r9, r1
 80129a2:	2101      	movs	r1, #1
 80129a4:	ec57 6b10 	vmov	r6, r7, d0
 80129a8:	4690      	mov	r8, r2
 80129aa:	f7ff fcd5 	bl	8012358 <_Balloc>
 80129ae:	4604      	mov	r4, r0
 80129b0:	b930      	cbnz	r0, 80129c0 <__d2b+0x24>
 80129b2:	4602      	mov	r2, r0
 80129b4:	4b25      	ldr	r3, [pc, #148]	; (8012a4c <__d2b+0xb0>)
 80129b6:	4826      	ldr	r0, [pc, #152]	; (8012a50 <__d2b+0xb4>)
 80129b8:	f240 310a 	movw	r1, #778	; 0x30a
 80129bc:	f000 fa70 	bl	8012ea0 <__assert_func>
 80129c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80129c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80129c8:	bb35      	cbnz	r5, 8012a18 <__d2b+0x7c>
 80129ca:	2e00      	cmp	r6, #0
 80129cc:	9301      	str	r3, [sp, #4]
 80129ce:	d028      	beq.n	8012a22 <__d2b+0x86>
 80129d0:	4668      	mov	r0, sp
 80129d2:	9600      	str	r6, [sp, #0]
 80129d4:	f7ff fd8c 	bl	80124f0 <__lo0bits>
 80129d8:	9900      	ldr	r1, [sp, #0]
 80129da:	b300      	cbz	r0, 8012a1e <__d2b+0x82>
 80129dc:	9a01      	ldr	r2, [sp, #4]
 80129de:	f1c0 0320 	rsb	r3, r0, #32
 80129e2:	fa02 f303 	lsl.w	r3, r2, r3
 80129e6:	430b      	orrs	r3, r1
 80129e8:	40c2      	lsrs	r2, r0
 80129ea:	6163      	str	r3, [r4, #20]
 80129ec:	9201      	str	r2, [sp, #4]
 80129ee:	9b01      	ldr	r3, [sp, #4]
 80129f0:	61a3      	str	r3, [r4, #24]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	bf14      	ite	ne
 80129f6:	2202      	movne	r2, #2
 80129f8:	2201      	moveq	r2, #1
 80129fa:	6122      	str	r2, [r4, #16]
 80129fc:	b1d5      	cbz	r5, 8012a34 <__d2b+0x98>
 80129fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012a02:	4405      	add	r5, r0
 8012a04:	f8c9 5000 	str.w	r5, [r9]
 8012a08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a0c:	f8c8 0000 	str.w	r0, [r8]
 8012a10:	4620      	mov	r0, r4
 8012a12:	b003      	add	sp, #12
 8012a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a1c:	e7d5      	b.n	80129ca <__d2b+0x2e>
 8012a1e:	6161      	str	r1, [r4, #20]
 8012a20:	e7e5      	b.n	80129ee <__d2b+0x52>
 8012a22:	a801      	add	r0, sp, #4
 8012a24:	f7ff fd64 	bl	80124f0 <__lo0bits>
 8012a28:	9b01      	ldr	r3, [sp, #4]
 8012a2a:	6163      	str	r3, [r4, #20]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	6122      	str	r2, [r4, #16]
 8012a30:	3020      	adds	r0, #32
 8012a32:	e7e3      	b.n	80129fc <__d2b+0x60>
 8012a34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a3c:	f8c9 0000 	str.w	r0, [r9]
 8012a40:	6918      	ldr	r0, [r3, #16]
 8012a42:	f7ff fd35 	bl	80124b0 <__hi0bits>
 8012a46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a4a:	e7df      	b.n	8012a0c <__d2b+0x70>
 8012a4c:	0801fb13 	.word	0x0801fb13
 8012a50:	0801fb24 	.word	0x0801fb24

08012a54 <_calloc_r>:
 8012a54:	b513      	push	{r0, r1, r4, lr}
 8012a56:	434a      	muls	r2, r1
 8012a58:	4611      	mov	r1, r2
 8012a5a:	9201      	str	r2, [sp, #4]
 8012a5c:	f000 f85a 	bl	8012b14 <_malloc_r>
 8012a60:	4604      	mov	r4, r0
 8012a62:	b118      	cbz	r0, 8012a6c <_calloc_r+0x18>
 8012a64:	9a01      	ldr	r2, [sp, #4]
 8012a66:	2100      	movs	r1, #0
 8012a68:	f7fe f95e 	bl	8010d28 <memset>
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	b002      	add	sp, #8
 8012a70:	bd10      	pop	{r4, pc}
	...

08012a74 <_free_r>:
 8012a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a76:	2900      	cmp	r1, #0
 8012a78:	d048      	beq.n	8012b0c <_free_r+0x98>
 8012a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a7e:	9001      	str	r0, [sp, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f1a1 0404 	sub.w	r4, r1, #4
 8012a86:	bfb8      	it	lt
 8012a88:	18e4      	addlt	r4, r4, r3
 8012a8a:	f000 fa65 	bl	8012f58 <__malloc_lock>
 8012a8e:	4a20      	ldr	r2, [pc, #128]	; (8012b10 <_free_r+0x9c>)
 8012a90:	9801      	ldr	r0, [sp, #4]
 8012a92:	6813      	ldr	r3, [r2, #0]
 8012a94:	4615      	mov	r5, r2
 8012a96:	b933      	cbnz	r3, 8012aa6 <_free_r+0x32>
 8012a98:	6063      	str	r3, [r4, #4]
 8012a9a:	6014      	str	r4, [r2, #0]
 8012a9c:	b003      	add	sp, #12
 8012a9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012aa2:	f000 ba5f 	b.w	8012f64 <__malloc_unlock>
 8012aa6:	42a3      	cmp	r3, r4
 8012aa8:	d90b      	bls.n	8012ac2 <_free_r+0x4e>
 8012aaa:	6821      	ldr	r1, [r4, #0]
 8012aac:	1862      	adds	r2, r4, r1
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	bf04      	itt	eq
 8012ab2:	681a      	ldreq	r2, [r3, #0]
 8012ab4:	685b      	ldreq	r3, [r3, #4]
 8012ab6:	6063      	str	r3, [r4, #4]
 8012ab8:	bf04      	itt	eq
 8012aba:	1852      	addeq	r2, r2, r1
 8012abc:	6022      	streq	r2, [r4, #0]
 8012abe:	602c      	str	r4, [r5, #0]
 8012ac0:	e7ec      	b.n	8012a9c <_free_r+0x28>
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	b10b      	cbz	r3, 8012acc <_free_r+0x58>
 8012ac8:	42a3      	cmp	r3, r4
 8012aca:	d9fa      	bls.n	8012ac2 <_free_r+0x4e>
 8012acc:	6811      	ldr	r1, [r2, #0]
 8012ace:	1855      	adds	r5, r2, r1
 8012ad0:	42a5      	cmp	r5, r4
 8012ad2:	d10b      	bne.n	8012aec <_free_r+0x78>
 8012ad4:	6824      	ldr	r4, [r4, #0]
 8012ad6:	4421      	add	r1, r4
 8012ad8:	1854      	adds	r4, r2, r1
 8012ada:	42a3      	cmp	r3, r4
 8012adc:	6011      	str	r1, [r2, #0]
 8012ade:	d1dd      	bne.n	8012a9c <_free_r+0x28>
 8012ae0:	681c      	ldr	r4, [r3, #0]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	6053      	str	r3, [r2, #4]
 8012ae6:	4421      	add	r1, r4
 8012ae8:	6011      	str	r1, [r2, #0]
 8012aea:	e7d7      	b.n	8012a9c <_free_r+0x28>
 8012aec:	d902      	bls.n	8012af4 <_free_r+0x80>
 8012aee:	230c      	movs	r3, #12
 8012af0:	6003      	str	r3, [r0, #0]
 8012af2:	e7d3      	b.n	8012a9c <_free_r+0x28>
 8012af4:	6825      	ldr	r5, [r4, #0]
 8012af6:	1961      	adds	r1, r4, r5
 8012af8:	428b      	cmp	r3, r1
 8012afa:	bf04      	itt	eq
 8012afc:	6819      	ldreq	r1, [r3, #0]
 8012afe:	685b      	ldreq	r3, [r3, #4]
 8012b00:	6063      	str	r3, [r4, #4]
 8012b02:	bf04      	itt	eq
 8012b04:	1949      	addeq	r1, r1, r5
 8012b06:	6021      	streq	r1, [r4, #0]
 8012b08:	6054      	str	r4, [r2, #4]
 8012b0a:	e7c7      	b.n	8012a9c <_free_r+0x28>
 8012b0c:	b003      	add	sp, #12
 8012b0e:	bd30      	pop	{r4, r5, pc}
 8012b10:	2000c404 	.word	0x2000c404

08012b14 <_malloc_r>:
 8012b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b16:	1ccd      	adds	r5, r1, #3
 8012b18:	f025 0503 	bic.w	r5, r5, #3
 8012b1c:	3508      	adds	r5, #8
 8012b1e:	2d0c      	cmp	r5, #12
 8012b20:	bf38      	it	cc
 8012b22:	250c      	movcc	r5, #12
 8012b24:	2d00      	cmp	r5, #0
 8012b26:	4606      	mov	r6, r0
 8012b28:	db01      	blt.n	8012b2e <_malloc_r+0x1a>
 8012b2a:	42a9      	cmp	r1, r5
 8012b2c:	d903      	bls.n	8012b36 <_malloc_r+0x22>
 8012b2e:	230c      	movs	r3, #12
 8012b30:	6033      	str	r3, [r6, #0]
 8012b32:	2000      	movs	r0, #0
 8012b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b36:	f000 fa0f 	bl	8012f58 <__malloc_lock>
 8012b3a:	4921      	ldr	r1, [pc, #132]	; (8012bc0 <_malloc_r+0xac>)
 8012b3c:	680a      	ldr	r2, [r1, #0]
 8012b3e:	4614      	mov	r4, r2
 8012b40:	b99c      	cbnz	r4, 8012b6a <_malloc_r+0x56>
 8012b42:	4f20      	ldr	r7, [pc, #128]	; (8012bc4 <_malloc_r+0xb0>)
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	b923      	cbnz	r3, 8012b52 <_malloc_r+0x3e>
 8012b48:	4621      	mov	r1, r4
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	f000 f998 	bl	8012e80 <_sbrk_r>
 8012b50:	6038      	str	r0, [r7, #0]
 8012b52:	4629      	mov	r1, r5
 8012b54:	4630      	mov	r0, r6
 8012b56:	f000 f993 	bl	8012e80 <_sbrk_r>
 8012b5a:	1c43      	adds	r3, r0, #1
 8012b5c:	d123      	bne.n	8012ba6 <_malloc_r+0x92>
 8012b5e:	230c      	movs	r3, #12
 8012b60:	6033      	str	r3, [r6, #0]
 8012b62:	4630      	mov	r0, r6
 8012b64:	f000 f9fe 	bl	8012f64 <__malloc_unlock>
 8012b68:	e7e3      	b.n	8012b32 <_malloc_r+0x1e>
 8012b6a:	6823      	ldr	r3, [r4, #0]
 8012b6c:	1b5b      	subs	r3, r3, r5
 8012b6e:	d417      	bmi.n	8012ba0 <_malloc_r+0x8c>
 8012b70:	2b0b      	cmp	r3, #11
 8012b72:	d903      	bls.n	8012b7c <_malloc_r+0x68>
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	441c      	add	r4, r3
 8012b78:	6025      	str	r5, [r4, #0]
 8012b7a:	e004      	b.n	8012b86 <_malloc_r+0x72>
 8012b7c:	6863      	ldr	r3, [r4, #4]
 8012b7e:	42a2      	cmp	r2, r4
 8012b80:	bf0c      	ite	eq
 8012b82:	600b      	streq	r3, [r1, #0]
 8012b84:	6053      	strne	r3, [r2, #4]
 8012b86:	4630      	mov	r0, r6
 8012b88:	f000 f9ec 	bl	8012f64 <__malloc_unlock>
 8012b8c:	f104 000b 	add.w	r0, r4, #11
 8012b90:	1d23      	adds	r3, r4, #4
 8012b92:	f020 0007 	bic.w	r0, r0, #7
 8012b96:	1ac2      	subs	r2, r0, r3
 8012b98:	d0cc      	beq.n	8012b34 <_malloc_r+0x20>
 8012b9a:	1a1b      	subs	r3, r3, r0
 8012b9c:	50a3      	str	r3, [r4, r2]
 8012b9e:	e7c9      	b.n	8012b34 <_malloc_r+0x20>
 8012ba0:	4622      	mov	r2, r4
 8012ba2:	6864      	ldr	r4, [r4, #4]
 8012ba4:	e7cc      	b.n	8012b40 <_malloc_r+0x2c>
 8012ba6:	1cc4      	adds	r4, r0, #3
 8012ba8:	f024 0403 	bic.w	r4, r4, #3
 8012bac:	42a0      	cmp	r0, r4
 8012bae:	d0e3      	beq.n	8012b78 <_malloc_r+0x64>
 8012bb0:	1a21      	subs	r1, r4, r0
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	f000 f964 	bl	8012e80 <_sbrk_r>
 8012bb8:	3001      	adds	r0, #1
 8012bba:	d1dd      	bne.n	8012b78 <_malloc_r+0x64>
 8012bbc:	e7cf      	b.n	8012b5e <_malloc_r+0x4a>
 8012bbe:	bf00      	nop
 8012bc0:	2000c404 	.word	0x2000c404
 8012bc4:	2000c408 	.word	0x2000c408

08012bc8 <__ssputs_r>:
 8012bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bcc:	688e      	ldr	r6, [r1, #8]
 8012bce:	429e      	cmp	r6, r3
 8012bd0:	4682      	mov	sl, r0
 8012bd2:	460c      	mov	r4, r1
 8012bd4:	4690      	mov	r8, r2
 8012bd6:	461f      	mov	r7, r3
 8012bd8:	d838      	bhi.n	8012c4c <__ssputs_r+0x84>
 8012bda:	898a      	ldrh	r2, [r1, #12]
 8012bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012be0:	d032      	beq.n	8012c48 <__ssputs_r+0x80>
 8012be2:	6825      	ldr	r5, [r4, #0]
 8012be4:	6909      	ldr	r1, [r1, #16]
 8012be6:	eba5 0901 	sub.w	r9, r5, r1
 8012bea:	6965      	ldr	r5, [r4, #20]
 8012bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	444b      	add	r3, r9
 8012bf8:	106d      	asrs	r5, r5, #1
 8012bfa:	429d      	cmp	r5, r3
 8012bfc:	bf38      	it	cc
 8012bfe:	461d      	movcc	r5, r3
 8012c00:	0553      	lsls	r3, r2, #21
 8012c02:	d531      	bpl.n	8012c68 <__ssputs_r+0xa0>
 8012c04:	4629      	mov	r1, r5
 8012c06:	f7ff ff85 	bl	8012b14 <_malloc_r>
 8012c0a:	4606      	mov	r6, r0
 8012c0c:	b950      	cbnz	r0, 8012c24 <__ssputs_r+0x5c>
 8012c0e:	230c      	movs	r3, #12
 8012c10:	f8ca 3000 	str.w	r3, [sl]
 8012c14:	89a3      	ldrh	r3, [r4, #12]
 8012c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c1a:	81a3      	strh	r3, [r4, #12]
 8012c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c24:	6921      	ldr	r1, [r4, #16]
 8012c26:	464a      	mov	r2, r9
 8012c28:	f7fe f870 	bl	8010d0c <memcpy>
 8012c2c:	89a3      	ldrh	r3, [r4, #12]
 8012c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c36:	81a3      	strh	r3, [r4, #12]
 8012c38:	6126      	str	r6, [r4, #16]
 8012c3a:	6165      	str	r5, [r4, #20]
 8012c3c:	444e      	add	r6, r9
 8012c3e:	eba5 0509 	sub.w	r5, r5, r9
 8012c42:	6026      	str	r6, [r4, #0]
 8012c44:	60a5      	str	r5, [r4, #8]
 8012c46:	463e      	mov	r6, r7
 8012c48:	42be      	cmp	r6, r7
 8012c4a:	d900      	bls.n	8012c4e <__ssputs_r+0x86>
 8012c4c:	463e      	mov	r6, r7
 8012c4e:	4632      	mov	r2, r6
 8012c50:	6820      	ldr	r0, [r4, #0]
 8012c52:	4641      	mov	r1, r8
 8012c54:	f000 f966 	bl	8012f24 <memmove>
 8012c58:	68a3      	ldr	r3, [r4, #8]
 8012c5a:	6822      	ldr	r2, [r4, #0]
 8012c5c:	1b9b      	subs	r3, r3, r6
 8012c5e:	4432      	add	r2, r6
 8012c60:	60a3      	str	r3, [r4, #8]
 8012c62:	6022      	str	r2, [r4, #0]
 8012c64:	2000      	movs	r0, #0
 8012c66:	e7db      	b.n	8012c20 <__ssputs_r+0x58>
 8012c68:	462a      	mov	r2, r5
 8012c6a:	f000 f981 	bl	8012f70 <_realloc_r>
 8012c6e:	4606      	mov	r6, r0
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d1e1      	bne.n	8012c38 <__ssputs_r+0x70>
 8012c74:	6921      	ldr	r1, [r4, #16]
 8012c76:	4650      	mov	r0, sl
 8012c78:	f7ff fefc 	bl	8012a74 <_free_r>
 8012c7c:	e7c7      	b.n	8012c0e <__ssputs_r+0x46>
	...

08012c80 <_svfiprintf_r>:
 8012c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c84:	4698      	mov	r8, r3
 8012c86:	898b      	ldrh	r3, [r1, #12]
 8012c88:	061b      	lsls	r3, r3, #24
 8012c8a:	b09d      	sub	sp, #116	; 0x74
 8012c8c:	4607      	mov	r7, r0
 8012c8e:	460d      	mov	r5, r1
 8012c90:	4614      	mov	r4, r2
 8012c92:	d50e      	bpl.n	8012cb2 <_svfiprintf_r+0x32>
 8012c94:	690b      	ldr	r3, [r1, #16]
 8012c96:	b963      	cbnz	r3, 8012cb2 <_svfiprintf_r+0x32>
 8012c98:	2140      	movs	r1, #64	; 0x40
 8012c9a:	f7ff ff3b 	bl	8012b14 <_malloc_r>
 8012c9e:	6028      	str	r0, [r5, #0]
 8012ca0:	6128      	str	r0, [r5, #16]
 8012ca2:	b920      	cbnz	r0, 8012cae <_svfiprintf_r+0x2e>
 8012ca4:	230c      	movs	r3, #12
 8012ca6:	603b      	str	r3, [r7, #0]
 8012ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cac:	e0d1      	b.n	8012e52 <_svfiprintf_r+0x1d2>
 8012cae:	2340      	movs	r3, #64	; 0x40
 8012cb0:	616b      	str	r3, [r5, #20]
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb6:	2320      	movs	r3, #32
 8012cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cc0:	2330      	movs	r3, #48	; 0x30
 8012cc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e6c <_svfiprintf_r+0x1ec>
 8012cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cca:	f04f 0901 	mov.w	r9, #1
 8012cce:	4623      	mov	r3, r4
 8012cd0:	469a      	mov	sl, r3
 8012cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd6:	b10a      	cbz	r2, 8012cdc <_svfiprintf_r+0x5c>
 8012cd8:	2a25      	cmp	r2, #37	; 0x25
 8012cda:	d1f9      	bne.n	8012cd0 <_svfiprintf_r+0x50>
 8012cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8012ce0:	d00b      	beq.n	8012cfa <_svfiprintf_r+0x7a>
 8012ce2:	465b      	mov	r3, fp
 8012ce4:	4622      	mov	r2, r4
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	4638      	mov	r0, r7
 8012cea:	f7ff ff6d 	bl	8012bc8 <__ssputs_r>
 8012cee:	3001      	adds	r0, #1
 8012cf0:	f000 80aa 	beq.w	8012e48 <_svfiprintf_r+0x1c8>
 8012cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cf6:	445a      	add	r2, fp
 8012cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8012cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	f000 80a2 	beq.w	8012e48 <_svfiprintf_r+0x1c8>
 8012d04:	2300      	movs	r3, #0
 8012d06:	f04f 32ff 	mov.w	r2, #4294967295
 8012d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d0e:	f10a 0a01 	add.w	sl, sl, #1
 8012d12:	9304      	str	r3, [sp, #16]
 8012d14:	9307      	str	r3, [sp, #28]
 8012d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8012d1c:	4654      	mov	r4, sl
 8012d1e:	2205      	movs	r2, #5
 8012d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d24:	4851      	ldr	r0, [pc, #324]	; (8012e6c <_svfiprintf_r+0x1ec>)
 8012d26:	f7ed facb 	bl	80002c0 <memchr>
 8012d2a:	9a04      	ldr	r2, [sp, #16]
 8012d2c:	b9d8      	cbnz	r0, 8012d66 <_svfiprintf_r+0xe6>
 8012d2e:	06d0      	lsls	r0, r2, #27
 8012d30:	bf44      	itt	mi
 8012d32:	2320      	movmi	r3, #32
 8012d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d38:	0711      	lsls	r1, r2, #28
 8012d3a:	bf44      	itt	mi
 8012d3c:	232b      	movmi	r3, #43	; 0x2b
 8012d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d42:	f89a 3000 	ldrb.w	r3, [sl]
 8012d46:	2b2a      	cmp	r3, #42	; 0x2a
 8012d48:	d015      	beq.n	8012d76 <_svfiprintf_r+0xf6>
 8012d4a:	9a07      	ldr	r2, [sp, #28]
 8012d4c:	4654      	mov	r4, sl
 8012d4e:	2000      	movs	r0, #0
 8012d50:	f04f 0c0a 	mov.w	ip, #10
 8012d54:	4621      	mov	r1, r4
 8012d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d5a:	3b30      	subs	r3, #48	; 0x30
 8012d5c:	2b09      	cmp	r3, #9
 8012d5e:	d94e      	bls.n	8012dfe <_svfiprintf_r+0x17e>
 8012d60:	b1b0      	cbz	r0, 8012d90 <_svfiprintf_r+0x110>
 8012d62:	9207      	str	r2, [sp, #28]
 8012d64:	e014      	b.n	8012d90 <_svfiprintf_r+0x110>
 8012d66:	eba0 0308 	sub.w	r3, r0, r8
 8012d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	9304      	str	r3, [sp, #16]
 8012d72:	46a2      	mov	sl, r4
 8012d74:	e7d2      	b.n	8012d1c <_svfiprintf_r+0x9c>
 8012d76:	9b03      	ldr	r3, [sp, #12]
 8012d78:	1d19      	adds	r1, r3, #4
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	9103      	str	r1, [sp, #12]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	bfbb      	ittet	lt
 8012d82:	425b      	neglt	r3, r3
 8012d84:	f042 0202 	orrlt.w	r2, r2, #2
 8012d88:	9307      	strge	r3, [sp, #28]
 8012d8a:	9307      	strlt	r3, [sp, #28]
 8012d8c:	bfb8      	it	lt
 8012d8e:	9204      	strlt	r2, [sp, #16]
 8012d90:	7823      	ldrb	r3, [r4, #0]
 8012d92:	2b2e      	cmp	r3, #46	; 0x2e
 8012d94:	d10c      	bne.n	8012db0 <_svfiprintf_r+0x130>
 8012d96:	7863      	ldrb	r3, [r4, #1]
 8012d98:	2b2a      	cmp	r3, #42	; 0x2a
 8012d9a:	d135      	bne.n	8012e08 <_svfiprintf_r+0x188>
 8012d9c:	9b03      	ldr	r3, [sp, #12]
 8012d9e:	1d1a      	adds	r2, r3, #4
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	9203      	str	r2, [sp, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	bfb8      	it	lt
 8012da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012dac:	3402      	adds	r4, #2
 8012dae:	9305      	str	r3, [sp, #20]
 8012db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e7c <_svfiprintf_r+0x1fc>
 8012db4:	7821      	ldrb	r1, [r4, #0]
 8012db6:	2203      	movs	r2, #3
 8012db8:	4650      	mov	r0, sl
 8012dba:	f7ed fa81 	bl	80002c0 <memchr>
 8012dbe:	b140      	cbz	r0, 8012dd2 <_svfiprintf_r+0x152>
 8012dc0:	2340      	movs	r3, #64	; 0x40
 8012dc2:	eba0 000a 	sub.w	r0, r0, sl
 8012dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8012dca:	9b04      	ldr	r3, [sp, #16]
 8012dcc:	4303      	orrs	r3, r0
 8012dce:	3401      	adds	r4, #1
 8012dd0:	9304      	str	r3, [sp, #16]
 8012dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd6:	4826      	ldr	r0, [pc, #152]	; (8012e70 <_svfiprintf_r+0x1f0>)
 8012dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ddc:	2206      	movs	r2, #6
 8012dde:	f7ed fa6f 	bl	80002c0 <memchr>
 8012de2:	2800      	cmp	r0, #0
 8012de4:	d038      	beq.n	8012e58 <_svfiprintf_r+0x1d8>
 8012de6:	4b23      	ldr	r3, [pc, #140]	; (8012e74 <_svfiprintf_r+0x1f4>)
 8012de8:	bb1b      	cbnz	r3, 8012e32 <_svfiprintf_r+0x1b2>
 8012dea:	9b03      	ldr	r3, [sp, #12]
 8012dec:	3307      	adds	r3, #7
 8012dee:	f023 0307 	bic.w	r3, r3, #7
 8012df2:	3308      	adds	r3, #8
 8012df4:	9303      	str	r3, [sp, #12]
 8012df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df8:	4433      	add	r3, r6
 8012dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfc:	e767      	b.n	8012cce <_svfiprintf_r+0x4e>
 8012dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e02:	460c      	mov	r4, r1
 8012e04:	2001      	movs	r0, #1
 8012e06:	e7a5      	b.n	8012d54 <_svfiprintf_r+0xd4>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	3401      	adds	r4, #1
 8012e0c:	9305      	str	r3, [sp, #20]
 8012e0e:	4619      	mov	r1, r3
 8012e10:	f04f 0c0a 	mov.w	ip, #10
 8012e14:	4620      	mov	r0, r4
 8012e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e1a:	3a30      	subs	r2, #48	; 0x30
 8012e1c:	2a09      	cmp	r2, #9
 8012e1e:	d903      	bls.n	8012e28 <_svfiprintf_r+0x1a8>
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d0c5      	beq.n	8012db0 <_svfiprintf_r+0x130>
 8012e24:	9105      	str	r1, [sp, #20]
 8012e26:	e7c3      	b.n	8012db0 <_svfiprintf_r+0x130>
 8012e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e7f0      	b.n	8012e14 <_svfiprintf_r+0x194>
 8012e32:	ab03      	add	r3, sp, #12
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	462a      	mov	r2, r5
 8012e38:	4b0f      	ldr	r3, [pc, #60]	; (8012e78 <_svfiprintf_r+0x1f8>)
 8012e3a:	a904      	add	r1, sp, #16
 8012e3c:	4638      	mov	r0, r7
 8012e3e:	f7fe f81b 	bl	8010e78 <_printf_float>
 8012e42:	1c42      	adds	r2, r0, #1
 8012e44:	4606      	mov	r6, r0
 8012e46:	d1d6      	bne.n	8012df6 <_svfiprintf_r+0x176>
 8012e48:	89ab      	ldrh	r3, [r5, #12]
 8012e4a:	065b      	lsls	r3, r3, #25
 8012e4c:	f53f af2c 	bmi.w	8012ca8 <_svfiprintf_r+0x28>
 8012e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e52:	b01d      	add	sp, #116	; 0x74
 8012e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e58:	ab03      	add	r3, sp, #12
 8012e5a:	9300      	str	r3, [sp, #0]
 8012e5c:	462a      	mov	r2, r5
 8012e5e:	4b06      	ldr	r3, [pc, #24]	; (8012e78 <_svfiprintf_r+0x1f8>)
 8012e60:	a904      	add	r1, sp, #16
 8012e62:	4638      	mov	r0, r7
 8012e64:	f7fe faac 	bl	80113c0 <_printf_i>
 8012e68:	e7eb      	b.n	8012e42 <_svfiprintf_r+0x1c2>
 8012e6a:	bf00      	nop
 8012e6c:	0801fc84 	.word	0x0801fc84
 8012e70:	0801fc8e 	.word	0x0801fc8e
 8012e74:	08010e79 	.word	0x08010e79
 8012e78:	08012bc9 	.word	0x08012bc9
 8012e7c:	0801fc8a 	.word	0x0801fc8a

08012e80 <_sbrk_r>:
 8012e80:	b538      	push	{r3, r4, r5, lr}
 8012e82:	4d06      	ldr	r5, [pc, #24]	; (8012e9c <_sbrk_r+0x1c>)
 8012e84:	2300      	movs	r3, #0
 8012e86:	4604      	mov	r4, r0
 8012e88:	4608      	mov	r0, r1
 8012e8a:	602b      	str	r3, [r5, #0]
 8012e8c:	f7ef ff00 	bl	8002c90 <_sbrk>
 8012e90:	1c43      	adds	r3, r0, #1
 8012e92:	d102      	bne.n	8012e9a <_sbrk_r+0x1a>
 8012e94:	682b      	ldr	r3, [r5, #0]
 8012e96:	b103      	cbz	r3, 8012e9a <_sbrk_r+0x1a>
 8012e98:	6023      	str	r3, [r4, #0]
 8012e9a:	bd38      	pop	{r3, r4, r5, pc}
 8012e9c:	2000cb3c 	.word	0x2000cb3c

08012ea0 <__assert_func>:
 8012ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ea2:	4614      	mov	r4, r2
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	4b09      	ldr	r3, [pc, #36]	; (8012ecc <__assert_func+0x2c>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	4605      	mov	r5, r0
 8012eac:	68d8      	ldr	r0, [r3, #12]
 8012eae:	b14c      	cbz	r4, 8012ec4 <__assert_func+0x24>
 8012eb0:	4b07      	ldr	r3, [pc, #28]	; (8012ed0 <__assert_func+0x30>)
 8012eb2:	9100      	str	r1, [sp, #0]
 8012eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012eb8:	4906      	ldr	r1, [pc, #24]	; (8012ed4 <__assert_func+0x34>)
 8012eba:	462b      	mov	r3, r5
 8012ebc:	f000 f80e 	bl	8012edc <fiprintf>
 8012ec0:	f000 faa4 	bl	801340c <abort>
 8012ec4:	4b04      	ldr	r3, [pc, #16]	; (8012ed8 <__assert_func+0x38>)
 8012ec6:	461c      	mov	r4, r3
 8012ec8:	e7f3      	b.n	8012eb2 <__assert_func+0x12>
 8012eca:	bf00      	nop
 8012ecc:	200000dc 	.word	0x200000dc
 8012ed0:	0801fc95 	.word	0x0801fc95
 8012ed4:	0801fca2 	.word	0x0801fca2
 8012ed8:	0801fcd0 	.word	0x0801fcd0

08012edc <fiprintf>:
 8012edc:	b40e      	push	{r1, r2, r3}
 8012ede:	b503      	push	{r0, r1, lr}
 8012ee0:	4601      	mov	r1, r0
 8012ee2:	ab03      	add	r3, sp, #12
 8012ee4:	4805      	ldr	r0, [pc, #20]	; (8012efc <fiprintf+0x20>)
 8012ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eea:	6800      	ldr	r0, [r0, #0]
 8012eec:	9301      	str	r3, [sp, #4]
 8012eee:	f000 f88f 	bl	8013010 <_vfiprintf_r>
 8012ef2:	b002      	add	sp, #8
 8012ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ef8:	b003      	add	sp, #12
 8012efa:	4770      	bx	lr
 8012efc:	200000dc 	.word	0x200000dc

08012f00 <__ascii_mbtowc>:
 8012f00:	b082      	sub	sp, #8
 8012f02:	b901      	cbnz	r1, 8012f06 <__ascii_mbtowc+0x6>
 8012f04:	a901      	add	r1, sp, #4
 8012f06:	b142      	cbz	r2, 8012f1a <__ascii_mbtowc+0x1a>
 8012f08:	b14b      	cbz	r3, 8012f1e <__ascii_mbtowc+0x1e>
 8012f0a:	7813      	ldrb	r3, [r2, #0]
 8012f0c:	600b      	str	r3, [r1, #0]
 8012f0e:	7812      	ldrb	r2, [r2, #0]
 8012f10:	1e10      	subs	r0, r2, #0
 8012f12:	bf18      	it	ne
 8012f14:	2001      	movne	r0, #1
 8012f16:	b002      	add	sp, #8
 8012f18:	4770      	bx	lr
 8012f1a:	4610      	mov	r0, r2
 8012f1c:	e7fb      	b.n	8012f16 <__ascii_mbtowc+0x16>
 8012f1e:	f06f 0001 	mvn.w	r0, #1
 8012f22:	e7f8      	b.n	8012f16 <__ascii_mbtowc+0x16>

08012f24 <memmove>:
 8012f24:	4288      	cmp	r0, r1
 8012f26:	b510      	push	{r4, lr}
 8012f28:	eb01 0402 	add.w	r4, r1, r2
 8012f2c:	d902      	bls.n	8012f34 <memmove+0x10>
 8012f2e:	4284      	cmp	r4, r0
 8012f30:	4623      	mov	r3, r4
 8012f32:	d807      	bhi.n	8012f44 <memmove+0x20>
 8012f34:	1e43      	subs	r3, r0, #1
 8012f36:	42a1      	cmp	r1, r4
 8012f38:	d008      	beq.n	8012f4c <memmove+0x28>
 8012f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f42:	e7f8      	b.n	8012f36 <memmove+0x12>
 8012f44:	4402      	add	r2, r0
 8012f46:	4601      	mov	r1, r0
 8012f48:	428a      	cmp	r2, r1
 8012f4a:	d100      	bne.n	8012f4e <memmove+0x2a>
 8012f4c:	bd10      	pop	{r4, pc}
 8012f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f56:	e7f7      	b.n	8012f48 <memmove+0x24>

08012f58 <__malloc_lock>:
 8012f58:	4801      	ldr	r0, [pc, #4]	; (8012f60 <__malloc_lock+0x8>)
 8012f5a:	f000 bc17 	b.w	801378c <__retarget_lock_acquire_recursive>
 8012f5e:	bf00      	nop
 8012f60:	2000cb44 	.word	0x2000cb44

08012f64 <__malloc_unlock>:
 8012f64:	4801      	ldr	r0, [pc, #4]	; (8012f6c <__malloc_unlock+0x8>)
 8012f66:	f000 bc12 	b.w	801378e <__retarget_lock_release_recursive>
 8012f6a:	bf00      	nop
 8012f6c:	2000cb44 	.word	0x2000cb44

08012f70 <_realloc_r>:
 8012f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f72:	4607      	mov	r7, r0
 8012f74:	4614      	mov	r4, r2
 8012f76:	460e      	mov	r6, r1
 8012f78:	b921      	cbnz	r1, 8012f84 <_realloc_r+0x14>
 8012f7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f7e:	4611      	mov	r1, r2
 8012f80:	f7ff bdc8 	b.w	8012b14 <_malloc_r>
 8012f84:	b922      	cbnz	r2, 8012f90 <_realloc_r+0x20>
 8012f86:	f7ff fd75 	bl	8012a74 <_free_r>
 8012f8a:	4625      	mov	r5, r4
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f90:	f000 fc62 	bl	8013858 <_malloc_usable_size_r>
 8012f94:	42a0      	cmp	r0, r4
 8012f96:	d20f      	bcs.n	8012fb8 <_realloc_r+0x48>
 8012f98:	4621      	mov	r1, r4
 8012f9a:	4638      	mov	r0, r7
 8012f9c:	f7ff fdba 	bl	8012b14 <_malloc_r>
 8012fa0:	4605      	mov	r5, r0
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	d0f2      	beq.n	8012f8c <_realloc_r+0x1c>
 8012fa6:	4631      	mov	r1, r6
 8012fa8:	4622      	mov	r2, r4
 8012faa:	f7fd feaf 	bl	8010d0c <memcpy>
 8012fae:	4631      	mov	r1, r6
 8012fb0:	4638      	mov	r0, r7
 8012fb2:	f7ff fd5f 	bl	8012a74 <_free_r>
 8012fb6:	e7e9      	b.n	8012f8c <_realloc_r+0x1c>
 8012fb8:	4635      	mov	r5, r6
 8012fba:	e7e7      	b.n	8012f8c <_realloc_r+0x1c>

08012fbc <__sfputc_r>:
 8012fbc:	6893      	ldr	r3, [r2, #8]
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	b410      	push	{r4}
 8012fc4:	6093      	str	r3, [r2, #8]
 8012fc6:	da08      	bge.n	8012fda <__sfputc_r+0x1e>
 8012fc8:	6994      	ldr	r4, [r2, #24]
 8012fca:	42a3      	cmp	r3, r4
 8012fcc:	db01      	blt.n	8012fd2 <__sfputc_r+0x16>
 8012fce:	290a      	cmp	r1, #10
 8012fd0:	d103      	bne.n	8012fda <__sfputc_r+0x1e>
 8012fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fd6:	f000 b94b 	b.w	8013270 <__swbuf_r>
 8012fda:	6813      	ldr	r3, [r2, #0]
 8012fdc:	1c58      	adds	r0, r3, #1
 8012fde:	6010      	str	r0, [r2, #0]
 8012fe0:	7019      	strb	r1, [r3, #0]
 8012fe2:	4608      	mov	r0, r1
 8012fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fe8:	4770      	bx	lr

08012fea <__sfputs_r>:
 8012fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fec:	4606      	mov	r6, r0
 8012fee:	460f      	mov	r7, r1
 8012ff0:	4614      	mov	r4, r2
 8012ff2:	18d5      	adds	r5, r2, r3
 8012ff4:	42ac      	cmp	r4, r5
 8012ff6:	d101      	bne.n	8012ffc <__sfputs_r+0x12>
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	e007      	b.n	801300c <__sfputs_r+0x22>
 8012ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013000:	463a      	mov	r2, r7
 8013002:	4630      	mov	r0, r6
 8013004:	f7ff ffda 	bl	8012fbc <__sfputc_r>
 8013008:	1c43      	adds	r3, r0, #1
 801300a:	d1f3      	bne.n	8012ff4 <__sfputs_r+0xa>
 801300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013010 <_vfiprintf_r>:
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	460d      	mov	r5, r1
 8013016:	b09d      	sub	sp, #116	; 0x74
 8013018:	4614      	mov	r4, r2
 801301a:	4698      	mov	r8, r3
 801301c:	4606      	mov	r6, r0
 801301e:	b118      	cbz	r0, 8013028 <_vfiprintf_r+0x18>
 8013020:	6983      	ldr	r3, [r0, #24]
 8013022:	b90b      	cbnz	r3, 8013028 <_vfiprintf_r+0x18>
 8013024:	f000 fb14 	bl	8013650 <__sinit>
 8013028:	4b89      	ldr	r3, [pc, #548]	; (8013250 <_vfiprintf_r+0x240>)
 801302a:	429d      	cmp	r5, r3
 801302c:	d11b      	bne.n	8013066 <_vfiprintf_r+0x56>
 801302e:	6875      	ldr	r5, [r6, #4]
 8013030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013032:	07d9      	lsls	r1, r3, #31
 8013034:	d405      	bmi.n	8013042 <_vfiprintf_r+0x32>
 8013036:	89ab      	ldrh	r3, [r5, #12]
 8013038:	059a      	lsls	r2, r3, #22
 801303a:	d402      	bmi.n	8013042 <_vfiprintf_r+0x32>
 801303c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801303e:	f000 fba5 	bl	801378c <__retarget_lock_acquire_recursive>
 8013042:	89ab      	ldrh	r3, [r5, #12]
 8013044:	071b      	lsls	r3, r3, #28
 8013046:	d501      	bpl.n	801304c <_vfiprintf_r+0x3c>
 8013048:	692b      	ldr	r3, [r5, #16]
 801304a:	b9eb      	cbnz	r3, 8013088 <_vfiprintf_r+0x78>
 801304c:	4629      	mov	r1, r5
 801304e:	4630      	mov	r0, r6
 8013050:	f000 f96e 	bl	8013330 <__swsetup_r>
 8013054:	b1c0      	cbz	r0, 8013088 <_vfiprintf_r+0x78>
 8013056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013058:	07dc      	lsls	r4, r3, #31
 801305a:	d50e      	bpl.n	801307a <_vfiprintf_r+0x6a>
 801305c:	f04f 30ff 	mov.w	r0, #4294967295
 8013060:	b01d      	add	sp, #116	; 0x74
 8013062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013066:	4b7b      	ldr	r3, [pc, #492]	; (8013254 <_vfiprintf_r+0x244>)
 8013068:	429d      	cmp	r5, r3
 801306a:	d101      	bne.n	8013070 <_vfiprintf_r+0x60>
 801306c:	68b5      	ldr	r5, [r6, #8]
 801306e:	e7df      	b.n	8013030 <_vfiprintf_r+0x20>
 8013070:	4b79      	ldr	r3, [pc, #484]	; (8013258 <_vfiprintf_r+0x248>)
 8013072:	429d      	cmp	r5, r3
 8013074:	bf08      	it	eq
 8013076:	68f5      	ldreq	r5, [r6, #12]
 8013078:	e7da      	b.n	8013030 <_vfiprintf_r+0x20>
 801307a:	89ab      	ldrh	r3, [r5, #12]
 801307c:	0598      	lsls	r0, r3, #22
 801307e:	d4ed      	bmi.n	801305c <_vfiprintf_r+0x4c>
 8013080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013082:	f000 fb84 	bl	801378e <__retarget_lock_release_recursive>
 8013086:	e7e9      	b.n	801305c <_vfiprintf_r+0x4c>
 8013088:	2300      	movs	r3, #0
 801308a:	9309      	str	r3, [sp, #36]	; 0x24
 801308c:	2320      	movs	r3, #32
 801308e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013092:	f8cd 800c 	str.w	r8, [sp, #12]
 8013096:	2330      	movs	r3, #48	; 0x30
 8013098:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801325c <_vfiprintf_r+0x24c>
 801309c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130a0:	f04f 0901 	mov.w	r9, #1
 80130a4:	4623      	mov	r3, r4
 80130a6:	469a      	mov	sl, r3
 80130a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130ac:	b10a      	cbz	r2, 80130b2 <_vfiprintf_r+0xa2>
 80130ae:	2a25      	cmp	r2, #37	; 0x25
 80130b0:	d1f9      	bne.n	80130a6 <_vfiprintf_r+0x96>
 80130b2:	ebba 0b04 	subs.w	fp, sl, r4
 80130b6:	d00b      	beq.n	80130d0 <_vfiprintf_r+0xc0>
 80130b8:	465b      	mov	r3, fp
 80130ba:	4622      	mov	r2, r4
 80130bc:	4629      	mov	r1, r5
 80130be:	4630      	mov	r0, r6
 80130c0:	f7ff ff93 	bl	8012fea <__sfputs_r>
 80130c4:	3001      	adds	r0, #1
 80130c6:	f000 80aa 	beq.w	801321e <_vfiprintf_r+0x20e>
 80130ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130cc:	445a      	add	r2, fp
 80130ce:	9209      	str	r2, [sp, #36]	; 0x24
 80130d0:	f89a 3000 	ldrb.w	r3, [sl]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	f000 80a2 	beq.w	801321e <_vfiprintf_r+0x20e>
 80130da:	2300      	movs	r3, #0
 80130dc:	f04f 32ff 	mov.w	r2, #4294967295
 80130e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130e4:	f10a 0a01 	add.w	sl, sl, #1
 80130e8:	9304      	str	r3, [sp, #16]
 80130ea:	9307      	str	r3, [sp, #28]
 80130ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130f0:	931a      	str	r3, [sp, #104]	; 0x68
 80130f2:	4654      	mov	r4, sl
 80130f4:	2205      	movs	r2, #5
 80130f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130fa:	4858      	ldr	r0, [pc, #352]	; (801325c <_vfiprintf_r+0x24c>)
 80130fc:	f7ed f8e0 	bl	80002c0 <memchr>
 8013100:	9a04      	ldr	r2, [sp, #16]
 8013102:	b9d8      	cbnz	r0, 801313c <_vfiprintf_r+0x12c>
 8013104:	06d1      	lsls	r1, r2, #27
 8013106:	bf44      	itt	mi
 8013108:	2320      	movmi	r3, #32
 801310a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801310e:	0713      	lsls	r3, r2, #28
 8013110:	bf44      	itt	mi
 8013112:	232b      	movmi	r3, #43	; 0x2b
 8013114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013118:	f89a 3000 	ldrb.w	r3, [sl]
 801311c:	2b2a      	cmp	r3, #42	; 0x2a
 801311e:	d015      	beq.n	801314c <_vfiprintf_r+0x13c>
 8013120:	9a07      	ldr	r2, [sp, #28]
 8013122:	4654      	mov	r4, sl
 8013124:	2000      	movs	r0, #0
 8013126:	f04f 0c0a 	mov.w	ip, #10
 801312a:	4621      	mov	r1, r4
 801312c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013130:	3b30      	subs	r3, #48	; 0x30
 8013132:	2b09      	cmp	r3, #9
 8013134:	d94e      	bls.n	80131d4 <_vfiprintf_r+0x1c4>
 8013136:	b1b0      	cbz	r0, 8013166 <_vfiprintf_r+0x156>
 8013138:	9207      	str	r2, [sp, #28]
 801313a:	e014      	b.n	8013166 <_vfiprintf_r+0x156>
 801313c:	eba0 0308 	sub.w	r3, r0, r8
 8013140:	fa09 f303 	lsl.w	r3, r9, r3
 8013144:	4313      	orrs	r3, r2
 8013146:	9304      	str	r3, [sp, #16]
 8013148:	46a2      	mov	sl, r4
 801314a:	e7d2      	b.n	80130f2 <_vfiprintf_r+0xe2>
 801314c:	9b03      	ldr	r3, [sp, #12]
 801314e:	1d19      	adds	r1, r3, #4
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	9103      	str	r1, [sp, #12]
 8013154:	2b00      	cmp	r3, #0
 8013156:	bfbb      	ittet	lt
 8013158:	425b      	neglt	r3, r3
 801315a:	f042 0202 	orrlt.w	r2, r2, #2
 801315e:	9307      	strge	r3, [sp, #28]
 8013160:	9307      	strlt	r3, [sp, #28]
 8013162:	bfb8      	it	lt
 8013164:	9204      	strlt	r2, [sp, #16]
 8013166:	7823      	ldrb	r3, [r4, #0]
 8013168:	2b2e      	cmp	r3, #46	; 0x2e
 801316a:	d10c      	bne.n	8013186 <_vfiprintf_r+0x176>
 801316c:	7863      	ldrb	r3, [r4, #1]
 801316e:	2b2a      	cmp	r3, #42	; 0x2a
 8013170:	d135      	bne.n	80131de <_vfiprintf_r+0x1ce>
 8013172:	9b03      	ldr	r3, [sp, #12]
 8013174:	1d1a      	adds	r2, r3, #4
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	9203      	str	r2, [sp, #12]
 801317a:	2b00      	cmp	r3, #0
 801317c:	bfb8      	it	lt
 801317e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013182:	3402      	adds	r4, #2
 8013184:	9305      	str	r3, [sp, #20]
 8013186:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801326c <_vfiprintf_r+0x25c>
 801318a:	7821      	ldrb	r1, [r4, #0]
 801318c:	2203      	movs	r2, #3
 801318e:	4650      	mov	r0, sl
 8013190:	f7ed f896 	bl	80002c0 <memchr>
 8013194:	b140      	cbz	r0, 80131a8 <_vfiprintf_r+0x198>
 8013196:	2340      	movs	r3, #64	; 0x40
 8013198:	eba0 000a 	sub.w	r0, r0, sl
 801319c:	fa03 f000 	lsl.w	r0, r3, r0
 80131a0:	9b04      	ldr	r3, [sp, #16]
 80131a2:	4303      	orrs	r3, r0
 80131a4:	3401      	adds	r4, #1
 80131a6:	9304      	str	r3, [sp, #16]
 80131a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ac:	482c      	ldr	r0, [pc, #176]	; (8013260 <_vfiprintf_r+0x250>)
 80131ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131b2:	2206      	movs	r2, #6
 80131b4:	f7ed f884 	bl	80002c0 <memchr>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d03f      	beq.n	801323c <_vfiprintf_r+0x22c>
 80131bc:	4b29      	ldr	r3, [pc, #164]	; (8013264 <_vfiprintf_r+0x254>)
 80131be:	bb1b      	cbnz	r3, 8013208 <_vfiprintf_r+0x1f8>
 80131c0:	9b03      	ldr	r3, [sp, #12]
 80131c2:	3307      	adds	r3, #7
 80131c4:	f023 0307 	bic.w	r3, r3, #7
 80131c8:	3308      	adds	r3, #8
 80131ca:	9303      	str	r3, [sp, #12]
 80131cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ce:	443b      	add	r3, r7
 80131d0:	9309      	str	r3, [sp, #36]	; 0x24
 80131d2:	e767      	b.n	80130a4 <_vfiprintf_r+0x94>
 80131d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80131d8:	460c      	mov	r4, r1
 80131da:	2001      	movs	r0, #1
 80131dc:	e7a5      	b.n	801312a <_vfiprintf_r+0x11a>
 80131de:	2300      	movs	r3, #0
 80131e0:	3401      	adds	r4, #1
 80131e2:	9305      	str	r3, [sp, #20]
 80131e4:	4619      	mov	r1, r3
 80131e6:	f04f 0c0a 	mov.w	ip, #10
 80131ea:	4620      	mov	r0, r4
 80131ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131f0:	3a30      	subs	r2, #48	; 0x30
 80131f2:	2a09      	cmp	r2, #9
 80131f4:	d903      	bls.n	80131fe <_vfiprintf_r+0x1ee>
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d0c5      	beq.n	8013186 <_vfiprintf_r+0x176>
 80131fa:	9105      	str	r1, [sp, #20]
 80131fc:	e7c3      	b.n	8013186 <_vfiprintf_r+0x176>
 80131fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013202:	4604      	mov	r4, r0
 8013204:	2301      	movs	r3, #1
 8013206:	e7f0      	b.n	80131ea <_vfiprintf_r+0x1da>
 8013208:	ab03      	add	r3, sp, #12
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	462a      	mov	r2, r5
 801320e:	4b16      	ldr	r3, [pc, #88]	; (8013268 <_vfiprintf_r+0x258>)
 8013210:	a904      	add	r1, sp, #16
 8013212:	4630      	mov	r0, r6
 8013214:	f7fd fe30 	bl	8010e78 <_printf_float>
 8013218:	4607      	mov	r7, r0
 801321a:	1c78      	adds	r0, r7, #1
 801321c:	d1d6      	bne.n	80131cc <_vfiprintf_r+0x1bc>
 801321e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013220:	07d9      	lsls	r1, r3, #31
 8013222:	d405      	bmi.n	8013230 <_vfiprintf_r+0x220>
 8013224:	89ab      	ldrh	r3, [r5, #12]
 8013226:	059a      	lsls	r2, r3, #22
 8013228:	d402      	bmi.n	8013230 <_vfiprintf_r+0x220>
 801322a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801322c:	f000 faaf 	bl	801378e <__retarget_lock_release_recursive>
 8013230:	89ab      	ldrh	r3, [r5, #12]
 8013232:	065b      	lsls	r3, r3, #25
 8013234:	f53f af12 	bmi.w	801305c <_vfiprintf_r+0x4c>
 8013238:	9809      	ldr	r0, [sp, #36]	; 0x24
 801323a:	e711      	b.n	8013060 <_vfiprintf_r+0x50>
 801323c:	ab03      	add	r3, sp, #12
 801323e:	9300      	str	r3, [sp, #0]
 8013240:	462a      	mov	r2, r5
 8013242:	4b09      	ldr	r3, [pc, #36]	; (8013268 <_vfiprintf_r+0x258>)
 8013244:	a904      	add	r1, sp, #16
 8013246:	4630      	mov	r0, r6
 8013248:	f7fe f8ba 	bl	80113c0 <_printf_i>
 801324c:	e7e4      	b.n	8013218 <_vfiprintf_r+0x208>
 801324e:	bf00      	nop
 8013250:	0801fdfc 	.word	0x0801fdfc
 8013254:	0801fe1c 	.word	0x0801fe1c
 8013258:	0801fddc 	.word	0x0801fddc
 801325c:	0801fc84 	.word	0x0801fc84
 8013260:	0801fc8e 	.word	0x0801fc8e
 8013264:	08010e79 	.word	0x08010e79
 8013268:	08012feb 	.word	0x08012feb
 801326c:	0801fc8a 	.word	0x0801fc8a

08013270 <__swbuf_r>:
 8013270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013272:	460e      	mov	r6, r1
 8013274:	4614      	mov	r4, r2
 8013276:	4605      	mov	r5, r0
 8013278:	b118      	cbz	r0, 8013282 <__swbuf_r+0x12>
 801327a:	6983      	ldr	r3, [r0, #24]
 801327c:	b90b      	cbnz	r3, 8013282 <__swbuf_r+0x12>
 801327e:	f000 f9e7 	bl	8013650 <__sinit>
 8013282:	4b21      	ldr	r3, [pc, #132]	; (8013308 <__swbuf_r+0x98>)
 8013284:	429c      	cmp	r4, r3
 8013286:	d12b      	bne.n	80132e0 <__swbuf_r+0x70>
 8013288:	686c      	ldr	r4, [r5, #4]
 801328a:	69a3      	ldr	r3, [r4, #24]
 801328c:	60a3      	str	r3, [r4, #8]
 801328e:	89a3      	ldrh	r3, [r4, #12]
 8013290:	071a      	lsls	r2, r3, #28
 8013292:	d52f      	bpl.n	80132f4 <__swbuf_r+0x84>
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	b36b      	cbz	r3, 80132f4 <__swbuf_r+0x84>
 8013298:	6923      	ldr	r3, [r4, #16]
 801329a:	6820      	ldr	r0, [r4, #0]
 801329c:	1ac0      	subs	r0, r0, r3
 801329e:	6963      	ldr	r3, [r4, #20]
 80132a0:	b2f6      	uxtb	r6, r6
 80132a2:	4283      	cmp	r3, r0
 80132a4:	4637      	mov	r7, r6
 80132a6:	dc04      	bgt.n	80132b2 <__swbuf_r+0x42>
 80132a8:	4621      	mov	r1, r4
 80132aa:	4628      	mov	r0, r5
 80132ac:	f000 f93c 	bl	8013528 <_fflush_r>
 80132b0:	bb30      	cbnz	r0, 8013300 <__swbuf_r+0x90>
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	60a3      	str	r3, [r4, #8]
 80132b8:	6823      	ldr	r3, [r4, #0]
 80132ba:	1c5a      	adds	r2, r3, #1
 80132bc:	6022      	str	r2, [r4, #0]
 80132be:	701e      	strb	r6, [r3, #0]
 80132c0:	6963      	ldr	r3, [r4, #20]
 80132c2:	3001      	adds	r0, #1
 80132c4:	4283      	cmp	r3, r0
 80132c6:	d004      	beq.n	80132d2 <__swbuf_r+0x62>
 80132c8:	89a3      	ldrh	r3, [r4, #12]
 80132ca:	07db      	lsls	r3, r3, #31
 80132cc:	d506      	bpl.n	80132dc <__swbuf_r+0x6c>
 80132ce:	2e0a      	cmp	r6, #10
 80132d0:	d104      	bne.n	80132dc <__swbuf_r+0x6c>
 80132d2:	4621      	mov	r1, r4
 80132d4:	4628      	mov	r0, r5
 80132d6:	f000 f927 	bl	8013528 <_fflush_r>
 80132da:	b988      	cbnz	r0, 8013300 <__swbuf_r+0x90>
 80132dc:	4638      	mov	r0, r7
 80132de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132e0:	4b0a      	ldr	r3, [pc, #40]	; (801330c <__swbuf_r+0x9c>)
 80132e2:	429c      	cmp	r4, r3
 80132e4:	d101      	bne.n	80132ea <__swbuf_r+0x7a>
 80132e6:	68ac      	ldr	r4, [r5, #8]
 80132e8:	e7cf      	b.n	801328a <__swbuf_r+0x1a>
 80132ea:	4b09      	ldr	r3, [pc, #36]	; (8013310 <__swbuf_r+0xa0>)
 80132ec:	429c      	cmp	r4, r3
 80132ee:	bf08      	it	eq
 80132f0:	68ec      	ldreq	r4, [r5, #12]
 80132f2:	e7ca      	b.n	801328a <__swbuf_r+0x1a>
 80132f4:	4621      	mov	r1, r4
 80132f6:	4628      	mov	r0, r5
 80132f8:	f000 f81a 	bl	8013330 <__swsetup_r>
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d0cb      	beq.n	8013298 <__swbuf_r+0x28>
 8013300:	f04f 37ff 	mov.w	r7, #4294967295
 8013304:	e7ea      	b.n	80132dc <__swbuf_r+0x6c>
 8013306:	bf00      	nop
 8013308:	0801fdfc 	.word	0x0801fdfc
 801330c:	0801fe1c 	.word	0x0801fe1c
 8013310:	0801fddc 	.word	0x0801fddc

08013314 <__ascii_wctomb>:
 8013314:	b149      	cbz	r1, 801332a <__ascii_wctomb+0x16>
 8013316:	2aff      	cmp	r2, #255	; 0xff
 8013318:	bf85      	ittet	hi
 801331a:	238a      	movhi	r3, #138	; 0x8a
 801331c:	6003      	strhi	r3, [r0, #0]
 801331e:	700a      	strbls	r2, [r1, #0]
 8013320:	f04f 30ff 	movhi.w	r0, #4294967295
 8013324:	bf98      	it	ls
 8013326:	2001      	movls	r0, #1
 8013328:	4770      	bx	lr
 801332a:	4608      	mov	r0, r1
 801332c:	4770      	bx	lr
	...

08013330 <__swsetup_r>:
 8013330:	4b32      	ldr	r3, [pc, #200]	; (80133fc <__swsetup_r+0xcc>)
 8013332:	b570      	push	{r4, r5, r6, lr}
 8013334:	681d      	ldr	r5, [r3, #0]
 8013336:	4606      	mov	r6, r0
 8013338:	460c      	mov	r4, r1
 801333a:	b125      	cbz	r5, 8013346 <__swsetup_r+0x16>
 801333c:	69ab      	ldr	r3, [r5, #24]
 801333e:	b913      	cbnz	r3, 8013346 <__swsetup_r+0x16>
 8013340:	4628      	mov	r0, r5
 8013342:	f000 f985 	bl	8013650 <__sinit>
 8013346:	4b2e      	ldr	r3, [pc, #184]	; (8013400 <__swsetup_r+0xd0>)
 8013348:	429c      	cmp	r4, r3
 801334a:	d10f      	bne.n	801336c <__swsetup_r+0x3c>
 801334c:	686c      	ldr	r4, [r5, #4]
 801334e:	89a3      	ldrh	r3, [r4, #12]
 8013350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013354:	0719      	lsls	r1, r3, #28
 8013356:	d42c      	bmi.n	80133b2 <__swsetup_r+0x82>
 8013358:	06dd      	lsls	r5, r3, #27
 801335a:	d411      	bmi.n	8013380 <__swsetup_r+0x50>
 801335c:	2309      	movs	r3, #9
 801335e:	6033      	str	r3, [r6, #0]
 8013360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013364:	81a3      	strh	r3, [r4, #12]
 8013366:	f04f 30ff 	mov.w	r0, #4294967295
 801336a:	e03e      	b.n	80133ea <__swsetup_r+0xba>
 801336c:	4b25      	ldr	r3, [pc, #148]	; (8013404 <__swsetup_r+0xd4>)
 801336e:	429c      	cmp	r4, r3
 8013370:	d101      	bne.n	8013376 <__swsetup_r+0x46>
 8013372:	68ac      	ldr	r4, [r5, #8]
 8013374:	e7eb      	b.n	801334e <__swsetup_r+0x1e>
 8013376:	4b24      	ldr	r3, [pc, #144]	; (8013408 <__swsetup_r+0xd8>)
 8013378:	429c      	cmp	r4, r3
 801337a:	bf08      	it	eq
 801337c:	68ec      	ldreq	r4, [r5, #12]
 801337e:	e7e6      	b.n	801334e <__swsetup_r+0x1e>
 8013380:	0758      	lsls	r0, r3, #29
 8013382:	d512      	bpl.n	80133aa <__swsetup_r+0x7a>
 8013384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013386:	b141      	cbz	r1, 801339a <__swsetup_r+0x6a>
 8013388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801338c:	4299      	cmp	r1, r3
 801338e:	d002      	beq.n	8013396 <__swsetup_r+0x66>
 8013390:	4630      	mov	r0, r6
 8013392:	f7ff fb6f 	bl	8012a74 <_free_r>
 8013396:	2300      	movs	r3, #0
 8013398:	6363      	str	r3, [r4, #52]	; 0x34
 801339a:	89a3      	ldrh	r3, [r4, #12]
 801339c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133a0:	81a3      	strh	r3, [r4, #12]
 80133a2:	2300      	movs	r3, #0
 80133a4:	6063      	str	r3, [r4, #4]
 80133a6:	6923      	ldr	r3, [r4, #16]
 80133a8:	6023      	str	r3, [r4, #0]
 80133aa:	89a3      	ldrh	r3, [r4, #12]
 80133ac:	f043 0308 	orr.w	r3, r3, #8
 80133b0:	81a3      	strh	r3, [r4, #12]
 80133b2:	6923      	ldr	r3, [r4, #16]
 80133b4:	b94b      	cbnz	r3, 80133ca <__swsetup_r+0x9a>
 80133b6:	89a3      	ldrh	r3, [r4, #12]
 80133b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133c0:	d003      	beq.n	80133ca <__swsetup_r+0x9a>
 80133c2:	4621      	mov	r1, r4
 80133c4:	4630      	mov	r0, r6
 80133c6:	f000 fa07 	bl	80137d8 <__smakebuf_r>
 80133ca:	89a0      	ldrh	r0, [r4, #12]
 80133cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133d0:	f010 0301 	ands.w	r3, r0, #1
 80133d4:	d00a      	beq.n	80133ec <__swsetup_r+0xbc>
 80133d6:	2300      	movs	r3, #0
 80133d8:	60a3      	str	r3, [r4, #8]
 80133da:	6963      	ldr	r3, [r4, #20]
 80133dc:	425b      	negs	r3, r3
 80133de:	61a3      	str	r3, [r4, #24]
 80133e0:	6923      	ldr	r3, [r4, #16]
 80133e2:	b943      	cbnz	r3, 80133f6 <__swsetup_r+0xc6>
 80133e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133e8:	d1ba      	bne.n	8013360 <__swsetup_r+0x30>
 80133ea:	bd70      	pop	{r4, r5, r6, pc}
 80133ec:	0781      	lsls	r1, r0, #30
 80133ee:	bf58      	it	pl
 80133f0:	6963      	ldrpl	r3, [r4, #20]
 80133f2:	60a3      	str	r3, [r4, #8]
 80133f4:	e7f4      	b.n	80133e0 <__swsetup_r+0xb0>
 80133f6:	2000      	movs	r0, #0
 80133f8:	e7f7      	b.n	80133ea <__swsetup_r+0xba>
 80133fa:	bf00      	nop
 80133fc:	200000dc 	.word	0x200000dc
 8013400:	0801fdfc 	.word	0x0801fdfc
 8013404:	0801fe1c 	.word	0x0801fe1c
 8013408:	0801fddc 	.word	0x0801fddc

0801340c <abort>:
 801340c:	b508      	push	{r3, lr}
 801340e:	2006      	movs	r0, #6
 8013410:	f000 fa52 	bl	80138b8 <raise>
 8013414:	2001      	movs	r0, #1
 8013416:	f7ef fbc3 	bl	8002ba0 <_exit>
	...

0801341c <__sflush_r>:
 801341c:	898a      	ldrh	r2, [r1, #12]
 801341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013422:	4605      	mov	r5, r0
 8013424:	0710      	lsls	r0, r2, #28
 8013426:	460c      	mov	r4, r1
 8013428:	d458      	bmi.n	80134dc <__sflush_r+0xc0>
 801342a:	684b      	ldr	r3, [r1, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	dc05      	bgt.n	801343c <__sflush_r+0x20>
 8013430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013432:	2b00      	cmp	r3, #0
 8013434:	dc02      	bgt.n	801343c <__sflush_r+0x20>
 8013436:	2000      	movs	r0, #0
 8013438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801343c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801343e:	2e00      	cmp	r6, #0
 8013440:	d0f9      	beq.n	8013436 <__sflush_r+0x1a>
 8013442:	2300      	movs	r3, #0
 8013444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013448:	682f      	ldr	r7, [r5, #0]
 801344a:	602b      	str	r3, [r5, #0]
 801344c:	d032      	beq.n	80134b4 <__sflush_r+0x98>
 801344e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013450:	89a3      	ldrh	r3, [r4, #12]
 8013452:	075a      	lsls	r2, r3, #29
 8013454:	d505      	bpl.n	8013462 <__sflush_r+0x46>
 8013456:	6863      	ldr	r3, [r4, #4]
 8013458:	1ac0      	subs	r0, r0, r3
 801345a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801345c:	b10b      	cbz	r3, 8013462 <__sflush_r+0x46>
 801345e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013460:	1ac0      	subs	r0, r0, r3
 8013462:	2300      	movs	r3, #0
 8013464:	4602      	mov	r2, r0
 8013466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013468:	6a21      	ldr	r1, [r4, #32]
 801346a:	4628      	mov	r0, r5
 801346c:	47b0      	blx	r6
 801346e:	1c43      	adds	r3, r0, #1
 8013470:	89a3      	ldrh	r3, [r4, #12]
 8013472:	d106      	bne.n	8013482 <__sflush_r+0x66>
 8013474:	6829      	ldr	r1, [r5, #0]
 8013476:	291d      	cmp	r1, #29
 8013478:	d82c      	bhi.n	80134d4 <__sflush_r+0xb8>
 801347a:	4a2a      	ldr	r2, [pc, #168]	; (8013524 <__sflush_r+0x108>)
 801347c:	40ca      	lsrs	r2, r1
 801347e:	07d6      	lsls	r6, r2, #31
 8013480:	d528      	bpl.n	80134d4 <__sflush_r+0xb8>
 8013482:	2200      	movs	r2, #0
 8013484:	6062      	str	r2, [r4, #4]
 8013486:	04d9      	lsls	r1, r3, #19
 8013488:	6922      	ldr	r2, [r4, #16]
 801348a:	6022      	str	r2, [r4, #0]
 801348c:	d504      	bpl.n	8013498 <__sflush_r+0x7c>
 801348e:	1c42      	adds	r2, r0, #1
 8013490:	d101      	bne.n	8013496 <__sflush_r+0x7a>
 8013492:	682b      	ldr	r3, [r5, #0]
 8013494:	b903      	cbnz	r3, 8013498 <__sflush_r+0x7c>
 8013496:	6560      	str	r0, [r4, #84]	; 0x54
 8013498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801349a:	602f      	str	r7, [r5, #0]
 801349c:	2900      	cmp	r1, #0
 801349e:	d0ca      	beq.n	8013436 <__sflush_r+0x1a>
 80134a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134a4:	4299      	cmp	r1, r3
 80134a6:	d002      	beq.n	80134ae <__sflush_r+0x92>
 80134a8:	4628      	mov	r0, r5
 80134aa:	f7ff fae3 	bl	8012a74 <_free_r>
 80134ae:	2000      	movs	r0, #0
 80134b0:	6360      	str	r0, [r4, #52]	; 0x34
 80134b2:	e7c1      	b.n	8013438 <__sflush_r+0x1c>
 80134b4:	6a21      	ldr	r1, [r4, #32]
 80134b6:	2301      	movs	r3, #1
 80134b8:	4628      	mov	r0, r5
 80134ba:	47b0      	blx	r6
 80134bc:	1c41      	adds	r1, r0, #1
 80134be:	d1c7      	bne.n	8013450 <__sflush_r+0x34>
 80134c0:	682b      	ldr	r3, [r5, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d0c4      	beq.n	8013450 <__sflush_r+0x34>
 80134c6:	2b1d      	cmp	r3, #29
 80134c8:	d001      	beq.n	80134ce <__sflush_r+0xb2>
 80134ca:	2b16      	cmp	r3, #22
 80134cc:	d101      	bne.n	80134d2 <__sflush_r+0xb6>
 80134ce:	602f      	str	r7, [r5, #0]
 80134d0:	e7b1      	b.n	8013436 <__sflush_r+0x1a>
 80134d2:	89a3      	ldrh	r3, [r4, #12]
 80134d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	e7ad      	b.n	8013438 <__sflush_r+0x1c>
 80134dc:	690f      	ldr	r7, [r1, #16]
 80134de:	2f00      	cmp	r7, #0
 80134e0:	d0a9      	beq.n	8013436 <__sflush_r+0x1a>
 80134e2:	0793      	lsls	r3, r2, #30
 80134e4:	680e      	ldr	r6, [r1, #0]
 80134e6:	bf08      	it	eq
 80134e8:	694b      	ldreq	r3, [r1, #20]
 80134ea:	600f      	str	r7, [r1, #0]
 80134ec:	bf18      	it	ne
 80134ee:	2300      	movne	r3, #0
 80134f0:	eba6 0807 	sub.w	r8, r6, r7
 80134f4:	608b      	str	r3, [r1, #8]
 80134f6:	f1b8 0f00 	cmp.w	r8, #0
 80134fa:	dd9c      	ble.n	8013436 <__sflush_r+0x1a>
 80134fc:	6a21      	ldr	r1, [r4, #32]
 80134fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013500:	4643      	mov	r3, r8
 8013502:	463a      	mov	r2, r7
 8013504:	4628      	mov	r0, r5
 8013506:	47b0      	blx	r6
 8013508:	2800      	cmp	r0, #0
 801350a:	dc06      	bgt.n	801351a <__sflush_r+0xfe>
 801350c:	89a3      	ldrh	r3, [r4, #12]
 801350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013512:	81a3      	strh	r3, [r4, #12]
 8013514:	f04f 30ff 	mov.w	r0, #4294967295
 8013518:	e78e      	b.n	8013438 <__sflush_r+0x1c>
 801351a:	4407      	add	r7, r0
 801351c:	eba8 0800 	sub.w	r8, r8, r0
 8013520:	e7e9      	b.n	80134f6 <__sflush_r+0xda>
 8013522:	bf00      	nop
 8013524:	20400001 	.word	0x20400001

08013528 <_fflush_r>:
 8013528:	b538      	push	{r3, r4, r5, lr}
 801352a:	690b      	ldr	r3, [r1, #16]
 801352c:	4605      	mov	r5, r0
 801352e:	460c      	mov	r4, r1
 8013530:	b913      	cbnz	r3, 8013538 <_fflush_r+0x10>
 8013532:	2500      	movs	r5, #0
 8013534:	4628      	mov	r0, r5
 8013536:	bd38      	pop	{r3, r4, r5, pc}
 8013538:	b118      	cbz	r0, 8013542 <_fflush_r+0x1a>
 801353a:	6983      	ldr	r3, [r0, #24]
 801353c:	b90b      	cbnz	r3, 8013542 <_fflush_r+0x1a>
 801353e:	f000 f887 	bl	8013650 <__sinit>
 8013542:	4b14      	ldr	r3, [pc, #80]	; (8013594 <_fflush_r+0x6c>)
 8013544:	429c      	cmp	r4, r3
 8013546:	d11b      	bne.n	8013580 <_fflush_r+0x58>
 8013548:	686c      	ldr	r4, [r5, #4]
 801354a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d0ef      	beq.n	8013532 <_fflush_r+0xa>
 8013552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013554:	07d0      	lsls	r0, r2, #31
 8013556:	d404      	bmi.n	8013562 <_fflush_r+0x3a>
 8013558:	0599      	lsls	r1, r3, #22
 801355a:	d402      	bmi.n	8013562 <_fflush_r+0x3a>
 801355c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801355e:	f000 f915 	bl	801378c <__retarget_lock_acquire_recursive>
 8013562:	4628      	mov	r0, r5
 8013564:	4621      	mov	r1, r4
 8013566:	f7ff ff59 	bl	801341c <__sflush_r>
 801356a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801356c:	07da      	lsls	r2, r3, #31
 801356e:	4605      	mov	r5, r0
 8013570:	d4e0      	bmi.n	8013534 <_fflush_r+0xc>
 8013572:	89a3      	ldrh	r3, [r4, #12]
 8013574:	059b      	lsls	r3, r3, #22
 8013576:	d4dd      	bmi.n	8013534 <_fflush_r+0xc>
 8013578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801357a:	f000 f908 	bl	801378e <__retarget_lock_release_recursive>
 801357e:	e7d9      	b.n	8013534 <_fflush_r+0xc>
 8013580:	4b05      	ldr	r3, [pc, #20]	; (8013598 <_fflush_r+0x70>)
 8013582:	429c      	cmp	r4, r3
 8013584:	d101      	bne.n	801358a <_fflush_r+0x62>
 8013586:	68ac      	ldr	r4, [r5, #8]
 8013588:	e7df      	b.n	801354a <_fflush_r+0x22>
 801358a:	4b04      	ldr	r3, [pc, #16]	; (801359c <_fflush_r+0x74>)
 801358c:	429c      	cmp	r4, r3
 801358e:	bf08      	it	eq
 8013590:	68ec      	ldreq	r4, [r5, #12]
 8013592:	e7da      	b.n	801354a <_fflush_r+0x22>
 8013594:	0801fdfc 	.word	0x0801fdfc
 8013598:	0801fe1c 	.word	0x0801fe1c
 801359c:	0801fddc 	.word	0x0801fddc

080135a0 <std>:
 80135a0:	2300      	movs	r3, #0
 80135a2:	b510      	push	{r4, lr}
 80135a4:	4604      	mov	r4, r0
 80135a6:	e9c0 3300 	strd	r3, r3, [r0]
 80135aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ae:	6083      	str	r3, [r0, #8]
 80135b0:	8181      	strh	r1, [r0, #12]
 80135b2:	6643      	str	r3, [r0, #100]	; 0x64
 80135b4:	81c2      	strh	r2, [r0, #14]
 80135b6:	6183      	str	r3, [r0, #24]
 80135b8:	4619      	mov	r1, r3
 80135ba:	2208      	movs	r2, #8
 80135bc:	305c      	adds	r0, #92	; 0x5c
 80135be:	f7fd fbb3 	bl	8010d28 <memset>
 80135c2:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <std+0x38>)
 80135c4:	6263      	str	r3, [r4, #36]	; 0x24
 80135c6:	4b05      	ldr	r3, [pc, #20]	; (80135dc <std+0x3c>)
 80135c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80135ca:	4b05      	ldr	r3, [pc, #20]	; (80135e0 <std+0x40>)
 80135cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135ce:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <std+0x44>)
 80135d0:	6224      	str	r4, [r4, #32]
 80135d2:	6323      	str	r3, [r4, #48]	; 0x30
 80135d4:	bd10      	pop	{r4, pc}
 80135d6:	bf00      	nop
 80135d8:	080138f1 	.word	0x080138f1
 80135dc:	08013913 	.word	0x08013913
 80135e0:	0801394b 	.word	0x0801394b
 80135e4:	0801396f 	.word	0x0801396f

080135e8 <_cleanup_r>:
 80135e8:	4901      	ldr	r1, [pc, #4]	; (80135f0 <_cleanup_r+0x8>)
 80135ea:	f000 b8af 	b.w	801374c <_fwalk_reent>
 80135ee:	bf00      	nop
 80135f0:	08013529 	.word	0x08013529

080135f4 <__sfmoreglue>:
 80135f4:	b570      	push	{r4, r5, r6, lr}
 80135f6:	1e4a      	subs	r2, r1, #1
 80135f8:	2568      	movs	r5, #104	; 0x68
 80135fa:	4355      	muls	r5, r2
 80135fc:	460e      	mov	r6, r1
 80135fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013602:	f7ff fa87 	bl	8012b14 <_malloc_r>
 8013606:	4604      	mov	r4, r0
 8013608:	b140      	cbz	r0, 801361c <__sfmoreglue+0x28>
 801360a:	2100      	movs	r1, #0
 801360c:	e9c0 1600 	strd	r1, r6, [r0]
 8013610:	300c      	adds	r0, #12
 8013612:	60a0      	str	r0, [r4, #8]
 8013614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013618:	f7fd fb86 	bl	8010d28 <memset>
 801361c:	4620      	mov	r0, r4
 801361e:	bd70      	pop	{r4, r5, r6, pc}

08013620 <__sfp_lock_acquire>:
 8013620:	4801      	ldr	r0, [pc, #4]	; (8013628 <__sfp_lock_acquire+0x8>)
 8013622:	f000 b8b3 	b.w	801378c <__retarget_lock_acquire_recursive>
 8013626:	bf00      	nop
 8013628:	2000cb48 	.word	0x2000cb48

0801362c <__sfp_lock_release>:
 801362c:	4801      	ldr	r0, [pc, #4]	; (8013634 <__sfp_lock_release+0x8>)
 801362e:	f000 b8ae 	b.w	801378e <__retarget_lock_release_recursive>
 8013632:	bf00      	nop
 8013634:	2000cb48 	.word	0x2000cb48

08013638 <__sinit_lock_acquire>:
 8013638:	4801      	ldr	r0, [pc, #4]	; (8013640 <__sinit_lock_acquire+0x8>)
 801363a:	f000 b8a7 	b.w	801378c <__retarget_lock_acquire_recursive>
 801363e:	bf00      	nop
 8013640:	2000cb43 	.word	0x2000cb43

08013644 <__sinit_lock_release>:
 8013644:	4801      	ldr	r0, [pc, #4]	; (801364c <__sinit_lock_release+0x8>)
 8013646:	f000 b8a2 	b.w	801378e <__retarget_lock_release_recursive>
 801364a:	bf00      	nop
 801364c:	2000cb43 	.word	0x2000cb43

08013650 <__sinit>:
 8013650:	b510      	push	{r4, lr}
 8013652:	4604      	mov	r4, r0
 8013654:	f7ff fff0 	bl	8013638 <__sinit_lock_acquire>
 8013658:	69a3      	ldr	r3, [r4, #24]
 801365a:	b11b      	cbz	r3, 8013664 <__sinit+0x14>
 801365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013660:	f7ff bff0 	b.w	8013644 <__sinit_lock_release>
 8013664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013668:	6523      	str	r3, [r4, #80]	; 0x50
 801366a:	4b13      	ldr	r3, [pc, #76]	; (80136b8 <__sinit+0x68>)
 801366c:	4a13      	ldr	r2, [pc, #76]	; (80136bc <__sinit+0x6c>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	62a2      	str	r2, [r4, #40]	; 0x28
 8013672:	42a3      	cmp	r3, r4
 8013674:	bf04      	itt	eq
 8013676:	2301      	moveq	r3, #1
 8013678:	61a3      	streq	r3, [r4, #24]
 801367a:	4620      	mov	r0, r4
 801367c:	f000 f820 	bl	80136c0 <__sfp>
 8013680:	6060      	str	r0, [r4, #4]
 8013682:	4620      	mov	r0, r4
 8013684:	f000 f81c 	bl	80136c0 <__sfp>
 8013688:	60a0      	str	r0, [r4, #8]
 801368a:	4620      	mov	r0, r4
 801368c:	f000 f818 	bl	80136c0 <__sfp>
 8013690:	2200      	movs	r2, #0
 8013692:	60e0      	str	r0, [r4, #12]
 8013694:	2104      	movs	r1, #4
 8013696:	6860      	ldr	r0, [r4, #4]
 8013698:	f7ff ff82 	bl	80135a0 <std>
 801369c:	68a0      	ldr	r0, [r4, #8]
 801369e:	2201      	movs	r2, #1
 80136a0:	2109      	movs	r1, #9
 80136a2:	f7ff ff7d 	bl	80135a0 <std>
 80136a6:	68e0      	ldr	r0, [r4, #12]
 80136a8:	2202      	movs	r2, #2
 80136aa:	2112      	movs	r1, #18
 80136ac:	f7ff ff78 	bl	80135a0 <std>
 80136b0:	2301      	movs	r3, #1
 80136b2:	61a3      	str	r3, [r4, #24]
 80136b4:	e7d2      	b.n	801365c <__sinit+0xc>
 80136b6:	bf00      	nop
 80136b8:	0801fa58 	.word	0x0801fa58
 80136bc:	080135e9 	.word	0x080135e9

080136c0 <__sfp>:
 80136c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c2:	4607      	mov	r7, r0
 80136c4:	f7ff ffac 	bl	8013620 <__sfp_lock_acquire>
 80136c8:	4b1e      	ldr	r3, [pc, #120]	; (8013744 <__sfp+0x84>)
 80136ca:	681e      	ldr	r6, [r3, #0]
 80136cc:	69b3      	ldr	r3, [r6, #24]
 80136ce:	b913      	cbnz	r3, 80136d6 <__sfp+0x16>
 80136d0:	4630      	mov	r0, r6
 80136d2:	f7ff ffbd 	bl	8013650 <__sinit>
 80136d6:	3648      	adds	r6, #72	; 0x48
 80136d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136dc:	3b01      	subs	r3, #1
 80136de:	d503      	bpl.n	80136e8 <__sfp+0x28>
 80136e0:	6833      	ldr	r3, [r6, #0]
 80136e2:	b30b      	cbz	r3, 8013728 <__sfp+0x68>
 80136e4:	6836      	ldr	r6, [r6, #0]
 80136e6:	e7f7      	b.n	80136d8 <__sfp+0x18>
 80136e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136ec:	b9d5      	cbnz	r5, 8013724 <__sfp+0x64>
 80136ee:	4b16      	ldr	r3, [pc, #88]	; (8013748 <__sfp+0x88>)
 80136f0:	60e3      	str	r3, [r4, #12]
 80136f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80136f6:	6665      	str	r5, [r4, #100]	; 0x64
 80136f8:	f000 f847 	bl	801378a <__retarget_lock_init_recursive>
 80136fc:	f7ff ff96 	bl	801362c <__sfp_lock_release>
 8013700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013708:	6025      	str	r5, [r4, #0]
 801370a:	61a5      	str	r5, [r4, #24]
 801370c:	2208      	movs	r2, #8
 801370e:	4629      	mov	r1, r5
 8013710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013714:	f7fd fb08 	bl	8010d28 <memset>
 8013718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801371c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013720:	4620      	mov	r0, r4
 8013722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013724:	3468      	adds	r4, #104	; 0x68
 8013726:	e7d9      	b.n	80136dc <__sfp+0x1c>
 8013728:	2104      	movs	r1, #4
 801372a:	4638      	mov	r0, r7
 801372c:	f7ff ff62 	bl	80135f4 <__sfmoreglue>
 8013730:	4604      	mov	r4, r0
 8013732:	6030      	str	r0, [r6, #0]
 8013734:	2800      	cmp	r0, #0
 8013736:	d1d5      	bne.n	80136e4 <__sfp+0x24>
 8013738:	f7ff ff78 	bl	801362c <__sfp_lock_release>
 801373c:	230c      	movs	r3, #12
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	e7ee      	b.n	8013720 <__sfp+0x60>
 8013742:	bf00      	nop
 8013744:	0801fa58 	.word	0x0801fa58
 8013748:	ffff0001 	.word	0xffff0001

0801374c <_fwalk_reent>:
 801374c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013750:	4606      	mov	r6, r0
 8013752:	4688      	mov	r8, r1
 8013754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013758:	2700      	movs	r7, #0
 801375a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801375e:	f1b9 0901 	subs.w	r9, r9, #1
 8013762:	d505      	bpl.n	8013770 <_fwalk_reent+0x24>
 8013764:	6824      	ldr	r4, [r4, #0]
 8013766:	2c00      	cmp	r4, #0
 8013768:	d1f7      	bne.n	801375a <_fwalk_reent+0xe>
 801376a:	4638      	mov	r0, r7
 801376c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013770:	89ab      	ldrh	r3, [r5, #12]
 8013772:	2b01      	cmp	r3, #1
 8013774:	d907      	bls.n	8013786 <_fwalk_reent+0x3a>
 8013776:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801377a:	3301      	adds	r3, #1
 801377c:	d003      	beq.n	8013786 <_fwalk_reent+0x3a>
 801377e:	4629      	mov	r1, r5
 8013780:	4630      	mov	r0, r6
 8013782:	47c0      	blx	r8
 8013784:	4307      	orrs	r7, r0
 8013786:	3568      	adds	r5, #104	; 0x68
 8013788:	e7e9      	b.n	801375e <_fwalk_reent+0x12>

0801378a <__retarget_lock_init_recursive>:
 801378a:	4770      	bx	lr

0801378c <__retarget_lock_acquire_recursive>:
 801378c:	4770      	bx	lr

0801378e <__retarget_lock_release_recursive>:
 801378e:	4770      	bx	lr

08013790 <__swhatbuf_r>:
 8013790:	b570      	push	{r4, r5, r6, lr}
 8013792:	460e      	mov	r6, r1
 8013794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013798:	2900      	cmp	r1, #0
 801379a:	b096      	sub	sp, #88	; 0x58
 801379c:	4614      	mov	r4, r2
 801379e:	461d      	mov	r5, r3
 80137a0:	da07      	bge.n	80137b2 <__swhatbuf_r+0x22>
 80137a2:	2300      	movs	r3, #0
 80137a4:	602b      	str	r3, [r5, #0]
 80137a6:	89b3      	ldrh	r3, [r6, #12]
 80137a8:	061a      	lsls	r2, r3, #24
 80137aa:	d410      	bmi.n	80137ce <__swhatbuf_r+0x3e>
 80137ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137b0:	e00e      	b.n	80137d0 <__swhatbuf_r+0x40>
 80137b2:	466a      	mov	r2, sp
 80137b4:	f000 f902 	bl	80139bc <_fstat_r>
 80137b8:	2800      	cmp	r0, #0
 80137ba:	dbf2      	blt.n	80137a2 <__swhatbuf_r+0x12>
 80137bc:	9a01      	ldr	r2, [sp, #4]
 80137be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80137c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80137c6:	425a      	negs	r2, r3
 80137c8:	415a      	adcs	r2, r3
 80137ca:	602a      	str	r2, [r5, #0]
 80137cc:	e7ee      	b.n	80137ac <__swhatbuf_r+0x1c>
 80137ce:	2340      	movs	r3, #64	; 0x40
 80137d0:	2000      	movs	r0, #0
 80137d2:	6023      	str	r3, [r4, #0]
 80137d4:	b016      	add	sp, #88	; 0x58
 80137d6:	bd70      	pop	{r4, r5, r6, pc}

080137d8 <__smakebuf_r>:
 80137d8:	898b      	ldrh	r3, [r1, #12]
 80137da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137dc:	079d      	lsls	r5, r3, #30
 80137de:	4606      	mov	r6, r0
 80137e0:	460c      	mov	r4, r1
 80137e2:	d507      	bpl.n	80137f4 <__smakebuf_r+0x1c>
 80137e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80137e8:	6023      	str	r3, [r4, #0]
 80137ea:	6123      	str	r3, [r4, #16]
 80137ec:	2301      	movs	r3, #1
 80137ee:	6163      	str	r3, [r4, #20]
 80137f0:	b002      	add	sp, #8
 80137f2:	bd70      	pop	{r4, r5, r6, pc}
 80137f4:	ab01      	add	r3, sp, #4
 80137f6:	466a      	mov	r2, sp
 80137f8:	f7ff ffca 	bl	8013790 <__swhatbuf_r>
 80137fc:	9900      	ldr	r1, [sp, #0]
 80137fe:	4605      	mov	r5, r0
 8013800:	4630      	mov	r0, r6
 8013802:	f7ff f987 	bl	8012b14 <_malloc_r>
 8013806:	b948      	cbnz	r0, 801381c <__smakebuf_r+0x44>
 8013808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801380c:	059a      	lsls	r2, r3, #22
 801380e:	d4ef      	bmi.n	80137f0 <__smakebuf_r+0x18>
 8013810:	f023 0303 	bic.w	r3, r3, #3
 8013814:	f043 0302 	orr.w	r3, r3, #2
 8013818:	81a3      	strh	r3, [r4, #12]
 801381a:	e7e3      	b.n	80137e4 <__smakebuf_r+0xc>
 801381c:	4b0d      	ldr	r3, [pc, #52]	; (8013854 <__smakebuf_r+0x7c>)
 801381e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013820:	89a3      	ldrh	r3, [r4, #12]
 8013822:	6020      	str	r0, [r4, #0]
 8013824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013828:	81a3      	strh	r3, [r4, #12]
 801382a:	9b00      	ldr	r3, [sp, #0]
 801382c:	6163      	str	r3, [r4, #20]
 801382e:	9b01      	ldr	r3, [sp, #4]
 8013830:	6120      	str	r0, [r4, #16]
 8013832:	b15b      	cbz	r3, 801384c <__smakebuf_r+0x74>
 8013834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013838:	4630      	mov	r0, r6
 801383a:	f000 f8d1 	bl	80139e0 <_isatty_r>
 801383e:	b128      	cbz	r0, 801384c <__smakebuf_r+0x74>
 8013840:	89a3      	ldrh	r3, [r4, #12]
 8013842:	f023 0303 	bic.w	r3, r3, #3
 8013846:	f043 0301 	orr.w	r3, r3, #1
 801384a:	81a3      	strh	r3, [r4, #12]
 801384c:	89a0      	ldrh	r0, [r4, #12]
 801384e:	4305      	orrs	r5, r0
 8013850:	81a5      	strh	r5, [r4, #12]
 8013852:	e7cd      	b.n	80137f0 <__smakebuf_r+0x18>
 8013854:	080135e9 	.word	0x080135e9

08013858 <_malloc_usable_size_r>:
 8013858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801385c:	1f18      	subs	r0, r3, #4
 801385e:	2b00      	cmp	r3, #0
 8013860:	bfbc      	itt	lt
 8013862:	580b      	ldrlt	r3, [r1, r0]
 8013864:	18c0      	addlt	r0, r0, r3
 8013866:	4770      	bx	lr

08013868 <_raise_r>:
 8013868:	291f      	cmp	r1, #31
 801386a:	b538      	push	{r3, r4, r5, lr}
 801386c:	4604      	mov	r4, r0
 801386e:	460d      	mov	r5, r1
 8013870:	d904      	bls.n	801387c <_raise_r+0x14>
 8013872:	2316      	movs	r3, #22
 8013874:	6003      	str	r3, [r0, #0]
 8013876:	f04f 30ff 	mov.w	r0, #4294967295
 801387a:	bd38      	pop	{r3, r4, r5, pc}
 801387c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801387e:	b112      	cbz	r2, 8013886 <_raise_r+0x1e>
 8013880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013884:	b94b      	cbnz	r3, 801389a <_raise_r+0x32>
 8013886:	4620      	mov	r0, r4
 8013888:	f000 f830 	bl	80138ec <_getpid_r>
 801388c:	462a      	mov	r2, r5
 801388e:	4601      	mov	r1, r0
 8013890:	4620      	mov	r0, r4
 8013892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013896:	f000 b817 	b.w	80138c8 <_kill_r>
 801389a:	2b01      	cmp	r3, #1
 801389c:	d00a      	beq.n	80138b4 <_raise_r+0x4c>
 801389e:	1c59      	adds	r1, r3, #1
 80138a0:	d103      	bne.n	80138aa <_raise_r+0x42>
 80138a2:	2316      	movs	r3, #22
 80138a4:	6003      	str	r3, [r0, #0]
 80138a6:	2001      	movs	r0, #1
 80138a8:	e7e7      	b.n	801387a <_raise_r+0x12>
 80138aa:	2400      	movs	r4, #0
 80138ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80138b0:	4628      	mov	r0, r5
 80138b2:	4798      	blx	r3
 80138b4:	2000      	movs	r0, #0
 80138b6:	e7e0      	b.n	801387a <_raise_r+0x12>

080138b8 <raise>:
 80138b8:	4b02      	ldr	r3, [pc, #8]	; (80138c4 <raise+0xc>)
 80138ba:	4601      	mov	r1, r0
 80138bc:	6818      	ldr	r0, [r3, #0]
 80138be:	f7ff bfd3 	b.w	8013868 <_raise_r>
 80138c2:	bf00      	nop
 80138c4:	200000dc 	.word	0x200000dc

080138c8 <_kill_r>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	4d07      	ldr	r5, [pc, #28]	; (80138e8 <_kill_r+0x20>)
 80138cc:	2300      	movs	r3, #0
 80138ce:	4604      	mov	r4, r0
 80138d0:	4608      	mov	r0, r1
 80138d2:	4611      	mov	r1, r2
 80138d4:	602b      	str	r3, [r5, #0]
 80138d6:	f7ef f953 	bl	8002b80 <_kill>
 80138da:	1c43      	adds	r3, r0, #1
 80138dc:	d102      	bne.n	80138e4 <_kill_r+0x1c>
 80138de:	682b      	ldr	r3, [r5, #0]
 80138e0:	b103      	cbz	r3, 80138e4 <_kill_r+0x1c>
 80138e2:	6023      	str	r3, [r4, #0]
 80138e4:	bd38      	pop	{r3, r4, r5, pc}
 80138e6:	bf00      	nop
 80138e8:	2000cb3c 	.word	0x2000cb3c

080138ec <_getpid_r>:
 80138ec:	f7ef b940 	b.w	8002b70 <_getpid>

080138f0 <__sread>:
 80138f0:	b510      	push	{r4, lr}
 80138f2:	460c      	mov	r4, r1
 80138f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138f8:	f000 f894 	bl	8013a24 <_read_r>
 80138fc:	2800      	cmp	r0, #0
 80138fe:	bfab      	itete	ge
 8013900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013902:	89a3      	ldrhlt	r3, [r4, #12]
 8013904:	181b      	addge	r3, r3, r0
 8013906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801390a:	bfac      	ite	ge
 801390c:	6563      	strge	r3, [r4, #84]	; 0x54
 801390e:	81a3      	strhlt	r3, [r4, #12]
 8013910:	bd10      	pop	{r4, pc}

08013912 <__swrite>:
 8013912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013916:	461f      	mov	r7, r3
 8013918:	898b      	ldrh	r3, [r1, #12]
 801391a:	05db      	lsls	r3, r3, #23
 801391c:	4605      	mov	r5, r0
 801391e:	460c      	mov	r4, r1
 8013920:	4616      	mov	r6, r2
 8013922:	d505      	bpl.n	8013930 <__swrite+0x1e>
 8013924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013928:	2302      	movs	r3, #2
 801392a:	2200      	movs	r2, #0
 801392c:	f000 f868 	bl	8013a00 <_lseek_r>
 8013930:	89a3      	ldrh	r3, [r4, #12]
 8013932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801393a:	81a3      	strh	r3, [r4, #12]
 801393c:	4632      	mov	r2, r6
 801393e:	463b      	mov	r3, r7
 8013940:	4628      	mov	r0, r5
 8013942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013946:	f000 b817 	b.w	8013978 <_write_r>

0801394a <__sseek>:
 801394a:	b510      	push	{r4, lr}
 801394c:	460c      	mov	r4, r1
 801394e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013952:	f000 f855 	bl	8013a00 <_lseek_r>
 8013956:	1c43      	adds	r3, r0, #1
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	bf15      	itete	ne
 801395c:	6560      	strne	r0, [r4, #84]	; 0x54
 801395e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013966:	81a3      	strheq	r3, [r4, #12]
 8013968:	bf18      	it	ne
 801396a:	81a3      	strhne	r3, [r4, #12]
 801396c:	bd10      	pop	{r4, pc}

0801396e <__sclose>:
 801396e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013972:	f000 b813 	b.w	801399c <_close_r>
	...

08013978 <_write_r>:
 8013978:	b538      	push	{r3, r4, r5, lr}
 801397a:	4d07      	ldr	r5, [pc, #28]	; (8013998 <_write_r+0x20>)
 801397c:	4604      	mov	r4, r0
 801397e:	4608      	mov	r0, r1
 8013980:	4611      	mov	r1, r2
 8013982:	2200      	movs	r2, #0
 8013984:	602a      	str	r2, [r5, #0]
 8013986:	461a      	mov	r2, r3
 8013988:	f7ef f931 	bl	8002bee <_write>
 801398c:	1c43      	adds	r3, r0, #1
 801398e:	d102      	bne.n	8013996 <_write_r+0x1e>
 8013990:	682b      	ldr	r3, [r5, #0]
 8013992:	b103      	cbz	r3, 8013996 <_write_r+0x1e>
 8013994:	6023      	str	r3, [r4, #0]
 8013996:	bd38      	pop	{r3, r4, r5, pc}
 8013998:	2000cb3c 	.word	0x2000cb3c

0801399c <_close_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d06      	ldr	r5, [pc, #24]	; (80139b8 <_close_r+0x1c>)
 80139a0:	2300      	movs	r3, #0
 80139a2:	4604      	mov	r4, r0
 80139a4:	4608      	mov	r0, r1
 80139a6:	602b      	str	r3, [r5, #0]
 80139a8:	f7ef f93d 	bl	8002c26 <_close>
 80139ac:	1c43      	adds	r3, r0, #1
 80139ae:	d102      	bne.n	80139b6 <_close_r+0x1a>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	b103      	cbz	r3, 80139b6 <_close_r+0x1a>
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	bd38      	pop	{r3, r4, r5, pc}
 80139b8:	2000cb3c 	.word	0x2000cb3c

080139bc <_fstat_r>:
 80139bc:	b538      	push	{r3, r4, r5, lr}
 80139be:	4d07      	ldr	r5, [pc, #28]	; (80139dc <_fstat_r+0x20>)
 80139c0:	2300      	movs	r3, #0
 80139c2:	4604      	mov	r4, r0
 80139c4:	4608      	mov	r0, r1
 80139c6:	4611      	mov	r1, r2
 80139c8:	602b      	str	r3, [r5, #0]
 80139ca:	f7ef f938 	bl	8002c3e <_fstat>
 80139ce:	1c43      	adds	r3, r0, #1
 80139d0:	d102      	bne.n	80139d8 <_fstat_r+0x1c>
 80139d2:	682b      	ldr	r3, [r5, #0]
 80139d4:	b103      	cbz	r3, 80139d8 <_fstat_r+0x1c>
 80139d6:	6023      	str	r3, [r4, #0]
 80139d8:	bd38      	pop	{r3, r4, r5, pc}
 80139da:	bf00      	nop
 80139dc:	2000cb3c 	.word	0x2000cb3c

080139e0 <_isatty_r>:
 80139e0:	b538      	push	{r3, r4, r5, lr}
 80139e2:	4d06      	ldr	r5, [pc, #24]	; (80139fc <_isatty_r+0x1c>)
 80139e4:	2300      	movs	r3, #0
 80139e6:	4604      	mov	r4, r0
 80139e8:	4608      	mov	r0, r1
 80139ea:	602b      	str	r3, [r5, #0]
 80139ec:	f7ef f937 	bl	8002c5e <_isatty>
 80139f0:	1c43      	adds	r3, r0, #1
 80139f2:	d102      	bne.n	80139fa <_isatty_r+0x1a>
 80139f4:	682b      	ldr	r3, [r5, #0]
 80139f6:	b103      	cbz	r3, 80139fa <_isatty_r+0x1a>
 80139f8:	6023      	str	r3, [r4, #0]
 80139fa:	bd38      	pop	{r3, r4, r5, pc}
 80139fc:	2000cb3c 	.word	0x2000cb3c

08013a00 <_lseek_r>:
 8013a00:	b538      	push	{r3, r4, r5, lr}
 8013a02:	4d07      	ldr	r5, [pc, #28]	; (8013a20 <_lseek_r+0x20>)
 8013a04:	4604      	mov	r4, r0
 8013a06:	4608      	mov	r0, r1
 8013a08:	4611      	mov	r1, r2
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	602a      	str	r2, [r5, #0]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	f7ef f930 	bl	8002c74 <_lseek>
 8013a14:	1c43      	adds	r3, r0, #1
 8013a16:	d102      	bne.n	8013a1e <_lseek_r+0x1e>
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	b103      	cbz	r3, 8013a1e <_lseek_r+0x1e>
 8013a1c:	6023      	str	r3, [r4, #0]
 8013a1e:	bd38      	pop	{r3, r4, r5, pc}
 8013a20:	2000cb3c 	.word	0x2000cb3c

08013a24 <_read_r>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	4d07      	ldr	r5, [pc, #28]	; (8013a44 <_read_r+0x20>)
 8013a28:	4604      	mov	r4, r0
 8013a2a:	4608      	mov	r0, r1
 8013a2c:	4611      	mov	r1, r2
 8013a2e:	2200      	movs	r2, #0
 8013a30:	602a      	str	r2, [r5, #0]
 8013a32:	461a      	mov	r2, r3
 8013a34:	f7ef f8be 	bl	8002bb4 <_read>
 8013a38:	1c43      	adds	r3, r0, #1
 8013a3a:	d102      	bne.n	8013a42 <_read_r+0x1e>
 8013a3c:	682b      	ldr	r3, [r5, #0]
 8013a3e:	b103      	cbz	r3, 8013a42 <_read_r+0x1e>
 8013a40:	6023      	str	r3, [r4, #0]
 8013a42:	bd38      	pop	{r3, r4, r5, pc}
 8013a44:	2000cb3c 	.word	0x2000cb3c

08013a48 <sqrtf>:
 8013a48:	b508      	push	{r3, lr}
 8013a4a:	ed2d 8b02 	vpush	{d8}
 8013a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8013a52:	f000 f81f 	bl	8013a94 <__ieee754_sqrtf>
 8013a56:	4b0d      	ldr	r3, [pc, #52]	; (8013a8c <sqrtf+0x44>)
 8013a58:	f993 3000 	ldrsb.w	r3, [r3]
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	d011      	beq.n	8013a84 <sqrtf+0x3c>
 8013a60:	eeb4 8a48 	vcmp.f32	s16, s16
 8013a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a68:	d60c      	bvs.n	8013a84 <sqrtf+0x3c>
 8013a6a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8013a90 <sqrtf+0x48>
 8013a6e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a76:	d505      	bpl.n	8013a84 <sqrtf+0x3c>
 8013a78:	f7fd f91e 	bl	8010cb8 <__errno>
 8013a7c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013a80:	2321      	movs	r3, #33	; 0x21
 8013a82:	6003      	str	r3, [r0, #0]
 8013a84:	ecbd 8b02 	vpop	{d8}
 8013a88:	bd08      	pop	{r3, pc}
 8013a8a:	bf00      	nop
 8013a8c:	200002ac 	.word	0x200002ac
 8013a90:	00000000 	.word	0x00000000

08013a94 <__ieee754_sqrtf>:
 8013a94:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013a98:	4770      	bx	lr
	...

08013a9c <_init>:
 8013a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a9e:	bf00      	nop
 8013aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aa2:	bc08      	pop	{r3}
 8013aa4:	469e      	mov	lr, r3
 8013aa6:	4770      	bx	lr

08013aa8 <_fini>:
 8013aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aaa:	bf00      	nop
 8013aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aae:	bc08      	pop	{r3}
 8013ab0:	469e      	mov	lr, r3
 8013ab2:	4770      	bx	lr
